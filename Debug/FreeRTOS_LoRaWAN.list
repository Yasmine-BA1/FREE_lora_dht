
FreeRTOS_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d928  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  0801da68  0801da68  0002da68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e884  0801e884  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  0801e884  0801e884  0002e884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e88c  0801e88c  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e88c  0801e88c  0002e88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e890  0801e890  0002e890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0801e894  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004438  20000118  0801e9ac  00030118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004550  0801e9ac  00034550  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a0e7  00000000  00000000  00030142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b04d  00000000  00000000  0007a229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003820  00000000  00000000  00085278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000033c8  00000000  00000000  00088a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac1c  00000000  00000000  0008be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046035  00000000  00000000  000b6a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d574b  00000000  00000000  000fcab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d21fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e71c  00000000  00000000  001d224c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	0801da50 	.word	0x0801da50

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	0801da50 	.word	0x0801da50

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008d6:	2afd      	cmp	r2, #253	; 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	; 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	; 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	; 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2uiz>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	d20e      	bcs.n	8000b46 <__aeabi_f2uiz+0x22>
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b2c:	d30b      	bcc.n	8000b46 <__aeabi_f2uiz+0x22>
 8000b2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d409      	bmi.n	8000b4c <__aeabi_f2uiz+0x28>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	fa23 f002 	lsr.w	r0, r3, r2
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2uiz+0x32>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d102      	bne.n	8000b5c <__aeabi_f2uiz+0x38>
 8000b56:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b974 	b.w	8000e64 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14d      	bne.n	8000c40 <__udivmoddi4+0xac>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d968      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b152      	cbz	r2, 8000bc6 <__udivmoddi4+0x32>
 8000bb0:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb4:	f1c2 0120 	rsb	r1, r2, #32
 8000bb8:	fa20 f101 	lsr.w	r1, r0, r1
 8000bbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc0:	ea41 0803 	orr.w	r8, r1, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000bca:	0c21      	lsrs	r1, r4, #16
 8000bcc:	fbb8 fef5 	udiv	lr, r8, r5
 8000bd0:	fa1f f78c 	uxth.w	r7, ip
 8000bd4:	fb05 831e 	mls	r3, r5, lr, r8
 8000bd8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bdc:	fb0e f107 	mul.w	r1, lr, r7
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x68>
 8000be4:	eb1c 0303 	adds.w	r3, ip, r3
 8000be8:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000bec:	f080 811e 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	f240 811b 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c04:	fb05 3310 	mls	r3, r5, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 f707 	mul.w	r7, r0, r7
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x96>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1c:	f080 8108 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	f240 8105 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	1be4      	subs	r4, r4, r7
 8000c2c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c30:	2100      	movs	r1, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa8>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	f000 80ee 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e9c6 0500 	strd	r0, r5, [r6]
 8000c50:	4608      	mov	r0, r1
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	42ab      	cmp	r3, r5
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80f9 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4698      	mov	r8, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e2      	beq.n	8000c3c <__udivmoddi4+0xa8>
 8000c76:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8091 	bne.w	8000dac <__udivmoddi4+0x218>
 8000c8a:	eba1 050c 	sub.w	r5, r1, ip
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb5 f3f7 	udiv	r3, r5, r7
 8000c9c:	fb07 5013 	mls	r0, r7, r3, r5
 8000ca0:	0c25      	lsrs	r5, r4, #16
 8000ca2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	42a8      	cmp	r0, r5
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0505 	adds.w	r5, ip, r5
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	42a8      	cmp	r0, r5
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a2d      	subs	r5, r5, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cc8:	fb07 5510 	mls	r5, r7, r0, r5
 8000ccc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2ca>
 8000ce8:	4628      	mov	r0, r5
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79e      	b.n	8000c32 <__udivmoddi4+0x9e>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa20 f407 	lsr.w	r4, r0, r7
 8000d06:	fa05 f301 	lsl.w	r3, r5, r1
 8000d0a:	431c      	orrs	r4, r3
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d12:	fa00 f301 	lsl.w	r3, r0, r1
 8000d16:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1a:	0c20      	lsrs	r0, r4, #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fb09 5518 	mls	r5, r9, r8, r5
 8000d24:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d28:	fb08 f00e 	mul.w	r0, r8, lr
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0505 	adds.w	r5, ip, r5
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	42a8      	cmp	r0, r5
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4465      	add	r5, ip
 8000d4c:	1a2d      	subs	r5, r5, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d54:	fb09 5510 	mls	r5, r9, r0, r5
 8000d58:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	45ae      	cmp	lr, r5
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0505 	adds.w	r5, ip, r5
 8000d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	45ae      	cmp	lr, r5
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4465      	add	r5, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7e:	eba5 050e 	sub.w	r5, r5, lr
 8000d82:	42a5      	cmp	r5, r4
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46a6      	mov	lr, r4
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	b15e      	cbz	r6, 8000da6 <__udivmoddi4+0x212>
 8000d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d92:	eb65 050e 	sbc.w	r5, r5, lr
 8000d96:	fa05 f707 	lsl.w	r7, r5, r7
 8000d9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d9e:	40cd      	lsrs	r5, r1
 8000da0:	431f      	orrs	r7, r3
 8000da2:	e9c6 7500 	strd	r7, r5, [r6]
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f103 	lsr.w	r1, r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa25 f303 	lsr.w	r3, r5, r3
 8000dbc:	4095      	lsls	r5, r2
 8000dbe:	430d      	orrs	r5, r1
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dcc:	fb07 3011 	mls	r0, r7, r1, r3
 8000dd0:	0c2b      	lsrs	r3, r5, #16
 8000dd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000dd6:	fb01 f00e 	mul.w	r0, r1, lr
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3902      	subs	r1, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1a1b      	subs	r3, r3, r0
 8000df6:	b2ad      	uxth	r5, r5
 8000df8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dfc:	fb07 3310 	mls	r3, r7, r0, r3
 8000e00:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e04:	fb00 f30e 	mul.w	r3, r0, lr
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e10:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	42ab      	cmp	r3, r5
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4465      	add	r5, ip
 8000e1e:	1aed      	subs	r5, r5, r3
 8000e20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e707      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	e6e5      	b.n	8000bfc <__udivmoddi4+0x68>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6fa      	b.n	8000c2a <__udivmoddi4+0x96>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4465      	add	r5, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e709      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x156>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	4013      	ands	r3, r2
 8000eb0:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ec2:	4a24      	ldr	r2, [pc, #144]	; (8000f54 <MX_ADC_Init+0x98>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ec8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_ADC_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_ADC_Init+0x94>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f3e:	f001 ff43 	bl	8002dc8 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f48:	f000 fb48 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000134 	.word	0x20000134
 8000f54:	40012400 	.word	0x40012400

08000f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <HAL_ADC_MspInit+0x24>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d103      	bne.n	8000f72 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f7ff ff7b 	bl	8000e68 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012400 	.word	0x40012400

08000f80 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <HAL_ADC_MspDeInit+0x24>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d103      	bne.n	8000f9a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000f92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f96:	f7ff ff7f 	bl	8000e98 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012400 	.word	0x40012400

08000fa8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <SYS_InitMeasurement+0x14>)
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <SYS_InitMeasurement+0x18>)
 8000fb0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000134 	.word	0x20000134
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fd2:	f000 f871 	bl	80010b8 <SYS_GetBatteryLevel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fda:	4830      	ldr	r0, [pc, #192]	; (800109c <SYS_GetTemperatureLevel+0xd8>)
 8000fdc:	f000 f8a0 	bl	8001120 <ADC_ReadChannels>
 8000fe0:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d026      	beq.n	800103c <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 8000ff0:	881a      	ldrh	r2, [r3, #0]
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d01c      	beq.n	8001034 <SYS_GetTemperatureLevel+0x70>
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <SYS_GetTemperatureLevel+0xe4>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	461a      	mov	r2, r3
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2264      	movs	r2, #100	; 0x64
 8001016:	fb03 f202 	mul.w	r2, r3, r2
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	1acb      	subs	r3, r1, r3
 8001026:	fb92 f3f3 	sdiv	r3, r2, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	331e      	adds	r3, #30
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21b      	sxth	r3, r3
 8001032:	e001      	b.n	8001038 <SYS_GetTemperatureLevel+0x74>
 8001034:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001038:	81fb      	strh	r3, [r7, #14]
 800103a:	e01c      	b.n	8001076 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	fb03 f202 	mul.w	r2, r3, r2
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <SYS_GetTemperatureLevel+0xe8>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	1ad2      	subs	r2, r2, r3
 800104c:	0852      	lsrs	r2, r2, #1
 800104e:	4413      	add	r3, r2
 8001050:	0adb      	lsrs	r3, r3, #11
 8001052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800105e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <SYS_GetTemperatureLevel+0xec>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	1292      	asrs	r2, r2, #10
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b29b      	uxth	r3, r3
 8001070:	331e      	adds	r3, #30
 8001072:	b29b      	uxth	r3, r3
 8001074:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8001076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <SYS_GetTemperatureLevel+0xf0>)
 800107e:	2201      	movs	r2, #1
 8001080:	2100      	movs	r1, #0
 8001082:	2001      	movs	r0, #1
 8001084:	f01b f948 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	b0001000 	.word	0xb0001000
 80010a0:	1fff75c8 	.word	0x1fff75c8
 80010a4:	1fff75a8 	.word	0x1fff75a8
 80010a8:	09ee009f 	.word	0x09ee009f
 80010ac:	00100101 	.word	0x00100101
 80010b0:	68db8bad 	.word	0x68db8bad
 80010b4:	0801da68 	.word	0x0801da68

080010b8 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <SYS_GetBatteryLevel+0x5c>)
 80010c8:	f000 f82a 	bl	8001120 <ADC_ReadChannels>
 80010cc:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	80fb      	strh	r3, [r7, #6]
 80010d8:	e016      	b.n	8001108 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SYS_GetBatteryLevel+0x60>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00b      	beq.n	80010fe <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SYS_GetBatteryLevel+0x60>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010f0:	fb03 f202 	mul.w	r2, r3, r2
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	e004      	b.n	8001108 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <SYS_GetBatteryLevel+0x64>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001108:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	b4002000 	.word	0xb4002000
 8001118:	1fff75aa 	.word	0x1fff75aa
 800111c:	004c08d8 	.word	0x004c08d8

08001120 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001138:	f7ff fec0 	bl	8000ebc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <ADC_ReadChannels+0x88>)
 800113e:	f002 fc29 	bl	8003994 <HAL_ADCEx_Calibration_Start>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001148:	f000 fa48 	bl	80015dc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001160:	f002 f990 	bl	8003484 <HAL_ADC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800116a:	f000 fa37 	bl	80015dc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001170:	f002 f86c 	bl	800324c <HAL_ADC_Start>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800117a:	f000 fa2f 	bl	80015dc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800117e:	f04f 31ff 	mov.w	r1, #4294967295
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001184:	f002 f8da 	bl	800333c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <ADC_ReadChannels+0x88>)
 800118a:	f002 f8a5 	bl	80032d8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001190:	f002 f96b 	bl	800346a <HAL_ADC_GetValue>
 8001194:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001198:	f001 ffdc 	bl	8003154 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800119c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000134 	.word	0x20000134

080011ac <PreSleepProcessing>:
/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
			*ulExpectedIdleTime * LSI_VALUE / 1000);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <PreSleepProcessing+0x34>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	099b      	lsrs	r3, r3, #6
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <PreSleepProcessing+0x38>)
 80011cc:	f003 fd4a 	bl	8004c64 <HAL_LPTIM_Counter_Start_IT>
  /*Enter Low Power Mode*/
  // HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80011d0:	2101      	movs	r1, #1
 80011d2:	2000      	movs	r0, #0
 80011d4:	f004 f8de 	bl	8005394 <HAL_PWR_EnterSLEEPMode>
//  *ulExpectedIdleTime = 0;
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	10624dd3 	.word	0x10624dd3
 80011e4:	200009ec 	.word	0x200009ec

080011e8 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <PostSleepProcessing+0x1c>)
 80011f2:	f003 fdd9 	bl	8004da8 <HAL_LPTIM_Counter_Stop_IT>
  SystemClock_Config();
 80011f6:	f000 f8b5 	bl	8001364 <SystemClock_Config>
  (void) ulExpectedIdleTime;
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200009ec 	.word	0x200009ec

08001208 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <vApplicationGetIdleTaskMemory+0x2c>)
 8001218:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <vApplicationGetIdleTaskMemory+0x30>)
 800121e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000198 	.word	0x20000198
 8001238:	200001ec 	.word	0x200001ec

0800123c <LL_AHB1_GRP1_EnableClock>:
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800124a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001260:	68fb      	ldr	r3, [r7, #12]
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001270:	2004      	movs	r0, #4
 8001272:	f7ff ffe3 	bl	800123c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff ffe0 	bl	800123c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2102      	movs	r1, #2
 8001280:	200f      	movs	r0, #15
 8001282:	f002 fcda 	bl	8003c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001286:	200f      	movs	r0, #15
 8001288:	f002 fcf1 	bl	8003c6e <HAL_NVIC_EnableIRQ>

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a0:	f023 0218 	bic.w	r2, r3, #24
 80012a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <LL_AHB2_GRP1_EnableClock>:
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f2:	f001 fbaf 	bl	8002a54 <HAL_Init>
  MX_LoRaWAN_Init();
 80012f6:	f008 feed 	bl	800a0d4 <MX_LoRaWAN_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f833 	bl	8001364 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80012fe:	f000 f8bb 	bl	8001478 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001302:	f000 f88d 	bl	8001420 <MX_LPTIM1_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  osThreadDef(LED_Task, StartLedTask, osPriorityNormal, 0, 128);
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <main+0x68>)
 8001308:	f107 041c 	add.w	r4, r7, #28
 800130c:	461d      	mov	r5, r3
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f009 fa03 	bl	800a72c <osThreadCreate>
 8001326:	4603      	mov	r3, r0
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <main+0x6c>)
 800132a:	6013      	str	r3, [r2, #0]

  osThreadDef(LoRaWAN_Task, StartLoRaWANTask, osPriorityNormal, 0, 1024);
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <main+0x70>)
 800132e:	463c      	mov	r4, r7
 8001330:	461d      	mov	r5, r3
 8001332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRaWAN_TaskHandle = osThreadCreate(osThread(LoRaWAN_Task), NULL);
 800133e:	463b      	mov	r3, r7
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f009 f9f2 	bl	800a72c <osThreadCreate>
 8001348:	4603      	mov	r3, r0
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <main+0x74>)
 800134c:	6013      	str	r3, [r2, #0]

 /* osThreadDef(Sensor_TaskHandle, StartSensorTask, osPriorityNormal, 0, 1024);
  Sensor_TaskHandle = osThreadCreate(osThread(Sensor_Task), NULL);*/

  osKernelStart();
 800134e:	f009 f9e6 	bl	800a71e <osKernelStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001352:	e7fe      	b.n	8001352 <main+0x66>
 8001354:	0801da90 	.word	0x0801da90
 8001358:	20000a38 	.word	0x20000a38
 800135c:	0801daac 	.word	0x0801daac
 8001360:	20000a3c 	.word	0x20000a3c

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b09a      	sub	sp, #104	; 0x68
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	2248      	movs	r2, #72	; 0x48
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f01c fae4 	bl	801d940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800138a:	f003 fff5 	bl	8005378 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff ff7e 	bl	8001290 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <SystemClock_Config+0xb8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <SystemClock_Config+0xb8>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <SystemClock_Config+0xb8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_LSI;
 80013b0:	232c      	movs	r3, #44	; 0x2c
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013b4:	2381      	movs	r3, #129	; 0x81
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80013bc:	2300      	movs	r3, #0
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80013c0:	23b0      	movs	r3, #176	; 0xb0
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 faf1 	bl	80059bc <HAL_RCC_OscConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80013e0:	f000 f8fc 	bl	80015dc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80013e4:	234f      	movs	r3, #79	; 0x4f
 80013e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2102      	movs	r1, #2
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fe76 	bl	80060f4 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800140e:	f000 f8e5 	bl	80015dc <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3768      	adds	r7, #104	; 0x68
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	58000400 	.word	0x58000400

08001420 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_LPTIM1_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <MX_LPTIM1_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_LPTIM1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_LPTIM1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_LPTIM1_Init+0x50>)
 8001438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_LPTIM1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <MX_LPTIM1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_LPTIM1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_LPTIM1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_LPTIM1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_LPTIM1_Init+0x50>)
 800145e:	f003 fb39 	bl	8004ad4 <HAL_LPTIM_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 f8b8 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200009ec 	.word	0x200009ec
 8001474:	40007c00 	.word	0x40007c00

08001478 <MX_GPIO_Init>:
  * @retval None
  */


void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	2002      	movs	r0, #2
 800148e:	f7ff ff14 	bl	80012ba <LL_AHB2_GRP1_EnableClock>
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2080      	movs	r0, #128	; 0x80
 8001494:	f7ff ff11 	bl	80012ba <LL_AHB2_GRP1_EnableClock>
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff ff0e 	bl	80012ba <LL_AHB2_GRP1_EnableClock>
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f003 fa5a 	bl	800495e <HAL_GPIO_WritePin>

	      GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014aa:	2301      	movs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
	 	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
	 	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
	 	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
	 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c2:	f003 f807 	bl	80044d4 <HAL_GPIO_Init>
/*********************************************************************************/
	  // Enable GPIOA peripheral clock
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fef7 	bl	80012ba <LL_AHB2_GRP1_EnableClock>

	  // Initialize GPIO PA9 as output

	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f002 fff5 	bl	80044d4 <HAL_GPIO_Init>

	  // Set GPIO PA9 high to enable 3.3V supply
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f003 fa33 	bl	800495e <HAL_GPIO_WritePin>



	 	 /* Enable GPIOB clock */
	 	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7ff fede 	bl	80012ba <LL_AHB2_GRP1_EnableClock>

	 	 /* Initialize GPIOB Pin 10 */

	 	 GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001502:	607b      	str	r3, [r7, #4]
	 	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
	 	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
	 	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
	 	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <MX_GPIO_Init+0xbc>)
 8001516:	f002 ffdd 	bl	80044d4 <HAL_GPIO_Init>

	 	 /* Set PB10 to high */
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_GPIO_Init+0xbc>)
 8001522:	f003 fa1c 	bl	800495e <HAL_GPIO_WritePin>

	 	 /* Wait for a short period to enable 5V output */
	 	 HAL_Delay(10);
 8001526:	200a      	movs	r0, #10
 8001528:	f000 fbad 	bl	8001c86 <HAL_Delay>

}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	48000400 	.word	0x48000400

08001538 <LED_control>:

/* USER CODE BEGIN 4 */

int32_t LED_control(int value) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, value);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	2101      	movs	r1, #1
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f003 fa07 	bl	800495e <HAL_GPIO_WritePin>
  return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <StartLoRaWANTask>:
/* USER CODE END 4 */
/* USER CODE BEGIN 4 */


void StartLoRaWANTask(void const * argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* init code for LoRaWAN */
  MX_LoRaWAN_Init();
 8001564:	f008 fdb6 	bl	800a0d4 <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	       DHT_GetData(&DHT11_Data);
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <StartLoRaWANTask+0x44>)
 800156a:	f008 fd4f 	bl	800a00c <DHT_GetData>
	  	   temp = (DHT11_Data.Temperature)/10;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <StartLoRaWANTask+0x44>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	490c      	ldr	r1, [pc, #48]	; (80015a4 <StartLoRaWANTask+0x48>)
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fa39 	bl	80009ec <__aeabi_fdiv>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <StartLoRaWANTask+0x4c>)
 8001580:	601a      	str	r2, [r3, #0]
	  	   hum = DHT11_Data.Humidity;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <StartLoRaWANTask+0x44>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <StartLoRaWANTask+0x50>)
 8001588:	6013      	str	r3, [r2, #0]
	  	   HAL_Delay(2000);
 800158a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800158e:	f000 fb7a 	bl	8001c86 <HAL_Delay>


			MX_LoRaWAN_Process();
 8001592:	f008 fda7 	bl	800a0e4 <MX_LoRaWAN_Process>
			osDelay(10);
 8001596:	200a      	movs	r0, #10
 8001598:	f009 f914 	bl	800a7c4 <osDelay>
	       DHT_GetData(&DHT11_Data);
 800159c:	e7e4      	b.n	8001568 <StartLoRaWANTask+0xc>
 800159e:	bf00      	nop
 80015a0:	20000a28 	.word	0x20000a28
 80015a4:	41200000 	.word	0x41200000
 80015a8:	20000a30 	.word	0x20000a30
 80015ac:	20000a34 	.word	0x20000a34

080015b0 <StartLedTask>:
}


/* USER CODE END 4 */
void StartLedTask(void const * argument)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  LED_control(1);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff ffbd 	bl	8001538 <LED_control>
  for(;;)
  {
	LED_control(0);
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff ffba 	bl	8001538 <LED_control>
	osDelay(4000);
 80015c4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80015c8:	f009 f8fc 	bl	800a7c4 <osDelay>
	LED_control(1);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff ffb3 	bl	8001538 <LED_control>
	osDelay(4000);
 80015d2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80015d6:	f009 f8f5 	bl	800a7c4 <osDelay>
	LED_control(0);
 80015da:	e7f0      	b.n	80015be <StartLedTask+0xe>

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>

080015e6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <LL_APB1_GRP1_EnableClock>:
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4313      	orrs	r3, r2
 800161c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4013      	ands	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
	...

08001638 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	222c      	movs	r2, #44	; 0x2c
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f01c f97b 	bl	801d940 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <MX_RTC_Init+0x9c>)
 800164c:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <MX_RTC_Init+0xa0>)
 800164e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <MX_RTC_Init+0x9c>)
 8001652:	221f      	movs	r2, #31
 8001654:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <MX_RTC_Init+0x9c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <MX_RTC_Init+0x9c>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <MX_RTC_Init+0x9c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_RTC_Init+0x9c>)
 800166a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_RTC_Init+0x9c>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_RTC_Init+0x9c>)
 8001678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800167e:	4815      	ldr	r0, [pc, #84]	; (80016d4 <MX_RTC_Init+0x9c>)
 8001680:	f005 f9f4 	bl	8006a6c <HAL_RTC_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800168a:	f7ff ffa7 	bl	80015dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800168e:	4811      	ldr	r0, [pc, #68]	; (80016d4 <MX_RTC_Init+0x9c>)
 8001690:	f005 fce2 	bl	8007058 <HAL_RTCEx_SetSSRU_IT>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800169a:	f7ff ff9f 	bl	80015dc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80016aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016ae:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_RTC_Init+0x9c>)
 80016be:	f005 fa4f 	bl	8006b60 <HAL_RTC_SetAlarm_IT>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80016c8:	f7ff ff88 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	; 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000a40 	.word	0x20000a40
 80016d8:	40002800 	.word	0x40002800

080016dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b090      	sub	sp, #64	; 0x40
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	2238      	movs	r2, #56	; 0x38
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f01c f927 	bl	801d940 <memset>
  if(rtcHandle->Instance==RTC)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_RTC_MspInit+0x74>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d125      	bne.n	8001748 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001700:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4618      	mov	r0, r3
 800170e:	f005 f893 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001718:	f7ff ff60 	bl	80015dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800171c:	f7ff ff63 	bl	80015e6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001720:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001724:	f7ff ff6f 	bl	8001606 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2002      	movs	r0, #2
 800172e:	f002 fa84 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001732:	2002      	movs	r0, #2
 8001734:	f002 fa9b 	bl	8003c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	202a      	movs	r0, #42	; 0x2a
 800173e:	f002 fa7c 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001742:	202a      	movs	r0, #42	; 0x2a
 8001744:	f002 fa93 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001748:	bf00      	nop
 800174a:	3740      	adds	r7, #64	; 0x40
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40002800 	.word	0x40002800

08001754 <LL_APB1_GRP1_EnableClock>:
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001770:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001778:	68fb      	ldr	r3, [r7, #12]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	210f      	movs	r1, #15
 800178c:	f06f 0001 	mvn.w	r0, #1
 8001790:	f002 fa53 	bl	8003c3a <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b090      	sub	sp, #64	; 0x40
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	2238      	movs	r2, #56	; 0x38
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f01c f8c9 	bl	801d940 <memset>
  if(hlptim->Instance==LPTIM1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_LPTIM_MspInit+0x60>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d11a      	bne.n	80017ee <HAL_LPTIM_MspInit+0x56>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80017b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_LPTIM_MspInit+0x64>)
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 f836 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80017d2:	f7ff ff03 	bl	80015dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80017d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80017da:	f7ff ffbb 	bl	8001754 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2105      	movs	r1, #5
 80017e2:	2027      	movs	r0, #39	; 0x27
 80017e4:	f002 fa29 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80017e8:	2027      	movs	r0, #39	; 0x27
 80017ea:	f002 fa40 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3740      	adds	r7, #64	; 0x40
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40007c00 	.word	0x40007c00
 80017fc:	000c0004 	.word	0x000c0004

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <SysTick_Handler>:
//  /* USER CODE BEGIN SysTick_IRQn 1 */
//
//  /* USER CODE END SysTick_IRQn 1 */
//}
void SysTick_Handler(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182e:	f001 f931 	bl	8002a94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001832:	f009 fdf9 	bl	800b428 <xTaskGetSchedulerState>
 8001836:	4603      	mov	r3, r0
 8001838:	2b01      	cmp	r3, #1
 800183a:	d001      	beq.n	8001840 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800183c:	f009 ffe4 	bl	800b808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800184a:	f005 fc41 	bl	80070d0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000a40 	.word	0x20000a40

08001858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800185c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001860:	f003 f8ae 	bl	80049c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
#ifdef USE_USB_SERIAL
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <DMA1_Channel5_IRQHandler+0x10>)
 800186e:	f002 fc95 	bl	800419c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
#endif
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000b1c 	.word	0x20000b1c

0800187c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <USART1_IRQHandler+0x10>)
 8001882:	f006 fa85 	bl	8007d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000a8c 	.word	0x20000a8c

08001890 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <USART2_IRQHandler+0x10>)
 8001896:	f006 fa7b 	bl	8007d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000b7c 	.word	0x20000b7c

080018a4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <RTC_Alarm_IRQHandler+0x10>)
 80018aa:	f005 fac1 	bl	8006e30 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000a40 	.word	0x20000a40

080018b8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <SUBGHZ_Radio_IRQHandler+0x10>)
 80018be:	f005 ff6f 	bl	80077a0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000a78 	.word	0x20000a78

080018cc <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
extern LPTIM_HandleTypeDef hlptim1;
void LPTIM1_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <LPTIM1_IRQHandler+0x10>)
 80018d2:	f003 facf 	bl	8004e74 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200009ec 	.word	0x200009ec

080018e0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_SUBGHZ_Init+0x20>)
 8001916:	2208      	movs	r2, #8
 8001918:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_SUBGHZ_Init+0x20>)
 800191c:	f005 fcc4 	bl	80072a8 <HAL_SUBGHZ_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001926:	f7ff fe59 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000a78 	.word	0x20000a78

08001934 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800193c:	2001      	movs	r0, #1
 800193e:	f7ff ffcf 	bl	80018e0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2032      	movs	r0, #50	; 0x32
 8001948:	f002 f977 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800194c:	2032      	movs	r0, #50	; 0x32
 800194e:	f002 f98e 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800196c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <LL_FLASH_GetUDN+0x10>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	1fff7580 	.word	0x1fff7580

08001994 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <LL_FLASH_GetDeviceID+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	1fff7584 	.word	0x1fff7584

080019ac <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <LL_FLASH_GetSTCompanyID+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0a1b      	lsrs	r3, r3, #8
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	1fff7584 	.word	0x1fff7584

080019c4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff ffc6 	bl	800195a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80019ce:	f01b fa99 	bl	801cf04 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
//  DBG_Disable();

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 80019d2:	f000 f964 	bl	8001c9e <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80019d6:	f01a fc71 	bl	801c2bc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <SystemApp_Init+0x3c>)
 80019dc:	f01a fd1c 	bl	801c418 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80019e0:	2002      	movs	r0, #2
 80019e2:	f01a fd27 	bl	801c434 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80019e6:	f7ff fadf 	bl	8000fa8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80019ea:	f000 f95e 	bl	8001caa <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80019ee:	f01a ff0b 	bl	801c808 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80019f2:	2101      	movs	r1, #1
 80019f4:	2001      	movs	r0, #1
 80019f6:	f01a ff47 	bl	801c888 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	08001bd9 	.word	0x08001bd9

08001a04 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END UTIL_SEQ_Idle_1 */
//  UTIL_LPM_EnterLowPower();
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001a1a:	f7ff fb4d 	bl	80010b8 <SYS_GetBatteryLevel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001a22:	88bb      	ldrh	r3, [r7, #4]
 8001a24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d902      	bls.n	8001a32 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001a2c:	23fe      	movs	r3, #254	; 0xfe
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	e014      	b.n	8001a5c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001a32:	88bb      	ldrh	r3, [r7, #4]
 8001a34:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001a38:	d202      	bcs.n	8001a40 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	e00d      	b.n	8001a5c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001a46:	461a      	mov	r2, r3
 8001a48:	4613      	mov	r3, r2
 8001a4a:	01db      	lsls	r3, r3, #7
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <GetBatteryLevel+0x68>)
 8001a54:	fba3 2302 	umull	r2, r3, r3, r2
 8001a58:	09db      	lsrs	r3, r3, #7
 8001a5a:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <GetBatteryLevel+0x6c>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	2100      	movs	r1, #0
 8001a66:	2002      	movs	r0, #2
 8001a68:	f01a fc56 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	1b4e81b5 	.word	0x1b4e81b5
 8001a7c:	0801dac8 	.word	0x0801dac8

08001a80 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001a8a:	f7ff fa9b 	bl	8000fc4 <SYS_GetTemperatureLevel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da00      	bge.n	8001a96 <GetTemperatureLevel+0x16>
 8001a94:	33ff      	adds	r3, #255	; 0xff
 8001a96:	121b      	asrs	r3, r3, #8
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001aa6:	b590      	push	{r4, r7, lr}
 8001aa8:	b087      	sub	sp, #28
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001ab2:	f7ff ff65 	bl	8001980 <LL_FLASH_GetUDN>
 8001ab6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abe:	d138      	bne.n	8001b32 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001ac0:	f000 fffa 	bl	8002ab8 <HAL_GetUIDw0>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	f001 f80b 	bl	8002ae0 <HAL_GetUIDw2>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4423      	add	r3, r4
 8001ace:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001ad0:	f000 fffc 	bl	8002acc <HAL_GetUIDw1>
 8001ad4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	0e1a      	lsrs	r2, r3, #24
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3307      	adds	r3, #7
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	0c1a      	lsrs	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3306      	adds	r3, #6
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	0a1a      	lsrs	r2, r3, #8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3305      	adds	r3, #5
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	0e1a      	lsrs	r2, r3, #24
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3303      	adds	r3, #3
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	0c1a      	lsrs	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3302      	adds	r3, #2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	0a1a      	lsrs	r2, r3, #8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001b30:	e031      	b.n	8001b96 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3307      	adds	r3, #7
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	0a1a      	lsrs	r2, r3, #8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3306      	adds	r3, #6
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	0c1a      	lsrs	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3305      	adds	r3, #5
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	0e1a      	lsrs	r2, r3, #24
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001b60:	f7ff ff18 	bl	8001994 <LL_FLASH_GetDeviceID>
 8001b64:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3303      	adds	r3, #3
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001b70:	f7ff ff1c 	bl	80019ac <LL_FLASH_GetSTCompanyID>
 8001b74:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3302      	adds	r3, #2
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	0a1a      	lsrs	r2, r3, #8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	701a      	strb	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}

08001b9e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001b9e:	b590      	push	{r4, r7, lr}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001ba8:	f7ff feea 	bl	8001980 <LL_FLASH_GetUDN>
 8001bac:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d10b      	bne.n	8001bce <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001bb6:	f000 ff7f 	bl	8002ab8 <HAL_GetUIDw0>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	f000 ff86 	bl	8002acc <HAL_GetUIDw1>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	405c      	eors	r4, r3
 8001bc4:	f000 ff8c 	bl	8002ae0 <HAL_GetUIDw2>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4063      	eors	r3, r4
 8001bcc:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001bce:	687b      	ldr	r3, [r7, #4]

}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}

08001bd8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	4618      	mov	r0, r3
 8001be8:	f01b f8ce 	bl	801cd88 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bf2:	9200      	str	r2, [sp, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <TimestampNow+0x3c>)
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f81d 	bl	8001c38 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fabe 	bl	8000180 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0801dad4 	.word	0x0801dad4

08001c18 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f01a fe02 	bl	801c828 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f01a fdfa 	bl	801c828 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001c38:	b40c      	push	{r2, r3}
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f01b fcfb 	bl	801d64c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c60:	b002      	add	sp, #8
 8001c62:	4770      	bx	lr

08001c64 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001c7c:	f000 f8de 	bl	8001e3c <TIMER_IF_GetTimerValue>
 8001c80:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f95a 	bl	8001f4a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <EnvSensors_Init>:
  return 0;
  /* USER CODE END EnvSensors_Read */
}

int32_t  EnvSensors_Init(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001cae:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <TIMER_IF_Init+0x5c>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	f083 0301 	eor.w	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <TIMER_IF_Init+0x60>)
 8001cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001cfc:	f7ff fc9c 	bl	8001638 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001d00:	f000 f856 	bl	8001db0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <TIMER_IF_Init+0x60>)
 8001d0a:	f005 f835 	bl	8006d78 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <TIMER_IF_Init+0x60>)
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d16:	4809      	ldr	r0, [pc, #36]	; (8001d3c <TIMER_IF_Init+0x60>)
 8001d18:	f005 f96c 	bl	8006ff4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f000 f9d3 	bl	80020c8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001d22:	f000 f85f 	bl	8001de4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <TIMER_IF_Init+0x5c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000a84 	.word	0x20000a84
 8001d3c:	20000a40 	.word	0x20000a40

08001d40 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	222c      	movs	r2, #44	; 0x2c
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f01b fdf2 	bl	801d940 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001d5c:	f000 f828 	bl	8001db0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <TIMER_IF_StartTimer+0x68>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d78:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d7c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <TIMER_IF_StartTimer+0x6c>)
 8001d8e:	f004 fee7 	bl	8006b60 <HAL_RTC_SetAlarm_IT>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001d98:	f7ff fc20 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3738      	adds	r7, #56	; 0x38
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000a88 	.word	0x20000a88
 8001dac:	20000a40 	.word	0x20000a40

08001db0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <TIMER_IF_StopTimer+0x2c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc4:	4806      	ldr	r0, [pc, #24]	; (8001de0 <TIMER_IF_StopTimer+0x30>)
 8001dc6:	f004 ffd7 	bl	8006d78 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <TIMER_IF_StopTimer+0x30>)
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40002800 	.word	0x40002800
 8001de0:	20000a40 	.word	0x20000a40

08001de4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001de8:	f000 f98e 	bl	8002108 <GetTimerTicks>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <TIMER_IF_SetTimerContext+0x18>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001df2:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <TIMER_IF_SetTimerContext+0x18>)
 8001df4:	681b      	ldr	r3, [r3, #0]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000a88 	.word	0x20000a88

08001e00 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <TIMER_IF_GetTimerContext+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000a88 	.word	0x20000a88

08001e14 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001e1e:	f000 f973 	bl	8002108 <GetTimerTicks>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000a88 	.word	0x20000a88

08001e3c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <TIMER_IF_GetTimerValue+0x24>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001e4e:	f000 f95b 	bl	8002108 <GetTimerTicks>
 8001e52:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000a84 	.word	0x20000a84

08001e64 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001e6e:	2303      	movs	r3, #3
 8001e70:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001e72:	687b      	ldr	r3, [r7, #4]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001e7e:	b5b0      	push	{r4, r5, r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001e86:	2100      	movs	r1, #0
 8001e88:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	460a      	mov	r2, r1
 8001e90:	4603      	mov	r3, r0
 8001e92:	0d95      	lsrs	r5, r2, #22
 8001e94:	0294      	lsls	r4, r2, #10
 8001e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fe5f 	bl	8000b64 <__aeabi_uldivmod>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4613      	mov	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bdb0      	pop	{r4, r5, r7, pc}

08001eb8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001eb8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	2000      	movs	r0, #0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	4605      	mov	r5, r0
 8001ece:	4620      	mov	r0, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	f04f 0a00 	mov.w	sl, #0
 8001ed6:	f04f 0b00 	mov.w	fp, #0
 8001eda:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001ede:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001ee2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001ee6:	4650      	mov	r0, sl
 8001ee8:	4659      	mov	r1, fp
 8001eea:	1b02      	subs	r2, r0, r4
 8001eec:	eb61 0305 	sbc.w	r3, r1, r5
 8001ef0:	f04f 0000 	mov.w	r0, #0
 8001ef4:	f04f 0100 	mov.w	r1, #0
 8001ef8:	0099      	lsls	r1, r3, #2
 8001efa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001efe:	0090      	lsls	r0, r2, #2
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	eb12 0804 	adds.w	r8, r2, r4
 8001f08:	eb43 0905 	adc.w	r9, r3, r5
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f20:	4690      	mov	r8, r2
 8001f22:	4699      	mov	r9, r3
 8001f24:	4640      	mov	r0, r8
 8001f26:	4649      	mov	r1, r9
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	0a82      	lsrs	r2, r0, #10
 8001f32:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001f36:	0a8b      	lsrs	r3, r1, #10
 8001f38:	4613      	mov	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f48:	4770      	bx	lr

08001f4a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff93 	bl	8001e7e <TIMER_IF_Convert_ms2Tick>
 8001f58:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001f5a:	f000 f8d5 	bl	8002108 <GetTimerTicks>
 8001f5e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f60:	e000      	b.n	8001f64 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001f62:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f64:	f000 f8d0 	bl	8002108 <GetTimerTicks>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f6      	bhi.n	8001f62 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001f86:	f01b f90b 	bl	801d1a0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001f9a:	f000 f8a5 	bl	80020e8 <TIMER_IF_BkUp_Read_MSBticks>
 8001f9e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f88f 	bl	80020c8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001fb2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001fc0:	f000 f8a2 	bl	8002108 <GetTimerTicks>
 8001fc4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001fc6:	f000 f88f 	bl	80020e8 <TIMER_IF_BkUp_Read_MSBticks>
 8001fca:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	60fa      	str	r2, [r7, #12]
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	000b      	movs	r3, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	4605      	mov	r5, r0
 8001fea:	eb12 0804 	adds.w	r8, r2, r4
 8001fee:	eb43 0905 	adc.w	r9, r3, r5
 8001ff2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001ff6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	0a82      	lsrs	r2, r0, #10
 8002004:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002008:	0a8b      	lsrs	r3, r1, #10
 800200a:	4613      	mov	r3, r2
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2200      	movs	r2, #0
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800201c:	f04f 0b00 	mov.w	fp, #0
 8002020:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff46 	bl	8001eb8 <TIMER_IF_Convert_Tick2ms>
 800202c:	4603      	mov	r3, r0
 800202e:	b29a      	uxth	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002036:	4618      	mov	r0, r3
 8002038:	3730      	adds	r7, #48	; 0x30
 800203a:	46bd      	mov	sp, r7
 800203c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002040 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	2100      	movs	r1, #0
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800204e:	f005 f863 	bl	8007118 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000a40 	.word	0x20000a40

08002060 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	2101      	movs	r1, #1
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800206e:	f005 f853 	bl	8007118 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000a40 	.word	0x20000a40

08002080 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800208a:	2100      	movs	r1, #0
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800208e:	f005 f85b 	bl	8007148 <HAL_RTCEx_BKUPRead>
 8002092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000a40 	.word	0x20000a40

080020a4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80020ae:	2101      	movs	r1, #1
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80020b2:	f005 f849 	bl	8007148 <HAL_RTCEx_BKUPRead>
 80020b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000a40 	.word	0x20000a40

080020c8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	2102      	movs	r1, #2
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80020d6:	f005 f81f 	bl	8007118 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000a40 	.word	0x20000a40

080020e8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80020ee:	2102      	movs	r1, #2
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80020f2:	f005 f829 	bl	8007148 <HAL_RTCEx_BKUPRead>
 80020f6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80020f8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000a40 	.word	0x20000a40

08002108 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <GetTimerTicks+0x14>)
 800210e:	f7ff fdd9 	bl	8001cc4 <LL_RTC_TIME_GetSubSecond>
 8002112:	4603      	mov	r3, r0
 8002114:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002116:	4618      	mov	r0, r3
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40002800 	.word	0x40002800

08002120 <LL_AHB2_GRP1_EnableClock>:
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800212e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <LL_APB1_GRP1_EnableClock>:
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800215e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002174:	68fb      	ldr	r3, [r7, #12]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <LL_APB1_GRP1_DisableClock>:
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	43db      	mvns	r3, r3
 8002192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002196:	4013      	ands	r3, r2
 8002198:	658b      	str	r3, [r1, #88]	; 0x58
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_APB2_GRP1_EnableClock>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <LL_APB2_GRP1_DisableClock>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ea:	4013      	ands	r3, r2
 80021ec:	660b      	str	r3, [r1, #96]	; 0x60
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <MX_USART1_UART_Init+0x90>)
 80021fe:	4a23      	ldr	r2, [pc, #140]	; (800228c <MX_USART1_UART_Init+0x94>)
 8002200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <MX_USART1_UART_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_USART1_UART_Init+0x90>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_USART1_UART_Init+0x90>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <MX_USART1_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002240:	4811      	ldr	r0, [pc, #68]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002242:	f005 fc6c 	bl	8007b1e <HAL_UART_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800224c:	f7ff f9c6 	bl	80015dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002250:	2100      	movs	r1, #0
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002254:	f007 fcbd 	bl	8009bd2 <HAL_UARTEx_SetTxFifoThreshold>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800225e:	f7ff f9bd 	bl	80015dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002262:	2100      	movs	r1, #0
 8002264:	4808      	ldr	r0, [pc, #32]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002266:	f007 fcf2 	bl	8009c4e <HAL_UARTEx_SetRxFifoThreshold>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002270:	f7ff f9b4 	bl	80015dc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_USART1_UART_Init+0x90>)
 8002276:	f007 fc71 	bl	8009b5c <HAL_UARTEx_EnableFifoMode>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002280:	f7ff f9ac 	bl	80015dc <Error_Handler>
  }

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000a8c 	.word	0x20000a8c
 800228c:	40013800 	.word	0x40013800

08002290 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b096      	sub	sp, #88	; 0x58
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2238      	movs	r2, #56	; 0x38
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f01b fb45 	bl	801d940 <memset>
  if(uartHandle->Instance==USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <HAL_UART_MspInit+0x1a0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d156      	bne.n	800236e <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80022c4:	4b5b      	ldr	r3, [pc, #364]	; (8002434 <HAL_UART_MspInit+0x1a4>)
 80022c6:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 fab3 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022d8:	f7ff f980 	bl	80015dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022e0:	f7ff ff60 	bl	80021a4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	2002      	movs	r0, #2
 80022e6:	f7ff ff1b 	bl	8002120 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_RX_Pin|USART1_TX_Pin;
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022fa:	2307      	movs	r3, #7
 80022fc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002302:	4619      	mov	r1, r3
 8002304:	484c      	ldr	r0, [pc, #304]	; (8002438 <HAL_UART_MspInit+0x1a8>)
 8002306:	f002 f8e5 	bl	80044d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 800230a:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_UART_MspInit+0x1ac>)
 800230c:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_UART_MspInit+0x1b0>)
 800230e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002310:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_UART_MspInit+0x1ac>)
 8002312:	2212      	movs	r2, #18
 8002314:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002316:	4b49      	ldr	r3, [pc, #292]	; (800243c <HAL_UART_MspInit+0x1ac>)
 8002318:	2210      	movs	r2, #16
 800231a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_UART_MspInit+0x1ac>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002322:	4b46      	ldr	r3, [pc, #280]	; (800243c <HAL_UART_MspInit+0x1ac>)
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002328:	4b44      	ldr	r3, [pc, #272]	; (800243c <HAL_UART_MspInit+0x1ac>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800232e:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_UART_MspInit+0x1ac>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002334:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_UART_MspInit+0x1ac>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <HAL_UART_MspInit+0x1ac>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002340:	483e      	ldr	r0, [pc, #248]	; (800243c <HAL_UART_MspInit+0x1ac>)
 8002342:	f001 fcb1 	bl	8003ca8 <HAL_DMA_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800234c:	f7ff f946 	bl	80015dc <Error_Handler>
    // if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
    // {
      // Error_Handler();
    // }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_UART_MspInit+0x1ac>)
 8002354:	679a      	str	r2, [r3, #120]	; 0x78
 8002356:	4a39      	ldr	r2, [pc, #228]	; (800243c <HAL_UART_MspInit+0x1ac>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2102      	movs	r1, #2
 8002360:	2024      	movs	r0, #36	; 0x24
 8002362:	f001 fc6a 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002366:	2024      	movs	r0, #36	; 0x24
 8002368:	f001 fc81 	bl	8003c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800236c:	e05b      	b.n	8002426 <HAL_UART_MspInit+0x196>
  else if(uartHandle->Instance==USART2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a34      	ldr	r2, [pc, #208]	; (8002444 <HAL_UART_MspInit+0x1b4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d156      	bne.n	8002426 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002378:	2302      	movs	r3, #2
 800237a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800237c:	4b32      	ldr	r3, [pc, #200]	; (8002448 <HAL_UART_MspInit+0x1b8>)
 800237e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fa57 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8002390:	f7ff f924 	bl	80015dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002394:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002398:	f7ff feda 	bl	8002150 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff febf 	bl	8002120 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80023a2:	230c      	movs	r3, #12
 80023a4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b2:	2307      	movs	r3, #7
 80023b4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f002 f888 	bl	80044d4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023c6:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <HAL_UART_MspInit+0x1b0>)
 80023c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023cc:	2214      	movs	r2, #20
 80023ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023d2:	2210      	movs	r2, #16
 80023d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023fa:	4814      	ldr	r0, [pc, #80]	; (800244c <HAL_UART_MspInit+0x1bc>)
 80023fc:	f001 fc54 	bl	8003ca8 <HAL_DMA_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_UART_MspInit+0x17a>
      Error_Handler();
 8002406:	f7ff f8e9 	bl	80015dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_UART_MspInit+0x1bc>)
 800240e:	679a      	str	r2, [r3, #120]	; 0x78
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_UART_MspInit+0x1bc>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2102      	movs	r1, #2
 800241a:	2025      	movs	r0, #37	; 0x25
 800241c:	f001 fc0d 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002420:	2025      	movs	r0, #37	; 0x25
 8002422:	f001 fc24 	bl	8003c6e <HAL_NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3758      	adds	r7, #88	; 0x58
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40013800 	.word	0x40013800
 8002434:	00030001 	.word	0x00030001
 8002438:	48000400 	.word	0x48000400
 800243c:	20000b1c 	.word	0x20000b1c
 8002440:	40020058 	.word	0x40020058
 8002444:	40004400 	.word	0x40004400
 8002448:	000c0004 	.word	0x000c0004
 800244c:	20000c0c 	.word	0x20000c0c

08002450 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_UART_MspDeInit+0x68>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d110      	bne.n	8002484 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002466:	f7ff feb5 	bl	80021d4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USART1_RX_Pin|USART1_TX_Pin);
 800246a:	21c0      	movs	r1, #192	; 0xc0
 800246c:	4813      	ldr	r0, [pc, #76]	; (80024bc <HAL_UART_MspDeInit+0x6c>)
 800246e:	f002 f991 	bl	8004794 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002476:	4618      	mov	r0, r3
 8002478:	f001 fcbe 	bl	8003df8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800247c:	2024      	movs	r0, #36	; 0x24
 800247e:	f001 fc04 	bl	8003c8a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002482:	e015      	b.n	80024b0 <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_UART_MspDeInit+0x70>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d110      	bne.n	80024b0 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 800248e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002492:	f7ff fe75 	bl	8002180 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, USART2_RX_Pin|USART2_TX_Pin);
 8002496:	210c      	movs	r1, #12
 8002498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800249c:	f002 f97a 	bl	8004794 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 fca7 	bl	8003df8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80024aa:	2025      	movs	r0, #37	; 0x25
 80024ac:	f001 fbed 	bl	8003c8a <HAL_NVIC_DisableIRQ>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40013800 	.word	0x40013800
 80024bc:	48000400 	.word	0x48000400
 80024c0:	40004400 	.word	0x40004400

080024c4 <LL_APB2_GRP1_ForceReset>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4313      	orrs	r3, r2
 80024da:	640b      	str	r3, [r1, #64]	; 0x40
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <LL_APB2_GRP1_ReleaseReset>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fc:	4013      	ands	r3, r2
 80024fe:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
	...

0800250c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <LL_EXTI_EnableIT_0_31+0x24>)
 8002516:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800251a:	4905      	ldr	r1, [pc, #20]	; (8002530 <LL_EXTI_EnableIT_0_31+0x24>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	58000800 	.word	0x58000800

08002534 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <vcom_Init+0x28>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002542:	f7fe fe93 	bl	800126c <MX_DMA_Init>
#ifdef USE_USB_SERIAL
  MX_USART1_UART_Init();
 8002546:	f7ff fe57 	bl	80021f8 <MX_USART1_UART_Init>
#else
  MX_USART2_UART_Init();
#endif
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800254a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800254e:	f7ff ffdd 	bl	800250c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002552:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000c70 	.word	0x20000c70

08002560 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
#ifdef USE_USB_SERIAL
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002568:	f7ff ffac 	bl	80024c4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800256c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002570:	f7ff ffb9 	bl	80024e6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002574:	4804      	ldr	r0, [pc, #16]	; (8002588 <vcom_DeInit+0x28>)
 8002576:	f7ff ff6b 	bl	8002450 <HAL_UART_MspDeInit>
  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
#endif
  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800257a:	200f      	movs	r0, #15
 800257c:	f001 fb85 	bl	8003c8a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002580:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000a8c 	.word	0x20000a8c

0800258c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
#ifdef USE_USB_SERIAL
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	461a      	mov	r2, r3
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4804      	ldr	r0, [pc, #16]	; (80025b0 <vcom_Trace_DMA+0x24>)
 80025a0:	f005 fb64 	bl	8007c6c <HAL_UART_Transmit_DMA>
#else
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
#endif
  return UTIL_ADV_TRACE_OK;
 80025a4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000a8c 	.word	0x20000a8c

080025b4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <vcom_ReceiveInit+0x70>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80025c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025c6:	60bb      	str	r3, [r7, #8]
#ifdef USE_USB_SERIAL
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025d0:	4815      	ldr	r0, [pc, #84]	; (8002628 <vcom_ReceiveInit+0x74>)
 80025d2:	f007 fa36 	bl	8009a42 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80025d6:	bf00      	nop
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <vcom_ReceiveInit+0x74>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e6:	d0f7      	beq.n	80025d8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80025e8:	bf00      	nop
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <vcom_ReceiveInit+0x74>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f8:	d1f7      	bne.n	80025ea <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <vcom_ReceiveInit+0x74>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <vcom_ReceiveInit+0x74>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002608:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800260a:	4807      	ldr	r0, [pc, #28]	; (8002628 <vcom_ReceiveInit+0x74>)
 800260c:	f007 fa74 	bl	8009af8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002610:	2201      	movs	r2, #1
 8002612:	4906      	ldr	r1, [pc, #24]	; (800262c <vcom_ReceiveInit+0x78>)
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <vcom_ReceiveInit+0x74>)
 8002616:	f005 fad3 	bl	8007bc0 <HAL_UART_Receive_IT>
  HAL_UARTEx_EnableStopMode(&huart2);

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
#endif
  return UTIL_ADV_TRACE_OK;
 800261a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000c74 	.word	0x20000c74
 8002628:	20000a8c 	.word	0x20000a8c
 800262c:	20000c6c 	.word	0x20000c6c

08002630 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_UART_TxCpltCallback+0x18>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2000      	movs	r0, #0
 800263e:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000c70 	.word	0x20000c70

0800264c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
#ifdef USE_USB_SERIAL
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_UART_RxCpltCallback+0x38>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_UART_RxCpltCallback+0x26>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <HAL_UART_RxCpltCallback+0x26>
  {
	RxCpltCallback(&charRx, 1, 0);
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_UART_RxCpltCallback+0x38>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	2101      	movs	r1, #1
 800266e:	4806      	ldr	r0, [pc, #24]	; (8002688 <HAL_UART_RxCpltCallback+0x3c>)
 8002670:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8002672:	2201      	movs	r2, #1
 8002674:	4904      	ldr	r1, [pc, #16]	; (8002688 <HAL_UART_RxCpltCallback+0x3c>)
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f005 faa2 	bl	8007bc0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(huart2, &charRx, 1);
#endif
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000c74 	.word	0x20000c74
 8002688:	20000c6c 	.word	0x20000c6c

0800268c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800268c:	480d      	ldr	r0, [pc, #52]	; (80026c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800268e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002690:	f7ff fb12 	bl	8001cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002694:	480c      	ldr	r0, [pc, #48]	; (80026c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002696:	490d      	ldr	r1, [pc, #52]	; (80026cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <LoopForever+0xe>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <LoopForever+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ba:	f01b f91d 	bl	801d8f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026be:	f7fe fe15 	bl	80012ec <main>

080026c2 <LoopForever>:

LoopForever:
    b LoopForever
 80026c2:	e7fe      	b.n	80026c2 <LoopForever>
  ldr   r0, =_estack
 80026c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 80026d0:	0801e894 	.word	0x0801e894
  ldr r2, =_sbss
 80026d4:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80026d8:	20004550 	.word	0x20004550

080026dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC_IRQHandler>

080026de <LL_AHB2_GRP1_EnableClock>:
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
	...

08002710 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800272a:	2002      	movs	r0, #2
 800272c:	f7ff ffd7 	bl	80026de <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002730:	2320      	movs	r3, #32
 8002732:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800273c:	2302      	movs	r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <BSP_LED_Init+0x60>)
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	f107 020c 	add.w	r2, r7, #12
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fec0 	bl	80044d4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	4a06      	ldr	r2, [pc, #24]	; (8002770 <BSP_LED_Init+0x60>)
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	2120      	movs	r1, #32
 800275e:	2201      	movs	r2, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f002 f8fc 	bl	800495e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000004 	.word	0x20000004

08002774 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <BSP_LED_On+0x28>)
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	2120      	movs	r1, #32
 8002788:	2200      	movs	r2, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f002 f8e7 	bl	800495e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000004 	.word	0x20000004

080027a0 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <BSP_LED_Off+0x28>)
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	2120      	movs	r1, #32
 80027b4:	2201      	movs	r2, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 f8d1 	bl	800495e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000004 	.word	0x20000004

080027cc <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <BSP_LED_Toggle+0x28>)
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	2220      	movs	r2, #32
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 f8d2 	bl	800498c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000004 	.word	0x20000004

080027f8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	460a      	mov	r2, r1
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	4613      	mov	r3, r2
 8002806:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002818:	2002      	movs	r0, #2
 800281a:	f7ff ff60 	bl	80026de <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800281e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002822:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002824:	2301      	movs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800282c:	79bb      	ldrb	r3, [r7, #6]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4a20      	ldr	r2, [pc, #128]	; (80028bc <BSP_PB_Init+0xc4>)
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	f107 020c 	add.w	r2, r7, #12
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fe45 	bl	80044d4 <HAL_GPIO_Init>
 800284a:	e031      	b.n	80028b0 <BSP_PB_Init+0xb8>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800284c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002850:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <BSP_PB_Init+0xc4>)
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	f107 020c 	add.w	r2, r7, #12
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f001 fe37 	bl	80044d4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <BSP_PB_Init+0xc8>)
 800286c:	441a      	add	r2, r3
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4914      	ldr	r1, [pc, #80]	; (80028c4 <BSP_PB_Init+0xcc>)
 8002872:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f001 fe18 	bl	80044ae <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <BSP_PB_Init+0xc8>)
 8002884:	1898      	adds	r0, r3, r2
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <BSP_PB_Init+0xd0>)
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	461a      	mov	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	f001 fdf3 	bl	800447c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002896:	2029      	movs	r0, #41	; 0x29
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <BSP_PB_Init+0xd4>)
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	2200      	movs	r2, #0
 80028a2:	4619      	mov	r1, r3
 80028a4:	f001 f9c9 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80028a8:	2329      	movs	r3, #41	; 0x29
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 f9df 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000008 	.word	0x20000008
 80028c0:	20000c78 	.word	0x20000c78
 80028c4:	0801e344 	.word	0x0801e344
 80028c8:	2000000c 	.word	0x2000000c
 80028cc:	20000010 	.word	0x20000010

080028d0 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff fff1 	bl	80028d0 <BSP_PB_Callback>
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <LL_AHB2_GRP1_EnableClock>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4313      	orrs	r3, r2
 8002908:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
 8002934:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 8002936:	2001      	movs	r0, #1
 8002938:	f7ff ffdb 	bl	80028f2 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800293c:	2310      	movs	r3, #16
 800293e:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	4619      	mov	r1, r3
 8002950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002954:	f001 fdbe 	bl	80044d4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002958:	2320      	movs	r3, #32
 800295a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	4619      	mov	r1, r3
 8002960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002964:	f001 fdb6 	bl	80044d4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002968:	2200      	movs	r2, #0
 800296a:	2120      	movs	r1, #32
 800296c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002970:	f001 fff5 	bl	800495e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002974:	2200      	movs	r2, #0
 8002976:	2110      	movs	r1, #16
 8002978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297c:	f001 ffef 	bl	800495e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d83f      	bhi.n	8002a1c <BSP_RADIO_ConfigRFSwitch+0x90>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029cf 	.word	0x080029cf
 80029ac:	080029e9 	.word	0x080029e9
 80029b0:	08002a03 	.word	0x08002a03
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2110      	movs	r1, #16
 80029b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029bc:	f001 ffcf 	bl	800495e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2120      	movs	r1, #32
 80029c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c8:	f001 ffc9 	bl	800495e <HAL_GPIO_WritePin>
      break;      
 80029cc:	e027      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029ce:	2201      	movs	r2, #1
 80029d0:	2110      	movs	r1, #16
 80029d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d6:	f001 ffc2 	bl	800495e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029da:	2200      	movs	r2, #0
 80029dc:	2120      	movs	r1, #32
 80029de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e2:	f001 ffbc 	bl	800495e <HAL_GPIO_WritePin>
      break;
 80029e6:	e01a      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029e8:	2201      	movs	r2, #1
 80029ea:	2110      	movs	r1, #16
 80029ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f0:	f001 ffb5 	bl	800495e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029f4:	2201      	movs	r2, #1
 80029f6:	2120      	movs	r1, #32
 80029f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029fc:	f001 ffaf 	bl	800495e <HAL_GPIO_WritePin>
      break;
 8002a00:	e00d      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a02:	2200      	movs	r2, #0
 8002a04:	2110      	movs	r1, #16
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0a:	f001 ffa8 	bl	800495e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2120      	movs	r1, #32
 8002a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a16:	f001 ffa2 	bl	800495e <HAL_GPIO_WritePin>
      break;
 8002a1a:	e000      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002a1c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002a2c:	2302      	movs	r3, #2
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002a48:	2301      	movs	r3, #1
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5e:	2003      	movs	r0, #3
 8002a60:	f001 f8e0 	bl	8003c24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a64:	f003 fd0a 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_Init+0x3c>)
 8002a6c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f7ff f8f8 	bl	8001c64 <HAL_InitTick>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	71fb      	strb	r3, [r7, #7]
 8002a7e:	e001      	b.n	8002a84 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a80:	f7fe fe80 	bl	8001784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a84:	79fb      	ldrb	r3, [r7, #7]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000

08002a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_IncTick+0x1c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_IncTick+0x20>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a03      	ldr	r2, [pc, #12]	; (8002ab4 <HAL_IncTick+0x20>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000018 	.word	0x20000018
 8002ab4:	20000c80 	.word	0x20000c80

08002ab8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <HAL_GetUIDw0+0x10>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	1fff7590 	.word	0x1fff7590

08002acc <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002ad0:	4b02      	ldr	r3, [pc, #8]	; (8002adc <HAL_GetUIDw1+0x10>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	1fff7594 	.word	0x1fff7594

08002ae0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002ae4:	4b02      	ldr	r3, [pc, #8]	; (8002af0 <HAL_GetUIDw2+0x10>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	1fff7598 	.word	0x1fff7598

08002af4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2107      	movs	r1, #7
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	401a      	ands	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	210f      	movs	r1, #15
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	401a      	ands	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	f003 010f 	and.w	r1, r3, #15
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	401a      	ands	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	43db      	mvns	r3, r3
 8002c34:	401a      	ands	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	0219      	lsls	r1, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002c42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c66:	f023 0317 	bic.w	r3, r3, #23
 8002c6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c8c:	f023 0317 	bic.w	r3, r3, #23
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6093      	str	r3, [r2, #8]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb2:	d101      	bne.n	8002cb8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cd4:	f023 0317 	bic.w	r3, r3, #23
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cfa:	f023 0317 	bic.w	r3, r3, #23
 8002cfe:	f043 0202 	orr.w	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d101      	bne.n	8002d4c <LL_ADC_IsDisableOngoing+0x18>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <LL_ADC_IsDisableOngoing+0x1a>
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d68:	f023 0317 	bic.w	r3, r3, #23
 8002d6c:	f043 0204 	orr.w	r2, r3, #4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d8e:	f023 0317 	bic.w	r3, r3, #23
 8002d92:	f043 0210 	orr.w	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d101      	bne.n	8002dbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1ae      	b.n	8003148 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7fe f8ad 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff44 	bl	8002c9e <LL_ADC_IsInternalRegulatorEnabled>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d115      	bne.n	8002e48 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff18 	bl	8002c56 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e26:	4b9b      	ldr	r3, [pc, #620]	; (8003094 <HAL_ADC_Init+0x2cc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	4a9a      	ldr	r2, [pc, #616]	; (8003098 <HAL_ADC_Init+0x2d0>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	3301      	adds	r3, #1
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e3a:	e002      	b.n	8002e42 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f9      	bne.n	8002e3c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff26 	bl	8002c9e <LL_ADC_IsInternalRegulatorEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10d      	bne.n	8002e74 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	f043 0210 	orr.w	r2, r3, #16
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff93 	bl	8002da4 <LL_ADC_REG_IsConversionOngoing>
 8002e7e:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 8154 	bne.w	8003136 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 8150 	bne.w	8003136 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff30 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d14f      	bne.n	8002f56 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f023 0118 	bic.w	r1, r3, #24
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d111      	bne.n	8002f0e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ef6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002efc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f02:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	4b61      	ldr	r3, [pc, #388]	; (800309c <HAL_ADC_Init+0x2d4>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6979      	ldr	r1, [r7, #20]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f2a:	d014      	beq.n	8002f56 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d00f      	beq.n	8002f56 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f3e:	d00a      	beq.n	8002f56 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002f40:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_ADC_Init+0x2d8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f50:	4953      	ldr	r1, [pc, #332]	; (80030a0 <HAL_ADC_Init+0x2d8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7e1b      	ldrb	r3, [r3, #24]
 8002f5a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e5b      	ldrb	r3, [r3, #25]
 8002f60:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f62:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7e9b      	ldrb	r3, [r3, #26]
 8002f68:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f6a:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f70:	2a00      	cmp	r2, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_ADC_Init+0x1b2>
 8002f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f78:	e000      	b.n	8002f7c <HAL_ADC_Init+0x1b4>
 8002f7a:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f7c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f82:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	da04      	bge.n	8002f96 <HAL_ADC_Init+0x1ce>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f94:	e001      	b.n	8002f9a <HAL_ADC_Init+0x1d2>
 8002f96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002f9a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fa2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fa4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d114      	bne.n	8002fe0 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7e9b      	ldrb	r3, [r3, #26]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d104      	bne.n	8002fc8 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003006:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	430b      	orrs	r3, r1
 8003012:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_ADC_Init+0x2dc>)
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	6979      	ldr	r1, [r7, #20]
 8003024:	430b      	orrs	r3, r1
 8003026:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	461a      	mov	r2, r3
 8003032:	2100      	movs	r1, #0
 8003034:	f7ff fd7d 	bl	8002b32 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	461a      	mov	r2, r3
 8003042:	4919      	ldr	r1, [pc, #100]	; (80030a8 <HAL_ADC_Init+0x2e0>)
 8003044:	f7ff fd75 	bl	8002b32 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d108      	bne.n	8003062 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f062 020f 	orn	r2, r2, #15
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
 8003060:	e044      	b.n	80030ec <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800306a:	d13f      	bne.n	80030ec <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	e00c      	b.n	800308c <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	2b0f      	cmp	r3, #15
 8003084:	d012      	beq.n	80030ac <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	3301      	adds	r3, #1
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b07      	cmp	r3, #7
 8003090:	d9ef      	bls.n	8003072 <HAL_ADC_Init+0x2aa>
 8003092:	e00c      	b.n	80030ae <HAL_ADC_Init+0x2e6>
 8003094:	20000000 	.word	0x20000000
 8003098:	053e2d63 	.word	0x053e2d63
 800309c:	1ffffc02 	.word	0x1ffffc02
 80030a0:	40012708 	.word	0x40012708
 80030a4:	dffffc02 	.word	0xdffffc02
 80030a8:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80030ac:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d108      	bne.n	80030c6 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f062 020f 	orn	r2, r2, #15
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
 80030c4:	e012      	b.n	80030ec <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f003 031c 	and.w	r3, r3, #28
 80030d8:	f06f 020f 	mvn.w	r2, #15
 80030dc:	fa02 f103 	lsl.w	r1, r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_ADC_Init+0x388>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d10b      	bne.n	8003114 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003112:	e018      	b.n	8003146 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f023 0312 	bic.w	r3, r3, #18
 800311c:	f043 0210 	orr.w	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	f043 0201 	orr.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003134:	e007      	b.n	8003146 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313a:	f043 0210 	orr.w	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003146:	7ffb      	ldrb	r3, [r7, #31]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	833fffe7 	.word	0x833fffe7

08003154 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06a      	b.n	800323c <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f043 0202 	orr.w	r2, r3, #2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fabe 	bl	80036f4 <ADC_ConversionStop>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fb82 	bl	800388c <ADC_Disable>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fd6d 	bl	8002c7c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80031b0:	f023 0303 	bic.w	r3, r3, #3
 80031b4:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f240 329f 	movw	r2, #927	; 0x39f
 80031be:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68d9      	ldr	r1, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_ADC_DeInit+0xf0>)
 80031cc:	400b      	ands	r3, r1
 80031ce:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80031de:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0207 	bic.w	r2, r2, #7
 80031ee:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80031fe:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_ADC_DeInit+0xf4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <HAL_ADC_DeInit+0xf4>)
 8003214:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003218:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd feb0 	bl	8000f80 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	833e0200 	.word	0x833e0200
 8003248:	40012708 	.word	0x40012708

0800324c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fda3 	bl	8002da4 <LL_ADC_REG_IsConversionOngoing>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d132      	bne.n	80032ca <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Start+0x26>
 800326e:	2302      	movs	r3, #2
 8003270:	e02e      	b.n	80032d0 <HAL_ADC_Start+0x84>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa80 	bl	8003780 <ADC_Enable>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d11a      	bne.n	80032c0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	221c      	movs	r2, #28
 80032aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fd4d 	bl	8002d58 <LL_ADC_REG_StartConversion>
 80032be:	e006      	b.n	80032ce <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80032c8:	e001      	b.n	80032ce <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
 80032cc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Stop+0x16>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e022      	b.n	8003334 <HAL_ADC_Stop+0x5c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f9fc 	bl	80036f4 <ADC_ConversionStop>
 80032fc:	4603      	mov	r3, r0
 80032fe:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d111      	bne.n	800332a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fac0 	bl	800388c <ADC_Disable>
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b08      	cmp	r3, #8
 800334c:	d102      	bne.n	8003354 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800334e:	2308      	movs	r3, #8
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e010      	b.n	8003376 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e077      	b.n	8003462 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003372:	2304      	movs	r3, #4
 8003374:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003376:	f7fe fc7f 	bl	8001c78 <HAL_GetTick>
 800337a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800337c:	e021      	b.n	80033c2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d01d      	beq.n	80033c2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003386:	f7fe fc77 	bl	8001c78 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <HAL_ADC_PollForConversion+0x60>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d112      	bne.n	80033c2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e04f      	b.n	8003462 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0d6      	beq.n	800337e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fbc4 	bl	8002b6e <LL_ADC_REG_IsTriggerSourceSWStart>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d031      	beq.n	8003450 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7e9b      	ldrb	r3, [r3, #26]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d12d      	bne.n	8003450 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d126      	bne.n	8003450 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fccc 	bl	8002da4 <LL_ADC_REG_IsConversionOngoing>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d112      	bne.n	8003438 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 020c 	bic.w	r2, r2, #12
 8003420:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	659a      	str	r2, [r3, #88]	; 0x58
 8003436:	e00b      	b.n	8003450 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7e1b      	ldrb	r3, [r3, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d103      	bne.n	8003460 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	220c      	movs	r2, #12
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
	...

08003484 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x28>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e110      	b.n	80036ce <HAL_ADC_ConfigChannel+0x24a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fc73 	bl	8002da4 <LL_ADC_REG_IsConversionOngoing>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 80f7 	bne.w	80036b4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	f000 80b1 	beq.w	8003632 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d8:	d004      	beq.n	80034e4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034de:	4a7e      	ldr	r2, [pc, #504]	; (80036d8 <HAL_ADC_ConfigChannel+0x254>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f7ff fb70 	bl	8002bd4 <LL_ADC_REG_SetSequencerChAdd>
 80034f4:	e041      	b.n	800357a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	210f      	movs	r1, #15
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	401a      	ands	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_ADC_ConfigChannel+0xa0>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	e011      	b.n	8003548 <HAL_ADC_ConfigChannel+0xc4>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e003      	b.n	8003548 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	6849      	ldr	r1, [r1, #4]
 800354c:	f001 011f 	and.w	r1, r1, #31
 8003550:	408b      	lsls	r3, r1
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	429a      	cmp	r2, r3
 8003566:	d808      	bhi.n	800357a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	f7ff fb0c 	bl	8002b92 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6819      	ldr	r1, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	461a      	mov	r2, r3
 8003588:	f7ff fb49 	bl	8002c1e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f280 8097 	bge.w	80036c4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003596:	4851      	ldr	r0, [pc, #324]	; (80036dc <HAL_ADC_ConfigChannel+0x258>)
 8003598:	f7ff fabe 	bl	8002b18 <LL_ADC_GetCommonPathInternalCh>
 800359c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_ADC_ConfigChannel+0x25c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d120      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11b      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035b8:	4619      	mov	r1, r3
 80035ba:	4848      	ldr	r0, [pc, #288]	; (80036dc <HAL_ADC_ConfigChannel+0x258>)
 80035bc:	f7ff fa9a 	bl	8002af4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035c0:	4b48      	ldr	r3, [pc, #288]	; (80036e4 <HAL_ADC_ConfigChannel+0x260>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	4a48      	ldr	r2, [pc, #288]	; (80036e8 <HAL_ADC_ConfigChannel+0x264>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035da:	e002      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f9      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035e8:	e06c      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3f      	ldr	r2, [pc, #252]	; (80036ec <HAL_ADC_ConfigChannel+0x268>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d10c      	bne.n	800360e <HAL_ADC_ConfigChannel+0x18a>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d107      	bne.n	800360e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003604:	4619      	mov	r1, r3
 8003606:	4835      	ldr	r0, [pc, #212]	; (80036dc <HAL_ADC_ConfigChannel+0x258>)
 8003608:	f7ff fa74 	bl	8002af4 <LL_ADC_SetCommonPathInternalCh>
 800360c:	e05a      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <HAL_ADC_ConfigChannel+0x26c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d155      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800361e:	2b00      	cmp	r3, #0
 8003620:	d150      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003628:	4619      	mov	r1, r3
 800362a:	482c      	ldr	r0, [pc, #176]	; (80036dc <HAL_ADC_ConfigChannel+0x258>)
 800362c:	f7ff fa62 	bl	8002af4 <LL_ADC_SetCommonPathInternalCh>
 8003630:	e048      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363a:	d004      	beq.n	8003646 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003640:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <HAL_ADC_ConfigChannel+0x254>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d107      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f7ff fad1 	bl	8002bf8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	da32      	bge.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800365e:	481f      	ldr	r0, [pc, #124]	; (80036dc <HAL_ADC_ConfigChannel+0x258>)
 8003660:	f7ff fa5a 	bl	8002b18 <LL_ADC_GetCommonPathInternalCh>
 8003664:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <HAL_ADC_ConfigChannel+0x25c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d107      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003676:	4619      	mov	r1, r3
 8003678:	4818      	ldr	r0, [pc, #96]	; (80036dc <HAL_ADC_ConfigChannel+0x258>)
 800367a:	f7ff fa3b 	bl	8002af4 <LL_ADC_SetCommonPathInternalCh>
 800367e:	e021      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a19      	ldr	r2, [pc, #100]	; (80036ec <HAL_ADC_ConfigChannel+0x268>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d107      	bne.n	800369a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003690:	4619      	mov	r1, r3
 8003692:	4812      	ldr	r0, [pc, #72]	; (80036dc <HAL_ADC_ConfigChannel+0x258>)
 8003694:	f7ff fa2e 	bl	8002af4 <LL_ADC_SetCommonPathInternalCh>
 8003698:	e014      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <HAL_ADC_ConfigChannel+0x26c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10f      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036aa:	4619      	mov	r1, r3
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <HAL_ADC_ConfigChannel+0x258>)
 80036ae:	f7ff fa21 	bl	8002af4 <LL_ADC_SetCommonPathInternalCh>
 80036b2:	e007      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	80000004 	.word	0x80000004
 80036dc:	40012708 	.word	0x40012708
 80036e0:	b0001000 	.word	0xb0001000
 80036e4:	20000000 	.word	0x20000000
 80036e8:	053e2d63 	.word	0x053e2d63
 80036ec:	b8004000 	.word	0xb8004000
 80036f0:	b4002000 	.word	0xb4002000

080036f4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fb4f 	bl	8002da4 <LL_ADC_REG_IsConversionOngoing>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d033      	beq.n	8003774 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fb0f 	bl	8002d34 <LL_ADC_IsDisableOngoing>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fb2c 	bl	8002d7e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003726:	f7fe faa7 	bl	8001c78 <HAL_GetTick>
 800372a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800372c:	e01b      	b.n	8003766 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800372e:	f7fe faa3 	bl	8001c78 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d914      	bls.n	8003766 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f043 0210 	orr.w	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e007      	b.n	8003776 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1dc      	bne.n	800372e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fabd 	bl	8002d10 <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d169      	bne.n	8003870 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	4b36      	ldr	r3, [pc, #216]	; (800387c <ADC_Enable+0xfc>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f043 0210 	orr.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e055      	b.n	8003872 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fa7a 	bl	8002cc4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037d0:	482b      	ldr	r0, [pc, #172]	; (8003880 <ADC_Enable+0x100>)
 80037d2:	f7ff f9a1 	bl	8002b18 <LL_ADC_GetCommonPathInternalCh>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00f      	beq.n	8003800 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <ADC_Enable+0x104>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	099b      	lsrs	r3, r3, #6
 80037e6:	4a28      	ldr	r2, [pc, #160]	; (8003888 <ADC_Enable+0x108>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	3301      	adds	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037f2:	e002      	b.n	80037fa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f9      	bne.n	80037f4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7e5b      	ldrb	r3, [r3, #25]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d033      	beq.n	8003870 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003808:	f7fe fa36 	bl	8001c78 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380e:	e028      	b.n	8003862 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fa7b 	bl	8002d10 <LL_ADC_IsEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fa4d 	bl	8002cc4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800382a:	f7fe fa25 	bl	8001c78 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d914      	bls.n	8003862 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d00d      	beq.n	8003862 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e007      	b.n	8003872 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d1cf      	bne.n	8003810 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	80000017 	.word	0x80000017
 8003880:	40012708 	.word	0x40012708
 8003884:	20000000 	.word	0x20000000
 8003888:	053e2d63 	.word	0x053e2d63

0800388c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fa4b 	bl	8002d34 <LL_ADC_IsDisableOngoing>
 800389e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fa33 	bl	8002d10 <LL_ADC_IsEnabled>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d047      	beq.n	8003940 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d144      	bne.n	8003940 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0305 	and.w	r3, r3, #5
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d10c      	bne.n	80038de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fa0e 	bl	8002cea <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2203      	movs	r2, #3
 80038d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038d6:	f7fe f9cf 	bl	8001c78 <HAL_GetTick>
 80038da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038dc:	e029      	b.n	8003932 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f043 0210 	orr.w	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e023      	b.n	8003942 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038fa:	f7fe f9bd 	bl	8001c78 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d914      	bls.n	8003932 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	f043 0210 	orr.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e007      	b.n	8003942 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1dc      	bne.n	80038fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <LL_ADC_IsEnabled>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <LL_ADC_IsEnabled+0x18>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <LL_ADC_IsEnabled+0x1a>
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <LL_ADC_IsCalibrationOnGoing>:
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800397e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003982:	d101      	bne.n	8003988 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_ADCEx_Calibration_Start+0x1a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e068      	b.n	8003a80 <HAL_ADCEx_Calibration_Start+0xec>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ff68 	bl	800388c <ADC_Disable>
 80039bc:	4603      	mov	r3, r0
 80039be:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ffc0 	bl	800394a <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d14c      	bne.n	8003a6a <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039d8:	f043 0202 	orr.w	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0203 	bic.w	r2, r2, #3
 80039fa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a0a:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a0c:	e014      	b.n	8003a38 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3301      	adds	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003a1a:	d30d      	bcc.n	8003a38 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	f023 0312 	bic.w	r3, r3, #18
 8003a24:	f043 0210 	orr.w	r2, r3, #16
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e023      	b.n	8003a80 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff96 	bl	800396e <LL_ADC_IsCalibrationOnGoing>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e2      	bne.n	8003a0e <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68d9      	ldr	r1, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f023 0303 	bic.w	r3, r3, #3
 8003a60:	f043 0201 	orr.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	659a      	str	r2, [r3, #88]	; 0x58
 8003a68:	e005      	b.n	8003a76 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <__NVIC_SetPriorityGrouping+0x44>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aba:	4a04      	ldr	r2, [pc, #16]	; (8003acc <__NVIC_SetPriorityGrouping+0x44>)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	60d3      	str	r3, [r2, #12]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 0307 	and.w	r3, r3, #7
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	db0b      	blt.n	8003b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	4906      	ldr	r1, [pc, #24]	; (8003b20 <__NVIC_EnableIRQ+0x34>)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	e000e100 	.word	0xe000e100

08003b24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	db12      	blt.n	8003b5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	490a      	ldr	r1, [pc, #40]	; (8003b68 <__NVIC_DisableIRQ+0x44>)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2001      	movs	r0, #1
 8003b46:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4a:	3320      	adds	r3, #32
 8003b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b50:	f3bf 8f4f 	dsb	sy
}
 8003b54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b56:	f3bf 8f6f 	isb	sy
}
 8003b5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000e100 	.word	0xe000e100

08003b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	db0a      	blt.n	8003b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	490c      	ldr	r1, [pc, #48]	; (8003bb8 <__NVIC_SetPriority+0x4c>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	0112      	lsls	r2, r2, #4
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b94:	e00a      	b.n	8003bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4908      	ldr	r1, [pc, #32]	; (8003bbc <__NVIC_SetPriority+0x50>)
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3b04      	subs	r3, #4
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	440b      	add	r3, r1
 8003baa:	761a      	strb	r2, [r3, #24]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000e100 	.word	0xe000e100
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f1c3 0307 	rsb	r3, r3, #7
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	bf28      	it	cs
 8003bde:	2304      	movcs	r3, #4
 8003be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d902      	bls.n	8003bf0 <NVIC_EncodePriority+0x30>
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3b03      	subs	r3, #3
 8003bee:	e000      	b.n	8003bf2 <NVIC_EncodePriority+0x32>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	401a      	ands	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	43d9      	mvns	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c18:	4313      	orrs	r3, r2
         );
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3724      	adds	r7, #36	; 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff2b 	bl	8003a88 <__NVIC_SetPriorityGrouping>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c48:	f7ff ff42 	bl	8003ad0 <__NVIC_GetPriorityGrouping>
 8003c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f7ff ffb4 	bl	8003bc0 <NVIC_EncodePriority>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff83 	bl	8003b6c <__NVIC_SetPriority>
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff35 	bl	8003aec <__NVIC_EnableIRQ>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff43 	bl	8003b24 <__NVIC_DisableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e08e      	b.n	8003dd8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_DMA_Init+0x138>)
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d80f      	bhi.n	8003ce6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b45      	ldr	r3, [pc, #276]	; (8003de4 <HAL_DMA_Init+0x13c>)
 8003cce:	4413      	add	r3, r2
 8003cd0:	4a45      	ldr	r2, [pc, #276]	; (8003de8 <HAL_DMA_Init+0x140>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	009a      	lsls	r2, r3, #2
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a42      	ldr	r2, [pc, #264]	; (8003dec <HAL_DMA_Init+0x144>)
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ce4:	e00e      	b.n	8003d04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <HAL_DMA_Init+0x148>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a3d      	ldr	r2, [pc, #244]	; (8003de8 <HAL_DMA_Init+0x140>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	009a      	lsls	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a3c      	ldr	r2, [pc, #240]	; (8003df4 <HAL_DMA_Init+0x14c>)
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fb24 	bl	80043a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d64:	d102      	bne.n	8003d6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d78:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d82:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d010      	beq.n	8003dae <HAL_DMA_Init+0x106>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d80c      	bhi.n	8003dae <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb4d 	bl	8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	e008      	b.n	8003dc0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40020407 	.word	0x40020407
 8003de4:	bffdfff8 	.word	0xbffdfff8
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020000 	.word	0x40020000
 8003df0:	bffdfbf8 	.word	0xbffdfbf8
 8003df4:	40020400 	.word	0x40020400

08003df8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e07b      	b.n	8003f02 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_DMA_DeInit+0x114>)
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d80f      	bhi.n	8003e46 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <HAL_DMA_DeInit+0x118>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <HAL_DMA_DeInit+0x11c>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	009a      	lsls	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a35      	ldr	r2, [pc, #212]	; (8003f18 <HAL_DMA_DeInit+0x120>)
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
 8003e44:	e00e      	b.n	8003e64 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b33      	ldr	r3, [pc, #204]	; (8003f1c <HAL_DMA_DeInit+0x124>)
 8003e4e:	4413      	add	r3, r2
 8003e50:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <HAL_DMA_DeInit+0x11c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	009a      	lsls	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <HAL_DMA_DeInit+0x128>)
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f003 021c 	and.w	r2, r3, #28
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa8f 	bl	80043a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e96:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00f      	beq.n	8003ec0 <HAL_DMA_DeInit+0xc8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d80b      	bhi.n	8003ec0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fac3 	bl	8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40020407 	.word	0x40020407
 8003f10:	bffdfff8 	.word	0xbffdfff8
 8003f14:	cccccccd 	.word	0xcccccccd
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	bffdfbf8 	.word	0xbffdfbf8
 8003f20:	40020400 	.word	0x40020400

08003f24 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMA_Start_IT+0x20>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e069      	b.n	8004018 <HAL_DMA_Start_IT+0xf4>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d155      	bne.n	8004004 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f9d3 	bl	8004328 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 020e 	orr.w	r2, r2, #14
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e00f      	b.n	8003fbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0204 	bic.w	r2, r2, #4
 8003faa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 020a 	orr.w	r2, r2, #10
 8003fba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e008      	b.n	8004016 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2280      	movs	r2, #128	; 0x80
 8004008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e04f      	b.n	80040d2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d008      	beq.n	8004050 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2204      	movs	r2, #4
 8004042:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e040      	b.n	80040d2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 020e 	bic.w	r2, r2, #14
 800405e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800406e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f003 021c 	and.w	r2, r3, #28
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2101      	movs	r1, #1
 800408e:	fa01 f202 	lsl.w	r2, r1, r2
 8004092:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800409c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d005      	beq.n	8004100 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2204      	movs	r2, #4
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e047      	b.n	8004190 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 020e 	bic.w	r2, r2, #14
 800410e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800412e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	f003 021c 	and.w	r2, r3, #28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f202 	lsl.w	r2, r1, r2
 8004142:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800414c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004164:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800416e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
    }
  }
  return status;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	f003 031c 	and.w	r3, r3, #28
 80041bc:	2204      	movs	r2, #4
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d027      	beq.n	8004218 <HAL_DMA_IRQHandler+0x7c>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d022      	beq.n	8004218 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0204 	bic.w	r2, r2, #4
 80041ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	f003 021c 	and.w	r2, r3, #28
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2104      	movs	r1, #4
 80041fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004202:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8081 	beq.w	8004310 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004216:	e07b      	b.n	8004310 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	f003 031c 	and.w	r3, r3, #28
 8004220:	2202      	movs	r2, #2
 8004222:	409a      	lsls	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d03d      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x10c>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d038      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 020a 	bic.w	r2, r2, #10
 8004252:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	4b2e      	ldr	r3, [pc, #184]	; (800431c <HAL_DMA_IRQHandler+0x180>)
 8004264:	429a      	cmp	r2, r3
 8004266:	d909      	bls.n	800427c <HAL_DMA_IRQHandler+0xe0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f003 031c 	and.w	r3, r3, #28
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_DMA_IRQHandler+0x184>)
 8004272:	2102      	movs	r1, #2
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	6053      	str	r3, [r2, #4]
 800427a:	e008      	b.n	800428e <HAL_DMA_IRQHandler+0xf2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f003 031c 	and.w	r3, r3, #28
 8004284:	4a27      	ldr	r2, [pc, #156]	; (8004324 <HAL_DMA_IRQHandler+0x188>)
 8004286:	2102      	movs	r1, #2
 8004288:	fa01 f303 	lsl.w	r3, r1, r3
 800428c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d038      	beq.n	8004310 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80042a6:	e033      	b.n	8004310 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	f003 031c 	and.w	r3, r3, #28
 80042b0:	2208      	movs	r2, #8
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02a      	beq.n	8004312 <HAL_DMA_IRQHandler+0x176>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d025      	beq.n	8004312 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 020e 	bic.w	r2, r2, #14
 80042d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f003 021c 	and.w	r2, r3, #28
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	2101      	movs	r1, #1
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004310:	bf00      	nop
 8004312:	bf00      	nop
}
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40020080 	.word	0x40020080
 8004320:	40020400 	.word	0x40020400
 8004324:	40020000 	.word	0x40020000

08004328 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800433e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004350:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f003 021c 	and.w	r2, r3, #28
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b10      	cmp	r3, #16
 8004374:	d108      	bne.n	8004388 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004386:	e007      	b.n	8004398 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
	...

080043a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d813      	bhi.n	80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043c4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	3b08      	subs	r3, #8
 80043d4:	4a14      	ldr	r2, [pc, #80]	; (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e011      	b.n	8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	089b      	lsrs	r3, r3, #2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	4b10      	ldr	r3, [pc, #64]	; (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80043ea:	4413      	add	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	3b08      	subs	r3, #8
 80043f8:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	3307      	adds	r3, #7
 8004402:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004408:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40020407 	.word	0x40020407
 8004428:	cccccccd 	.word	0xcccccccd
 800442c:	4002081c 	.word	0x4002081c
 8004430:	40020880 	.word	0x40020880

08004434 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004444:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	461a      	mov	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a08      	ldr	r2, [pc, #32]	; (8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004458:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3b01      	subs	r3, #1
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2201      	movs	r2, #1
 8004464:	409a      	lsls	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	1000823f 	.word	0x1000823f
 8004478:	40020940 	.word	0x40020940

0800447c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	460b      	mov	r3, r1
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	605a      	str	r2, [r3, #4]
      break;
 800449a:	e002      	b.n	80044a2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	75fb      	strb	r3, [r7, #23]
      break;
 80044a0:	bf00      	nop
  }

  return status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e003      	b.n	80044ca <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044e2:	e140      	b.n	8004766 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2101      	movs	r1, #1
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8132 	beq.w	8004760 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d005      	beq.n	8004514 <HAL_GPIO_Init+0x40>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d130      	bne.n	8004576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	2203      	movs	r2, #3
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800454a:	2201      	movs	r2, #1
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f003 0201 	and.w	r2, r3, #1
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d017      	beq.n	80045b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	2203      	movs	r2, #3
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d123      	bne.n	8004606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	08da      	lsrs	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3208      	adds	r2, #8
 80045c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	220f      	movs	r2, #15
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	08da      	lsrs	r2, r3, #3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3208      	adds	r2, #8
 8004600:	6939      	ldr	r1, [r7, #16]
 8004602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	2203      	movs	r2, #3
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 0203 	and.w	r2, r3, #3
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 808c 	beq.w	8004760 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004648:	4a4e      	ldr	r2, [pc, #312]	; (8004784 <HAL_GPIO_Init+0x2b0>)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	3302      	adds	r3, #2
 8004650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	2207      	movs	r2, #7
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004672:	d00d      	beq.n	8004690 <HAL_GPIO_Init+0x1bc>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a44      	ldr	r2, [pc, #272]	; (8004788 <HAL_GPIO_Init+0x2b4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <HAL_GPIO_Init+0x1b8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a43      	ldr	r2, [pc, #268]	; (800478c <HAL_GPIO_Init+0x2b8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_GPIO_Init+0x1b4>
 8004684:	2302      	movs	r3, #2
 8004686:	e004      	b.n	8004692 <HAL_GPIO_Init+0x1be>
 8004688:	2307      	movs	r3, #7
 800468a:	e002      	b.n	8004692 <HAL_GPIO_Init+0x1be>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_GPIO_Init+0x1be>
 8004690:	2300      	movs	r3, #0
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	f002 0203 	and.w	r2, r2, #3
 8004698:	0092      	lsls	r2, r2, #2
 800469a:	4093      	lsls	r3, r2
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046a2:	4938      	ldr	r1, [pc, #224]	; (8004784 <HAL_GPIO_Init+0x2b0>)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	089b      	lsrs	r3, r3, #2
 80046a8:	3302      	adds	r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80046b0:	4b37      	ldr	r3, [pc, #220]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80046d6:	4a2e      	ldr	r2, [pc, #184]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80046de:	4b2c      	ldr	r3, [pc, #176]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004704:	4a22      	ldr	r2, [pc, #136]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800470c:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004730:	4a17      	ldr	r2, [pc, #92]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800475a:	4a0d      	ldr	r2, [pc, #52]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	3301      	adds	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f aeb7 	bne.w	80044e4 <HAL_GPIO_Init+0x10>
  }
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000
 8004788:	48000400 	.word	0x48000400
 800478c:	48000800 	.word	0x48000800
 8004790:	58000800 	.word	0x58000800

08004794 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80047a2:	e0af      	b.n	8004904 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80047a4:	2201      	movs	r2, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a2 	beq.w	80048fe <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80047ba:	4a59      	ldr	r2, [pc, #356]	; (8004920 <HAL_GPIO_DeInit+0x18c>)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	3302      	adds	r3, #2
 80047c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	2207      	movs	r2, #7
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4013      	ands	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047e2:	d00d      	beq.n	8004800 <HAL_GPIO_DeInit+0x6c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a4f      	ldr	r2, [pc, #316]	; (8004924 <HAL_GPIO_DeInit+0x190>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <HAL_GPIO_DeInit+0x68>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a4e      	ldr	r2, [pc, #312]	; (8004928 <HAL_GPIO_DeInit+0x194>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_GPIO_DeInit+0x64>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e004      	b.n	8004802 <HAL_GPIO_DeInit+0x6e>
 80047f8:	2307      	movs	r3, #7
 80047fa:	e002      	b.n	8004802 <HAL_GPIO_DeInit+0x6e>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_GPIO_DeInit+0x6e>
 8004800:	2300      	movs	r3, #0
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	f002 0203 	and.w	r2, r2, #3
 8004808:	0092      	lsls	r2, r2, #2
 800480a:	4093      	lsls	r3, r2
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	429a      	cmp	r2, r3
 8004810:	d136      	bne.n	8004880 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004812:	4b46      	ldr	r3, [pc, #280]	; (800492c <HAL_GPIO_DeInit+0x198>)
 8004814:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	43db      	mvns	r3, r3
 800481c:	4943      	ldr	r1, [pc, #268]	; (800492c <HAL_GPIO_DeInit+0x198>)
 800481e:	4013      	ands	r3, r2
 8004820:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004824:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_GPIO_DeInit+0x198>)
 8004826:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	493f      	ldr	r1, [pc, #252]	; (800492c <HAL_GPIO_DeInit+0x198>)
 8004830:	4013      	ands	r3, r2
 8004832:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004836:	4b3d      	ldr	r3, [pc, #244]	; (800492c <HAL_GPIO_DeInit+0x198>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	43db      	mvns	r3, r3
 800483e:	493b      	ldr	r1, [pc, #236]	; (800492c <HAL_GPIO_DeInit+0x198>)
 8004840:	4013      	ands	r3, r2
 8004842:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004844:	4b39      	ldr	r3, [pc, #228]	; (800492c <HAL_GPIO_DeInit+0x198>)
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	43db      	mvns	r3, r3
 800484c:	4937      	ldr	r1, [pc, #220]	; (800492c <HAL_GPIO_DeInit+0x198>)
 800484e:	4013      	ands	r3, r2
 8004850:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	2207      	movs	r2, #7
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004862:	4a2f      	ldr	r2, [pc, #188]	; (8004920 <HAL_GPIO_DeInit+0x18c>)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	3302      	adds	r3, #2
 800486a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	43da      	mvns	r2, r3
 8004872:	482b      	ldr	r0, [pc, #172]	; (8004920 <HAL_GPIO_DeInit+0x18c>)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	400a      	ands	r2, r1
 800487a:	3302      	adds	r3, #2
 800487c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	2103      	movs	r1, #3
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	08da      	lsrs	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3208      	adds	r2, #8
 800489c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	220f      	movs	r2, #15
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	08d2      	lsrs	r2, r2, #3
 80048b4:	4019      	ands	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3208      	adds	r2, #8
 80048ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	2103      	movs	r1, #3
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	401a      	ands	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	2101      	movs	r1, #1
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	401a      	ands	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	2103      	movs	r1, #3
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	401a      	ands	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60da      	str	r2, [r3, #12]
    }

    position++;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	3301      	adds	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	f47f af49 	bne.w	80047a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	48000400 	.word	0x48000400
 8004928:	48000800 	.word	0x48000800
 800492c:	58000800 	.word	0x58000800

08004930 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
 800494c:	e001      	b.n	8004952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004952:	7bfb      	ldrb	r3, [r7, #15]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	807b      	strh	r3, [r7, #2]
 800496a:	4613      	mov	r3, r2
 800496c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800496e:	787b      	ldrb	r3, [r7, #1]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004974:	887a      	ldrh	r2, [r7, #2]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800497a:	e002      	b.n	8004982 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800497c:	887a      	ldrh	r2, [r7, #2]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800499e:	887a      	ldrh	r2, [r7, #2]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4013      	ands	r3, r2
 80049a4:	041a      	lsls	r2, r3, #16
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	43d9      	mvns	r1, r3
 80049aa:	887b      	ldrh	r3, [r7, #2]
 80049ac:	400b      	ands	r3, r1
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049d6:	4a05      	ldr	r2, [pc, #20]	; (80049ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	4618      	mov	r0, r3
 80049e0:	f005 fc36 	bl	800a250 <HAL_GPIO_EXTI_Callback>
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	58000800 	.word	0x58000800

080049f0 <LL_RCC_SetLPTIMClockSource>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	43db      	mvns	r3, r3
 8004a08:	401a      	ands	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <LL_RCC_GetLPTIMClockSource>:
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4013      	ands	r3, r2
 8004a36:	0c1a      	lsrs	r2, r3, #16
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4313      	orrs	r3, r2
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <LL_APB1_GRP1_ForceReset>:
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <LL_APB1_GRP2_ForceReset>:
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <LL_APB1_GRP1_ReleaseReset>:
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <LL_APB1_GRP2_ReleaseReset>:
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0b6      	b.n	8004c54 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fc fe49 	bl	8001798 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b26:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fac2 	bl	80050c0 <LPTIM_WaitForFlag>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d101      	bne.n	8004b46 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e086      	b.n	8004c54 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 faea 	bl	8005120 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 faaa 	bl	80050a6 <HAL_LPTIM_GetState>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d101      	bne.n	8004b5c <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e07b      	b.n	8004c54 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d004      	beq.n	8004b76 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b74:	d103      	bne.n	8004b7e <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f023 031e 	bic.w	r3, r3, #30
 8004b7c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d005      	beq.n	8004b96 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b94:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4b30      	ldr	r3, [pc, #192]	; (8004c5c <HAL_LPTIM_Init+0x188>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004ba6:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004bac:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004bb2:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004bb8:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d004      	beq.n	8004bea <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be8:	d107      	bne.n	8004bfa <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00a      	beq.n	8004c1c <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c0e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004c14:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0d      	ldr	r2, [pc, #52]	; (8004c60 <HAL_LPTIM_Init+0x18c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	621a      	str	r2, [r3, #32]
 8004c3e:	e004      	b.n	8004c4a <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c48:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	ff19f1fe 	.word	0xff19f1fe
 8004c60:	40007c00 	.word	0x40007c00

08004c64 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a48      	ldr	r2, [pc, #288]	; (8004d9c <HAL_LPTIM_Counter_Start_IT+0x138>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d108      	bne.n	8004c92 <HAL_LPTIM_Counter_Start_IT+0x2e>
 8004c80:	4b47      	ldr	r3, [pc, #284]	; (8004da0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c86:	4a46      	ldr	r2, [pc, #280]	; (8004da0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c90:	e015      	b.n	8004cbe <HAL_LPTIM_Counter_Start_IT+0x5a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a43      	ldr	r2, [pc, #268]	; (8004da4 <HAL_LPTIM_Counter_Start_IT+0x140>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <HAL_LPTIM_Counter_Start_IT+0x4a>
 8004c9c:	4b40      	ldr	r3, [pc, #256]	; (8004da0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca2:	4a3f      	ldr	r2, [pc, #252]	; (8004da0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cac:	e007      	b.n	8004cbe <HAL_LPTIM_Counter_Start_IT+0x5a>
 8004cae:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb4:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_LPTIM_Counter_Start_IT+0x7c>
      (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 8004cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cce:	d107      	bne.n	8004ce0 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004cde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004d00:	2110      	movs	r1, #16
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f9dc 	bl	80050c0 <LPTIM_WaitForFlag>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d101      	bne.n	8004d12 <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e03f      	b.n	8004d92 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa04 	bl	8005120 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f9c4 	bl	80050a6 <HAL_LPTIM_GetState>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d101      	bne.n	8004d28 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e034      	b.n	8004d92 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0210 	orr.w	r2, r2, #16
 8004d36:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0202 	orr.w	r2, r2, #2
 8004d46:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d56:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d66:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0204 	orr.w	r2, r2, #4
 8004d86:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40007c00 	.word	0x40007c00
 8004da0:	58000800 	.word	0x58000800
 8004da4:	40009400 	.word	0x40009400

08004da8 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d108      	bne.n	8004dd4 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc8:	4a28      	ldr	r2, [pc, #160]	; (8004e6c <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004dca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004dce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dd2:	e015      	b.n	8004e00 <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <HAL_LPTIM_Counter_Stop_IT+0x48>
 8004dde:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de4:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004de6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dee:	e007      	b.n	8004e00 <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df6:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f98d 	bl	8005120 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f94d 	bl	80050a6 <HAL_LPTIM_GetState>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d101      	bne.n	8004e16 <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e024      	b.n	8004e60 <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0210 	bic.w	r2, r2, #16
 8004e24:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0202 	bic.w	r2, r2, #2
 8004e34:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e44:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e54:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40007c00 	.word	0x40007c00
 8004e6c:	58000800 	.word	0x58000800
 8004e70:	40009400 	.word	0x40009400

08004e74 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10d      	bne.n	8004ea6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8af 	bl	8005004 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d106      	bne.n	8004ed0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8a3 	bl	8005016 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d10d      	bne.n	8004efa <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d106      	bne.n	8004efa <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f897 	bl	8005028 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d10d      	bne.n	8004f24 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d106      	bne.n	8004f24 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f88b 	bl	800503a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d10d      	bne.n	8004f4e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d106      	bne.n	8004f4e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2210      	movs	r2, #16
 8004f46:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f87f 	bl	800504c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d10d      	bne.n	8004f78 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d106      	bne.n	8004f78 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f873 	bl	800505e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d10d      	bne.n	8004fa2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d106      	bne.n	8004fa2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2240      	movs	r2, #64	; 0x40
 8004f9a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f867 	bl	8005070 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d10d      	bne.n	8004fcc <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	d106      	bne.n	8004fcc <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2280      	movs	r2, #128	; 0x80
 8004fc4:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f85b 	bl	8005082 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fda:	d10f      	bne.n	8004ffc <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d107      	bne.n	8004ffc <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ff4:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f84c 	bl	8005094 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr

0800505e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050b4:	b2db      	uxtb	r3, r3
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr

080050c0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80050ce:	4b12      	ldr	r3, [pc, #72]	; (8005118 <LPTIM_WaitForFlag+0x58>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <LPTIM_WaitForFlag+0x5c>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	0b9b      	lsrs	r3, r3, #14
 80050da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	4013      	ands	r3, r2
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d002      	beq.n	800510a <LPTIM_WaitForFlag+0x4a>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ec      	bne.n	80050e4 <LPTIM_WaitForFlag+0x24>

  return result;
 800510a:	7bfb      	ldrb	r3, [r7, #15]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000000 	.word	0x20000000
 800511c:	d1b71759 	.word	0xd1b71759

08005120 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800512c:	b672      	cpsid	i
}
 800512e:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a8d      	ldr	r2, [pc, #564]	; (800536c <LPTIM_Disable+0x24c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d015      	beq.n	8005166 <LPTIM_Disable+0x46>
 800513a:	4a8c      	ldr	r2, [pc, #560]	; (800536c <LPTIM_Disable+0x24c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d818      	bhi.n	8005172 <LPTIM_Disable+0x52>
 8005140:	4a8b      	ldr	r2, [pc, #556]	; (8005370 <LPTIM_Disable+0x250>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <LPTIM_Disable+0x2e>
 8005146:	4a8b      	ldr	r2, [pc, #556]	; (8005374 <LPTIM_Disable+0x254>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d006      	beq.n	800515a <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 800514c:	e011      	b.n	8005172 <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800514e:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8005152:	f7ff fc66 	bl	8004a22 <LL_RCC_GetLPTIMClockSource>
 8005156:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005158:	e00c      	b.n	8005174 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800515a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800515e:	f7ff fc60 	bl	8004a22 <LL_RCC_GetLPTIMClockSource>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005164:	e006      	b.n	8005174 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005166:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 800516a:	f7ff fc5a 	bl	8004a22 <LL_RCC_GetLPTIMClockSource>
 800516e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005170:	e000      	b.n	8005174 <LPTIM_Disable+0x54>
      break;
 8005172:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a70      	ldr	r2, [pc, #448]	; (800536c <LPTIM_Disable+0x24c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d019      	beq.n	80051e2 <LPTIM_Disable+0xc2>
 80051ae:	4a6f      	ldr	r2, [pc, #444]	; (800536c <LPTIM_Disable+0x24c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d81d      	bhi.n	80051f0 <LPTIM_Disable+0xd0>
 80051b4:	4a6e      	ldr	r2, [pc, #440]	; (8005370 <LPTIM_Disable+0x250>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <LPTIM_Disable+0xa2>
 80051ba:	4a6e      	ldr	r2, [pc, #440]	; (8005374 <LPTIM_Disable+0x254>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 80051c0:	e016      	b.n	80051f0 <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80051c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80051c6:	f7ff fc3e 	bl	8004a46 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80051ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80051ce:	f7ff fc5c 	bl	8004a8a <LL_APB1_GRP1_ReleaseReset>
      break;
 80051d2:	e00e      	b.n	80051f2 <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80051d4:	2020      	movs	r0, #32
 80051d6:	f7ff fc47 	bl	8004a68 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80051da:	2020      	movs	r0, #32
 80051dc:	f7ff fc67 	bl	8004aae <LL_APB1_GRP2_ReleaseReset>
      break;
 80051e0:	e007      	b.n	80051f2 <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80051e2:	2040      	movs	r0, #64	; 0x40
 80051e4:	f7ff fc40 	bl	8004a68 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80051e8:	2040      	movs	r0, #64	; 0x40
 80051ea:	f7ff fc60 	bl	8004aae <LL_APB1_GRP2_ReleaseReset>
      break;
 80051ee:	e000      	b.n	80051f2 <LPTIM_Disable+0xd2>
      break;
 80051f0:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <LPTIM_Disable+0xe6>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <LPTIM_Disable+0xe6>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8096 	beq.w	8005332 <LPTIM_Disable+0x212>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a58      	ldr	r2, [pc, #352]	; (800536c <LPTIM_Disable+0x24c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <LPTIM_Disable+0x118>
 8005210:	4a56      	ldr	r2, [pc, #344]	; (800536c <LPTIM_Disable+0x24c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d815      	bhi.n	8005242 <LPTIM_Disable+0x122>
 8005216:	4a56      	ldr	r2, [pc, #344]	; (8005370 <LPTIM_Disable+0x250>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <LPTIM_Disable+0x104>
 800521c:	4a55      	ldr	r2, [pc, #340]	; (8005374 <LPTIM_Disable+0x254>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d005      	beq.n	800522e <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8005222:	e00e      	b.n	8005242 <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005224:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8005228:	f7ff fbe2 	bl	80049f0 <LL_RCC_SetLPTIMClockSource>
        break;
 800522c:	e00a      	b.n	8005244 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800522e:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005232:	f7ff fbdd 	bl	80049f0 <LL_RCC_SetLPTIMClockSource>
        break;
 8005236:	e005      	b.n	8005244 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8005238:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 800523c:	f7ff fbd8 	bl	80049f0 <LL_RCC_SetLPTIMClockSource>
        break;
 8005240:	e000      	b.n	8005244 <LPTIM_Disable+0x124>
        break;
 8005242:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01a      	beq.n	8005280 <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005262:	2108      	movs	r1, #8
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ff2b 	bl	80050c0 <LPTIM_WaitForFlag>
 800526a:	4603      	mov	r3, r0
 800526c:	2b03      	cmp	r3, #3
 800526e:	d103      	bne.n	8005278 <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2203      	movs	r2, #3
 8005274:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2208      	movs	r2, #8
 800527e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01a      	beq.n	80052bc <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0201 	orr.w	r2, r2, #1
 8005294:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800529e:	2110      	movs	r1, #16
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ff0d 	bl	80050c0 <LPTIM_WaitForFlag>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d103      	bne.n	80052b4 <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2210      	movs	r2, #16
 80052ba:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01c      	beq.n	80052fc <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80052da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff feee 	bl	80050c0 <LPTIM_WaitForFlag>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d103      	bne.n	80052f2 <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2203      	movs	r2, #3
 80052ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052fa:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1a      	ldr	r2, [pc, #104]	; (800536c <LPTIM_Disable+0x24c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d011      	beq.n	800532a <LPTIM_Disable+0x20a>
 8005306:	4a19      	ldr	r2, [pc, #100]	; (800536c <LPTIM_Disable+0x24c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d814      	bhi.n	8005336 <LPTIM_Disable+0x216>
 800530c:	4a18      	ldr	r2, [pc, #96]	; (8005370 <LPTIM_Disable+0x250>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d003      	beq.n	800531a <LPTIM_Disable+0x1fa>
 8005312:	4a18      	ldr	r2, [pc, #96]	; (8005374 <LPTIM_Disable+0x254>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d004      	beq.n	8005322 <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8005318:	e00d      	b.n	8005336 <LPTIM_Disable+0x216>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800531a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800531c:	f7ff fb68 	bl	80049f0 <LL_RCC_SetLPTIMClockSource>
        break;
 8005320:	e00a      	b.n	8005338 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005324:	f7ff fb64 	bl	80049f0 <LL_RCC_SetLPTIMClockSource>
        break;
 8005328:	e006      	b.n	8005338 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 800532a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800532c:	f7ff fb60 	bl	80049f0 <LL_RCC_SetLPTIMClockSource>
        break;
 8005330:	e002      	b.n	8005338 <LPTIM_Disable+0x218>
    }
  }
 8005332:	bf00      	nop
 8005334:	e000      	b.n	8005338 <LPTIM_Disable+0x218>
        break;
 8005336:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8005360:	b662      	cpsie	i
}
 8005362:	bf00      	nop

  __enable_irq();
}
 8005364:	bf00      	nop
 8005366:	3728      	adds	r7, #40	; 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40009800 	.word	0x40009800
 8005370:	40007c00 	.word	0x40007c00
 8005374:	40009400 	.word	0x40009400

08005378 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <HAL_PWR_EnableBkUpAccess+0x18>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a03      	ldr	r2, [pc, #12]	; (8005390 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005386:	6013      	str	r3, [r2, #0]
}
 8005388:	bf00      	nop
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	58000400 	.word	0x58000400

08005394 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10c      	bne.n	80053c0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80053a6:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <HAL_PWR_EnterSLEEPMode+0x60>)
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b2:	d10d      	bne.n	80053d0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80053b4:	f000 f83c 	bl	8005430 <HAL_PWREx_DisableLowPowerRunMode>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80053be:	e015      	b.n	80053ec <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <HAL_PWR_EnterSLEEPMode+0x60>)
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80053cc:	f000 f822 	bl	8005414 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80053d6:	f023 0304 	bic.w	r3, r3, #4
 80053da:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80053e2:	bf30      	wfi
 80053e4:	e002      	b.n	80053ec <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80053e6:	bf40      	sev
    __WFE();
 80053e8:	bf20      	wfe
    __WFE();
 80053ea:	bf20      	wfe
  }
}
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	58000400 	.word	0x58000400
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_PWREx_GetVoltageRange+0x14>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	58000400 	.word	0x58000400

08005414 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a03      	ldr	r2, [pc, #12]	; (800542c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800541e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	58000400 	.word	0x58000400

08005430 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005436:	4b16      	ldr	r3, [pc, #88]	; (8005490 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a15      	ldr	r2, [pc, #84]	; (8005490 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800543c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005440:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2232      	movs	r2, #50	; 0x32
 8005448:	fb02 f303 	mul.w	r3, r2, r3
 800544c:	4a12      	ldr	r2, [pc, #72]	; (8005498 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	0c9b      	lsrs	r3, r3, #18
 8005454:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005456:	e002      	b.n	800545e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3b01      	subs	r3, #1
 800545c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546a:	d102      	bne.n	8005472 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f2      	bne.n	8005458 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547e:	d101      	bne.n	8005484 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e000      	b.n	8005486 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	58000400 	.word	0x58000400
 8005494:	20000000 	.word	0x20000000
 8005498:	431bde83 	.word	0x431bde83

0800549c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d101      	bne.n	80054b2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr
 80054bc:	58000400 	.word	0x58000400

080054c0 <LL_RCC_HSE_EnableTcxo>:
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80054c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054d2:	6013      	str	r3, [r2, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <LL_RCC_HSE_DisableTcxo>:
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80054e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ee:	6013      	str	r3, [r2, #0]
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80054fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800550a:	d101      	bne.n	8005510 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <LL_RCC_HSE_Enable>:
{
 800551a:	b480      	push	{r7}
 800551c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552c:	6013      	str	r3, [r2, #0]
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <LL_RCC_HSE_Disable>:
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800553a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
}
 800554a:	bf00      	nop
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <LL_RCC_HSE_IsReady>:
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005564:	d101      	bne.n	800556a <LL_RCC_HSE_IsReady+0x18>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <LL_RCC_HSE_IsReady+0x1a>
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <LL_RCC_HSI_Enable>:
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005586:	6013      	str	r3, [r2, #0]
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <LL_RCC_HSI_Disable>:
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a2:	6013      	str	r3, [r2, #0]
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr

080055ac <LL_RCC_HSI_IsReady>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055be:	d101      	bne.n	80055c4 <LL_RCC_HSI_IsReady+0x18>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <LL_RCC_HSI_IsReady+0x1a>
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <LL_RCC_HSI_SetCalibTrimming>:
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <LL_RCC_LSE_IsReady>:
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d101      	bne.n	800560e <LL_RCC_LSE_IsReady+0x18>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <LL_RCC_LSE_IsReady+0x1a>
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <LL_RCC_LSI_Enable>:
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800561c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <LL_RCC_LSI_Disable>:
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <LL_RCC_LSI_IsReady>:
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d101      	bne.n	8005670 <LL_RCC_LSI_IsReady+0x18>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <LL_RCC_LSI_IsReady+0x1a>
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <LL_RCC_MSI_Enable>:
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800567e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	6013      	str	r3, [r2, #0]
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <LL_RCC_MSI_Disable>:
{
 8005696:	b480      	push	{r7}
 8005698:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
}
 80056aa:	bf00      	nop
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <LL_RCC_MSI_IsReady>:
{
 80056b2:	b480      	push	{r7}
 80056b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d101      	bne.n	80056c8 <LL_RCC_MSI_IsReady+0x16>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <LL_RCC_MSI_IsReady+0x18>
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80056d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d101      	bne.n	80056e8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <LL_RCC_MSI_GetRange>:
{
 80056f2:	b480      	push	{r7}
 80056f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80056f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005714:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <LL_RCC_SetSysClkSource>:
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <LL_RCC_GetSysClkSource>:
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 030c 	and.w	r3, r3, #12
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <LL_RCC_SetAHBPrescaler>:
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800578c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4313      	orrs	r3, r2
 800579e:	608b      	str	r3, [r1, #8]
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <LL_RCC_SetAHB3Prescaler>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057ba:	f023 020f 	bic.w	r2, r3, #15
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_SetAPB1Prescaler>:
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <LL_RCC_SetAPB2Prescaler>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800580e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4313      	orrs	r3, r2
 8005816:	608b      	str	r3, [r1, #8]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <LL_RCC_GetAHBPrescaler>:
{
 8005822:	b480      	push	{r7}
 8005824:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005830:	4618      	mov	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <LL_RCC_GetAHB3Prescaler>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <LL_RCC_GetAPB1Prescaler>:
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <LL_RCC_GetAPB2Prescaler>:
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005876:	4618      	mov	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800587e:	b480      	push	{r7}
 8005880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800588c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005890:	6013      	str	r3, [r2, #0]
}
 8005892:	bf00      	nop
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800589a:	b480      	push	{r7}
 800589c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ac:	6013      	str	r3, [r2, #0]
}
 80058ae:	bf00      	nop
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058c8:	d101      	bne.n	80058ce <LL_RCC_PLL_IsReady+0x18>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <LL_RCC_PLL_IsReady+0x1a>
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005906:	b480      	push	{r7}
 8005908:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800590a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr

0800591c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0303 	and.w	r3, r3, #3
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d101      	bne.n	800594a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005968:	d101      	bne.n	800596e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800598a:	d101      	bne.n	8005990 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059ac:	d101      	bne.n	80059b2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e38b      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ce:	f7ff fece 	bl	800576e <LL_RCC_GetSysClkSource>
 80059d2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059d4:	f7ff ffa2 	bl	800591c <LL_RCC_PLL_GetMainSource>
 80059d8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80c9 	beq.w	8005b7a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_RCC_OscConfig+0x3e>
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d17b      	bne.n	8005aec <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d178      	bne.n	8005aec <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059fa:	f7ff fe5a 	bl	80056b2 <LL_RCC_MSI_IsReady>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_OscConfig+0x54>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e36a      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_RCC_OscConfig+0x72>
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a2c:	e006      	b.n	8005a3c <HAL_RCC_OscConfig+0x80>
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d222      	bcs.n	8005a86 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fd51 	bl	80064ec <RCC_SetFlashLatencyFromMSIRange>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e348      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a5e:	f043 0308 	orr.w	r3, r3, #8
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fe4e 	bl	8005720 <LL_RCC_MSI_SetCalibTrimming>
 8005a84:	e021      	b.n	8005aca <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a90:	f043 0308 	orr.w	r3, r3, #8
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fe35 	bl	8005720 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fd16 	bl	80064ec <RCC_SetFlashLatencyFromMSIRange>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e30d      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005aca:	f000 fcd7 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4aa1      	ldr	r2, [pc, #644]	; (8005d58 <HAL_RCC_OscConfig+0x39c>)
 8005ad2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ad4:	4ba1      	ldr	r3, [pc, #644]	; (8005d5c <HAL_RCC_OscConfig+0x3a0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fc f8c3 	bl	8001c64 <HAL_InitTick>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d047      	beq.n	8005b78 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	e2fc      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d02c      	beq.n	8005b4e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005af4:	f7ff fdc1 	bl	800567a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005af8:	f7fc f8be 	bl	8001c78 <HAL_GetTick>
 8005afc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b00:	f7fc f8ba 	bl	8001c78 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e2e9      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b12:	f7ff fdce 	bl	80056b2 <LL_RCC_MSI_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f1      	beq.n	8005b00 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b26:	f043 0308 	orr.w	r3, r3, #8
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fdea 	bl	8005720 <LL_RCC_MSI_SetCalibTrimming>
 8005b4c:	e015      	b.n	8005b7a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b4e:	f7ff fda2 	bl	8005696 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b52:	f7fc f891 	bl	8001c78 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b5a:	f7fc f88d 	bl	8001c78 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e2bc      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b6c:	f7ff fda1 	bl	80056b2 <LL_RCC_MSI_IsReady>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f1      	bne.n	8005b5a <HAL_RCC_OscConfig+0x19e>
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b78:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d05f      	beq.n	8005c46 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d005      	beq.n	8005b98 <HAL_RCC_OscConfig+0x1dc>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b0c      	cmp	r3, #12
 8005b90:	d10d      	bne.n	8005bae <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d10a      	bne.n	8005bae <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b98:	f7ff fcdb 	bl	8005552 <LL_RCC_HSE_IsReady>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d050      	beq.n	8005c44 <HAL_RCC_OscConfig+0x288>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d14c      	bne.n	8005c44 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e29b      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x218>
 8005bce:	f7ff fca4 	bl	800551a <LL_RCC_HSE_Enable>
 8005bd2:	e00d      	b.n	8005bf0 <HAL_RCC_OscConfig+0x234>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005bdc:	d104      	bne.n	8005be8 <HAL_RCC_OscConfig+0x22c>
 8005bde:	f7ff fc6f 	bl	80054c0 <LL_RCC_HSE_EnableTcxo>
 8005be2:	f7ff fc9a 	bl	800551a <LL_RCC_HSE_Enable>
 8005be6:	e003      	b.n	8005bf0 <HAL_RCC_OscConfig+0x234>
 8005be8:	f7ff fca5 	bl	8005536 <LL_RCC_HSE_Disable>
 8005bec:	f7ff fc76 	bl	80054dc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d012      	beq.n	8005c1e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fc f83e 	bl	8001c78 <HAL_GetTick>
 8005bfc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c00:	f7fc f83a 	bl	8001c78 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b64      	cmp	r3, #100	; 0x64
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e269      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c12:	f7ff fc9e 	bl	8005552 <LL_RCC_HSE_IsReady>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0f1      	beq.n	8005c00 <HAL_RCC_OscConfig+0x244>
 8005c1c:	e013      	b.n	8005c46 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fc f82b 	bl	8001c78 <HAL_GetTick>
 8005c22:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c26:	f7fc f827 	bl	8001c78 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b64      	cmp	r3, #100	; 0x64
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e256      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c38:	f7ff fc8b 	bl	8005552 <LL_RCC_HSE_IsReady>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f1      	bne.n	8005c26 <HAL_RCC_OscConfig+0x26a>
 8005c42:	e000      	b.n	8005c46 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c44:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d04b      	beq.n	8005cea <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d005      	beq.n	8005c64 <HAL_RCC_OscConfig+0x2a8>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b0c      	cmp	r3, #12
 8005c5c:	d113      	bne.n	8005c86 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d110      	bne.n	8005c86 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c64:	f7ff fca2 	bl	80055ac <LL_RCC_HSI_IsReady>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_RCC_OscConfig+0x2be>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e235      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fca5 	bl	80055ce <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c84:	e031      	b.n	8005cea <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d019      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c8e:	f7ff fc71 	bl	8005574 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fb fff1 	bl	8001c78 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9a:	f7fb ffed 	bl	8001c78 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e21c      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005cac:	f7ff fc7e 	bl	80055ac <LL_RCC_HSI_IsReady>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f1      	beq.n	8005c9a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff fc87 	bl	80055ce <LL_RCC_HSI_SetCalibTrimming>
 8005cc0:	e013      	b.n	8005cea <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc2:	f7ff fc65 	bl	8005590 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fb ffd7 	bl	8001c78 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cce:	f7fb ffd3 	bl	8001c78 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e202      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ce0:	f7ff fc64 	bl	80055ac <LL_RCC_HSI_IsReady>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f1      	bne.n	8005cce <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d06f      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d057      	beq.n	8005dae <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d06:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d036      	beq.n	8005d84 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e1db      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d018      	beq.n	8005d6a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005d38:	f7ff fc7e 	bl	8005638 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d3c:	f7fb ff9c 	bl	8001c78 <HAL_GetTick>
 8005d40:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005d42:	e00d      	b.n	8005d60 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d44:	f7fb ff98 	bl	8001c78 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b11      	cmp	r3, #17
 8005d50:	d906      	bls.n	8005d60 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e1c7      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
 8005d56:	bf00      	nop
 8005d58:	20000000 	.word	0x20000000
 8005d5c:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 8005d60:	f7ff fc7a 	bl	8005658 <LL_RCC_LSI_IsReady>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ec      	bne.n	8005d44 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d72:	f023 0210 	bic.w	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d84:	f7ff fc48 	bl	8005618 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d88:	f7fb ff76 	bl	8001c78 <HAL_GetTick>
 8005d8c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d90:	f7fb ff72 	bl	8001c78 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b11      	cmp	r3, #17
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e1a1      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005da2:	f7ff fc59 	bl	8005658 <LL_RCC_LSI_IsReady>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f1      	beq.n	8005d90 <HAL_RCC_OscConfig+0x3d4>
 8005dac:	e013      	b.n	8005dd6 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dae:	f7ff fc43 	bl	8005638 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db2:	f7fb ff61 	bl	8001c78 <HAL_GetTick>
 8005db6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dba:	f7fb ff5d 	bl	8001c78 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b11      	cmp	r3, #17
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e18c      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005dcc:	f7ff fc44 	bl	8005658 <LL_RCC_LSI_IsReady>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f1      	bne.n	8005dba <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 80d8 	beq.w	8005f94 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005de4:	f7ff fb5a 	bl	800549c <LL_PWR_IsEnabledBkUpAccess>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d113      	bne.n	8005e16 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005dee:	f7ff fac3 	bl	8005378 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005df2:	f7fb ff41 	bl	8001c78 <HAL_GetTick>
 8005df6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfa:	f7fb ff3d 	bl	8001c78 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e16c      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005e0c:	f7ff fb46 	bl	800549c <LL_PWR_IsEnabledBkUpAccess>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f1      	beq.n	8005dfa <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d07b      	beq.n	8005f16 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	2b85      	cmp	r3, #133	; 0x85
 8005e24:	d003      	beq.n	8005e2e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d109      	bne.n	8005e42 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	f043 0304 	orr.w	r3, r3, #4
 8005e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e42:	f7fb ff19 	bl	8001c78 <HAL_GetTick>
 8005e46:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fb ff0b 	bl	8001c78 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e138      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e74:	f7ff fbbf 	bl	80055f6 <LL_RCC_LSE_IsReady>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ef      	beq.n	8005e5e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2b81      	cmp	r3, #129	; 0x81
 8005e84:	d003      	beq.n	8005e8e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b85      	cmp	r3, #133	; 0x85
 8005e8c:	d121      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fb fef3 	bl	8001c78 <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005ea8:	e00a      	b.n	8005ec0 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fb fee5 	bl	8001c78 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e112      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0ec      	beq.n	8005eaa <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ed0:	e060      	b.n	8005f94 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fb fed1 	bl	8001c78 <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005eec:	e00a      	b.n	8005f04 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eee:	f7fb fec3 	bl	8001c78 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e0f0      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1ec      	bne.n	8005eee <HAL_RCC_OscConfig+0x532>
 8005f14:	e03e      	b.n	8005f94 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f16:	f7fb feaf 	bl	8001c78 <HAL_GetTick>
 8005f1a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f30:	e00a      	b.n	8005f48 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f32:	f7fb fea1 	bl	8001c78 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e0ce      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ec      	bne.n	8005f32 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fb fe8e 	bl	8001c78 <HAL_GetTick>
 8005f5c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6a:	f023 0301 	bic.w	r3, r3, #1
 8005f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f74:	f7fb fe80 	bl	8001c78 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0ad      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f8a:	f7ff fb34 	bl	80055f6 <LL_RCC_LSE_IsReady>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ef      	bne.n	8005f74 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80a3 	beq.w	80060e4 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d076      	beq.n	8006092 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d14b      	bne.n	8006044 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fac:	f7ff fc75 	bl	800589a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fb fe62 	bl	8001c78 <HAL_GetTick>
 8005fb4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fb fe5e 	bl	8001c78 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b0a      	cmp	r3, #10
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e08d      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fca:	f7ff fc74 	bl	80058b6 <LL_RCC_PLL_IsReady>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f1      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <HAL_RCC_OscConfig+0x734>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fe6:	4311      	orrs	r1, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fec:	0212      	lsls	r2, r2, #8
 8005fee:	4311      	orrs	r1, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ff4:	4311      	orrs	r1, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ffa:	4311      	orrs	r1, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006000:	430a      	orrs	r2, r1
 8006002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006006:	4313      	orrs	r3, r2
 8006008:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800600a:	f7ff fc38 	bl	800587e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601e:	f7fb fe2b 	bl	8001c78 <HAL_GetTick>
 8006022:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006026:	f7fb fe27 	bl	8001c78 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b0a      	cmp	r3, #10
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e056      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006038:	f7ff fc3d 	bl	80058b6 <LL_RCC_PLL_IsReady>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f1      	beq.n	8006026 <HAL_RCC_OscConfig+0x66a>
 8006042:	e04f      	b.n	80060e4 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006044:	f7ff fc29 	bl	800589a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006062:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fb fe04 	bl	8001c78 <HAL_GetTick>
 8006070:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006074:	f7fb fe00 	bl	8001c78 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b0a      	cmp	r3, #10
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e02f      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006086:	f7ff fc16 	bl	80058b6 <LL_RCC_PLL_IsReady>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f1      	bne.n	8006074 <HAL_RCC_OscConfig+0x6b8>
 8006090:	e028      	b.n	80060e4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e023      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800609e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f003 0203 	and.w	r2, r3, #3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d115      	bne.n	80060e0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	429a      	cmp	r2, r3
 80060c0:	d10e      	bne.n	80060e0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d106      	bne.n	80060e0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060dc:	429a      	cmp	r2, r3
 80060de:	d001      	beq.n	80060e4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	11c1808c 	.word	0x11c1808c

080060f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e10f      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006108:	4b89      	ldr	r3, [pc, #548]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d91b      	bls.n	800614e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006116:	4b86      	ldr	r3, [pc, #536]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f023 0207 	bic.w	r2, r3, #7
 800611e:	4984      	ldr	r1, [pc, #528]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	4313      	orrs	r3, r2
 8006124:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006126:	f7fb fda7 	bl	8001c78 <HAL_GetTick>
 800612a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612c:	e008      	b.n	8006140 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800612e:	f7fb fda3 	bl	8001c78 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e0f3      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006140:	4b7b      	ldr	r3, [pc, #492]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d1ef      	bne.n	800612e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d016      	beq.n	8006188 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fb10 	bl	8005784 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006164:	f7fb fd88 	bl	8001c78 <HAL_GetTick>
 8006168:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800616a:	e008      	b.n	800617e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800616c:	f7fb fd84 	bl	8001c78 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e0d4      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800617e:	f7ff fbd8 	bl	8005932 <LL_RCC_IsActiveFlag_HPRE>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f1      	beq.n	800616c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d016      	beq.n	80061c2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fb06 	bl	80057aa <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800619e:	f7fb fd6b 	bl	8001c78 <HAL_GetTick>
 80061a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061a6:	f7fb fd67 	bl	8001c78 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e0b7      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80061b8:	f7ff fbcc 	bl	8005954 <LL_RCC_IsActiveFlag_SHDHPRE>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f1      	beq.n	80061a6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d016      	beq.n	80061fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff faff 	bl	80057d6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061d8:	f7fb fd4e 	bl	8001c78 <HAL_GetTick>
 80061dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061e0:	f7fb fd4a 	bl	8001c78 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e09a      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061f2:	f7ff fbc1 	bl	8005978 <LL_RCC_IsActiveFlag_PPRE1>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0f1      	beq.n	80061e0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d017      	beq.n	8006238 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff faf4 	bl	80057fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006214:	f7fb fd30 	bl	8001c78 <HAL_GetTick>
 8006218:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800621c:	f7fb fd2c 	bl	8001c78 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e07c      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800622e:	f7ff fbb4 	bl	800599a <LL_RCC_IsActiveFlag_PPRE2>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f1      	beq.n	800621c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d043      	beq.n	80062cc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d106      	bne.n	800625a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800624c:	f7ff f981 	bl	8005552 <LL_RCC_HSE_IsReady>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11e      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e066      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b03      	cmp	r3, #3
 8006260:	d106      	bne.n	8006270 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006262:	f7ff fb28 	bl	80058b6 <LL_RCC_PLL_IsReady>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d113      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e05b      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006278:	f7ff fa1b 	bl	80056b2 <LL_RCC_MSI_IsReady>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e050      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006286:	f7ff f991 	bl	80055ac <LL_RCC_HSI_IsReady>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e049      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fa55 	bl	8005748 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629e:	f7fb fceb 	bl	8001c78 <HAL_GetTick>
 80062a2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a4:	e00a      	b.n	80062bc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a6:	f7fb fce7 	bl	8001c78 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e035      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062bc:	f7ff fa57 	bl	800576e <LL_RCC_GetSysClkSource>
 80062c0:	4602      	mov	r2, r0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d1ec      	bne.n	80062a6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062cc:	4b18      	ldr	r3, [pc, #96]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d21b      	bcs.n	8006312 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b15      	ldr	r3, [pc, #84]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 0207 	bic.w	r2, r3, #7
 80062e2:	4913      	ldr	r1, [pc, #76]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ea:	f7fb fcc5 	bl	8001c78 <HAL_GetTick>
 80062ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062f2:	f7fb fcc1 	bl	8001c78 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e011      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006304:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d1ef      	bne.n	80062f2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006312:	f000 f8b3 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8006316:	4603      	mov	r3, r0
 8006318:	4a06      	ldr	r2, [pc, #24]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 800631a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f7fb fc9f 	bl	8001c64 <HAL_InitTick>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	58004000 	.word	0x58004000
 8006334:	20000000 	.word	0x20000000
 8006338:	20000014 	.word	0x20000014

0800633c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800634a:	f7ff fa10 	bl	800576e <LL_RCC_GetSysClkSource>
 800634e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006350:	f7ff fae4 	bl	800591c <LL_RCC_PLL_GetMainSource>
 8006354:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0x2c>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b0c      	cmp	r3, #12
 8006360:	d139      	bne.n	80063d6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d136      	bne.n	80063d6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006368:	f7ff f9b3 	bl	80056d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d115      	bne.n	800639e <HAL_RCC_GetSysClockFreq+0x62>
 8006372:	f7ff f9ae 	bl	80056d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006376:	4603      	mov	r3, r0
 8006378:	2b01      	cmp	r3, #1
 800637a:	d106      	bne.n	800638a <HAL_RCC_GetSysClockFreq+0x4e>
 800637c:	f7ff f9b9 	bl	80056f2 <LL_RCC_MSI_GetRange>
 8006380:	4603      	mov	r3, r0
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	e005      	b.n	8006396 <HAL_RCC_GetSysClockFreq+0x5a>
 800638a:	f7ff f9bd 	bl	8005708 <LL_RCC_MSI_GetRangeAfterStandby>
 800638e:	4603      	mov	r3, r0
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	4a36      	ldr	r2, [pc, #216]	; (8006470 <HAL_RCC_GetSysClockFreq+0x134>)
 8006398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639c:	e014      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x8c>
 800639e:	f7ff f998 	bl	80056d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d106      	bne.n	80063b6 <HAL_RCC_GetSysClockFreq+0x7a>
 80063a8:	f7ff f9a3 	bl	80056f2 <LL_RCC_MSI_GetRange>
 80063ac:	4603      	mov	r3, r0
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	e005      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0x86>
 80063b6:	f7ff f9a7 	bl	8005708 <LL_RCC_MSI_GetRangeAfterStandby>
 80063ba:	4603      	mov	r3, r0
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	4a2b      	ldr	r2, [pc, #172]	; (8006470 <HAL_RCC_GetSysClockFreq+0x134>)
 80063c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d115      	bne.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063d4:	e012      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d102      	bne.n	80063e2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063dc:	4b25      	ldr	r3, [pc, #148]	; (8006474 <HAL_RCC_GetSysClockFreq+0x138>)
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e00c      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d109      	bne.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80063e8:	f7ff f886 	bl	80054f8 <LL_RCC_HSE_IsEnabledDiv2>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d102      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80063f2:	4b20      	ldr	r3, [pc, #128]	; (8006474 <HAL_RCC_GetSysClockFreq+0x138>)
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e001      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80063f8:	4b1f      	ldr	r3, [pc, #124]	; (8006478 <HAL_RCC_GetSysClockFreq+0x13c>)
 80063fa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063fc:	f7ff f9b7 	bl	800576e <LL_RCC_GetSysClkSource>
 8006400:	4603      	mov	r3, r0
 8006402:	2b0c      	cmp	r3, #12
 8006404:	d12f      	bne.n	8006466 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006406:	f7ff fa89 	bl	800591c <LL_RCC_PLL_GetMainSource>
 800640a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d003      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0xde>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d003      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0xe4>
 8006418:	e00d      	b.n	8006436 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800641a:	4b16      	ldr	r3, [pc, #88]	; (8006474 <HAL_RCC_GetSysClockFreq+0x138>)
 800641c:	60fb      	str	r3, [r7, #12]
        break;
 800641e:	e00d      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006420:	f7ff f86a 	bl	80054f8 <LL_RCC_HSE_IsEnabledDiv2>
 8006424:	4603      	mov	r3, r0
 8006426:	2b01      	cmp	r3, #1
 8006428:	d102      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <HAL_RCC_GetSysClockFreq+0x138>)
 800642c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800642e:	e005      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006430:	4b11      	ldr	r3, [pc, #68]	; (8006478 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006432:	60fb      	str	r3, [r7, #12]
        break;
 8006434:	e002      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	60fb      	str	r3, [r7, #12]
        break;
 800643a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800643c:	f7ff fa4c 	bl	80058d8 <LL_RCC_PLL_GetN>
 8006440:	4602      	mov	r2, r0
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	fb03 f402 	mul.w	r4, r3, r2
 8006448:	f7ff fa5d 	bl	8005906 <LL_RCC_PLL_GetDivider>
 800644c:	4603      	mov	r3, r0
 800644e:	091b      	lsrs	r3, r3, #4
 8006450:	3301      	adds	r3, #1
 8006452:	fbb4 f4f3 	udiv	r4, r4, r3
 8006456:	f7ff fa4b 	bl	80058f0 <LL_RCC_PLL_GetR>
 800645a:	4603      	mov	r3, r0
 800645c:	0f5b      	lsrs	r3, r3, #29
 800645e:	3301      	adds	r3, #1
 8006460:	fbb4 f3f3 	udiv	r3, r4, r3
 8006464:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006466:	697b      	ldr	r3, [r7, #20]
}
 8006468:	4618      	mov	r0, r3
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	bd90      	pop	{r4, r7, pc}
 8006470:	0801e2b4 	.word	0x0801e2b4
 8006474:	00f42400 	.word	0x00f42400
 8006478:	01e84800 	.word	0x01e84800

0800647c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800647c:	b598      	push	{r3, r4, r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006480:	f7ff ff5c 	bl	800633c <HAL_RCC_GetSysClockFreq>
 8006484:	4604      	mov	r4, r0
 8006486:	f7ff f9cc 	bl	8005822 <LL_RCC_GetAHBPrescaler>
 800648a:	4603      	mov	r3, r0
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	4a03      	ldr	r2, [pc, #12]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8006494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006498:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd98      	pop	{r3, r4, r7, pc}
 80064a0:	0801e254 	.word	0x0801e254

080064a4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a4:	b598      	push	{r3, r4, r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064a8:	f7ff ffe8 	bl	800647c <HAL_RCC_GetHCLKFreq>
 80064ac:	4604      	mov	r4, r0
 80064ae:	f7ff f9d0 	bl	8005852 <LL_RCC_GetAPB1Prescaler>
 80064b2:	4603      	mov	r3, r0
 80064b4:	0a1b      	lsrs	r3, r3, #8
 80064b6:	4a03      	ldr	r2, [pc, #12]	; (80064c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd98      	pop	{r3, r4, r7, pc}
 80064c4:	0801e294 	.word	0x0801e294

080064c8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064c8:	b598      	push	{r3, r4, r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80064cc:	f7ff ffd6 	bl	800647c <HAL_RCC_GetHCLKFreq>
 80064d0:	4604      	mov	r4, r0
 80064d2:	f7ff f9c9 	bl	8005868 <LL_RCC_GetAPB2Prescaler>
 80064d6:	4603      	mov	r3, r0
 80064d8:	0adb      	lsrs	r3, r3, #11
 80064da:	4a03      	ldr	r2, [pc, #12]	; (80064e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	bd98      	pop	{r3, r4, r7, pc}
 80064e8:	0801e294 	.word	0x0801e294

080064ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	4a10      	ldr	r2, [pc, #64]	; (8006540 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80064fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006502:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006504:	f7ff f998 	bl	8005838 <LL_RCC_GetAHB3Prescaler>
 8006508:	4603      	mov	r3, r0
 800650a:	091b      	lsrs	r3, r3, #4
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	4a0c      	ldr	r2, [pc, #48]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a09      	ldr	r2, [pc, #36]	; (8006548 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0c9c      	lsrs	r4, r3, #18
 8006528:	f7fe ff68 	bl	80053fc <HAL_PWREx_GetVoltageRange>
 800652c:	4603      	mov	r3, r0
 800652e:	4619      	mov	r1, r3
 8006530:	4620      	mov	r0, r4
 8006532:	f000 f80b 	bl	800654c <RCC_SetFlashLatency>
 8006536:	4603      	mov	r3, r0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	bd90      	pop	{r4, r7, pc}
 8006540:	0801e2b4 	.word	0x0801e2b4
 8006544:	0801e254 	.word	0x0801e254
 8006548:	431bde83 	.word	0x431bde83

0800654c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08e      	sub	sp, #56	; 0x38
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006556:	4a3a      	ldr	r2, [pc, #232]	; (8006640 <RCC_SetFlashLatency+0xf4>)
 8006558:	f107 0320 	add.w	r3, r7, #32
 800655c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006560:	6018      	str	r0, [r3, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006566:	4a37      	ldr	r2, [pc, #220]	; (8006644 <RCC_SetFlashLatency+0xf8>)
 8006568:	f107 0318 	add.w	r3, r7, #24
 800656c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006570:	6018      	str	r0, [r3, #0]
 8006572:	3304      	adds	r3, #4
 8006574:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006576:	4a34      	ldr	r2, [pc, #208]	; (8006648 <RCC_SetFlashLatency+0xfc>)
 8006578:	f107 030c 	add.w	r3, r7, #12
 800657c:	ca07      	ldmia	r2, {r0, r1, r2}
 800657e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658c:	d11b      	bne.n	80065c6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800658e:	2300      	movs	r3, #0
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
 8006592:	e014      	b.n	80065be <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	3338      	adds	r3, #56	; 0x38
 800659a:	443b      	add	r3, r7
 800659c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d807      	bhi.n	80065b8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	3338      	adds	r3, #56	; 0x38
 80065ae:	443b      	add	r3, r7
 80065b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065b6:	e021      	b.n	80065fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	3301      	adds	r3, #1
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d9e7      	bls.n	8006594 <RCC_SetFlashLatency+0x48>
 80065c4:	e01a      	b.n	80065fc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ca:	e014      	b.n	80065f6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	3338      	adds	r3, #56	; 0x38
 80065d2:	443b      	add	r3, r7
 80065d4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80065d8:	461a      	mov	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4293      	cmp	r3, r2
 80065de:	d807      	bhi.n	80065f0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	3338      	adds	r3, #56	; 0x38
 80065e6:	443b      	add	r3, r7
 80065e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ee:	e005      	b.n	80065fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	3301      	adds	r3, #1
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d9e7      	bls.n	80065cc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065fc:	4b13      	ldr	r3, [pc, #76]	; (800664c <RCC_SetFlashLatency+0x100>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f023 0207 	bic.w	r2, r3, #7
 8006604:	4911      	ldr	r1, [pc, #68]	; (800664c <RCC_SetFlashLatency+0x100>)
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	4313      	orrs	r3, r2
 800660a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800660c:	f7fb fb34 	bl	8001c78 <HAL_GetTick>
 8006610:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006612:	e008      	b.n	8006626 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006614:	f7fb fb30 	bl	8001c78 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e007      	b.n	8006636 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <RCC_SetFlashLatency+0x100>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006630:	429a      	cmp	r2, r3
 8006632:	d1ef      	bne.n	8006614 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3738      	adds	r7, #56	; 0x38
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	0801dae0 	.word	0x0801dae0
 8006644:	0801dae8 	.word	0x0801dae8
 8006648:	0801daf0 	.word	0x0801daf0
 800664c:	58004000 	.word	0x58004000

08006650 <LL_RCC_LSE_IsReady>:
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b02      	cmp	r3, #2
 8006662:	d101      	bne.n	8006668 <LL_RCC_LSE_IsReady+0x18>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <LL_RCC_LSE_IsReady+0x1a>
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <LL_RCC_SetUSARTClockSource>:
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800667a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	43db      	mvns	r3, r3
 8006688:	401a      	ands	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <LL_RCC_SetI2SClockSource>:
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <LL_RCC_SetLPUARTClockSource>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80066d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr

080066f6 <LL_RCC_SetI2CClockSource>:
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80066fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006702:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	091b      	lsrs	r3, r3, #4
 800670a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800670e:	43db      	mvns	r3, r3
 8006710:	401a      	ands	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800671a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800671e:	4313      	orrs	r3, r2
 8006720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <LL_RCC_SetLPTIMClockSource>:
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	43db      	mvns	r3, r3
 8006746:	401a      	ands	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <LL_RCC_SetRNGClockSource>:
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <LL_RCC_SetADCClockSource>:
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800679e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <LL_RCC_SetRTCClockSource>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80067bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <LL_RCC_GetRTCClockSource>:
{
 80067de:	b480      	push	{r7}
 80067e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80067e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <LL_RCC_ForceBackupDomainReset>:
{
 80067f6:	b480      	push	{r7}
 80067f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80067fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800680e:	bf00      	nop
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr

08006816 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006816:	b480      	push	{r7}
 8006818:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800681a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800682e:	bf00      	nop
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr
	...

08006838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006844:	2300      	movs	r3, #0
 8006846:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006848:	2300      	movs	r3, #0
 800684a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d058      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006858:	f7fe fd8e 	bl	8005378 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800685c:	f7fb fa0c 	bl	8001c78 <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006862:	e009      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006864:	f7fb fa08 	bl	8001c78 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d902      	bls.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	74fb      	strb	r3, [r7, #19]
        break;
 8006876:	e006      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006878:	4b7b      	ldr	r3, [pc, #492]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006884:	d1ee      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006886:	7cfb      	ldrb	r3, [r7, #19]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d13c      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800688c:	f7ff ffa7 	bl	80067de <LL_RCC_GetRTCClockSource>
 8006890:	4602      	mov	r2, r0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	429a      	cmp	r2, r3
 8006898:	d00f      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800689a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068a8:	f7ff ffa5 	bl	80067f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068ac:	f7ff ffb3 	bl	8006816 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d014      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fb f9d8 	bl	8001c78 <HAL_GetTick>
 80068c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80068ca:	e00b      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fb f9d4 	bl	8001c78 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d902      	bls.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	74fb      	strb	r3, [r7, #19]
            break;
 80068e2:	e004      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80068e4:	f7ff feb4 	bl	8006650 <LL_RCC_LSE_IsReady>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d1ee      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80068ee:	7cfb      	ldrb	r3, [r7, #19]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ff5b 	bl	80067b4 <LL_RCC_SetRTCClockSource>
 80068fe:	e004      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006900:	7cfb      	ldrb	r3, [r7, #19]
 8006902:	74bb      	strb	r3, [r7, #18]
 8006904:	e001      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fea9 	bl	8006672 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fe9e 	bl	8006672 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fec0 	bl	80066cc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fee6 	bl	800672e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fedb 	bl	800672e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fed0 	bl	800672e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fea9 	bl	80066f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fe9e 	bl	80066f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fe93 	bl	80066f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d011      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fe5e 	bl	80066a2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ee:	d107      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d010      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fea5 	bl	8006760 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d107      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a2c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d011      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fea3 	bl	800678a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006a5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	58000400 	.word	0x58000400

08006a6c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d068      	beq.n	8006b50 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fa fe22 	bl	80016dc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aa0:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006aa2:	22ca      	movs	r2, #202	; 0xca
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8006aa6:	4b2d      	ldr	r3, [pc, #180]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006aa8:	2253      	movs	r2, #83	; 0x53
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa0f 	bl	8006ed0 <RTC_EnterInitMode>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d13f      	bne.n	8006b3c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006abc:	4b27      	ldr	r3, [pc, #156]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	4a26      	ldr	r2, [pc, #152]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006ac2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aca:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006acc:	4b23      	ldr	r3, [pc, #140]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	4319      	orrs	r1, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	491e      	ldr	r1, [pc, #120]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	491a      	ldr	r1, [pc, #104]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006af6:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	430b      	orrs	r3, r1
 8006b08:	4914      	ldr	r1, [pc, #80]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa12 	bl	8006f38 <RTC_ExitInitMode>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10e      	bne.n	8006b3c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a19      	ldr	r1, [r3, #32]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	4319      	orrs	r1, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	430b      	orrs	r3, r1
 8006b36:	4909      	ldr	r1, [pc, #36]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b3c:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <HAL_RTC_Init+0xf0>)
 8006b3e:	22ff      	movs	r2, #255	; 0xff
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40002800 	.word	0x40002800

08006b60 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_RTC_SetAlarm_IT+0x1e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e0f3      	b.n	8006d66 <HAL_RTC_SetAlarm_IT+0x206>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006b8e:	4b78      	ldr	r3, [pc, #480]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b96:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9e:	d06a      	beq.n	8006c76 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d13a      	bne.n	8006c1c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006ba6:	4b72      	ldr	r3, [pc, #456]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d102      	bne.n	8006bb8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 f9f5 	bl	8006fb4 <RTC_ByteToBcd2>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 f9ee 	bl	8006fb4 <RTC_ByteToBcd2>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bdc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	789b      	ldrb	r3, [r3, #2]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f9e6 	bl	8006fb4 <RTC_ByteToBcd2>
 8006be8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bea:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	78db      	ldrb	r3, [r3, #3]
 8006bf2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006bf4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 f9d8 	bl	8006fb4 <RTC_ByteToBcd2>
 8006c04:	4603      	mov	r3, r0
 8006c06:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c08:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c10:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e02c      	b.n	8006c76 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006c24:	d00d      	beq.n	8006c42 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c2e:	d008      	beq.n	8006c42 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006c30:	4b4f      	ldr	r3, [pc, #316]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c4e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c54:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	78db      	ldrb	r3, [r3, #3]
 8006c5a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c5c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c64:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c66:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c6c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c76:	4b3e      	ldr	r3, [pc, #248]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c78:	22ca      	movs	r2, #202	; 0xca
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8006c7c:	4b3c      	ldr	r3, [pc, #240]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c7e:	2253      	movs	r2, #83	; 0x53
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c8a:	d12c      	bne.n	8006ce6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c8c:	4b38      	ldr	r3, [pc, #224]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	4a37      	ldr	r2, [pc, #220]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c96:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006c98:	4b35      	ldr	r3, [pc, #212]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	4930      	ldr	r1, [pc, #192]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	644b      	str	r3, [r1, #68]	; 0x44
 8006cb4:	e006      	b.n	8006cc4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006cb6:	4a2e      	ldr	r2, [pc, #184]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006cbc:	4a2c      	ldr	r2, [pc, #176]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006cc4:	4a2a      	ldr	r2, [pc, #168]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f043 0201 	orr.w	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006cd8:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	4a24      	ldr	r2, [pc, #144]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cde:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006ce2:	6193      	str	r3, [r2, #24]
 8006ce4:	e02b      	b.n	8006d3e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006ce6:	4b22      	ldr	r3, [pc, #136]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	4a21      	ldr	r2, [pc, #132]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cec:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006cf0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006cf2:	4b1f      	ldr	r3, [pc, #124]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfe:	d107      	bne.n	8006d10 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	699a      	ldr	r2, [r3, #24]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	4919      	ldr	r1, [pc, #100]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d0e:	e006      	b.n	8006d1e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006d10:	4a17      	ldr	r2, [pc, #92]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006d16:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006d1e:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	f043 0202 	orr.w	r2, r3, #2
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006d32:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	4a0e      	ldr	r2, [pc, #56]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d38:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006d3c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <HAL_RTC_SetAlarm_IT+0x214>)
 8006d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d44:	4a0b      	ldr	r2, [pc, #44]	; (8006d74 <HAL_RTC_SetAlarm_IT+0x214>)
 8006d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d4e:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d50:	22ff      	movs	r2, #255	; 0xff
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd90      	pop	{r4, r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40002800 	.word	0x40002800
 8006d74:	58000800 	.word	0x58000800

08006d78 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_RTC_DeactivateAlarm+0x18>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e048      	b.n	8006e22 <HAL_RTC_DeactivateAlarm+0xaa>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006da0:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006da2:	22ca      	movs	r2, #202	; 0xca
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24
 8006da6:	4b21      	ldr	r3, [pc, #132]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006da8:	2253      	movs	r2, #83	; 0x53
 8006daa:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db2:	d115      	bne.n	8006de0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006db4:	4b1d      	ldr	r3, [pc, #116]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dbe:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc4:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dca:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	f023 0201 	bic.w	r2, r3, #1
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006dd8:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006dde:	e014      	b.n	8006e0a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006de0:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006de6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006dea:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006dec:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	4a0e      	ldr	r2, [pc, #56]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006df2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	f023 0202 	bic.w	r2, r3, #2
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e04:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e06:	2202      	movs	r2, #2
 8006e08:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e0a:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e0c:	22ff      	movs	r2, #255	; 0xff
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	40002800 	.word	0x40002800

08006e30 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006e38:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	4013      	ands	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fb f892 	bl	8001f7e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e66:	2202      	movs	r2, #2
 8006e68:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f94a 	bl	8007104 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40002800 	.word	0x40002800

08006e84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <HAL_RTC_WaitForSynchro+0x48>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	4a0e      	ldr	r2, [pc, #56]	; (8006ecc <HAL_RTC_WaitForSynchro+0x48>)
 8006e92:	f023 0320 	bic.w	r3, r3, #32
 8006e96:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006e98:	f7fa feee 	bl	8001c78 <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e9e:	e009      	b.n	8006eb4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ea0:	f7fa feea 	bl	8001c78 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eae:	d901      	bls.n	8006eb4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e006      	b.n	8006ec2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006eb4:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <HAL_RTC_WaitForSynchro+0x48>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0ef      	beq.n	8006ea0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	40002800 	.word	0x40002800

08006ed0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006edc:	4b15      	ldr	r3, [pc, #84]	; (8006f34 <RTC_EnterInitMode+0x64>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d120      	bne.n	8006f2a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ee8:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <RTC_EnterInitMode+0x64>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	4a11      	ldr	r2, [pc, #68]	; (8006f34 <RTC_EnterInitMode+0x64>)
 8006eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006ef4:	f7fa fec0 	bl	8001c78 <HAL_GetTick>
 8006ef8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006efa:	e00d      	b.n	8006f18 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006efc:	f7fa febc 	bl	8001c78 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0a:	d905      	bls.n	8006f18 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2203      	movs	r2, #3
 8006f14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <RTC_EnterInitMode+0x64>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <RTC_EnterInitMode+0x5a>
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d1e8      	bne.n	8006efc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40002800 	.word	0x40002800

08006f38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f44:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <RTC_ExitInitMode+0x78>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <RTC_ExitInitMode+0x78>)
 8006f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006f50:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <RTC_ExitInitMode+0x78>)
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10c      	bne.n	8006f76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff ff91 	bl	8006e84 <HAL_RTC_WaitForSynchro>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01e      	beq.n	8006fa6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	73fb      	strb	r3, [r7, #15]
 8006f74:	e017      	b.n	8006fa6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f76:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <RTC_ExitInitMode+0x78>)
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	4a0d      	ldr	r2, [pc, #52]	; (8006fb0 <RTC_ExitInitMode+0x78>)
 8006f7c:	f023 0320 	bic.w	r3, r3, #32
 8006f80:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff ff7e 	bl	8006e84 <HAL_RTC_WaitForSynchro>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2203      	movs	r2, #3
 8006f92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <RTC_ExitInitMode+0x78>)
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	4a04      	ldr	r2, [pc, #16]	; (8006fb0 <RTC_ExitInitMode+0x78>)
 8006fa0:	f043 0320 	orr.w	r3, r3, #32
 8006fa4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40002800 	.word	0x40002800

08006fb4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006fc6:	e005      	b.n	8006fd4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	3b0a      	subs	r3, #10
 8006fd2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	2b09      	cmp	r3, #9
 8006fd8:	d8f6      	bhi.n	8006fc8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	7afb      	ldrb	r3, [r7, #11]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	b2db      	uxtb	r3, r3
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr
	...

08006ff4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_RTCEx_EnableBypassShadow+0x16>
 8007006:	2302      	movs	r3, #2
 8007008:	e01f      	b.n	800704a <HAL_RTCEx_EnableBypassShadow+0x56>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800701c:	22ca      	movs	r2, #202	; 0xca
 800701e:	625a      	str	r2, [r3, #36]	; 0x24
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007022:	2253      	movs	r2, #83	; 0x53
 8007024:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800702c:	f043 0320 	orr.w	r3, r3, #32
 8007030:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007032:	4b08      	ldr	r3, [pc, #32]	; (8007054 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr
 8007054:	40002800 	.word	0x40002800

08007058 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_RTCEx_SetSSRU_IT+0x16>
 800706a:	2302      	movs	r3, #2
 800706c:	e027      	b.n	80070be <HAL_RTCEx_SetSSRU_IT+0x66>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800707e:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007080:	22ca      	movs	r2, #202	; 0xca
 8007082:	625a      	str	r2, [r3, #36]	; 0x24
 8007084:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007086:	2253      	movs	r2, #83	; 0x53
 8007088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007094:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800709c:	4a0b      	ldr	r2, [pc, #44]	; (80070cc <HAL_RTCEx_SetSSRU_IT+0x74>)
 800709e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070a6:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80070a8:	22ff      	movs	r2, #255	; 0xff
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr
 80070c8:	40002800 	.word	0x40002800
 80070cc:	58000800 	.word	0x58000800

080070d0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80070d8:	4b09      	ldr	r3, [pc, #36]	; (8007100 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80070da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80070e6:	2240      	movs	r2, #64	; 0x40
 80070e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fa ff51 	bl	8001f92 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40002800 	.word	0x40002800

08007104 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr
	...

08007118 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007124:	4b07      	ldr	r3, [pc, #28]	; (8007144 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007126:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4413      	add	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	601a      	str	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	371c      	adds	r7, #28
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	4000b100 	.word	0x4000b100

08007148 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <HAL_RTCEx_BKUPRead+0x28>)
 8007154:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	4000b100 	.word	0x4000b100

08007174 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007184:	4904      	ldr	r1, [pc, #16]	; (8007198 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4313      	orrs	r3, r2
 800718a:	608b      	str	r3, [r1, #8]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	58000400 	.word	0x58000400

0800719c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80071a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a6:	4a04      	ldr	r2, [pc, #16]	; (80071b8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80071a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071b0:	bf00      	nop
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr
 80071b8:	58000400 	.word	0x58000400

080071bc <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80071c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c6:	4a04      	ldr	r2, [pc, #16]	; (80071d8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80071c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071d0:	bf00      	nop
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr
 80071d8:	58000400 	.word	0x58000400

080071dc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80071e0:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80071e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071e6:	619a      	str	r2, [r3, #24]
}
 80071e8:	bf00      	nop
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr
 80071f0:	58000400 	.word	0x58000400

080071f4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80071f8:	4b06      	ldr	r3, [pc, #24]	; (8007214 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b02      	cmp	r3, #2
 8007202:	d101      	bne.n	8007208 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	58000400 	.word	0x58000400

08007218 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b04      	cmp	r3, #4
 8007226:	d101      	bne.n	800722c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	58000400 	.word	0x58000400

0800723c <LL_RCC_RF_DisableReset>:
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800724c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007254:	bf00      	nop
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr

0800725c <LL_RCC_IsRFUnderReset>:
{
 800725c:	b480      	push	{r7}
 800725e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800726c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007270:	d101      	bne.n	8007276 <LL_RCC_IsRFUnderReset+0x1a>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <LL_RCC_IsRFUnderReset+0x1c>
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <LL_EXTI_EnableIT_32_63+0x24>)
 800728a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800728e:	4905      	ldr	r1, [pc, #20]	; (80072a4 <LL_EXTI_EnableIT_32_63+0x24>)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	58000800 	.word	0x58000800

080072a8 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	73fb      	strb	r3, [r7, #15]
    return status;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	e04b      	b.n	8007356 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	799b      	ldrb	r3, [r3, #6]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d105      	bne.n	80072d8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fa fb2e 	bl	8001934 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80072de:	f7ff ffad 	bl	800723c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80072e2:	4b1f      	ldr	r3, [pc, #124]	; (8007360 <HAL_SUBGHZ_Init+0xb8>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	4613      	mov	r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	0cdb      	lsrs	r3, r3, #19
 80072f0:	2264      	movs	r2, #100	; 0x64
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	609a      	str	r2, [r3, #8]
      break;
 8007308:	e007      	b.n	800731a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	3b01      	subs	r3, #1
 800730e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007310:	f7ff ffa4 	bl	800725c <LL_RCC_IsRFUnderReset>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1ee      	bne.n	80072f8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800731a:	f7ff ff3f 	bl	800719c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800731e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007322:	f7ff ffad 	bl	8007280 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007326:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800732a:	f7ff ff23 	bl	8007174 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800732e:	f7ff ff55 	bl	80071dc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f000 faad 	bl	800789c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	719a      	strb	r2, [r3, #6]

  return status;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000000 	.word	0x20000000

08007364 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	607a      	str	r2, [r7, #4]
 800736e:	461a      	mov	r2, r3
 8007370:	460b      	mov	r3, r1
 8007372:	817b      	strh	r3, [r7, #10]
 8007374:	4613      	mov	r3, r2
 8007376:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	799b      	ldrb	r3, [r3, #6]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b01      	cmp	r3, #1
 8007380:	d14a      	bne.n	8007418 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	795b      	ldrb	r3, [r3, #5]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d101      	bne.n	800738e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800738a:	2302      	movs	r3, #2
 800738c:	e045      	b.n	800741a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2202      	movs	r2, #2
 8007398:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fb4c 	bl	8007a38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80073a0:	f7ff ff0c 	bl	80071bc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80073a4:	210d      	movs	r1, #13
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fa98 	bl	80078dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80073ac:	897b      	ldrh	r3, [r7, #10]
 80073ae:	0a1b      	lsrs	r3, r3, #8
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 fa90 	bl	80078dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80073bc:	897b      	ldrh	r3, [r7, #10]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	4619      	mov	r1, r3
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fa8a 	bl	80078dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80073c8:	2300      	movs	r3, #0
 80073ca:	82bb      	strh	r3, [r7, #20]
 80073cc:	e00a      	b.n	80073e4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80073ce:	8abb      	ldrh	r3, [r7, #20]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	4619      	mov	r1, r3
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fa7f 	bl	80078dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80073de:	8abb      	ldrh	r3, [r7, #20]
 80073e0:	3301      	adds	r3, #1
 80073e2:	82bb      	strh	r3, [r7, #20]
 80073e4:	8aba      	ldrh	r2, [r7, #20]
 80073e6:	893b      	ldrh	r3, [r7, #8]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d3f0      	bcc.n	80073ce <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80073ec:	f7ff fed6 	bl	800719c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fb45 	bl	8007a80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
 8007402:	e001      	b.n	8007408 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	715a      	strb	r2, [r3, #5]

    return status;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	e000      	b.n	800741a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007418:	2302      	movs	r3, #2
  }
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b088      	sub	sp, #32
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	461a      	mov	r2, r3
 800742e:	460b      	mov	r3, r1
 8007430:	817b      	strh	r3, [r7, #10]
 8007432:	4613      	mov	r3, r2
 8007434:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	799b      	ldrb	r3, [r3, #6]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d14a      	bne.n	80074da <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	795b      	ldrb	r3, [r3, #5]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800744c:	2302      	movs	r3, #2
 800744e:	e045      	b.n	80074dc <HAL_SUBGHZ_ReadRegisters+0xba>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 faee 	bl	8007a38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800745c:	f7ff feae 	bl	80071bc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007460:	211d      	movs	r1, #29
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fa3a 	bl	80078dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007468:	897b      	ldrh	r3, [r7, #10]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fa32 	bl	80078dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007478:	897b      	ldrh	r3, [r7, #10]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	4619      	mov	r1, r3
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fa2c 	bl	80078dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007484:	2100      	movs	r1, #0
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fa28 	bl	80078dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800748c:	2300      	movs	r3, #0
 800748e:	82fb      	strh	r3, [r7, #22]
 8007490:	e009      	b.n	80074a6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007492:	69b9      	ldr	r1, [r7, #24]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fa77 	bl	8007988 <SUBGHZSPI_Receive>
      pData++;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3301      	adds	r3, #1
 800749e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80074a0:	8afb      	ldrh	r3, [r7, #22]
 80074a2:	3301      	adds	r3, #1
 80074a4:	82fb      	strh	r3, [r7, #22]
 80074a6:	8afa      	ldrh	r2, [r7, #22]
 80074a8:	893b      	ldrh	r3, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d3f1      	bcc.n	8007492 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074ae:	f7ff fe75 	bl	800719c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fae4 	bl	8007a80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e001      	b.n	80074ca <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	715a      	strb	r2, [r3, #5]

    return status;
 80074d6:	7ffb      	ldrb	r3, [r7, #31]
 80074d8:	e000      	b.n	80074dc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80074da:	2302      	movs	r3, #2
  }
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	461a      	mov	r2, r3
 80074f0:	460b      	mov	r3, r1
 80074f2:	72fb      	strb	r3, [r7, #11]
 80074f4:	4613      	mov	r3, r2
 80074f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	799b      	ldrb	r3, [r3, #6]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d14a      	bne.n	8007598 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	795b      	ldrb	r3, [r3, #5]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800750a:	2302      	movs	r3, #2
 800750c:	e045      	b.n	800759a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fa8f 	bl	8007a38 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	2b84      	cmp	r3, #132	; 0x84
 800751e:	d002      	beq.n	8007526 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	2b94      	cmp	r3, #148	; 0x94
 8007524:	d103      	bne.n	800752e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	711a      	strb	r2, [r3, #4]
 800752c:	e002      	b.n	8007534 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007534:	f7ff fe42 	bl	80071bc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007538:	7afb      	ldrb	r3, [r7, #11]
 800753a:	4619      	mov	r1, r3
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f9cd 	bl	80078dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007542:	2300      	movs	r3, #0
 8007544:	82bb      	strh	r3, [r7, #20]
 8007546:	e00a      	b.n	800755e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007548:	8abb      	ldrh	r3, [r7, #20]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	4619      	mov	r1, r3
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f9c2 	bl	80078dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007558:	8abb      	ldrh	r3, [r7, #20]
 800755a:	3301      	adds	r3, #1
 800755c:	82bb      	strh	r3, [r7, #20]
 800755e:	8aba      	ldrh	r2, [r7, #20]
 8007560:	893b      	ldrh	r3, [r7, #8]
 8007562:	429a      	cmp	r2, r3
 8007564:	d3f0      	bcc.n	8007548 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007566:	f7ff fe19 	bl	800719c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800756a:	7afb      	ldrb	r3, [r7, #11]
 800756c:	2b84      	cmp	r3, #132	; 0x84
 800756e:	d002      	beq.n	8007576 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fa85 	bl	8007a80 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
 8007582:	e001      	b.n	8007588 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	715a      	strb	r2, [r3, #5]

    return status;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	e000      	b.n	800759a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007598:	2302      	movs	r3, #2
  }
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b088      	sub	sp, #32
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	461a      	mov	r2, r3
 80075ae:	460b      	mov	r3, r1
 80075b0:	72fb      	strb	r3, [r7, #11]
 80075b2:	4613      	mov	r3, r2
 80075b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	799b      	ldrb	r3, [r3, #6]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d13d      	bne.n	8007640 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	795b      	ldrb	r3, [r3, #5]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e038      	b.n	8007642 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fa2e 	bl	8007a38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075dc:	f7ff fdee 	bl	80071bc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	4619      	mov	r1, r3
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f979 	bl	80078dc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80075ea:	2100      	movs	r1, #0
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f975 	bl	80078dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80075f2:	2300      	movs	r3, #0
 80075f4:	82fb      	strh	r3, [r7, #22]
 80075f6:	e009      	b.n	800760c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80075f8:	69b9      	ldr	r1, [r7, #24]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 f9c4 	bl	8007988 <SUBGHZSPI_Receive>
      pData++;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	3301      	adds	r3, #1
 8007604:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007606:	8afb      	ldrh	r3, [r7, #22]
 8007608:	3301      	adds	r3, #1
 800760a:	82fb      	strh	r3, [r7, #22]
 800760c:	8afa      	ldrh	r2, [r7, #22]
 800760e:	893b      	ldrh	r3, [r7, #8]
 8007610:	429a      	cmp	r2, r3
 8007612:	d3f1      	bcc.n	80075f8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007614:	f7ff fdc2 	bl	800719c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fa31 	bl	8007a80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	77fb      	strb	r3, [r7, #31]
 800762a:	e001      	b.n	8007630 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	715a      	strb	r2, [r3, #5]

    return status;
 800763c:	7ffb      	ldrb	r3, [r7, #31]
 800763e:	e000      	b.n	8007642 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007640:	2302      	movs	r3, #2
  }
}
 8007642:	4618      	mov	r0, r3
 8007644:	3720      	adds	r7, #32
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	461a      	mov	r2, r3
 8007656:	460b      	mov	r3, r1
 8007658:	72fb      	strb	r3, [r7, #11]
 800765a:	4613      	mov	r3, r2
 800765c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	799b      	ldrb	r3, [r3, #6]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b01      	cmp	r3, #1
 8007666:	d13e      	bne.n	80076e6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	795b      	ldrb	r3, [r3, #5]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007670:	2302      	movs	r3, #2
 8007672:	e039      	b.n	80076e8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f9dc 	bl	8007a38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007680:	f7ff fd9c 	bl	80071bc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007684:	210e      	movs	r1, #14
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f928 	bl	80078dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	4619      	mov	r1, r3
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f923 	bl	80078dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007696:	2300      	movs	r3, #0
 8007698:	82bb      	strh	r3, [r7, #20]
 800769a:	e00a      	b.n	80076b2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800769c:	8abb      	ldrh	r3, [r7, #20]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	4619      	mov	r1, r3
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f918 	bl	80078dc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076ac:	8abb      	ldrh	r3, [r7, #20]
 80076ae:	3301      	adds	r3, #1
 80076b0:	82bb      	strh	r3, [r7, #20]
 80076b2:	8aba      	ldrh	r2, [r7, #20]
 80076b4:	893b      	ldrh	r3, [r7, #8]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d3f0      	bcc.n	800769c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076ba:	f7ff fd6f 	bl	800719c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f9de 	bl	8007a80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
 80076d0:	e001      	b.n	80076d6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	715a      	strb	r2, [r3, #5]

    return status;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	e000      	b.n	80076e8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
  }
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	461a      	mov	r2, r3
 80076fc:	460b      	mov	r3, r1
 80076fe:	72fb      	strb	r3, [r7, #11]
 8007700:	4613      	mov	r3, r2
 8007702:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	799b      	ldrb	r3, [r3, #6]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b01      	cmp	r3, #1
 8007710:	d141      	bne.n	8007796 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	795b      	ldrb	r3, [r3, #5]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800771a:	2302      	movs	r3, #2
 800771c:	e03c      	b.n	8007798 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f987 	bl	8007a38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800772a:	f7ff fd47 	bl	80071bc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800772e:	211e      	movs	r1, #30
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f8d3 	bl	80078dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007736:	7afb      	ldrb	r3, [r7, #11]
 8007738:	4619      	mov	r1, r3
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 f8ce 	bl	80078dc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007740:	2100      	movs	r1, #0
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f8ca 	bl	80078dc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007748:	2300      	movs	r3, #0
 800774a:	82fb      	strh	r3, [r7, #22]
 800774c:	e009      	b.n	8007762 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800774e:	69b9      	ldr	r1, [r7, #24]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f919 	bl	8007988 <SUBGHZSPI_Receive>
      pData++;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	3301      	adds	r3, #1
 800775a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800775c:	8afb      	ldrh	r3, [r7, #22]
 800775e:	3301      	adds	r3, #1
 8007760:	82fb      	strh	r3, [r7, #22]
 8007762:	8afa      	ldrh	r2, [r7, #22]
 8007764:	893b      	ldrh	r3, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d3f1      	bcc.n	800774e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800776a:	f7ff fd17 	bl	800719c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f986 	bl	8007a80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	77fb      	strb	r3, [r7, #31]
 8007780:	e001      	b.n	8007786 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	715a      	strb	r2, [r3, #5]

    return status;
 8007792:	7ffb      	ldrb	r3, [r7, #31]
 8007794:	e000      	b.n	8007798 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
  }
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80077a8:	2300      	movs	r3, #0
 80077aa:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80077ac:	f107 020c 	add.w	r2, r7, #12
 80077b0:	2302      	movs	r3, #2
 80077b2:	2112      	movs	r1, #18
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff fef4 	bl	80075a2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80077ba:	7b3b      	ldrb	r3, [r7, #12]
 80077bc:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80077be:	89fb      	ldrh	r3, [r7, #14]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	b21a      	sxth	r2, r3
 80077c4:	7b7b      	ldrb	r3, [r7, #13]
 80077c6:	b21b      	sxth	r3, r3
 80077c8:	4313      	orrs	r3, r2
 80077ca:	b21b      	sxth	r3, r3
 80077cc:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80077ce:	89fb      	ldrh	r3, [r7, #14]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f014 fba3 	bl	801bf24 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80077de:	89fb      	ldrh	r3, [r7, #14]
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f014 fba8 	bl	801bf40 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80077f0:	89fb      	ldrh	r3, [r7, #14]
 80077f2:	089b      	lsrs	r3, r3, #2
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f014 fbf7 	bl	801bff0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007802:	89fb      	ldrh	r3, [r7, #14]
 8007804:	08db      	lsrs	r3, r3, #3
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f014 fbfc 	bl	801c00c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007814:	89fb      	ldrh	r3, [r7, #14]
 8007816:	091b      	lsrs	r3, r3, #4
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f014 fc01 	bl	801c028 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007826:	89fb      	ldrh	r3, [r7, #14]
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f014 fbce 	bl	801bfd4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007838:	89fb      	ldrh	r3, [r7, #14]
 800783a:	099b      	lsrs	r3, r3, #6
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f014 fb89 	bl	801bf5c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800784a:	89fb      	ldrh	r3, [r7, #14]
 800784c:	09db      	lsrs	r3, r3, #7
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00e      	beq.n	8007874 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007856:	89fb      	ldrh	r3, [r7, #14]
 8007858:	0a1b      	lsrs	r3, r3, #8
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007862:	2101      	movs	r1, #1
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f014 fb87 	bl	801bf78 <HAL_SUBGHZ_CADStatusCallback>
 800786a:	e003      	b.n	8007874 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800786c:	2100      	movs	r1, #0
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f014 fb82 	bl	801bf78 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	0a5b      	lsrs	r3, r3, #9
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f014 fb97 	bl	801bfb4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007886:	f107 020c 	add.w	r2, r7, #12
 800788a:	2302      	movs	r3, #2
 800788c:	2102      	movs	r1, #2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff fe28 	bl	80074e4 <HAL_SUBGHZ_ExecSetCmd>
}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80078a4:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <SUBGHZSPI_Init+0x3c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a0b      	ldr	r2, [pc, #44]	; (80078d8 <SUBGHZSPI_Init+0x3c>)
 80078aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ae:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80078b0:	4a09      	ldr	r2, [pc, #36]	; (80078d8 <SUBGHZSPI_Init+0x3c>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80078b8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80078ba:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <SUBGHZSPI_Init+0x3c>)
 80078bc:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80078c0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <SUBGHZSPI_Init+0x3c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <SUBGHZSPI_Init+0x3c>)
 80078c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078cc:	6013      	str	r3, [r2, #0]
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr
 80078d8:	58010000 	.word	0x58010000

080078dc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80078ec:	4b23      	ldr	r3, [pc, #140]	; (800797c <SUBGHZSPI_Transmit+0xa0>)
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	0cdb      	lsrs	r3, r3, #19
 80078fa:	2264      	movs	r2, #100	; 0x64
 80078fc:	fb02 f303 	mul.w	r3, r2, r3
 8007900:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d105      	bne.n	8007914 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	609a      	str	r2, [r3, #8]
      break;
 8007912:	e008      	b.n	8007926 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3b01      	subs	r3, #1
 8007918:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800791a:	4b19      	ldr	r3, [pc, #100]	; (8007980 <SUBGHZSPI_Transmit+0xa4>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b02      	cmp	r3, #2
 8007924:	d1ed      	bne.n	8007902 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007926:	4b17      	ldr	r3, [pc, #92]	; (8007984 <SUBGHZSPI_Transmit+0xa8>)
 8007928:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <SUBGHZSPI_Transmit+0xa0>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	0cdb      	lsrs	r3, r3, #19
 800793e:	2264      	movs	r2, #100	; 0x64
 8007940:	fb02 f303 	mul.w	r3, r2, r3
 8007944:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	609a      	str	r2, [r3, #8]
      break;
 8007956:	e008      	b.n	800796a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3b01      	subs	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800795e:	4b08      	ldr	r3, [pc, #32]	; (8007980 <SUBGHZSPI_Transmit+0xa4>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b01      	cmp	r3, #1
 8007968:	d1ed      	bne.n	8007946 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <SUBGHZSPI_Transmit+0xa4>)
 800796c:	68db      	ldr	r3, [r3, #12]

  return status;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007970:	4618      	mov	r0, r3
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	bc80      	pop	{r7}
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000000 	.word	0x20000000
 8007980:	58010000 	.word	0x58010000
 8007984:	5801000c 	.word	0x5801000c

08007988 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007996:	4b25      	ldr	r3, [pc, #148]	; (8007a2c <SUBGHZSPI_Receive+0xa4>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4613      	mov	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	0cdb      	lsrs	r3, r3, #19
 80079a4:	2264      	movs	r2, #100	; 0x64
 80079a6:	fb02 f303 	mul.w	r3, r2, r3
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d105      	bne.n	80079be <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	609a      	str	r2, [r3, #8]
      break;
 80079bc:	e008      	b.n	80079d0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80079c4:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <SUBGHZSPI_Receive+0xa8>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d1ed      	bne.n	80079ac <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80079d0:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <SUBGHZSPI_Receive+0xac>)
 80079d2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	22ff      	movs	r2, #255	; 0xff
 80079d8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <SUBGHZSPI_Receive+0xa4>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	0cdb      	lsrs	r3, r3, #19
 80079e8:	2264      	movs	r2, #100	; 0x64
 80079ea:	fb02 f303 	mul.w	r3, r2, r3
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d105      	bne.n	8007a02 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	609a      	str	r2, [r3, #8]
      break;
 8007a00:	e008      	b.n	8007a14 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007a08:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <SUBGHZSPI_Receive+0xa8>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d1ed      	bne.n	80079f0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007a14:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <SUBGHZSPI_Receive+0xa8>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	701a      	strb	r2, [r3, #0]

  return status;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	371c      	adds	r7, #28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bc80      	pop	{r7}
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	20000000 	.word	0x20000000
 8007a30:	58010000 	.word	0x58010000
 8007a34:	5801000c 	.word	0x5801000c

08007a38 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	791b      	ldrb	r3, [r3, #4]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d111      	bne.n	8007a6c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007a48:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <SUBGHZ_CheckDeviceReady+0x44>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	4413      	add	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a58:	f7ff fbb0 	bl	80071bc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1f9      	bne.n	8007a5c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a68:	f7ff fb98 	bl	800719c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f807 	bl	8007a80 <SUBGHZ_WaitOnBusy>
 8007a72:	4603      	mov	r3, r0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20000000 	.word	0x20000000

08007a80 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007a8c:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <SUBGHZ_WaitOnBusy+0x58>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	4613      	mov	r3, r2
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	4413      	add	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	0d1b      	lsrs	r3, r3, #20
 8007a9a:	2264      	movs	r2, #100	; 0x64
 8007a9c:	fb02 f303 	mul.w	r3, r2, r3
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007aa2:	f7ff fbb9 	bl	8007218 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007aa6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d105      	bne.n	8007aba <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	609a      	str	r2, [r3, #8]
      break;
 8007ab8:	e009      	b.n	8007ace <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007ac0:	f7ff fb98 	bl	80071f4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d0e9      	beq.n	8007aa2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20000000 	.word	0x20000000

08007adc <LL_RCC_GetUSARTClockSource>:
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	401a      	ands	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	4313      	orrs	r3, r2
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <LL_RCC_GetLPUARTClockSource>:
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4013      	ands	r3, r2
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr

08007b1e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e042      	b.n	8007bb6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fa fba4 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2224      	movs	r2, #36	; 0x24
 8007b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc4b 	bl	80083fc <UART_SetConfig>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e022      	b.n	8007bb6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 feb3 	bl	80088e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0201 	orr.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 ff39 	bl	8008a26 <UART_CheckIdleState>
 8007bb4:	4603      	mov	r3, r0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	; 0x28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	d142      	bne.n	8007c5e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <HAL_UART_Receive_IT+0x24>
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e03b      	b.n	8007c60 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UART_Receive_IT+0x36>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e034      	b.n	8007c60 <HAL_UART_Receive_IT+0xa0>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <HAL_UART_Receive_IT+0xa8>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01f      	beq.n	8007c4e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d018      	beq.n	8007c4e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	623b      	str	r3, [r7, #32]
 8007c3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	69f9      	ldr	r1, [r7, #28]
 8007c40:	6a3a      	ldr	r2, [r7, #32]
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e6      	bne.n	8007c1c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	461a      	mov	r2, r3
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fff9 	bl	8008c4c <UART_Start_Receive_IT>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	e000      	b.n	8007c60 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c5e:	2302      	movs	r3, #2
  }
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3728      	adds	r7, #40	; 0x28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	40008000 	.word	0x40008000

08007c6c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08a      	sub	sp, #40	; 0x28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d17a      	bne.n	8007d7a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <HAL_UART_Transmit_DMA+0x24>
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e073      	b.n	8007d7c <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Transmit_DMA+0x36>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e06c      	b.n	8007d7c <HAL_UART_Transmit_DMA+0x110>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	88fa      	ldrh	r2, [r7, #6]
 8007cb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2221      	movs	r2, #33	; 0x21
 8007ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d02c      	beq.n	8007d32 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cdc:	4a29      	ldr	r2, [pc, #164]	; (8007d84 <HAL_UART_Transmit_DMA+0x118>)
 8007cde:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce4:	4a28      	ldr	r2, [pc, #160]	; (8007d88 <HAL_UART_Transmit_DMA+0x11c>)
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cec:	4a27      	ldr	r2, [pc, #156]	; (8007d8c <HAL_UART_Transmit_DMA+0x120>)
 8007cee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d00:	4619      	mov	r1, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3328      	adds	r3, #40	; 0x28
 8007d08:	461a      	mov	r2, r3
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	f7fc f90a 	bl	8003f24 <HAL_DMA_Start_IT>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2210      	movs	r2, #16
 8007d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e024      	b.n	8007d7c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2240      	movs	r2, #64	; 0x40
 8007d38:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3308      	adds	r3, #8
 8007d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	613b      	str	r3, [r7, #16]
   return(result);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3308      	adds	r3, #8
 8007d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d62:	623a      	str	r2, [r7, #32]
 8007d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	69f9      	ldr	r1, [r7, #28]
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e5      	bne.n	8007d42 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e000      	b.n	8007d7c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007d7a:	2302      	movs	r3, #2
  }
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3728      	adds	r7, #40	; 0x28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	08008f9b 	.word	0x08008f9b
 8007d88:	08009035 	.word	0x08009035
 8007d8c:	08009051 	.word	0x08009051

08007d90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b0ba      	sub	sp, #232	; 0xe8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007db6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007dba:	f640 030f 	movw	r3, #2063	; 0x80f
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11b      	bne.n	8007e04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd0:	f003 0320 	and.w	r3, r3, #32
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d015      	beq.n	8007e04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ddc:	f003 0320 	and.w	r3, r3, #32
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 82d6 	beq.w	80083a6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
      }
      return;
 8007e02:	e2d0      	b.n	80083a6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 811f 	beq.w	800804c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e12:	4b8b      	ldr	r3, [pc, #556]	; (8008040 <HAL_UART_IRQHandler+0x2b0>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d106      	bne.n	8007e28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e1e:	4b89      	ldr	r3, [pc, #548]	; (8008044 <HAL_UART_IRQHandler+0x2b4>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8112 	beq.w	800804c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d011      	beq.n	8007e58 <HAL_UART_IRQHandler+0xc8>
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2201      	movs	r2, #1
 8007e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e4e:	f043 0201 	orr.w	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d011      	beq.n	8007e88 <HAL_UART_IRQHandler+0xf8>
 8007e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2202      	movs	r2, #2
 8007e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e7e:	f043 0204 	orr.w	r2, r3, #4
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d011      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x128>
 8007e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eae:	f043 0202 	orr.w	r2, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d017      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec8:	f003 0320 	and.w	r3, r3, #32
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ed0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ed4:	4b5a      	ldr	r3, [pc, #360]	; (8008040 <HAL_UART_IRQHandler+0x2b0>)
 8007ed6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eea:	f043 0208 	orr.w	r2, r3, #8
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d012      	beq.n	8007f26 <HAL_UART_IRQHandler+0x196>
 8007f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00c      	beq.n	8007f26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f1c:	f043 0220 	orr.w	r2, r3, #32
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 823c 	beq.w	80083aa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d013      	beq.n	8007f66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d105      	bne.n	8007f56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d007      	beq.n	8007f66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d005      	beq.n	8007f8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d04f      	beq.n	800802a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 ffa0 	bl	8008ed0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9a:	2b40      	cmp	r3, #64	; 0x40
 8007f9c:	d141      	bne.n	8008022 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1d9      	bne.n	8007f9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d013      	beq.n	800801a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff6:	4a14      	ldr	r2, [pc, #80]	; (8008048 <HAL_UART_IRQHandler+0x2b8>)
 8007ff8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fc f86c 	bl	80040dc <HAL_DMA_Abort_IT>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d017      	beq.n	800803a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	e00f      	b.n	800803a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9d9 	bl	80083d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008020:	e00b      	b.n	800803a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9d5 	bl	80083d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	e007      	b.n	800803a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f9d1 	bl	80083d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008038:	e1b7      	b.n	80083aa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803a:	bf00      	nop
    return;
 800803c:	e1b5      	b.n	80083aa <HAL_UART_IRQHandler+0x61a>
 800803e:	bf00      	nop
 8008040:	10000001 	.word	0x10000001
 8008044:	04000120 	.word	0x04000120
 8008048:	080090d1 	.word	0x080090d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008050:	2b01      	cmp	r3, #1
 8008052:	f040 814a 	bne.w	80082ea <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8143 	beq.w	80082ea <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008068:	f003 0310 	and.w	r3, r3, #16
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 813c 	beq.w	80082ea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2210      	movs	r2, #16
 8008078:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008084:	2b40      	cmp	r3, #64	; 0x40
 8008086:	f040 80b5 	bne.w	80081f4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008096:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 8187 	beq.w	80083ae <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080aa:	429a      	cmp	r2, r3
 80080ac:	f080 817f 	bcs.w	80083ae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f040 8086 	bne.w	80081d8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008102:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800810e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1da      	bne.n	80080cc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800813a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800813e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008142:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800814c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e1      	bne.n	8008116 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3308      	adds	r3, #8
 8008158:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3308      	adds	r3, #8
 8008172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008176:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008178:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800817c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e3      	bne.n	8008152 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	f023 0310 	bic.w	r3, r3, #16
 80081ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80081bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e4      	bne.n	8008198 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fb ff24 	bl	8004020 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8f9 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081f2:	e0dc      	b.n	80083ae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008200:	b29b      	uxth	r3, r3
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 80ce 	beq.w	80083b2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 80c9 	beq.w	80083b2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008242:	647b      	str	r3, [r7, #68]	; 0x44
 8008244:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e4      	bne.n	8008220 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3308      	adds	r3, #8
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	623b      	str	r3, [r7, #32]
   return(result);
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800826c:	f023 0301 	bic.w	r3, r3, #1
 8008270:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800827e:	633a      	str	r2, [r7, #48]	; 0x30
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e1      	bne.n	8008256 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0310 	bic.w	r3, r3, #16
 80082ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082cc:	69b9      	ldr	r1, [r7, #24]
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	e841 2300 	strex	r3, r2, [r1]
 80082d4:	617b      	str	r3, [r7, #20]
   return(result);
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1e4      	bne.n	80082a6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f87e 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082e8:	e063      	b.n	80083b2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00e      	beq.n	8008314 <HAL_UART_IRQHandler+0x584>
 80082f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d008      	beq.n	8008314 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800830a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f001 fb7d 	bl	8009a0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008312:	e051      	b.n	80083b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831c:	2b00      	cmp	r3, #0
 800831e:	d014      	beq.n	800834a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008328:	2b00      	cmp	r3, #0
 800832a:	d105      	bne.n	8008338 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800832c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d008      	beq.n	800834a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800833c:	2b00      	cmp	r3, #0
 800833e:	d03a      	beq.n	80083b6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
    }
    return;
 8008348:	e035      	b.n	80083b6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <HAL_UART_IRQHandler+0x5da>
 8008356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 feca 	bl	80090fc <UART_EndTransmit_IT>
    return;
 8008368:	e026      	b.n	80083b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800836a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <HAL_UART_IRQHandler+0x5fa>
 8008376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800837a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 fb54 	bl	8009a30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008388:	e016      	b.n	80083b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d010      	beq.n	80083b8 <HAL_UART_IRQHandler+0x628>
 8008396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839a:	2b00      	cmp	r3, #0
 800839c:	da0c      	bge.n	80083b8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fb3d 	bl	8009a1e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083a4:	e008      	b.n	80083b8 <HAL_UART_IRQHandler+0x628>
      return;
 80083a6:	bf00      	nop
 80083a8:	e006      	b.n	80083b8 <HAL_UART_IRQHandler+0x628>
    return;
 80083aa:	bf00      	nop
 80083ac:	e004      	b.n	80083b8 <HAL_UART_IRQHandler+0x628>
      return;
 80083ae:	bf00      	nop
 80083b0:	e002      	b.n	80083b8 <HAL_UART_IRQHandler+0x628>
      return;
 80083b2:	bf00      	nop
 80083b4:	e000      	b.n	80083b8 <HAL_UART_IRQHandler+0x628>
    return;
 80083b6:	bf00      	nop
  }
}
 80083b8:	37e8      	adds	r7, #232	; 0xe8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop

080083c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr

080083d2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr

080083e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr
	...

080083fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008400:	b08c      	sub	sp, #48	; 0x30
 8008402:	af00      	add	r7, sp, #0
 8008404:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	431a      	orrs	r2, r3
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	431a      	orrs	r2, r3
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	4313      	orrs	r3, r2
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b94      	ldr	r3, [pc, #592]	; (800867c <UART_SetConfig+0x280>)
 800842c:	4013      	ands	r3, r2
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008434:	430b      	orrs	r3, r1
 8008436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a89      	ldr	r2, [pc, #548]	; (8008680 <UART_SetConfig+0x284>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d004      	beq.n	8008468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008464:	4313      	orrs	r3, r2
 8008466:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008472:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	6812      	ldr	r2, [r2, #0]
 800847a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800847c:	430b      	orrs	r3, r1
 800847e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008486:	f023 010f 	bic.w	r1, r3, #15
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a7a      	ldr	r2, [pc, #488]	; (8008684 <UART_SetConfig+0x288>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d127      	bne.n	80084f0 <UART_SetConfig+0xf4>
 80084a0:	2003      	movs	r0, #3
 80084a2:	f7ff fb1b 	bl	8007adc <LL_RCC_GetUSARTClockSource>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d81b      	bhi.n	80084e8 <UART_SetConfig+0xec>
 80084b0:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <UART_SetConfig+0xbc>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084d9 	.word	0x080084d9
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	080084e1 	.word	0x080084e1
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ce:	e080      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80084d0:	2302      	movs	r3, #2
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d6:	e07c      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80084d8:	2304      	movs	r3, #4
 80084da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084de:	e078      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80084e0:	2308      	movs	r3, #8
 80084e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084e6:	e074      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80084e8:	2310      	movs	r3, #16
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ee:	e070      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a64      	ldr	r2, [pc, #400]	; (8008688 <UART_SetConfig+0x28c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d138      	bne.n	800856c <UART_SetConfig+0x170>
 80084fa:	200c      	movs	r0, #12
 80084fc:	f7ff faee 	bl	8007adc <LL_RCC_GetUSARTClockSource>
 8008500:	4603      	mov	r3, r0
 8008502:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008506:	2b0c      	cmp	r3, #12
 8008508:	d82c      	bhi.n	8008564 <UART_SetConfig+0x168>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <UART_SetConfig+0x114>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008545 	.word	0x08008545
 8008514:	08008565 	.word	0x08008565
 8008518:	08008565 	.word	0x08008565
 800851c:	08008565 	.word	0x08008565
 8008520:	08008555 	.word	0x08008555
 8008524:	08008565 	.word	0x08008565
 8008528:	08008565 	.word	0x08008565
 800852c:	08008565 	.word	0x08008565
 8008530:	0800854d 	.word	0x0800854d
 8008534:	08008565 	.word	0x08008565
 8008538:	08008565 	.word	0x08008565
 800853c:	08008565 	.word	0x08008565
 8008540:	0800855d 	.word	0x0800855d
 8008544:	2300      	movs	r3, #0
 8008546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800854a:	e042      	b.n	80085d2 <UART_SetConfig+0x1d6>
 800854c:	2302      	movs	r3, #2
 800854e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008552:	e03e      	b.n	80085d2 <UART_SetConfig+0x1d6>
 8008554:	2304      	movs	r3, #4
 8008556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800855a:	e03a      	b.n	80085d2 <UART_SetConfig+0x1d6>
 800855c:	2308      	movs	r3, #8
 800855e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008562:	e036      	b.n	80085d2 <UART_SetConfig+0x1d6>
 8008564:	2310      	movs	r3, #16
 8008566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856a:	e032      	b.n	80085d2 <UART_SetConfig+0x1d6>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a43      	ldr	r2, [pc, #268]	; (8008680 <UART_SetConfig+0x284>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d12a      	bne.n	80085cc <UART_SetConfig+0x1d0>
 8008576:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800857a:	f7ff fac1 	bl	8007b00 <LL_RCC_GetLPUARTClockSource>
 800857e:	4603      	mov	r3, r0
 8008580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008584:	d01a      	beq.n	80085bc <UART_SetConfig+0x1c0>
 8008586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800858a:	d81b      	bhi.n	80085c4 <UART_SetConfig+0x1c8>
 800858c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008590:	d00c      	beq.n	80085ac <UART_SetConfig+0x1b0>
 8008592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008596:	d815      	bhi.n	80085c4 <UART_SetConfig+0x1c8>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <UART_SetConfig+0x1a8>
 800859c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a0:	d008      	beq.n	80085b4 <UART_SetConfig+0x1b8>
 80085a2:	e00f      	b.n	80085c4 <UART_SetConfig+0x1c8>
 80085a4:	2300      	movs	r3, #0
 80085a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085aa:	e012      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80085ac:	2302      	movs	r3, #2
 80085ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b2:	e00e      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80085b4:	2304      	movs	r3, #4
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ba:	e00a      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80085bc:	2308      	movs	r3, #8
 80085be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c2:	e006      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80085c4:	2310      	movs	r3, #16
 80085c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ca:	e002      	b.n	80085d2 <UART_SetConfig+0x1d6>
 80085cc:	2310      	movs	r3, #16
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a2a      	ldr	r2, [pc, #168]	; (8008680 <UART_SetConfig+0x284>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	f040 80a4 	bne.w	8008726 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085e2:	2b08      	cmp	r3, #8
 80085e4:	d823      	bhi.n	800862e <UART_SetConfig+0x232>
 80085e6:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <UART_SetConfig+0x1f0>)
 80085e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ec:	08008611 	.word	0x08008611
 80085f0:	0800862f 	.word	0x0800862f
 80085f4:	08008619 	.word	0x08008619
 80085f8:	0800862f 	.word	0x0800862f
 80085fc:	0800861f 	.word	0x0800861f
 8008600:	0800862f 	.word	0x0800862f
 8008604:	0800862f 	.word	0x0800862f
 8008608:	0800862f 	.word	0x0800862f
 800860c:	08008627 	.word	0x08008627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008610:	f7fd ff48 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008614:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008616:	e010      	b.n	800863a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008618:	4b1c      	ldr	r3, [pc, #112]	; (800868c <UART_SetConfig+0x290>)
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800861c:	e00d      	b.n	800863a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800861e:	f7fd fe8d 	bl	800633c <HAL_RCC_GetSysClockFreq>
 8008622:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008624:	e009      	b.n	800863a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800862c:	e005      	b.n	800863a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008638:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 8137 	beq.w	80088b0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	4a12      	ldr	r2, [pc, #72]	; (8008690 <UART_SetConfig+0x294>)
 8008648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800864c:	461a      	mov	r2, r3
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	fbb3 f3f2 	udiv	r3, r3, r2
 8008654:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	4413      	add	r3, r2
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	429a      	cmp	r2, r3
 8008664:	d305      	bcc.n	8008672 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	429a      	cmp	r2, r3
 8008670:	d910      	bls.n	8008694 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008678:	e11a      	b.n	80088b0 <UART_SetConfig+0x4b4>
 800867a:	bf00      	nop
 800867c:	cfff69f3 	.word	0xcfff69f3
 8008680:	40008000 	.word	0x40008000
 8008684:	40013800 	.word	0x40013800
 8008688:	40004400 	.word	0x40004400
 800868c:	00f42400 	.word	0x00f42400
 8008690:	0801e348 	.word	0x0801e348
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	2200      	movs	r2, #0
 8008698:	60bb      	str	r3, [r7, #8]
 800869a:	60fa      	str	r2, [r7, #12]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	4a8e      	ldr	r2, [pc, #568]	; (80088dc <UART_SetConfig+0x4e0>)
 80086a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2200      	movs	r2, #0
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086b6:	f7f8 fa55 	bl	8000b64 <__aeabi_uldivmod>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	f04f 0200 	mov.w	r2, #0
 80086c6:	f04f 0300 	mov.w	r3, #0
 80086ca:	020b      	lsls	r3, r1, #8
 80086cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086d0:	0202      	lsls	r2, r0, #8
 80086d2:	6979      	ldr	r1, [r7, #20]
 80086d4:	6849      	ldr	r1, [r1, #4]
 80086d6:	0849      	lsrs	r1, r1, #1
 80086d8:	2000      	movs	r0, #0
 80086da:	460c      	mov	r4, r1
 80086dc:	4605      	mov	r5, r0
 80086de:	eb12 0804 	adds.w	r8, r2, r4
 80086e2:	eb43 0905 	adc.w	r9, r3, r5
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	469a      	mov	sl, r3
 80086ee:	4693      	mov	fp, r2
 80086f0:	4652      	mov	r2, sl
 80086f2:	465b      	mov	r3, fp
 80086f4:	4640      	mov	r0, r8
 80086f6:	4649      	mov	r1, r9
 80086f8:	f7f8 fa34 	bl	8000b64 <__aeabi_uldivmod>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4613      	mov	r3, r2
 8008702:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800870a:	d308      	bcc.n	800871e <UART_SetConfig+0x322>
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008712:	d204      	bcs.n	800871e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6a3a      	ldr	r2, [r7, #32]
 800871a:	60da      	str	r2, [r3, #12]
 800871c:	e0c8      	b.n	80088b0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008724:	e0c4      	b.n	80088b0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872e:	d168      	bne.n	8008802 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008730:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008734:	2b08      	cmp	r3, #8
 8008736:	d828      	bhi.n	800878a <UART_SetConfig+0x38e>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <UART_SetConfig+0x344>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008765 	.word	0x08008765
 8008744:	0800876d 	.word	0x0800876d
 8008748:	08008775 	.word	0x08008775
 800874c:	0800878b 	.word	0x0800878b
 8008750:	0800877b 	.word	0x0800877b
 8008754:	0800878b 	.word	0x0800878b
 8008758:	0800878b 	.word	0x0800878b
 800875c:	0800878b 	.word	0x0800878b
 8008760:	08008783 	.word	0x08008783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008764:	f7fd fe9e 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800876a:	e014      	b.n	8008796 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800876c:	f7fd feac 	bl	80064c8 <HAL_RCC_GetPCLK2Freq>
 8008770:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008772:	e010      	b.n	8008796 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008774:	4b5a      	ldr	r3, [pc, #360]	; (80088e0 <UART_SetConfig+0x4e4>)
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008778:	e00d      	b.n	8008796 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800877a:	f7fd fddf 	bl	800633c <HAL_RCC_GetSysClockFreq>
 800877e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008780:	e009      	b.n	8008796 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008788:	e005      	b.n	8008796 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8089 	beq.w	80088b0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	4a4e      	ldr	r2, [pc, #312]	; (80088dc <UART_SetConfig+0x4e0>)
 80087a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a8:	461a      	mov	r2, r3
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80087b0:	005a      	lsls	r2, r3, #1
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	441a      	add	r2, r3
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	2b0f      	cmp	r3, #15
 80087ca:	d916      	bls.n	80087fa <UART_SetConfig+0x3fe>
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d2:	d212      	bcs.n	80087fa <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	f023 030f 	bic.w	r3, r3, #15
 80087dc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	085b      	lsrs	r3, r3, #1
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	8bfb      	ldrh	r3, [r7, #30]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	8bfa      	ldrh	r2, [r7, #30]
 80087f6:	60da      	str	r2, [r3, #12]
 80087f8:	e05a      	b.n	80088b0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008800:	e056      	b.n	80088b0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008806:	2b08      	cmp	r3, #8
 8008808:	d827      	bhi.n	800885a <UART_SetConfig+0x45e>
 800880a:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <UART_SetConfig+0x414>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	08008835 	.word	0x08008835
 8008814:	0800883d 	.word	0x0800883d
 8008818:	08008845 	.word	0x08008845
 800881c:	0800885b 	.word	0x0800885b
 8008820:	0800884b 	.word	0x0800884b
 8008824:	0800885b 	.word	0x0800885b
 8008828:	0800885b 	.word	0x0800885b
 800882c:	0800885b 	.word	0x0800885b
 8008830:	08008853 	.word	0x08008853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008834:	f7fd fe36 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800883a:	e014      	b.n	8008866 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800883c:	f7fd fe44 	bl	80064c8 <HAL_RCC_GetPCLK2Freq>
 8008840:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008842:	e010      	b.n	8008866 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008844:	4b26      	ldr	r3, [pc, #152]	; (80088e0 <UART_SetConfig+0x4e4>)
 8008846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008848:	e00d      	b.n	8008866 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800884a:	f7fd fd77 	bl	800633c <HAL_RCC_GetSysClockFreq>
 800884e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008850:	e009      	b.n	8008866 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008858:	e005      	b.n	8008866 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008864:	bf00      	nop
    }

    if (pclk != 0U)
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	d021      	beq.n	80088b0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	4a1a      	ldr	r2, [pc, #104]	; (80088dc <UART_SetConfig+0x4e0>)
 8008872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008876:	461a      	mov	r2, r3
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	fbb3 f2f2 	udiv	r2, r3, r2
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	441a      	add	r2, r3
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	fbb2 f3f3 	udiv	r3, r2, r3
 800888e:	b29b      	uxth	r3, r3
 8008890:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	2b0f      	cmp	r3, #15
 8008896:	d908      	bls.n	80088aa <UART_SetConfig+0x4ae>
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800889e:	d204      	bcs.n	80088aa <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6a3a      	ldr	r2, [r7, #32]
 80088a6:	60da      	str	r2, [r3, #12]
 80088a8:	e002      	b.n	80088b0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2200      	movs	r2, #0
 80088c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3730      	adds	r7, #48	; 0x30
 80088d4:	46bd      	mov	sp, r7
 80088d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088da:	bf00      	nop
 80088dc:	0801e348 	.word	0x0801e348
 80088e0:	00f42400 	.word	0x00f42400

080088e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00a      	beq.n	8008996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d01a      	beq.n	80089fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e2:	d10a      	bne.n	80089fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	605a      	str	r2, [r3, #4]
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b086      	sub	sp, #24
 8008a2a:	af02      	add	r7, sp, #8
 8008a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a36:	f7f9 f91f 	bl	8001c78 <HAL_GetTick>
 8008a3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b08      	cmp	r3, #8
 8008a48:	d10e      	bne.n	8008a68 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f82f 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e025      	b.n	8008ab4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d10e      	bne.n	8008a94 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f819 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e00f      	b.n	8008ab4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b09c      	sub	sp, #112	; 0x70
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008acc:	e0a9      	b.n	8008c22 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad4:	f000 80a5 	beq.w	8008c22 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad8:	f7f9 f8ce 	bl	8001c78 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d302      	bcc.n	8008aee <UART_WaitOnFlagUntilTimeout+0x32>
 8008ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d140      	bne.n	8008b70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b02:	667b      	str	r3, [r7, #100]	; 0x64
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e6      	bne.n	8008aee <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3308      	adds	r3, #8
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	f023 0301 	bic.w	r3, r3, #1
 8008b36:	663b      	str	r3, [r7, #96]	; 0x60
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b40:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e5      	bne.n	8008b20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e069      	b.n	8008c44 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d051      	beq.n	8008c22 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b8c:	d149      	bne.n	8008c22 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e6      	bne.n	8008b98 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bea:	623a      	str	r2, [r7, #32]
 8008bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	69f9      	ldr	r1, [r7, #28]
 8008bf0:	6a3a      	ldr	r2, [r7, #32]
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e5      	bne.n	8008bca <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e010      	b.n	8008c44 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69da      	ldr	r2, [r3, #28]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	bf0c      	ite	eq
 8008c32:	2301      	moveq	r3, #1
 8008c34:	2300      	movne	r3, #0
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	461a      	mov	r2, r3
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	f43f af46 	beq.w	8008ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3770      	adds	r7, #112	; 0x70
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b09d      	sub	sp, #116	; 0x74
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	88fa      	ldrh	r2, [r7, #6]
 8008c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7e:	d10e      	bne.n	8008c9e <UART_Start_Receive_IT+0x52>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d105      	bne.n	8008c94 <UART_Start_Receive_IT+0x48>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c92:	e02d      	b.n	8008cf0 <UART_Start_Receive_IT+0xa4>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	22ff      	movs	r2, #255	; 0xff
 8008c98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c9c:	e028      	b.n	8008cf0 <UART_Start_Receive_IT+0xa4>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10d      	bne.n	8008cc2 <UART_Start_Receive_IT+0x76>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <UART_Start_Receive_IT+0x6c>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	22ff      	movs	r2, #255	; 0xff
 8008cb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cb6:	e01b      	b.n	8008cf0 <UART_Start_Receive_IT+0xa4>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	227f      	movs	r2, #127	; 0x7f
 8008cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cc0:	e016      	b.n	8008cf0 <UART_Start_Receive_IT+0xa4>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cca:	d10d      	bne.n	8008ce8 <UART_Start_Receive_IT+0x9c>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <UART_Start_Receive_IT+0x92>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	227f      	movs	r2, #127	; 0x7f
 8008cd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cdc:	e008      	b.n	8008cf0 <UART_Start_Receive_IT+0xa4>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	223f      	movs	r2, #63	; 0x3f
 8008ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ce6:	e003      	b.n	8008cf0 <UART_Start_Receive_IT+0xa4>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2222      	movs	r2, #34	; 0x22
 8008cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3308      	adds	r3, #8
 8008d06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d12:	f043 0301 	orr.w	r3, r3, #1
 8008d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d20:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008d22:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e5      	bne.n	8008d00 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d3c:	d14d      	bne.n	8008dda <UART_Start_Receive_IT+0x18e>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d44:	88fa      	ldrh	r2, [r7, #6]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d347      	bcc.n	8008dda <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d52:	d107      	bne.n	8008d64 <UART_Start_Receive_IT+0x118>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d103      	bne.n	8008d64 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4a38      	ldr	r2, [pc, #224]	; (8008e40 <UART_Start_Receive_IT+0x1f4>)
 8008d60:	671a      	str	r2, [r3, #112]	; 0x70
 8008d62:	e002      	b.n	8008d6a <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4a37      	ldr	r2, [pc, #220]	; (8008e44 <UART_Start_Receive_IT+0x1f8>)
 8008d68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d92:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e6      	bne.n	8008d72 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3308      	adds	r3, #8
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	e853 3f00 	ldrex	r3, [r3]
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dba:	667b      	str	r3, [r7, #100]	; 0x64
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008dc4:	637a      	str	r2, [r7, #52]	; 0x34
 8008dc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e5      	bne.n	8008da4 <UART_Start_Receive_IT+0x158>
 8008dd8:	e02c      	b.n	8008e34 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de2:	d107      	bne.n	8008df4 <UART_Start_Receive_IT+0x1a8>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a16      	ldr	r2, [pc, #88]	; (8008e48 <UART_Start_Receive_IT+0x1fc>)
 8008df0:	671a      	str	r2, [r3, #112]	; 0x70
 8008df2:	e002      	b.n	8008dfa <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <UART_Start_Receive_IT+0x200>)
 8008df8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e16:	663b      	str	r3, [r7, #96]	; 0x60
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e20:	623b      	str	r3, [r7, #32]
 8008e22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	69f9      	ldr	r1, [r7, #28]
 8008e26:	6a3a      	ldr	r2, [r7, #32]
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e6      	bne.n	8008e02 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3774      	adds	r7, #116	; 0x74
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bc80      	pop	{r7}
 8008e3e:	4770      	bx	lr
 8008e40:	0800970d 	.word	0x0800970d
 8008e44:	08009415 	.word	0x08009415
 8008e48:	080092b3 	.word	0x080092b3
 8008e4c:	08009153 	.word	0x08009153

08008e50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b08f      	sub	sp, #60	; 0x3c
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e78:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e6      	bne.n	8008e58 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eaa:	61ba      	str	r2, [r7, #24]
 8008eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6979      	ldr	r1, [r7, #20]
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e5      	bne.n	8008e8a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008ec6:	bf00      	nop
 8008ec8:	373c      	adds	r7, #60	; 0x3c
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bc80      	pop	{r7}
 8008ece:	4770      	bx	lr

08008ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b095      	sub	sp, #84	; 0x54
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e6      	bne.n	8008ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f20:	f023 0301 	bic.w	r3, r3, #1
 8008f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e3      	bne.n	8008f0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d118      	bne.n	8008f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	e853 3f00 	ldrex	r3, [r3]
 8008f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f023 0310 	bic.w	r3, r3, #16
 8008f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f68:	61bb      	str	r3, [r7, #24]
 8008f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6c:	6979      	ldr	r1, [r7, #20]
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	e841 2300 	strex	r3, r2, [r1]
 8008f74:	613b      	str	r3, [r7, #16]
   return(result);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e6      	bne.n	8008f4a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008f90:	bf00      	nop
 8008f92:	3754      	adds	r7, #84	; 0x54
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bc80      	pop	{r7}
 8008f98:	4770      	bx	lr

08008f9a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b090      	sub	sp, #64	; 0x40
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d137      	bne.n	8009026 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fde:	633a      	str	r2, [r7, #48]	; 0x30
 8008fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e5      	bne.n	8008fbe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009006:	637b      	str	r3, [r7, #52]	; 0x34
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009010:	61fb      	str	r3, [r7, #28]
 8009012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	69b9      	ldr	r1, [r7, #24]
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	617b      	str	r3, [r7, #20]
   return(result);
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e6      	bne.n	8008ff2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009024:	e002      	b.n	800902c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009026:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009028:	f7f9 fb02 	bl	8002630 <HAL_UART_TxCpltCallback>
}
 800902c:	bf00      	nop
 800902e:	3740      	adds	r7, #64	; 0x40
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff f9bc 	bl	80083c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009064:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800906c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009078:	2b80      	cmp	r3, #128	; 0x80
 800907a:	d109      	bne.n	8009090 <UART_DMAError+0x40>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	2b21      	cmp	r3, #33	; 0x21
 8009080:	d106      	bne.n	8009090 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2200      	movs	r2, #0
 8009086:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800908a:	6978      	ldr	r0, [r7, #20]
 800908c:	f7ff fee0 	bl	8008e50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b40      	cmp	r3, #64	; 0x40
 800909c:	d109      	bne.n	80090b2 <UART_DMAError+0x62>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b22      	cmp	r3, #34	; 0x22
 80090a2:	d106      	bne.n	80090b2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80090ac:	6978      	ldr	r0, [r7, #20]
 80090ae:	f7ff ff0f 	bl	8008ed0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b8:	f043 0210 	orr.w	r2, r3, #16
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090c2:	6978      	ldr	r0, [r7, #20]
 80090c4:	f7ff f985 	bl	80083d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090c8:	bf00      	nop
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f7ff f96f 	bl	80083d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f4:	bf00      	nop
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	60bb      	str	r3, [r7, #8]
   return(result);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009118:	61fb      	str	r3, [r7, #28]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	61bb      	str	r3, [r7, #24]
 8009124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6979      	ldr	r1, [r7, #20]
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	613b      	str	r3, [r7, #16]
   return(result);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e6      	bne.n	8009104 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7f9 fa73 	bl	8002630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800914a:	bf00      	nop
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b096      	sub	sp, #88	; 0x58
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009160:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916a:	2b22      	cmp	r3, #34	; 0x22
 800916c:	f040 8095 	bne.w	800929a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800917a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800917e:	b2d9      	uxtb	r1, r3
 8009180:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009184:	b2da      	uxtb	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918a:	400a      	ands	r2, r1
 800918c:	b2d2      	uxtb	r2, r2
 800918e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d178      	bne.n	80092aa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091cc:	653b      	str	r3, [r7, #80]	; 0x50
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091d6:	647b      	str	r3, [r7, #68]	; 0x44
 80091d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e6      	bne.n	80091b8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	623b      	str	r3, [r7, #32]
   return(result);
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3308      	adds	r3, #8
 8009208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800920a:	633a      	str	r2, [r7, #48]	; 0x30
 800920c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e5      	bne.n	80091ea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2220      	movs	r2, #32
 8009222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009230:	2b01      	cmp	r3, #1
 8009232:	d12e      	bne.n	8009292 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	60fb      	str	r3, [r7, #12]
   return(result);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0310 	bic.w	r3, r3, #16
 800924e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009258:	61fb      	str	r3, [r7, #28]
 800925a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	617b      	str	r3, [r7, #20]
   return(result);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e6      	bne.n	800923a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b10      	cmp	r3, #16
 8009278:	d103      	bne.n	8009282 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2210      	movs	r2, #16
 8009280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff f8aa 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009290:	e00b      	b.n	80092aa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7f9 f9da 	bl	800264c <HAL_UART_RxCpltCallback>
}
 8009298:	e007      	b.n	80092aa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699a      	ldr	r2, [r3, #24]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0208 	orr.w	r2, r2, #8
 80092a8:	619a      	str	r2, [r3, #24]
}
 80092aa:	bf00      	nop
 80092ac:	3758      	adds	r7, #88	; 0x58
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b096      	sub	sp, #88	; 0x58
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ca:	2b22      	cmp	r3, #34	; 0x22
 80092cc:	f040 8095 	bne.w	80093fa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80092e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80092e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80092e8:	4013      	ands	r3, r2
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	1c9a      	adds	r2, r3, #2
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009300:	b29b      	uxth	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009312:	b29b      	uxth	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d178      	bne.n	800940a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800932c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009336:	643b      	str	r3, [r7, #64]	; 0x40
 8009338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800933c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	61fb      	str	r3, [r7, #28]
   return(result);
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	f023 0301 	bic.w	r3, r3, #1
 8009360:	64bb      	str	r3, [r7, #72]	; 0x48
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800936a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e5      	bne.n	800934a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2220      	movs	r2, #32
 8009382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d12e      	bne.n	80093f2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	647b      	str	r3, [r7, #68]	; 0x44
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6979      	ldr	r1, [r7, #20]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	613b      	str	r3, [r7, #16]
   return(result);
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	f003 0310 	and.w	r3, r3, #16
 80093d6:	2b10      	cmp	r3, #16
 80093d8:	d103      	bne.n	80093e2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2210      	movs	r2, #16
 80093e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fe fffa 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093f0:	e00b      	b.n	800940a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7f9 f92a 	bl	800264c <HAL_UART_RxCpltCallback>
}
 80093f8:	e007      	b.n	800940a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0208 	orr.w	r2, r2, #8
 8009408:	619a      	str	r2, [r3, #24]
}
 800940a:	bf00      	nop
 800940c:	3758      	adds	r7, #88	; 0x58
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b0a6      	sub	sp, #152	; 0x98
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009422:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800944a:	2b22      	cmp	r3, #34	; 0x22
 800944c:	f040 814f 	bne.w	80096ee <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009456:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800945a:	e0f6      	b.n	800964a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009466:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800946a:	b2d9      	uxtb	r1, r3
 800946c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009470:	b2da      	uxtb	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009476:	400a      	ands	r2, r1
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800948c:	b29b      	uxth	r3, r3
 800948e:	3b01      	subs	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d053      	beq.n	8009556 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d011      	beq.n	80094de <UART_RxISR_8BIT_FIFOEN+0xca>
 80094ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2201      	movs	r2, #1
 80094cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d4:	f043 0201 	orr.w	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d011      	beq.n	800950e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80094ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2202      	movs	r2, #2
 80094fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009504:	f043 0204 	orr.w	r2, r3, #4
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800950e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009512:	f003 0304 	and.w	r3, r3, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	d011      	beq.n	800953e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800951a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00b      	beq.n	800953e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2204      	movs	r2, #4
 800952c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009534:	f043 0202 	orr.w	r2, r3, #2
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d006      	beq.n	8009556 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7fe ff42 	bl	80083d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800955c:	b29b      	uxth	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d173      	bne.n	800964a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009584:	66bb      	str	r3, [r7, #104]	; 0x68
 8009586:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800958a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e4      	bne.n	8009562 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3308      	adds	r3, #8
 800959e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ae:	f023 0301 	bic.w	r3, r3, #1
 80095b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3308      	adds	r3, #8
 80095ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095bc:	657a      	str	r2, [r7, #84]	; 0x54
 80095be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e3      	bne.n	8009598 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d12e      	bne.n	8009644 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	f023 0310 	bic.w	r3, r3, #16
 8009600:	67bb      	str	r3, [r7, #120]	; 0x78
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800960a:	643b      	str	r3, [r7, #64]	; 0x40
 800960c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e6      	bne.n	80095ec <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	2b10      	cmp	r3, #16
 800962a:	d103      	bne.n	8009634 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2210      	movs	r2, #16
 8009632:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7fe fed1 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
 8009642:	e002      	b.n	800964a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7f9 f801 	bl	800264c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800964a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800964e:	2b00      	cmp	r3, #0
 8009650:	d006      	beq.n	8009660 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009656:	f003 0320 	and.w	r3, r3, #32
 800965a:	2b00      	cmp	r3, #0
 800965c:	f47f aefe 	bne.w	800945c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009666:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800966a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800966e:	2b00      	cmp	r3, #0
 8009670:	d045      	beq.n	80096fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009678:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800967c:	429a      	cmp	r2, r3
 800967e:	d23e      	bcs.n	80096fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3308      	adds	r3, #8
 8009686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009696:	673b      	str	r3, [r7, #112]	; 0x70
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e5      	bne.n	8009680 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a14      	ldr	r2, [pc, #80]	; (8009708 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80096b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f043 0320 	orr.w	r3, r3, #32
 80096ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6979      	ldr	r1, [r7, #20]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	613b      	str	r3, [r7, #16]
   return(result);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e6      	bne.n	80096ba <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096ec:	e007      	b.n	80096fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699a      	ldr	r2, [r3, #24]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f042 0208 	orr.w	r2, r2, #8
 80096fc:	619a      	str	r2, [r3, #24]
}
 80096fe:	bf00      	nop
 8009700:	3798      	adds	r7, #152	; 0x98
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	08009153 	.word	0x08009153

0800970c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b0a8      	sub	sp, #160	; 0xa0
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800971a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009742:	2b22      	cmp	r3, #34	; 0x22
 8009744:	f040 8153 	bne.w	80099ee <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800974e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009752:	e0fa      	b.n	800994a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009766:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800976a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800976e:	4013      	ands	r3, r2
 8009770:	b29a      	uxth	r2, r3
 8009772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009776:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800977c:	1c9a      	adds	r2, r3, #2
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009788:	b29b      	uxth	r3, r3
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800979e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d053      	beq.n	8009852 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d011      	beq.n	80097da <UART_RxISR_16BIT_FIFOEN+0xce>
 80097b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2201      	movs	r2, #1
 80097c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d0:	f043 0201 	orr.w	r2, r3, #1
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d011      	beq.n	800980a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80097e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2202      	movs	r2, #2
 80097f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009800:	f043 0204 	orr.w	r2, r3, #4
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800980a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800980e:	f003 0304 	and.w	r3, r3, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	d011      	beq.n	800983a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2204      	movs	r2, #4
 8009828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009830:	f043 0202 	orr.w	r2, r3, #2
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009840:	2b00      	cmp	r3, #0
 8009842:	d006      	beq.n	8009852 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7fe fdc4 	bl	80083d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d175      	bne.n	800994a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800986c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800986e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009882:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800988e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e4      	bne.n	800985e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098aa:	f023 0301 	bic.w	r3, r3, #1
 80098ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80098be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e1      	bne.n	8009894 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d12e      	bne.n	8009944 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fc:	f023 0310 	bic.w	r3, r3, #16
 8009900:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800990a:	647b      	str	r3, [r7, #68]	; 0x44
 800990c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e6      	bne.n	80098ec <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b10      	cmp	r3, #16
 800992a:	d103      	bne.n	8009934 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2210      	movs	r2, #16
 8009932:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7fe fd51 	bl	80083e4 <HAL_UARTEx_RxEventCallback>
 8009942:	e002      	b.n	800994a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7f8 fe81 	bl	800264c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800994a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009952:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	f47f aefa 	bne.w	8009754 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009966:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800996a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800996e:	2b00      	cmp	r3, #0
 8009970:	d045      	beq.n	80099fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009978:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800997c:	429a      	cmp	r2, r3
 800997e:	d23e      	bcs.n	80099fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	e853 3f00 	ldrex	r3, [r3]
 800998e:	623b      	str	r3, [r7, #32]
   return(result);
 8009990:	6a3b      	ldr	r3, [r7, #32]
 8009992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009996:	677b      	str	r3, [r7, #116]	; 0x74
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3308      	adds	r3, #8
 800999e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80099a0:	633a      	str	r2, [r7, #48]	; 0x30
 80099a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e5      	bne.n	8009980 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a14      	ldr	r2, [pc, #80]	; (8009a08 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80099b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f043 0320 	orr.w	r3, r3, #32
 80099ce:	673b      	str	r3, [r7, #112]	; 0x70
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	69b9      	ldr	r1, [r7, #24]
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	617b      	str	r3, [r7, #20]
   return(result);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e6      	bne.n	80099ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099ec:	e007      	b.n	80099fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f042 0208 	orr.w	r2, r2, #8
 80099fc:	619a      	str	r2, [r3, #24]
}
 80099fe:	bf00      	nop
 8009a00:	37a0      	adds	r7, #160	; 0xa0
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	080092b3 	.word	0x080092b3

08009a0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bc80      	pop	{r7}
 8009a1c:	4770      	bx	lr

08009a1e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bc80      	pop	{r7}
 8009a2e:	4770      	bx	lr

08009a30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bc80      	pop	{r7}
 8009a40:	4770      	bx	lr

08009a42 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b088      	sub	sp, #32
 8009a46:	af02      	add	r7, sp, #8
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	1d3b      	adds	r3, r7, #4
 8009a4c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e046      	b.n	8009af0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2224      	movs	r2, #36	; 0x24
 8009a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d105      	bne.n	8009aa8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009a9c:	1d3b      	adds	r3, r7, #4
 8009a9e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 f911 	bl	8009cca <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ab8:	f7f8 f8de 	bl	8001c78 <HAL_GetTick>
 8009abc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009abe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7fe fff5 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	75fb      	strb	r3, [r7, #23]
 8009adc:	e003      	b.n	8009ae6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b089      	sub	sp, #36	; 0x24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d101      	bne.n	8009b0e <HAL_UARTEx_EnableStopMode+0x16>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e021      	b.n	8009b52 <HAL_UARTEx_EnableStopMode+0x5a>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f043 0302 	orr.w	r3, r3, #2
 8009b2a:	61fb      	str	r3, [r7, #28]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	61bb      	str	r3, [r7, #24]
 8009b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6979      	ldr	r1, [r7, #20]
 8009b3a:	69ba      	ldr	r2, [r7, #24]
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	613b      	str	r3, [r7, #16]
   return(result);
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e6      	bne.n	8009b16 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3724      	adds	r7, #36	; 0x24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr

08009b5c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d101      	bne.n	8009b72 <HAL_UARTEx_EnableFifoMode+0x16>
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e02b      	b.n	8009bca <HAL_UARTEx_EnableFifoMode+0x6e>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2224      	movs	r2, #36	; 0x24
 8009b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f022 0201 	bic.w	r2, r2, #1
 8009b98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ba0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009ba8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f8ac 	bl	8009d10 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e02d      	b.n	8009c46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2224      	movs	r2, #36	; 0x24
 8009bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f872 	bl	8009d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e02d      	b.n	8009cc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2224      	movs	r2, #36	; 0x24
 8009c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0201 	bic.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f834 	bl	8009d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b085      	sub	sp, #20
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	1d3b      	adds	r3, r7, #4
 8009cd4:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f023 0210 	bic.w	r2, r3, #16
 8009ce2:	893b      	ldrh	r3, [r7, #8]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009cf8:	7abb      	ldrb	r3, [r7, #10]
 8009cfa:	061a      	lsls	r2, r3, #24
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	605a      	str	r2, [r3, #4]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr
	...

08009d10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d108      	bne.n	8009d32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d30:	e031      	b.n	8009d96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d32:	2308      	movs	r3, #8
 8009d34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d36:	2308      	movs	r3, #8
 8009d38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	0e5b      	lsrs	r3, r3, #25
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	f003 0307 	and.w	r3, r3, #7
 8009d48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	0f5b      	lsrs	r3, r3, #29
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	7b3a      	ldrb	r2, [r7, #12]
 8009d5e:	4910      	ldr	r1, [pc, #64]	; (8009da0 <UARTEx_SetNbDataToProcess+0x90>)
 8009d60:	5c8a      	ldrb	r2, [r1, r2]
 8009d62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d66:	7b3a      	ldrb	r2, [r7, #12]
 8009d68:	490e      	ldr	r1, [pc, #56]	; (8009da4 <UARTEx_SetNbDataToProcess+0x94>)
 8009d6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	7b7a      	ldrb	r2, [r7, #13]
 8009d7c:	4908      	ldr	r1, [pc, #32]	; (8009da0 <UARTEx_SetNbDataToProcess+0x90>)
 8009d7e:	5c8a      	ldrb	r2, [r1, r2]
 8009d80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d84:	7b7a      	ldrb	r2, [r7, #13]
 8009d86:	4907      	ldr	r1, [pc, #28]	; (8009da4 <UARTEx_SetNbDataToProcess+0x94>)
 8009d88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d96:	bf00      	nop
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bc80      	pop	{r7}
 8009d9e:	4770      	bx	lr
 8009da0:	0801e360 	.word	0x0801e360
 8009da4:	0801e368 	.word	0x0801e368

08009da8 <DWT_Delay_Init>:

#include "DHT.h"


uint32_t DWT_Delay_Init(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8009dac:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <DWT_Delay_Init+0x58>)
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	4a13      	ldr	r2, [pc, #76]	; (8009e00 <DWT_Delay_Init+0x58>)
 8009db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009db6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8009db8:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <DWT_Delay_Init+0x58>)
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	4a10      	ldr	r2, [pc, #64]	; (8009e00 <DWT_Delay_Init+0x58>)
 8009dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dc2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8009dc4:	4b0f      	ldr	r3, [pc, #60]	; (8009e04 <DWT_Delay_Init+0x5c>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a0e      	ldr	r2, [pc, #56]	; (8009e04 <DWT_Delay_Init+0x5c>)
 8009dca:	f023 0301 	bic.w	r3, r3, #1
 8009dce:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8009dd0:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <DWT_Delay_Init+0x5c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a0b      	ldr	r2, [pc, #44]	; (8009e04 <DWT_Delay_Init+0x5c>)
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8009ddc:	4b09      	ldr	r3, [pc, #36]	; (8009e04 <DWT_Delay_Init+0x5c>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8009de2:	bf00      	nop
    __ASM volatile ("NOP");
 8009de4:	bf00      	nop
  __ASM volatile ("NOP");
 8009de6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8009de8:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <DWT_Delay_Init+0x5c>)
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8009df0:	2300      	movs	r3, #0
 8009df2:	e000      	b.n	8009df6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8009df4:	2301      	movs	r3, #1
  }
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bc80      	pop	{r7}
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	e000edf0 	.word	0xe000edf0
 8009e04:	e0001000 	.word	0xe0001000

08009e08 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8009e10:	4b0d      	ldr	r3, [pc, #52]	; (8009e48 <delay+0x40>)
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8009e16:	f7fc fb31 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4a0b      	ldr	r2, [pc, #44]	; (8009e4c <delay+0x44>)
 8009e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e22:	0c9b      	lsrs	r3, r3, #18
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	fb02 f303 	mul.w	r3, r2, r3
 8009e2a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8009e2c:	bf00      	nop
 8009e2e:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <delay+0x40>)
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d3f8      	bcc.n	8009e2e <delay+0x26>
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	e0001000 	.word	0xe0001000
 8009e4c:	431bde83 	.word	0x431bde83

08009e50 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e5c:	f107 030c 	add.w	r3, r7, #12
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	609a      	str	r2, [r3, #8]
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8009e6c:	887b      	ldrh	r3, [r7, #2]
 8009e6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e70:	2301      	movs	r3, #1
 8009e72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e74:	2300      	movs	r3, #0
 8009e76:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009e78:	f107 030c 	add.w	r3, r7, #12
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7fa fb28 	bl	80044d4 <HAL_GPIO_Init>
}
 8009e84:	bf00      	nop
 8009e86:	3720      	adds	r7, #32
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e98:	f107 030c 	add.w	r3, r7, #12
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	605a      	str	r2, [r3, #4]
 8009ea2:	609a      	str	r2, [r3, #8]
 8009ea4:	60da      	str	r2, [r3, #12]
 8009ea6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8009ea8:	887b      	ldrh	r3, [r7, #2]
 8009eaa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009eac:	2300      	movs	r3, #0
 8009eae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009eb4:	f107 030c 	add.w	r3, r7, #12
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7fa fb0a 	bl	80044d4 <HAL_GPIO_Init>
}
 8009ec0:	bf00      	nop
 8009ec2:	3720      	adds	r7, #32
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <DHT_Start>:


void DHT_Start (void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8009ecc:	f7ff ff6c 	bl	8009da8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8009ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ed4:	480e      	ldr	r0, [pc, #56]	; (8009f10 <DHT_Start+0x48>)
 8009ed6:	f7ff ffbb 	bl	8009e50 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8009eda:	2200      	movs	r2, #0
 8009edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ee0:	480b      	ldr	r0, [pc, #44]	; (8009f10 <DHT_Start+0x48>)
 8009ee2:	f7fa fd3c 	bl	800495e <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 8009ee6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8009eea:	f7ff ff8d 	bl	8009e08 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ef4:	4806      	ldr	r0, [pc, #24]	; (8009f10 <DHT_Start+0x48>)
 8009ef6:	f7fa fd32 	bl	800495e <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8009efa:	2014      	movs	r0, #20
 8009efc:	f7ff ff84 	bl	8009e08 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8009f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f04:	4802      	ldr	r0, [pc, #8]	; (8009f10 <DHT_Start+0x48>)
 8009f06:	f7ff ffc1 	bl	8009e8c <Set_Pin_Input>
}
 8009f0a:	bf00      	nop
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	48000400 	.word	0x48000400

08009f14 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8009f1e:	2028      	movs	r0, #40	; 0x28
 8009f20:	f7ff ff72 	bl	8009e08 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8009f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f28:	4811      	ldr	r0, [pc, #68]	; (8009f70 <DHT_Check_Response+0x5c>)
 8009f2a:	f7fa fd01 	bl	8004930 <HAL_GPIO_ReadPin>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10f      	bne.n	8009f54 <DHT_Check_Response+0x40>
	{
		delay (80);
 8009f34:	2050      	movs	r0, #80	; 0x50
 8009f36:	f7ff ff67 	bl	8009e08 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8009f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f3e:	480c      	ldr	r0, [pc, #48]	; (8009f70 <DHT_Check_Response+0x5c>)
 8009f40:	f7fa fcf6 	bl	8004930 <HAL_GPIO_ReadPin>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <DHT_Check_Response+0x3c>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	71fb      	strb	r3, [r7, #7]
 8009f4e:	e001      	b.n	8009f54 <DHT_Check_Response+0x40>
		else Response = -1;
 8009f50:	23ff      	movs	r3, #255	; 0xff
 8009f52:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8009f54:	bf00      	nop
 8009f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f5a:	4805      	ldr	r0, [pc, #20]	; (8009f70 <DHT_Check_Response+0x5c>)
 8009f5c:	f7fa fce8 	bl	8004930 <HAL_GPIO_ReadPin>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1f7      	bne.n	8009f56 <DHT_Check_Response+0x42>

	return Response;
 8009f66:	79fb      	ldrb	r3, [r7, #7]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	48000400 	.word	0x48000400

08009f74 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	71bb      	strb	r3, [r7, #6]
 8009f7e:	e03a      	b.n	8009ff6 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8009f80:	bf00      	nop
 8009f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f86:	4820      	ldr	r0, [pc, #128]	; (800a008 <DHT_Read+0x94>)
 8009f88:	f7fa fcd2 	bl	8004930 <HAL_GPIO_ReadPin>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d0f7      	beq.n	8009f82 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8009f92:	2028      	movs	r0, #40	; 0x28
 8009f94:	f7ff ff38 	bl	8009e08 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8009f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f9c:	481a      	ldr	r0, [pc, #104]	; (800a008 <DHT_Read+0x94>)
 8009f9e:	f7fa fcc7 	bl	8004930 <HAL_GPIO_ReadPin>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10e      	bne.n	8009fc6 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8009fa8:	79bb      	ldrb	r3, [r7, #6]
 8009faa:	f1c3 0307 	rsb	r3, r3, #7
 8009fae:	2201      	movs	r2, #1
 8009fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb4:	b25b      	sxtb	r3, r3
 8009fb6:	43db      	mvns	r3, r3
 8009fb8:	b25a      	sxtb	r2, r3
 8009fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	b25b      	sxtb	r3, r3
 8009fc2:	71fb      	strb	r3, [r7, #7]
 8009fc4:	e00b      	b.n	8009fde <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8009fc6:	79bb      	ldrb	r3, [r7, #6]
 8009fc8:	f1c3 0307 	rsb	r3, r3, #7
 8009fcc:	2201      	movs	r2, #1
 8009fce:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd2:	b25a      	sxtb	r2, r3
 8009fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	b25b      	sxtb	r3, r3
 8009fdc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8009fde:	bf00      	nop
 8009fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fe4:	4808      	ldr	r0, [pc, #32]	; (800a008 <DHT_Read+0x94>)
 8009fe6:	f7fa fca3 	bl	8004930 <HAL_GPIO_ReadPin>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1f7      	bne.n	8009fe0 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8009ff0:	79bb      	ldrb	r3, [r7, #6]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	71bb      	strb	r3, [r7, #6]
 8009ff6:	79bb      	ldrb	r3, [r7, #6]
 8009ff8:	2b07      	cmp	r3, #7
 8009ffa:	d9c1      	bls.n	8009f80 <DHT_Read+0xc>
	}
	return i;
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	48000400 	.word	0x48000400

0800a00c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800a014:	f7ff ff58 	bl	8009ec8 <DHT_Start>
	Presence = DHT_Check_Response ();
 800a018:	f7ff ff7c 	bl	8009f14 <DHT_Check_Response>
 800a01c:	4603      	mov	r3, r0
 800a01e:	461a      	mov	r2, r3
 800a020:	4b26      	ldr	r3, [pc, #152]	; (800a0bc <DHT_GetData+0xb0>)
 800a022:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800a024:	f7ff ffa6 	bl	8009f74 <DHT_Read>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	4b24      	ldr	r3, [pc, #144]	; (800a0c0 <DHT_GetData+0xb4>)
 800a02e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800a030:	f7ff ffa0 	bl	8009f74 <DHT_Read>
 800a034:	4603      	mov	r3, r0
 800a036:	461a      	mov	r2, r3
 800a038:	4b22      	ldr	r3, [pc, #136]	; (800a0c4 <DHT_GetData+0xb8>)
 800a03a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800a03c:	f7ff ff9a 	bl	8009f74 <DHT_Read>
 800a040:	4603      	mov	r3, r0
 800a042:	461a      	mov	r2, r3
 800a044:	4b20      	ldr	r3, [pc, #128]	; (800a0c8 <DHT_GetData+0xbc>)
 800a046:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 800a048:	f7ff ff94 	bl	8009f74 <DHT_Read>
 800a04c:	4603      	mov	r3, r0
 800a04e:	461a      	mov	r2, r3
 800a050:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <DHT_GetData+0xc0>)
 800a052:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800a054:	f7ff ff8e 	bl	8009f74 <DHT_Read>
 800a058:	4603      	mov	r3, r0
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <DHT_GetData+0xc4>)
 800a05e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800a060:	4b1b      	ldr	r3, [pc, #108]	; (800a0d0 <DHT_GetData+0xc4>)
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	4619      	mov	r1, r3
 800a066:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <DHT_GetData+0xb4>)
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	4b15      	ldr	r3, [pc, #84]	; (800a0c4 <DHT_GetData+0xb8>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	4413      	add	r3, r2
 800a072:	4a15      	ldr	r2, [pc, #84]	; (800a0c8 <DHT_GetData+0xbc>)
 800a074:	7812      	ldrb	r2, [r2, #0]
 800a076:	4413      	add	r3, r2
 800a078:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <DHT_GetData+0xc0>)
 800a07a:	7812      	ldrb	r2, [r2, #0]
 800a07c:	4413      	add	r3, r2
 800a07e:	4299      	cmp	r1, r3
 800a080:	d117      	bne.n	800a0b2 <DHT_GetData+0xa6>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 800a082:	4b11      	ldr	r3, [pc, #68]	; (800a0c8 <DHT_GetData+0xbc>)
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	021b      	lsls	r3, r3, #8
 800a088:	4a10      	ldr	r2, [pc, #64]	; (800a0cc <DHT_GetData+0xc0>)
 800a08a:	7812      	ldrb	r2, [r2, #0]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f7f6 fba4 	bl	80007dc <__aeabi_i2f>
 800a094:	4602      	mov	r2, r0
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 800a09a:	4b09      	ldr	r3, [pc, #36]	; (800a0c0 <DHT_GetData+0xb4>)
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	4a08      	ldr	r2, [pc, #32]	; (800a0c4 <DHT_GetData+0xb8>)
 800a0a2:	7812      	ldrb	r2, [r2, #0]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7f6 fb98 	bl	80007dc <__aeabi_i2f>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	605a      	str	r2, [r3, #4]
		#endif
	}
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000c8a 	.word	0x20000c8a
 800a0c0:	20000c84 	.word	0x20000c84
 800a0c4:	20000c85 	.word	0x20000c85
 800a0c8:	20000c86 	.word	0x20000c86
 800a0cc:	20000c87 	.word	0x20000c87
 800a0d0:	20000c88 	.word	0x20000c88

0800a0d4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a0d8:	f7f7 fc74 	bl	80019c4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a0dc:	f000 f80a 	bl	800a0f4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a0e0:	bf00      	nop
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	f012 fc36 	bl	801c95c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a0f0:	bf00      	nop
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_RED);
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	f7f8 fb08 	bl	8002710 <BSP_LED_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a100:	2300      	movs	r3, #0
 800a102:	9302      	str	r3, [sp, #8]
 800a104:	2301      	movs	r3, #1
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	2301      	movs	r3, #1
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	4b3f      	ldr	r3, [pc, #252]	; (800a20c <LoRaWAN_Init+0x118>)
 800a10e:	2200      	movs	r2, #0
 800a110:	2100      	movs	r1, #0
 800a112:	2002      	movs	r0, #2
 800a114:	f012 f900 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a118:	2300      	movs	r3, #0
 800a11a:	9302      	str	r3, [sp, #8]
 800a11c:	2303      	movs	r3, #3
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	2302      	movs	r3, #2
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	4b3a      	ldr	r3, [pc, #232]	; (800a210 <LoRaWAN_Init+0x11c>)
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	2002      	movs	r0, #2
 800a12c:	f012 f8f4 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a130:	2300      	movs	r3, #0
 800a132:	9302      	str	r3, [sp, #8]
 800a134:	2301      	movs	r3, #1
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	2301      	movs	r3, #1
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	4b35      	ldr	r3, [pc, #212]	; (800a214 <LoRaWAN_Init+0x120>)
 800a13e:	2200      	movs	r2, #0
 800a140:	2100      	movs	r1, #0
 800a142:	2002      	movs	r0, #2
 800a144:	f012 f8e8 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a148:	2300      	movs	r3, #0
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	4b32      	ldr	r3, [pc, #200]	; (800a218 <LoRaWAN_Init+0x124>)
 800a14e:	2200      	movs	r2, #0
 800a150:	f04f 31ff 	mov.w	r1, #4294967295
 800a154:	4831      	ldr	r0, [pc, #196]	; (800a21c <LoRaWAN_Init+0x128>)
 800a156:	f012 fee5 	bl	801cf24 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a15a:	2300      	movs	r3, #0
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	4b30      	ldr	r3, [pc, #192]	; (800a220 <LoRaWAN_Init+0x12c>)
 800a160:	2200      	movs	r2, #0
 800a162:	f04f 31ff 	mov.w	r1, #4294967295
 800a166:	482f      	ldr	r0, [pc, #188]	; (800a224 <LoRaWAN_Init+0x130>)
 800a168:	f012 fedc 	bl	801cf24 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a16c:	2300      	movs	r3, #0
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	4b2d      	ldr	r3, [pc, #180]	; (800a228 <LoRaWAN_Init+0x134>)
 800a172:	2201      	movs	r2, #1
 800a174:	f04f 31ff 	mov.w	r1, #4294967295
 800a178:	482c      	ldr	r0, [pc, #176]	; (800a22c <LoRaWAN_Init+0x138>)
 800a17a:	f012 fed3 	bl	801cf24 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a17e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a182:	4826      	ldr	r0, [pc, #152]	; (800a21c <LoRaWAN_Init+0x128>)
 800a184:	f012 ffe2 	bl	801d14c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a188:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a18c:	4825      	ldr	r0, [pc, #148]	; (800a224 <LoRaWAN_Init+0x130>)
 800a18e:	f012 ffdd 	bl	801d14c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a192:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a196:	4825      	ldr	r0, [pc, #148]	; (800a22c <LoRaWAN_Init+0x138>)
 800a198:	f012 ffd8 	bl	801d14c <UTIL_TIMER_SetPeriod>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a19c:	4a24      	ldr	r2, [pc, #144]	; (800a230 <LoRaWAN_Init+0x13c>)
 800a19e:	2100      	movs	r1, #0
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	f012 fcbf 	bl	801cb24 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a1a6:	4a23      	ldr	r2, [pc, #140]	; (800a234 <LoRaWAN_Init+0x140>)
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	2002      	movs	r0, #2
 800a1ac:	f012 fcba 	bl	801cb24 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a1b0:	f000 fa32 	bl	800a618 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a1b4:	4820      	ldr	r0, [pc, #128]	; (800a238 <LoRaWAN_Init+0x144>)
 800a1b6:	f003 fa57 	bl	800d668 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a1ba:	4820      	ldr	r0, [pc, #128]	; (800a23c <LoRaWAN_Init+0x148>)
 800a1bc:	f003 faa0 	bl	800d700 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a1c0:	481a      	ldr	r0, [pc, #104]	; (800a22c <LoRaWAN_Init+0x138>)
 800a1c2:	f012 fee5 	bl	801cf90 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a1c6:	4b1e      	ldr	r3, [pc, #120]	; (800a240 <LoRaWAN_Init+0x14c>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f003 fbc4 	bl	800d958 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a1d0:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <LoRaWAN_Init+0x150>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d111      	bne.n	800a1fc <LoRaWAN_Init+0x108>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	4b1a      	ldr	r3, [pc, #104]	; (800a248 <LoRaWAN_Init+0x154>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f04f 31ff 	mov.w	r1, #4294967295
 800a1e4:	4819      	ldr	r0, [pc, #100]	; (800a24c <LoRaWAN_Init+0x158>)
 800a1e6:	f012 fe9d 	bl	801cf24 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a1ea:	f242 7110 	movw	r1, #10000	; 0x2710
 800a1ee:	4817      	ldr	r0, [pc, #92]	; (800a24c <LoRaWAN_Init+0x158>)
 800a1f0:	f012 ffac 	bl	801d14c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a1f4:	4815      	ldr	r0, [pc, #84]	; (800a24c <LoRaWAN_Init+0x158>)
 800a1f6:	f012 fecb 	bl	801cf90 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a1fa:	e003      	b.n	800a204 <LoRaWAN_Init+0x110>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	2000      	movs	r0, #0
 800a200:	f7f8 fafa 	bl	80027f8 <BSP_PB_Init>
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	0801dafc 	.word	0x0801dafc
 800a210:	0801db1c 	.word	0x0801db1c
 800a214:	0801db3c 	.word	0x0801db3c
 800a218:	0800a495 	.word	0x0800a495
 800a21c:	20000d98 	.word	0x20000d98
 800a220:	0800a4a7 	.word	0x0800a4a7
 800a224:	20000db0 	.word	0x20000db0
 800a228:	0800a4b9 	.word	0x0800a4b9
 800a22c:	20000dc8 	.word	0x20000dc8
 800a230:	0800d945 	.word	0x0800d945
 800a234:	0800a3a9 	.word	0x0800a3a9
 800a238:	2000001c 	.word	0x2000001c
 800a23c:	20000050 	.word	0x20000050
 800a240:	20000019 	.word	0x20000019
 800a244:	20000c8b 	.word	0x20000c8b
 800a248:	0800a471 	.word	0x0800a471
 800a24c:	20000c8c 	.word	0x20000c8c

0800a250 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	4603      	mov	r3, r0
 800a258:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a25a:	88fb      	ldrh	r3, [r7, #6]
 800a25c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a260:	d104      	bne.n	800a26c <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUTTON_SW1_PIN:
      /* Note: when "EventType == TX_ON_TIMER" this GPIO is not initialized */
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a262:	2100      	movs	r1, #0
 800a264:	2002      	movs	r0, #2
 800a266:	f012 fc7f 	bl	801cb68 <UTIL_SEQ_SetTask>
      break;
 800a26a:	e000      	b.n	800a26e <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a26c:	bf00      	nop
  }
}
 800a26e:	bf00      	nop
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a278:	b5b0      	push	{r4, r5, r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af06      	add	r7, sp, #24
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <OnRxData+0x16>
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d075      	beq.n	800a37a <OnRxData+0x102>
  {

    UTIL_TIMER_Start(&RxLedTimer);
 800a28e:	483f      	ldr	r0, [pc, #252]	; (800a38c <OnRxData+0x114>)
 800a290:	f012 fe7e 	bl	801cf90 <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a294:	4b3e      	ldr	r3, [pc, #248]	; (800a390 <OnRxData+0x118>)
 800a296:	2200      	movs	r2, #0
 800a298:	2100      	movs	r1, #0
 800a29a:	2002      	movs	r0, #2
 800a29c:	f012 f83c 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4a39      	ldr	r2, [pc, #228]	; (800a394 <OnRxData+0x11c>)
 800a2ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	7809      	ldrb	r1, [r1, #0]
 800a2b6:	4608      	mov	r0, r1
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a2be:	460c      	mov	r4, r1
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a2c6:	460d      	mov	r5, r1
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a2ce:	9105      	str	r1, [sp, #20]
 800a2d0:	9504      	str	r5, [sp, #16]
 800a2d2:	9403      	str	r4, [sp, #12]
 800a2d4:	9002      	str	r0, [sp, #8]
 800a2d6:	9201      	str	r2, [sp, #4]
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	4b2f      	ldr	r3, [pc, #188]	; (800a398 <OnRxData+0x120>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2100      	movs	r1, #0
 800a2e0:	2003      	movs	r0, #3
 800a2e2:	f012 f819 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d021      	beq.n	800a332 <OnRxData+0xba>
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d145      	bne.n	800a37e <OnRxData+0x106>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	785b      	ldrb	r3, [r3, #1]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d117      	bne.n	800a32a <OnRxData+0xb2>
        {
          switch (appData->Buffer[0])
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b02      	cmp	r3, #2
 800a302:	d00e      	beq.n	800a322 <OnRxData+0xaa>
 800a304:	2b02      	cmp	r3, #2
 800a306:	dc12      	bgt.n	800a32e <OnRxData+0xb6>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <OnRxData+0x9a>
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d004      	beq.n	800a31a <OnRxData+0xa2>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a310:	e00d      	b.n	800a32e <OnRxData+0xb6>
              LmHandlerRequestClass(CLASS_A);
 800a312:	2000      	movs	r0, #0
 800a314:	f003 fc82 	bl	800dc1c <LmHandlerRequestClass>
              break;
 800a318:	e00a      	b.n	800a330 <OnRxData+0xb8>
              LmHandlerRequestClass(CLASS_B);
 800a31a:	2001      	movs	r0, #1
 800a31c:	f003 fc7e 	bl	800dc1c <LmHandlerRequestClass>
              break;
 800a320:	e006      	b.n	800a330 <OnRxData+0xb8>
              LmHandlerRequestClass(CLASS_C);
 800a322:	2002      	movs	r0, #2
 800a324:	f003 fc7a 	bl	800dc1c <LmHandlerRequestClass>
              break;
 800a328:	e002      	b.n	800a330 <OnRxData+0xb8>
          }
        }
 800a32a:	bf00      	nop
 800a32c:	e02a      	b.n	800a384 <OnRxData+0x10c>
              break;
 800a32e:	bf00      	nop
        break;
 800a330:	e028      	b.n	800a384 <OnRxData+0x10c>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	785b      	ldrb	r3, [r3, #1]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d123      	bne.n	800a382 <OnRxData+0x10a>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	b2da      	uxtb	r2, r3
 800a346:	4b15      	ldr	r3, [pc, #84]	; (800a39c <OnRxData+0x124>)
 800a348:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a34a:	4b14      	ldr	r3, [pc, #80]	; (800a39c <OnRxData+0x124>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <OnRxData+0xee>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a352:	4b13      	ldr	r3, [pc, #76]	; (800a3a0 <OnRxData+0x128>)
 800a354:	2200      	movs	r2, #0
 800a356:	2100      	movs	r1, #0
 800a358:	2003      	movs	r0, #3
 800a35a:	f011 ffdd 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a35e:	2000      	movs	r0, #0
 800a360:	f7f8 fa1e 	bl	80027a0 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a364:	e00d      	b.n	800a382 <OnRxData+0x10a>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <OnRxData+0x12c>)
 800a368:	2200      	movs	r2, #0
 800a36a:	2100      	movs	r1, #0
 800a36c:	2003      	movs	r0, #3
 800a36e:	f011 ffd3 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a372:	2000      	movs	r0, #0
 800a374:	f7f8 f9fe 	bl	8002774 <BSP_LED_On>
        break;
 800a378:	e003      	b.n	800a382 <OnRxData+0x10a>

      default:

        break;
    }
  }
 800a37a:	bf00      	nop
 800a37c:	e002      	b.n	800a384 <OnRxData+0x10c>
        break;
 800a37e:	bf00      	nop
 800a380:	e000      	b.n	800a384 <OnRxData+0x10c>
        break;
 800a382:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bdb0      	pop	{r4, r5, r7, pc}
 800a38c:	20000db0 	.word	0x20000db0
 800a390:	0801db5c 	.word	0x0801db5c
 800a394:	20000068 	.word	0x20000068
 800a398:	0801db90 	.word	0x0801db90
 800a39c:	20000d96 	.word	0x20000d96
 800a3a0:	0801dbd8 	.word	0x0801dbd8
 800a3a4:	0801dbe4 	.word	0x0801dbe4

0800a3a8 <SendTxData>:

static void SendTxData(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af02      	add	r7, sp, #8


	/*int16_t temperature= (int16_t) temp;
	int16_t humidity = (int16_t) hum;*/

	 int16_t	  temperature =0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	81fb      	strh	r3, [r7, #14]
	  int16_t	  humidity=0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	81bb      	strh	r3, [r7, #12]

	  // Convert the float to a hex value using type casting
	  temperature = (uint16_t) temp;
 800a3b6:	4b28      	ldr	r3, [pc, #160]	; (800a458 <SendTxData+0xb0>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f6 fbb2 	bl	8000b24 <__aeabi_f2uiz>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	81fb      	strh	r3, [r7, #14]
	  humidity = (uint16_t) hum;
 800a3c6:	4b25      	ldr	r3, [pc, #148]	; (800a45c <SendTxData+0xb4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f6 fbaa 	bl	8000b24 <__aeabi_f2uiz>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	81bb      	strh	r3, [r7, #12]


  //sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else

  uint32_t i = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60bb      	str	r3, [r7, #8]

 // EnvSensors_Read(&sensor_data);
 // temperature = (SYS_GetTemperatureLevel() >> 8);


  AppData.Port = LORAWAN_USER_APP_PORT;
 800a3de:	4b20      	ldr	r3, [pc, #128]	; (800a460 <SendTxData+0xb8>)
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
*******************/

  AppData.Buffer[i++] = (uint16_t) temperature;
 800a3e4:	4b1e      	ldr	r3, [pc, #120]	; (800a460 <SendTxData+0xb8>)
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	1c59      	adds	r1, r3, #1
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	89fa      	ldrh	r2, [r7, #14]
 800a3f2:	b2d2      	uxtb	r2, r2
 800a3f4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] =(uint16_t)  humidity;
 800a3f6:	4b1a      	ldr	r3, [pc, #104]	; (800a460 <SendTxData+0xb8>)
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	1c59      	adds	r1, r3, #1
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	4413      	add	r3, r2
 800a402:	89ba      	ldrh	r2, [r7, #12]
 800a404:	b2d2      	uxtb	r2, r2
 800a406:	701a      	strb	r2, [r3, #0]



  AppData.BufferSize = i;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	4b14      	ldr	r3, [pc, #80]	; (800a460 <SendTxData+0xb8>)
 800a40e:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a410:	1d3a      	adds	r2, r7, #4
 800a412:	2300      	movs	r3, #0
 800a414:	2101      	movs	r1, #1
 800a416:	4812      	ldr	r0, [pc, #72]	; (800a460 <SendTxData+0xb8>)
 800a418:	f003 fb14 	bl	800da44 <LmHandlerSend>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <SendTxData+0x88>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a422:	4b10      	ldr	r3, [pc, #64]	; (800a464 <SendTxData+0xbc>)
 800a424:	2201      	movs	r2, #1
 800a426:	2100      	movs	r1, #0
 800a428:	2001      	movs	r0, #1
 800a42a:	f011 ff75 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a42e:	e00e      	b.n	800a44e <SendTxData+0xa6>
  else if (nextTxIn > 0)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00b      	beq.n	800a44e <SendTxData+0xa6>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a0b      	ldr	r2, [pc, #44]	; (800a468 <SendTxData+0xc0>)
 800a43a:	fba2 2303 	umull	r2, r3, r2, r3
 800a43e:	099b      	lsrs	r3, r3, #6
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <SendTxData+0xc4>)
 800a444:	2201      	movs	r2, #1
 800a446:	2100      	movs	r1, #0
 800a448:	2001      	movs	r0, #1
 800a44a:	f011 ff65 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800a44e:	bf00      	nop
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20000a30 	.word	0x20000a30
 800a45c:	20000a34 	.word	0x20000a34
 800a460:	20000060 	.word	0x20000060
 800a464:	0801dbf0 	.word	0x0801dbf0
 800a468:	10624dd3 	.word	0x10624dd3
 800a46c:	0801dc00 	.word	0x0801dc00

0800a470 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a478:	2100      	movs	r1, #0
 800a47a:	2002      	movs	r0, #2
 800a47c:	f012 fb74 	bl	801cb68 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a480:	4803      	ldr	r0, [pc, #12]	; (800a490 <OnTxTimerEvent+0x20>)
 800a482:	f012 fd85 	bl	801cf90 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a486:	bf00      	nop
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20000c8c 	.word	0x20000c8c

0800a494 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]

}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bc80      	pop	{r7}
 800a4a4:	4770      	bx	lr

0800a4a6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]

}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr

0800a4b8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f7f8 f983 	bl	80027cc <BSP_LED_Toggle>
}
 800a4c6:	bf00      	nop
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af04      	add	r7, sp, #16
 800a4d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d041      	beq.n	800a562 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d03d      	beq.n	800a562 <OnTxData+0x92>
    {

      UTIL_TIMER_Start(&TxLedTimer);
 800a4e6:	4821      	ldr	r0, [pc, #132]	; (800a56c <OnTxData+0x9c>)
 800a4e8:	f012 fd52 	bl	801cf90 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a4ec:	4b20      	ldr	r3, [pc, #128]	; (800a570 <OnTxData+0xa0>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	2002      	movs	r0, #2
 800a4f4:	f011 ff10 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	7b12      	ldrb	r2, [r2, #12]
 800a500:	4611      	mov	r1, r2
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a508:	4610      	mov	r0, r2
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a510:	9203      	str	r2, [sp, #12]
 800a512:	9002      	str	r0, [sp, #8]
 800a514:	9101      	str	r1, [sp, #4]
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	4b16      	ldr	r3, [pc, #88]	; (800a574 <OnTxData+0xa4>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	2100      	movs	r1, #0
 800a51e:	2003      	movs	r0, #3
 800a520:	f011 fefa 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a524:	4b14      	ldr	r3, [pc, #80]	; (800a578 <OnTxData+0xa8>)
 800a526:	2200      	movs	r2, #0
 800a528:	2100      	movs	r1, #0
 800a52a:	2003      	movs	r0, #3
 800a52c:	f011 fef4 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	789b      	ldrb	r3, [r3, #2]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d10e      	bne.n	800a556 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	78db      	ldrb	r3, [r3, #3]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <OnTxData+0x74>
 800a540:	4b0e      	ldr	r3, [pc, #56]	; (800a57c <OnTxData+0xac>)
 800a542:	e000      	b.n	800a546 <OnTxData+0x76>
 800a544:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <OnTxData+0xb0>)
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	4b0e      	ldr	r3, [pc, #56]	; (800a584 <OnTxData+0xb4>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	2100      	movs	r1, #0
 800a54e:	2003      	movs	r0, #3
 800a550:	f011 fee2 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a554:	e005      	b.n	800a562 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a556:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <OnTxData+0xb8>)
 800a558:	2200      	movs	r2, #0
 800a55a:	2100      	movs	r1, #0
 800a55c:	2003      	movs	r0, #3
 800a55e:	f011 fedb 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000d98 	.word	0x20000d98
 800a570:	0801dc20 	.word	0x0801dc20
 800a574:	0801dc54 	.word	0x0801dc54
 800a578:	0801dc88 	.word	0x0801dc88
 800a57c:	0801dc98 	.word	0x0801dc98
 800a580:	0801dc9c 	.word	0x0801dc9c
 800a584:	0801dca4 	.word	0x0801dca4
 800a588:	0801dcb8 	.word	0x0801dcb8

0800a58c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d028      	beq.n	800a5ec <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d11d      	bne.n	800a5e0 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a5a4:	4813      	ldr	r0, [pc, #76]	; (800a5f4 <OnJoinRequest+0x68>)
 800a5a6:	f012 fd61 	bl	801d06c <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	f7f8 f8f8 	bl	80027a0 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a5b0:	4b11      	ldr	r3, [pc, #68]	; (800a5f8 <OnJoinRequest+0x6c>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	2002      	movs	r0, #2
 800a5b8:	f011 feae 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d106      	bne.n	800a5d2 <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a5c4:	4b0d      	ldr	r3, [pc, #52]	; (800a5fc <OnJoinRequest+0x70>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	2002      	movs	r0, #2
 800a5cc:	f011 fea4 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a5d0:	e00c      	b.n	800a5ec <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a5d2:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <OnJoinRequest+0x74>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	2002      	movs	r0, #2
 800a5da:	f011 fe9d 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800a5de:	e005      	b.n	800a5ec <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a5e0:	4b08      	ldr	r3, [pc, #32]	; (800a604 <OnJoinRequest+0x78>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	2002      	movs	r0, #2
 800a5e8:	f011 fe96 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20000dc8 	.word	0x20000dc8
 800a5f8:	0801dcc8 	.word	0x0801dcc8
 800a5fc:	0801dce0 	.word	0x0801dce0
 800a600:	0801dd00 	.word	0x0801dd00
 800a604:	0801dd20 	.word	0x0801dd20

0800a608 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a60c:	2100      	movs	r1, #0
 800a60e:	2001      	movs	r0, #1
 800a610:	f012 faaa 	bl	801cb68 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a614:	bf00      	nop
 800a616:	bd80      	pop	{r7, pc}

0800a618 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a61c:	4b18      	ldr	r3, [pc, #96]	; (800a680 <LoraInfo_Init+0x68>)
 800a61e:	2200      	movs	r2, #0
 800a620:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a622:	4b17      	ldr	r3, [pc, #92]	; (800a680 <LoraInfo_Init+0x68>)
 800a624:	2200      	movs	r2, #0
 800a626:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a628:	4b15      	ldr	r3, [pc, #84]	; (800a680 <LoraInfo_Init+0x68>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a62e:	4b14      	ldr	r3, [pc, #80]	; (800a680 <LoraInfo_Init+0x68>)
 800a630:	2200      	movs	r2, #0
 800a632:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a634:	4b12      	ldr	r3, [pc, #72]	; (800a680 <LoraInfo_Init+0x68>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f043 0320 	orr.w	r3, r3, #32
 800a63c:	4a10      	ldr	r2, [pc, #64]	; (800a680 <LoraInfo_Init+0x68>)
 800a63e:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 800a640:	4b0f      	ldr	r3, [pc, #60]	; (800a680 <LoraInfo_Init+0x68>)
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a648:	4a0d      	ldr	r2, [pc, #52]	; (800a680 <LoraInfo_Init+0x68>)
 800a64a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a64c:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <LoraInfo_Init+0x68>)
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10c      	bne.n	800a66e <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a654:	4b0b      	ldr	r3, [pc, #44]	; (800a684 <LoraInfo_Init+0x6c>)
 800a656:	2200      	movs	r2, #0
 800a658:	2100      	movs	r1, #0
 800a65a:	2000      	movs	r0, #0
 800a65c:	f011 fe5c 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a660:	bf00      	nop
 800a662:	f011 fe47 	bl	801c2f4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a666:	4603      	mov	r3, r0
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d1fa      	bne.n	800a662 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a66c:	e7fe      	b.n	800a66c <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a66e:	4b04      	ldr	r3, [pc, #16]	; (800a680 <LoraInfo_Init+0x68>)
 800a670:	2200      	movs	r2, #0
 800a672:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a674:	4b02      	ldr	r3, [pc, #8]	; (800a680 <LoraInfo_Init+0x68>)
 800a676:	2203      	movs	r2, #3
 800a678:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a67a:	bf00      	nop
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20000de0 	.word	0x20000de0
 800a684:	0801dd78 	.word	0x0801dd78

0800a688 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a688:	b480      	push	{r7}
 800a68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a68c:	4b02      	ldr	r3, [pc, #8]	; (800a698 <LoraInfo_GetPtr+0x10>)
}
 800a68e:	4618      	mov	r0, r3
 800a690:	46bd      	mov	sp, r7
 800a692:	bc80      	pop	{r7}
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	20000de0 	.word	0x20000de0

0800a69c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a6a0:	f7f8 f93f 	bl	8002922 <BSP_RADIO_Init>
 800a6a4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f8 f968 	bl	800298c <BSP_RADIO_ConfigRFSwitch>
 800a6bc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a6ca:	f7f8 f9ad 	bl	8002a28 <BSP_RADIO_GetTxConfig>
 800a6ce:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a6d8:	f7f8 f9ad 	bl	8002a36 <BSP_RADIO_IsTCXO>
 800a6dc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800a6e6:	f7f8 f9ad 	bl	8002a44 <BSP_RADIO_IsDCDC>
 800a6ea:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a6fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a702:	2b84      	cmp	r3, #132	; 0x84
 800a704:	d005      	beq.n	800a712 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4413      	add	r3, r2
 800a70e:	3303      	adds	r3, #3
 800a710:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a712:	68fb      	ldr	r3, [r7, #12]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	bc80      	pop	{r7}
 800a71c:	4770      	bx	lr

0800a71e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a722:	f000 fad9 	bl	800acd8 <vTaskStartScheduler>
  
  return osOK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72e:	b089      	sub	sp, #36	; 0x24
 800a730:	af04      	add	r7, sp, #16
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d020      	beq.n	800a780 <osThreadCreate+0x54>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d01c      	beq.n	800a780 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685c      	ldr	r4, [r3, #4]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681d      	ldr	r5, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691e      	ldr	r6, [r3, #16]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a758:	4618      	mov	r0, r3
 800a75a:	f7ff ffc9 	bl	800a6f0 <makeFreeRtosPriority>
 800a75e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a768:	9202      	str	r2, [sp, #8]
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	9100      	str	r1, [sp, #0]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	4632      	mov	r2, r6
 800a772:	4629      	mov	r1, r5
 800a774:	4620      	mov	r0, r4
 800a776:	f000 f8e8 	bl	800a94a <xTaskCreateStatic>
 800a77a:	4603      	mov	r3, r0
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	e01c      	b.n	800a7ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685c      	ldr	r4, [r3, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a78c:	b29e      	uxth	r6, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff ffab 	bl	800a6f0 <makeFreeRtosPriority>
 800a79a:	4602      	mov	r2, r0
 800a79c:	f107 030c 	add.w	r3, r7, #12
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	9200      	str	r2, [sp, #0]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	4632      	mov	r2, r6
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 f92a 	bl	800aa04 <xTaskCreate>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d001      	beq.n	800a7ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e000      	b.n	800a7bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <osDelay+0x16>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	e000      	b.n	800a7dc <osDelay+0x18>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 fa47 	bl	800ac70 <vTaskDelay>
  
  return osOK;
 800a7e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f103 0208 	add.w	r2, r3, #8
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f103 0208 	add.w	r2, r3, #8
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f103 0208 	add.w	r2, r3, #8
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr

0800a82a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bc80      	pop	{r7}
 800a840:	4770      	bx	lr

0800a842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a842:	b480      	push	{r7}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	689a      	ldr	r2, [r3, #8]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	1c5a      	adds	r2, r3, #1
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	601a      	str	r2, [r3, #0]
}
 800a87e:	bf00      	nop
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	bc80      	pop	{r7}
 800a886:	4770      	bx	lr

0800a888 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89e:	d103      	bne.n	800a8a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	e00c      	b.n	800a8c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3308      	adds	r3, #8
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	e002      	b.n	800a8b6 <vListInsert+0x2e>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d2f6      	bcs.n	800a8b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	683a      	ldr	r2, [r7, #0]
 800a8dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	601a      	str	r2, [r3, #0]
}
 800a8ee:	bf00      	nop
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bc80      	pop	{r7}
 800a8f6:	4770      	bx	lr

0800a8f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6892      	ldr	r2, [r2, #8]
 800a90e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	6852      	ldr	r2, [r2, #4]
 800a918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	429a      	cmp	r2, r3
 800a922:	d103      	bne.n	800a92c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	1e5a      	subs	r2, r3, #1
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	bc80      	pop	{r7}
 800a948:	4770      	bx	lr

0800a94a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b08e      	sub	sp, #56	; 0x38
 800a94e:	af04      	add	r7, sp, #16
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
 800a956:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10a      	bne.n	800a974 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10a      	bne.n	800a990 <xTaskCreateStatic+0x46>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	61fb      	str	r3, [r7, #28]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a990:	2354      	movs	r3, #84	; 0x54
 800a992:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	2b54      	cmp	r3, #84	; 0x54
 800a998:	d00a      	beq.n	800a9b0 <xTaskCreateStatic+0x66>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	61bb      	str	r3, [r7, #24]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01e      	beq.n	800a9f6 <xTaskCreateStatic+0xac>
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d01b      	beq.n	800a9f6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9303      	str	r3, [sp, #12]
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	9302      	str	r3, [sp, #8]
 800a9d8:	f107 0314 	add.w	r3, r7, #20
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	68b9      	ldr	r1, [r7, #8]
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 f850 	bl	800aa8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9f0:	f000 f8d4 	bl	800ab9c <prvAddNewTaskToReadyList>
 800a9f4:	e001      	b.n	800a9fa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9fa:	697b      	ldr	r3, [r7, #20]
	}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3728      	adds	r7, #40	; 0x28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08c      	sub	sp, #48	; 0x30
 800aa08:	af04      	add	r7, sp, #16
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	603b      	str	r3, [r7, #0]
 800aa10:	4613      	mov	r3, r2
 800aa12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa14:	88fb      	ldrh	r3, [r7, #6]
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f001 f81f 	bl	800ba5c <pvPortMalloc>
 800aa1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa26:	2054      	movs	r0, #84	; 0x54
 800aa28:	f001 f818 	bl	800ba5c <pvPortMalloc>
 800aa2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	631a      	str	r2, [r3, #48]	; 0x30
 800aa3a:	e005      	b.n	800aa48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa3c:	6978      	ldr	r0, [r7, #20]
 800aa3e:	f001 f8d1 	bl	800bbe4 <vPortFree>
 800aa42:	e001      	b.n	800aa48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d017      	beq.n	800aa7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa56:	88fa      	ldrh	r2, [r7, #6]
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	9302      	str	r3, [sp, #8]
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa62:	9301      	str	r3, [sp, #4]
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 f80e 	bl	800aa8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa72:	69f8      	ldr	r0, [r7, #28]
 800aa74:	f000 f892 	bl	800ab9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	61bb      	str	r3, [r7, #24]
 800aa7c:	e002      	b.n	800aa84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa84:	69bb      	ldr	r3, [r7, #24]
	}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3720      	adds	r7, #32
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b088      	sub	sp, #32
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	607a      	str	r2, [r7, #4]
 800aa9a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	f023 0307 	bic.w	r3, r3, #7
 800aab4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	f003 0307 	and.w	r3, r3, #7
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00a      	beq.n	800aad6 <prvInitialiseNewTask+0x48>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	617b      	str	r3, [r7, #20]
}
 800aad2:	bf00      	nop
 800aad4:	e7fe      	b.n	800aad4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d01f      	beq.n	800ab1c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aadc:	2300      	movs	r3, #0
 800aade:	61fb      	str	r3, [r7, #28]
 800aae0:	e012      	b.n	800ab08 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	4413      	add	r3, r2
 800aae8:	7819      	ldrb	r1, [r3, #0]
 800aaea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	4413      	add	r3, r2
 800aaf0:	3334      	adds	r3, #52	; 0x34
 800aaf2:	460a      	mov	r2, r1
 800aaf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d006      	beq.n	800ab10 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	3301      	adds	r3, #1
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	2b0f      	cmp	r3, #15
 800ab0c:	d9e9      	bls.n	800aae2 <prvInitialiseNewTask+0x54>
 800ab0e:	e000      	b.n	800ab12 <prvInitialiseNewTask+0x84>
			{
				break;
 800ab10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab1a:	e003      	b.n	800ab24 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	2b06      	cmp	r3, #6
 800ab28:	d901      	bls.n	800ab2e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab2a:	2306      	movs	r3, #6
 800ab2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab38:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	3304      	adds	r3, #4
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff fe70 	bl	800a82a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	3318      	adds	r3, #24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff fe6b 	bl	800a82a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	f1c3 0207 	rsb	r2, r3, #7
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	69b8      	ldr	r0, [r7, #24]
 800ab7e:	f000 fcd7 	bl	800b530 <pxPortInitialiseStack>
 800ab82:	4602      	mov	r2, r0
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab94:	bf00      	nop
 800ab96:	3720      	adds	r7, #32
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aba4:	f000 fdb2 	bl	800b70c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aba8:	4b2a      	ldr	r3, [pc, #168]	; (800ac54 <prvAddNewTaskToReadyList+0xb8>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	4a29      	ldr	r2, [pc, #164]	; (800ac54 <prvAddNewTaskToReadyList+0xb8>)
 800abb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abb2:	4b29      	ldr	r3, [pc, #164]	; (800ac58 <prvAddNewTaskToReadyList+0xbc>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d109      	bne.n	800abce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abba:	4a27      	ldr	r2, [pc, #156]	; (800ac58 <prvAddNewTaskToReadyList+0xbc>)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abc0:	4b24      	ldr	r3, [pc, #144]	; (800ac54 <prvAddNewTaskToReadyList+0xb8>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d110      	bne.n	800abea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abc8:	f000 fb70 	bl	800b2ac <prvInitialiseTaskLists>
 800abcc:	e00d      	b.n	800abea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abce:	4b23      	ldr	r3, [pc, #140]	; (800ac5c <prvAddNewTaskToReadyList+0xc0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d109      	bne.n	800abea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abd6:	4b20      	ldr	r3, [pc, #128]	; (800ac58 <prvAddNewTaskToReadyList+0xbc>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d802      	bhi.n	800abea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abe4:	4a1c      	ldr	r2, [pc, #112]	; (800ac58 <prvAddNewTaskToReadyList+0xbc>)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abea:	4b1d      	ldr	r3, [pc, #116]	; (800ac60 <prvAddNewTaskToReadyList+0xc4>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3301      	adds	r3, #1
 800abf0:	4a1b      	ldr	r2, [pc, #108]	; (800ac60 <prvAddNewTaskToReadyList+0xc4>)
 800abf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf8:	2201      	movs	r2, #1
 800abfa:	409a      	lsls	r2, r3
 800abfc:	4b19      	ldr	r3, [pc, #100]	; (800ac64 <prvAddNewTaskToReadyList+0xc8>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	4a18      	ldr	r2, [pc, #96]	; (800ac64 <prvAddNewTaskToReadyList+0xc8>)
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4a15      	ldr	r2, [pc, #84]	; (800ac68 <prvAddNewTaskToReadyList+0xcc>)
 800ac14:	441a      	add	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f7ff fe10 	bl	800a842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac22:	f000 fda3 	bl	800b76c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <prvAddNewTaskToReadyList+0xc0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00e      	beq.n	800ac4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <prvAddNewTaskToReadyList+0xbc>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d207      	bcs.n	800ac4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac3c:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <prvAddNewTaskToReadyList+0xd0>)
 800ac3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20000ef0 	.word	0x20000ef0
 800ac58:	20000df0 	.word	0x20000df0
 800ac5c:	20000efc 	.word	0x20000efc
 800ac60:	20000f0c 	.word	0x20000f0c
 800ac64:	20000ef8 	.word	0x20000ef8
 800ac68:	20000df4 	.word	0x20000df4
 800ac6c:	e000ed04 	.word	0xe000ed04

0800ac70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d017      	beq.n	800acb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac82:	4b13      	ldr	r3, [pc, #76]	; (800acd0 <vTaskDelay+0x60>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <vTaskDelay+0x30>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	60bb      	str	r3, [r7, #8]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aca0:	f000 f87a 	bl	800ad98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aca4:	2100      	movs	r1, #0
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fbdc 	bl	800b464 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acac:	f000 f8bc 	bl	800ae28 <xTaskResumeAll>
 800acb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d107      	bne.n	800acc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800acb8:	4b06      	ldr	r3, [pc, #24]	; (800acd4 <vTaskDelay+0x64>)
 800acba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20000f18 	.word	0x20000f18
 800acd4:	e000ed04 	.word	0xe000ed04

0800acd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08a      	sub	sp, #40	; 0x28
 800acdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ace6:	463a      	mov	r2, r7
 800ace8:	1d39      	adds	r1, r7, #4
 800acea:	f107 0308 	add.w	r3, r7, #8
 800acee:	4618      	mov	r0, r3
 800acf0:	f7f6 fa8a 	bl	8001208 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	9202      	str	r2, [sp, #8]
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	2300      	movs	r3, #0
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	2300      	movs	r3, #0
 800ad04:	460a      	mov	r2, r1
 800ad06:	491e      	ldr	r1, [pc, #120]	; (800ad80 <vTaskStartScheduler+0xa8>)
 800ad08:	481e      	ldr	r0, [pc, #120]	; (800ad84 <vTaskStartScheduler+0xac>)
 800ad0a:	f7ff fe1e 	bl	800a94a <xTaskCreateStatic>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	4a1d      	ldr	r2, [pc, #116]	; (800ad88 <vTaskStartScheduler+0xb0>)
 800ad12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad14:	4b1c      	ldr	r3, [pc, #112]	; (800ad88 <vTaskStartScheduler+0xb0>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	617b      	str	r3, [r7, #20]
 800ad20:	e001      	b.n	800ad26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d116      	bne.n	800ad5a <vTaskStartScheduler+0x82>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	613b      	str	r3, [r7, #16]
}
 800ad3e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad40:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <vTaskStartScheduler+0xb4>)
 800ad42:	f04f 32ff 	mov.w	r2, #4294967295
 800ad46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad48:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <vTaskStartScheduler+0xb8>)
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad4e:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <vTaskStartScheduler+0xbc>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad54:	f000 fc68 	bl	800b628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad58:	e00e      	b.n	800ad78 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad60:	d10a      	bne.n	800ad78 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	60fb      	str	r3, [r7, #12]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <vTaskStartScheduler+0x9e>
}
 800ad78:	bf00      	nop
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	0801ddc8 	.word	0x0801ddc8
 800ad84:	0800b1d1 	.word	0x0800b1d1
 800ad88:	20000f14 	.word	0x20000f14
 800ad8c:	20000f10 	.word	0x20000f10
 800ad90:	20000efc 	.word	0x20000efc
 800ad94:	20000ef4 	.word	0x20000ef4

0800ad98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ad9c:	4b04      	ldr	r3, [pc, #16]	; (800adb0 <vTaskSuspendAll+0x18>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3301      	adds	r3, #1
 800ada2:	4a03      	ldr	r2, [pc, #12]	; (800adb0 <vTaskSuspendAll+0x18>)
 800ada4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ada6:	bf00      	nop
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bc80      	pop	{r7}
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	20000f18 	.word	0x20000f18

0800adb4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800adba:	2300      	movs	r3, #0
 800adbc:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800adbe:	2301      	movs	r3, #1
 800adc0:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800adc2:	4b14      	ldr	r3, [pc, #80]	; (800ae14 <prvGetExpectedIdleTime+0x60>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d201      	bcs.n	800add0 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800adcc:	2301      	movs	r3, #1
 800adce:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800add0:	4b11      	ldr	r3, [pc, #68]	; (800ae18 <prvGetExpectedIdleTime+0x64>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	2b00      	cmp	r3, #0
 800add8:	d002      	beq.n	800ade0 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e012      	b.n	800ae06 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ade0:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <prvGetExpectedIdleTime+0x68>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d902      	bls.n	800adee <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e00b      	b.n	800ae06 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	e005      	b.n	800ae06 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800adfa:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <prvGetExpectedIdleTime+0x6c>)
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	4b09      	ldr	r3, [pc, #36]	; (800ae24 <prvGetExpectedIdleTime+0x70>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800ae06:	68fb      	ldr	r3, [r7, #12]
	}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bc80      	pop	{r7}
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	20000ef8 	.word	0x20000ef8
 800ae18:	20000df0 	.word	0x20000df0
 800ae1c:	20000df4 	.word	0x20000df4
 800ae20:	20000f10 	.word	0x20000f10
 800ae24:	20000ef4 	.word	0x20000ef4

0800ae28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae36:	4b41      	ldr	r3, [pc, #260]	; (800af3c <xTaskResumeAll+0x114>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	603b      	str	r3, [r7, #0]
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae54:	f000 fc5a 	bl	800b70c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae58:	4b38      	ldr	r3, [pc, #224]	; (800af3c <xTaskResumeAll+0x114>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	4a37      	ldr	r2, [pc, #220]	; (800af3c <xTaskResumeAll+0x114>)
 800ae60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae62:	4b36      	ldr	r3, [pc, #216]	; (800af3c <xTaskResumeAll+0x114>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d161      	bne.n	800af2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae6a:	4b35      	ldr	r3, [pc, #212]	; (800af40 <xTaskResumeAll+0x118>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d05d      	beq.n	800af2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae72:	e02e      	b.n	800aed2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae74:	4b33      	ldr	r3, [pc, #204]	; (800af44 <xTaskResumeAll+0x11c>)
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3318      	adds	r3, #24
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7ff fd39 	bl	800a8f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff fd34 	bl	800a8f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	2201      	movs	r2, #1
 800ae96:	409a      	lsls	r2, r3
 800ae98:	4b2b      	ldr	r3, [pc, #172]	; (800af48 <xTaskResumeAll+0x120>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	4a2a      	ldr	r2, [pc, #168]	; (800af48 <xTaskResumeAll+0x120>)
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4a27      	ldr	r2, [pc, #156]	; (800af4c <xTaskResumeAll+0x124>)
 800aeb0:	441a      	add	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	4610      	mov	r0, r2
 800aeba:	f7ff fcc2 	bl	800a842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec2:	4b23      	ldr	r3, [pc, #140]	; (800af50 <xTaskResumeAll+0x128>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d302      	bcc.n	800aed2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800aecc:	4b21      	ldr	r3, [pc, #132]	; (800af54 <xTaskResumeAll+0x12c>)
 800aece:	2201      	movs	r2, #1
 800aed0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aed2:	4b1c      	ldr	r3, [pc, #112]	; (800af44 <xTaskResumeAll+0x11c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1cc      	bne.n	800ae74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aee0:	f000 fa82 	bl	800b3e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aee4:	4b1c      	ldr	r3, [pc, #112]	; (800af58 <xTaskResumeAll+0x130>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d010      	beq.n	800af12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aef0:	f000 f85c 	bl	800afac <xTaskIncrementTick>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800aefa:	4b16      	ldr	r3, [pc, #88]	; (800af54 <xTaskResumeAll+0x12c>)
 800aefc:	2201      	movs	r2, #1
 800aefe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3b01      	subs	r3, #1
 800af04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1f1      	bne.n	800aef0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800af0c:	4b12      	ldr	r3, [pc, #72]	; (800af58 <xTaskResumeAll+0x130>)
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af12:	4b10      	ldr	r3, [pc, #64]	; (800af54 <xTaskResumeAll+0x12c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d009      	beq.n	800af2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af1a:	2301      	movs	r3, #1
 800af1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af1e:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <xTaskResumeAll+0x134>)
 800af20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af2e:	f000 fc1d 	bl	800b76c <vPortExitCritical>

	return xAlreadyYielded;
 800af32:	68bb      	ldr	r3, [r7, #8]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	20000f18 	.word	0x20000f18
 800af40:	20000ef0 	.word	0x20000ef0
 800af44:	20000eb0 	.word	0x20000eb0
 800af48:	20000ef8 	.word	0x20000ef8
 800af4c:	20000df4 	.word	0x20000df4
 800af50:	20000df0 	.word	0x20000df0
 800af54:	20000f04 	.word	0x20000f04
 800af58:	20000f00 	.word	0x20000f00
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800af68:	4b0e      	ldr	r3, [pc, #56]	; (800afa4 <vTaskStepTick+0x44>)
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	441a      	add	r2, r3
 800af70:	4b0d      	ldr	r3, [pc, #52]	; (800afa8 <vTaskStepTick+0x48>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d90a      	bls.n	800af8e <vTaskStepTick+0x2e>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	60fb      	str	r3, [r7, #12]
}
 800af8a:	bf00      	nop
 800af8c:	e7fe      	b.n	800af8c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800af8e:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <vTaskStepTick+0x44>)
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4413      	add	r3, r2
 800af96:	4a03      	ldr	r2, [pc, #12]	; (800afa4 <vTaskStepTick+0x44>)
 800af98:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800af9a:	bf00      	nop
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr
 800afa4:	20000ef4 	.word	0x20000ef4
 800afa8:	20000f10 	.word	0x20000f10

0800afac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afb2:	2300      	movs	r3, #0
 800afb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afb6:	4b4e      	ldr	r3, [pc, #312]	; (800b0f0 <xTaskIncrementTick+0x144>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f040 8088 	bne.w	800b0d0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afc0:	4b4c      	ldr	r3, [pc, #304]	; (800b0f4 <xTaskIncrementTick+0x148>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3301      	adds	r3, #1
 800afc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afc8:	4a4a      	ldr	r2, [pc, #296]	; (800b0f4 <xTaskIncrementTick+0x148>)
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d120      	bne.n	800b016 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afd4:	4b48      	ldr	r3, [pc, #288]	; (800b0f8 <xTaskIncrementTick+0x14c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00a      	beq.n	800aff4 <xTaskIncrementTick+0x48>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	603b      	str	r3, [r7, #0]
}
 800aff0:	bf00      	nop
 800aff2:	e7fe      	b.n	800aff2 <xTaskIncrementTick+0x46>
 800aff4:	4b40      	ldr	r3, [pc, #256]	; (800b0f8 <xTaskIncrementTick+0x14c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	4b40      	ldr	r3, [pc, #256]	; (800b0fc <xTaskIncrementTick+0x150>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a3e      	ldr	r2, [pc, #248]	; (800b0f8 <xTaskIncrementTick+0x14c>)
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	4a3e      	ldr	r2, [pc, #248]	; (800b0fc <xTaskIncrementTick+0x150>)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6013      	str	r3, [r2, #0]
 800b008:	4b3d      	ldr	r3, [pc, #244]	; (800b100 <xTaskIncrementTick+0x154>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	4a3c      	ldr	r2, [pc, #240]	; (800b100 <xTaskIncrementTick+0x154>)
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	f000 f9e9 	bl	800b3e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b016:	4b3b      	ldr	r3, [pc, #236]	; (800b104 <xTaskIncrementTick+0x158>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d348      	bcc.n	800b0b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b020:	4b35      	ldr	r3, [pc, #212]	; (800b0f8 <xTaskIncrementTick+0x14c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d104      	bne.n	800b034 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b02a:	4b36      	ldr	r3, [pc, #216]	; (800b104 <xTaskIncrementTick+0x158>)
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295
 800b030:	601a      	str	r2, [r3, #0]
					break;
 800b032:	e03e      	b.n	800b0b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b034:	4b30      	ldr	r3, [pc, #192]	; (800b0f8 <xTaskIncrementTick+0x14c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d203      	bcs.n	800b054 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b04c:	4a2d      	ldr	r2, [pc, #180]	; (800b104 <xTaskIncrementTick+0x158>)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b052:	e02e      	b.n	800b0b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	3304      	adds	r3, #4
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff fc4d 	bl	800a8f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b062:	2b00      	cmp	r3, #0
 800b064:	d004      	beq.n	800b070 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	3318      	adds	r3, #24
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fc44 	bl	800a8f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b074:	2201      	movs	r2, #1
 800b076:	409a      	lsls	r2, r3
 800b078:	4b23      	ldr	r3, [pc, #140]	; (800b108 <xTaskIncrementTick+0x15c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	4a22      	ldr	r2, [pc, #136]	; (800b108 <xTaskIncrementTick+0x15c>)
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4a1f      	ldr	r2, [pc, #124]	; (800b10c <xTaskIncrementTick+0x160>)
 800b090:	441a      	add	r2, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	3304      	adds	r3, #4
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7ff fbd2 	bl	800a842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a2:	4b1b      	ldr	r3, [pc, #108]	; (800b110 <xTaskIncrementTick+0x164>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d3b9      	bcc.n	800b020 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0b0:	e7b6      	b.n	800b020 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0b2:	4b17      	ldr	r3, [pc, #92]	; (800b110 <xTaskIncrementTick+0x164>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b8:	4914      	ldr	r1, [pc, #80]	; (800b10c <xTaskIncrementTick+0x160>)
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d907      	bls.n	800b0da <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	617b      	str	r3, [r7, #20]
 800b0ce:	e004      	b.n	800b0da <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b0d0:	4b10      	ldr	r3, [pc, #64]	; (800b114 <xTaskIncrementTick+0x168>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	4a0f      	ldr	r2, [pc, #60]	; (800b114 <xTaskIncrementTick+0x168>)
 800b0d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b0da:	4b0f      	ldr	r3, [pc, #60]	; (800b118 <xTaskIncrementTick+0x16c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b0e6:	697b      	ldr	r3, [r7, #20]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000f18 	.word	0x20000f18
 800b0f4:	20000ef4 	.word	0x20000ef4
 800b0f8:	20000ea8 	.word	0x20000ea8
 800b0fc:	20000eac 	.word	0x20000eac
 800b100:	20000f08 	.word	0x20000f08
 800b104:	20000f10 	.word	0x20000f10
 800b108:	20000ef8 	.word	0x20000ef8
 800b10c:	20000df4 	.word	0x20000df4
 800b110:	20000df0 	.word	0x20000df0
 800b114:	20000f00 	.word	0x20000f00
 800b118:	20000f04 	.word	0x20000f04

0800b11c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b11c:	b480      	push	{r7}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b122:	4b26      	ldr	r3, [pc, #152]	; (800b1bc <vTaskSwitchContext+0xa0>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b12a:	4b25      	ldr	r3, [pc, #148]	; (800b1c0 <vTaskSwitchContext+0xa4>)
 800b12c:	2201      	movs	r2, #1
 800b12e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b130:	e03f      	b.n	800b1b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b132:	4b23      	ldr	r3, [pc, #140]	; (800b1c0 <vTaskSwitchContext+0xa4>)
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b138:	4b22      	ldr	r3, [pc, #136]	; (800b1c4 <vTaskSwitchContext+0xa8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	fab3 f383 	clz	r3, r3
 800b144:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b146:	7afb      	ldrb	r3, [r7, #11]
 800b148:	f1c3 031f 	rsb	r3, r3, #31
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	491e      	ldr	r1, [pc, #120]	; (800b1c8 <vTaskSwitchContext+0xac>)
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	440b      	add	r3, r1
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	607b      	str	r3, [r7, #4]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <vTaskSwitchContext+0x5a>
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	4613      	mov	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4a11      	ldr	r2, [pc, #68]	; (800b1c8 <vTaskSwitchContext+0xac>)
 800b184:	4413      	add	r3, r2
 800b186:	613b      	str	r3, [r7, #16]
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	605a      	str	r2, [r3, #4]
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3308      	adds	r3, #8
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d104      	bne.n	800b1a8 <vTaskSwitchContext+0x8c>
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	685a      	ldr	r2, [r3, #4]
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	605a      	str	r2, [r3, #4]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	4a07      	ldr	r2, [pc, #28]	; (800b1cc <vTaskSwitchContext+0xb0>)
 800b1b0:	6013      	str	r3, [r2, #0]
}
 800b1b2:	bf00      	nop
 800b1b4:	371c      	adds	r7, #28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bc80      	pop	{r7}
 800b1ba:	4770      	bx	lr
 800b1bc:	20000f18 	.word	0x20000f18
 800b1c0:	20000f04 	.word	0x20000f04
 800b1c4:	20000ef8 	.word	0x20000ef8
 800b1c8:	20000df4 	.word	0x20000df4
 800b1cc:	20000df0 	.word	0x20000df0

0800b1d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1d8:	f000 f8a8 	bl	800b32c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1dc:	4b18      	ldr	r3, [pc, #96]	; (800b240 <prvIdleTask+0x70>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d907      	bls.n	800b1f4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b1e4:	4b17      	ldr	r3, [pc, #92]	; (800b244 <prvIdleTask+0x74>)
 800b1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800b1f4:	f7ff fdde 	bl	800adb4 <prvGetExpectedIdleTime>
 800b1f8:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d9eb      	bls.n	800b1d8 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800b200:	f7ff fdca 	bl	800ad98 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b204:	4b10      	ldr	r3, [pc, #64]	; (800b248 <prvIdleTask+0x78>)
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	4b10      	ldr	r3, [pc, #64]	; (800b24c <prvIdleTask+0x7c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d20a      	bcs.n	800b226 <prvIdleTask+0x56>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60bb      	str	r3, [r7, #8]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800b226:	f7ff fdc5 	bl	800adb4 <prvGetExpectedIdleTime>
 800b22a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d902      	bls.n	800b238 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 fb0a 	bl	800b84c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800b238:	f7ff fdf6 	bl	800ae28 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800b23c:	e7cc      	b.n	800b1d8 <prvIdleTask+0x8>
 800b23e:	bf00      	nop
 800b240:	20000df4 	.word	0x20000df4
 800b244:	e000ed04 	.word	0xe000ed04
 800b248:	20000f10 	.word	0x20000f10
 800b24c:	20000ef4 	.word	0x20000ef4

0800b250 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800b256:	2301      	movs	r3, #1
 800b258:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800b25a:	2301      	movs	r3, #1
 800b25c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800b25e:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <eTaskConfirmSleepModeStatus+0x4c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b266:	2300      	movs	r3, #0
 800b268:	71fb      	strb	r3, [r7, #7]
 800b26a:	e010      	b.n	800b28e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800b26c:	4b0c      	ldr	r3, [pc, #48]	; (800b2a0 <eTaskConfirmSleepModeStatus+0x50>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b274:	2300      	movs	r3, #0
 800b276:	71fb      	strb	r3, [r7, #7]
 800b278:	e009      	b.n	800b28e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800b27a:	4b0a      	ldr	r3, [pc, #40]	; (800b2a4 <eTaskConfirmSleepModeStatus+0x54>)
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <eTaskConfirmSleepModeStatus+0x58>)
 800b280:	6819      	ldr	r1, [r3, #0]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	1acb      	subs	r3, r1, r3
 800b286:	429a      	cmp	r2, r3
 800b288:	d101      	bne.n	800b28e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800b28a:	2302      	movs	r3, #2
 800b28c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800b28e:	79fb      	ldrb	r3, [r7, #7]
	}
 800b290:	4618      	mov	r0, r3
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	bc80      	pop	{r7}
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	20000eb0 	.word	0x20000eb0
 800b2a0:	20000f04 	.word	0x20000f04
 800b2a4:	20000edc 	.word	0x20000edc
 800b2a8:	20000ef0 	.word	0x20000ef0

0800b2ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	607b      	str	r3, [r7, #4]
 800b2b6:	e00c      	b.n	800b2d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4a12      	ldr	r2, [pc, #72]	; (800b30c <prvInitialiseTaskLists+0x60>)
 800b2c4:	4413      	add	r3, r2
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff fa90 	bl	800a7ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b06      	cmp	r3, #6
 800b2d6:	d9ef      	bls.n	800b2b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2d8:	480d      	ldr	r0, [pc, #52]	; (800b310 <prvInitialiseTaskLists+0x64>)
 800b2da:	f7ff fa87 	bl	800a7ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2de:	480d      	ldr	r0, [pc, #52]	; (800b314 <prvInitialiseTaskLists+0x68>)
 800b2e0:	f7ff fa84 	bl	800a7ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2e4:	480c      	ldr	r0, [pc, #48]	; (800b318 <prvInitialiseTaskLists+0x6c>)
 800b2e6:	f7ff fa81 	bl	800a7ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2ea:	480c      	ldr	r0, [pc, #48]	; (800b31c <prvInitialiseTaskLists+0x70>)
 800b2ec:	f7ff fa7e 	bl	800a7ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2f0:	480b      	ldr	r0, [pc, #44]	; (800b320 <prvInitialiseTaskLists+0x74>)
 800b2f2:	f7ff fa7b 	bl	800a7ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <prvInitialiseTaskLists+0x78>)
 800b2f8:	4a05      	ldr	r2, [pc, #20]	; (800b310 <prvInitialiseTaskLists+0x64>)
 800b2fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <prvInitialiseTaskLists+0x7c>)
 800b2fe:	4a05      	ldr	r2, [pc, #20]	; (800b314 <prvInitialiseTaskLists+0x68>)
 800b300:	601a      	str	r2, [r3, #0]
}
 800b302:	bf00      	nop
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20000df4 	.word	0x20000df4
 800b310:	20000e80 	.word	0x20000e80
 800b314:	20000e94 	.word	0x20000e94
 800b318:	20000eb0 	.word	0x20000eb0
 800b31c:	20000ec4 	.word	0x20000ec4
 800b320:	20000edc 	.word	0x20000edc
 800b324:	20000ea8 	.word	0x20000ea8
 800b328:	20000eac 	.word	0x20000eac

0800b32c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b332:	e019      	b.n	800b368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b334:	f000 f9ea 	bl	800b70c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b338:	4b10      	ldr	r3, [pc, #64]	; (800b37c <prvCheckTasksWaitingTermination+0x50>)
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3304      	adds	r3, #4
 800b344:	4618      	mov	r0, r3
 800b346:	f7ff fad7 	bl	800a8f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b34a:	4b0d      	ldr	r3, [pc, #52]	; (800b380 <prvCheckTasksWaitingTermination+0x54>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3b01      	subs	r3, #1
 800b350:	4a0b      	ldr	r2, [pc, #44]	; (800b380 <prvCheckTasksWaitingTermination+0x54>)
 800b352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b354:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <prvCheckTasksWaitingTermination+0x58>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3b01      	subs	r3, #1
 800b35a:	4a0a      	ldr	r2, [pc, #40]	; (800b384 <prvCheckTasksWaitingTermination+0x58>)
 800b35c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b35e:	f000 fa05 	bl	800b76c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f810 	bl	800b388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b368:	4b06      	ldr	r3, [pc, #24]	; (800b384 <prvCheckTasksWaitingTermination+0x58>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e1      	bne.n	800b334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000ec4 	.word	0x20000ec4
 800b380:	20000ef0 	.word	0x20000ef0
 800b384:	20000ed8 	.word	0x20000ed8

0800b388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b396:	2b00      	cmp	r3, #0
 800b398:	d108      	bne.n	800b3ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fc20 	bl	800bbe4 <vPortFree>
				vPortFree( pxTCB );
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fc1d 	bl	800bbe4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b3aa:	e018      	b.n	800b3de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d103      	bne.n	800b3be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fc14 	bl	800bbe4 <vPortFree>
	}
 800b3bc:	e00f      	b.n	800b3de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d00a      	beq.n	800b3de <prvDeleteTCB+0x56>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	f383 8811 	msr	BASEPRI, r3
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	60fb      	str	r3, [r7, #12]
}
 800b3da:	bf00      	nop
 800b3dc:	e7fe      	b.n	800b3dc <prvDeleteTCB+0x54>
	}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <prvResetNextTaskUnblockTime+0x38>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d104      	bne.n	800b402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <prvResetNextTaskUnblockTime+0x3c>)
 800b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b400:	e008      	b.n	800b414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b402:	4b07      	ldr	r3, [pc, #28]	; (800b420 <prvResetNextTaskUnblockTime+0x38>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4a04      	ldr	r2, [pc, #16]	; (800b424 <prvResetNextTaskUnblockTime+0x3c>)
 800b412:	6013      	str	r3, [r2, #0]
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	bc80      	pop	{r7}
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	20000ea8 	.word	0x20000ea8
 800b424:	20000f10 	.word	0x20000f10

0800b428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b42e:	4b0b      	ldr	r3, [pc, #44]	; (800b45c <xTaskGetSchedulerState+0x34>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d102      	bne.n	800b43c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b436:	2301      	movs	r3, #1
 800b438:	607b      	str	r3, [r7, #4]
 800b43a:	e008      	b.n	800b44e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b43c:	4b08      	ldr	r3, [pc, #32]	; (800b460 <xTaskGetSchedulerState+0x38>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b444:	2302      	movs	r3, #2
 800b446:	607b      	str	r3, [r7, #4]
 800b448:	e001      	b.n	800b44e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b44a:	2300      	movs	r3, #0
 800b44c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b44e:	687b      	ldr	r3, [r7, #4]
	}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	bc80      	pop	{r7}
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	20000efc 	.word	0x20000efc
 800b460:	20000f18 	.word	0x20000f18

0800b464 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b46e:	4b29      	ldr	r3, [pc, #164]	; (800b514 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b474:	4b28      	ldr	r3, [pc, #160]	; (800b518 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	3304      	adds	r3, #4
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7ff fa3c 	bl	800a8f8 <uxListRemove>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10b      	bne.n	800b49e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b486:	4b24      	ldr	r3, [pc, #144]	; (800b518 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48c:	2201      	movs	r2, #1
 800b48e:	fa02 f303 	lsl.w	r3, r2, r3
 800b492:	43da      	mvns	r2, r3
 800b494:	4b21      	ldr	r3, [pc, #132]	; (800b51c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4013      	ands	r3, r2
 800b49a:	4a20      	ldr	r2, [pc, #128]	; (800b51c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b49c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a4:	d10a      	bne.n	800b4bc <prvAddCurrentTaskToDelayedList+0x58>
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d007      	beq.n	800b4bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ac:	4b1a      	ldr	r3, [pc, #104]	; (800b518 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	481a      	ldr	r0, [pc, #104]	; (800b520 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b4b6:	f7ff f9c4 	bl	800a842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4ba:	e026      	b.n	800b50a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4c4:	4b14      	ldr	r3, [pc, #80]	; (800b518 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d209      	bcs.n	800b4e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4d4:	4b13      	ldr	r3, [pc, #76]	; (800b524 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3304      	adds	r3, #4
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	f7ff f9d1 	bl	800a888 <vListInsert>
}
 800b4e6:	e010      	b.n	800b50a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4e8:	4b0f      	ldr	r3, [pc, #60]	; (800b528 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	f7ff f9c7 	bl	800a888 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4fa:	4b0c      	ldr	r3, [pc, #48]	; (800b52c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	429a      	cmp	r2, r3
 800b502:	d202      	bcs.n	800b50a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b504:	4a09      	ldr	r2, [pc, #36]	; (800b52c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	6013      	str	r3, [r2, #0]
}
 800b50a:	bf00      	nop
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20000ef4 	.word	0x20000ef4
 800b518:	20000df0 	.word	0x20000df0
 800b51c:	20000ef8 	.word	0x20000ef8
 800b520:	20000edc 	.word	0x20000edc
 800b524:	20000eac 	.word	0x20000eac
 800b528:	20000ea8 	.word	0x20000ea8
 800b52c:	20000f10 	.word	0x20000f10

0800b530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3b04      	subs	r3, #4
 800b540:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3b04      	subs	r3, #4
 800b54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f023 0201 	bic.w	r2, r3, #1
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3b04      	subs	r3, #4
 800b55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b560:	4a08      	ldr	r2, [pc, #32]	; (800b584 <pxPortInitialiseStack+0x54>)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	3b14      	subs	r3, #20
 800b56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3b20      	subs	r3, #32
 800b576:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b578:	68fb      	ldr	r3, [r7, #12]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	bc80      	pop	{r7}
 800b582:	4770      	bx	lr
 800b584:	0800b589 	.word	0x0800b589

0800b588 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b58e:	2300      	movs	r3, #0
 800b590:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b592:	4b12      	ldr	r3, [pc, #72]	; (800b5dc <prvTaskExitError+0x54>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59a:	d00a      	beq.n	800b5b2 <prvTaskExitError+0x2a>
	__asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	60fb      	str	r3, [r7, #12]
}
 800b5ae:	bf00      	nop
 800b5b0:	e7fe      	b.n	800b5b0 <prvTaskExitError+0x28>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	60bb      	str	r3, [r7, #8]
}
 800b5c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b5c6:	bf00      	nop
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0fc      	beq.n	800b5c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b5ce:	bf00      	nop
 800b5d0:	bf00      	nop
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bc80      	pop	{r7}
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20000080 	.word	0x20000080

0800b5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5e0:	4b07      	ldr	r3, [pc, #28]	; (800b600 <pxCurrentTCBConst2>)
 800b5e2:	6819      	ldr	r1, [r3, #0]
 800b5e4:	6808      	ldr	r0, [r1, #0]
 800b5e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b5ea:	f380 8809 	msr	PSP, r0
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f04f 0000 	mov.w	r0, #0
 800b5f6:	f380 8811 	msr	BASEPRI, r0
 800b5fa:	f04e 0e0d 	orr.w	lr, lr, #13
 800b5fe:	4770      	bx	lr

0800b600 <pxCurrentTCBConst2>:
 800b600:	20000df0 	.word	0x20000df0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop

0800b608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b608:	4806      	ldr	r0, [pc, #24]	; (800b624 <prvPortStartFirstTask+0x1c>)
 800b60a:	6800      	ldr	r0, [r0, #0]
 800b60c:	6800      	ldr	r0, [r0, #0]
 800b60e:	f380 8808 	msr	MSP, r0
 800b612:	b662      	cpsie	i
 800b614:	b661      	cpsie	f
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	df00      	svc	0
 800b620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b622:	bf00      	nop
 800b624:	e000ed08 	.word	0xe000ed08

0800b628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b62e:	4b32      	ldr	r3, [pc, #200]	; (800b6f8 <xPortStartScheduler+0xd0>)
 800b630:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	b2db      	uxtb	r3, r3
 800b638:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	22ff      	movs	r2, #255	; 0xff
 800b63e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b648:	78fb      	ldrb	r3, [r7, #3]
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b650:	b2da      	uxtb	r2, r3
 800b652:	4b2a      	ldr	r3, [pc, #168]	; (800b6fc <xPortStartScheduler+0xd4>)
 800b654:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b656:	4b2a      	ldr	r3, [pc, #168]	; (800b700 <xPortStartScheduler+0xd8>)
 800b658:	2207      	movs	r2, #7
 800b65a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b65c:	e009      	b.n	800b672 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b65e:	4b28      	ldr	r3, [pc, #160]	; (800b700 <xPortStartScheduler+0xd8>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3b01      	subs	r3, #1
 800b664:	4a26      	ldr	r2, [pc, #152]	; (800b700 <xPortStartScheduler+0xd8>)
 800b666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b668:	78fb      	ldrb	r3, [r7, #3]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	005b      	lsls	r3, r3, #1
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b672:	78fb      	ldrb	r3, [r7, #3]
 800b674:	b2db      	uxtb	r3, r3
 800b676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b67a:	2b80      	cmp	r3, #128	; 0x80
 800b67c:	d0ef      	beq.n	800b65e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b67e:	4b20      	ldr	r3, [pc, #128]	; (800b700 <xPortStartScheduler+0xd8>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f1c3 0307 	rsb	r3, r3, #7
 800b686:	2b04      	cmp	r3, #4
 800b688:	d00a      	beq.n	800b6a0 <xPortStartScheduler+0x78>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	60bb      	str	r3, [r7, #8]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6a0:	4b17      	ldr	r3, [pc, #92]	; (800b700 <xPortStartScheduler+0xd8>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	021b      	lsls	r3, r3, #8
 800b6a6:	4a16      	ldr	r2, [pc, #88]	; (800b700 <xPortStartScheduler+0xd8>)
 800b6a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6aa:	4b15      	ldr	r3, [pc, #84]	; (800b700 <xPortStartScheduler+0xd8>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6b2:	4a13      	ldr	r2, [pc, #76]	; (800b700 <xPortStartScheduler+0xd8>)
 800b6b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6be:	4b11      	ldr	r3, [pc, #68]	; (800b704 <xPortStartScheduler+0xdc>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a10      	ldr	r2, [pc, #64]	; (800b704 <xPortStartScheduler+0xdc>)
 800b6c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6ca:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <xPortStartScheduler+0xdc>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a0d      	ldr	r2, [pc, #52]	; (800b704 <xPortStartScheduler+0xdc>)
 800b6d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6d6:	f000 f985 	bl	800b9e4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6da:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <xPortStartScheduler+0xe0>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6e0:	f7ff ff92 	bl	800b608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6e4:	f7ff fd1a 	bl	800b11c <vTaskSwitchContext>
	prvTaskExitError();
 800b6e8:	f7ff ff4e 	bl	800b588 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	e000e400 	.word	0xe000e400
 800b6fc:	20000f28 	.word	0x20000f28
 800b700:	20000f2c 	.word	0x20000f2c
 800b704:	e000ed20 	.word	0xe000ed20
 800b708:	20000080 	.word	0x20000080

0800b70c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	607b      	str	r3, [r7, #4]
}
 800b724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b726:	4b0f      	ldr	r3, [pc, #60]	; (800b764 <vPortEnterCritical+0x58>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3301      	adds	r3, #1
 800b72c:	4a0d      	ldr	r2, [pc, #52]	; (800b764 <vPortEnterCritical+0x58>)
 800b72e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b730:	4b0c      	ldr	r3, [pc, #48]	; (800b764 <vPortEnterCritical+0x58>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d10f      	bne.n	800b758 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b738:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <vPortEnterCritical+0x5c>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00a      	beq.n	800b758 <vPortEnterCritical+0x4c>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	603b      	str	r3, [r7, #0]
}
 800b754:	bf00      	nop
 800b756:	e7fe      	b.n	800b756 <vPortEnterCritical+0x4a>
	}
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bc80      	pop	{r7}
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	20000080 	.word	0x20000080
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b772:	4b11      	ldr	r3, [pc, #68]	; (800b7b8 <vPortExitCritical+0x4c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <vPortExitCritical+0x24>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	607b      	str	r3, [r7, #4]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b790:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <vPortExitCritical+0x4c>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3b01      	subs	r3, #1
 800b796:	4a08      	ldr	r2, [pc, #32]	; (800b7b8 <vPortExitCritical+0x4c>)
 800b798:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b79a:	4b07      	ldr	r3, [pc, #28]	; (800b7b8 <vPortExitCritical+0x4c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d105      	bne.n	800b7ae <vPortExitCritical+0x42>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b7ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bc80      	pop	{r7}
 800b7b6:	4770      	bx	lr
 800b7b8:	20000080 	.word	0x20000080
 800b7bc:	00000000 	.word	0x00000000

0800b7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7c0:	f3ef 8009 	mrs	r0, PSP
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <pxCurrentTCBConst>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b7d0:	6010      	str	r0, [r2, #0]
 800b7d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b7d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7da:	f380 8811 	msr	BASEPRI, r0
 800b7de:	f7ff fc9d 	bl	800b11c <vTaskSwitchContext>
 800b7e2:	f04f 0000 	mov.w	r0, #0
 800b7e6:	f380 8811 	msr	BASEPRI, r0
 800b7ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b7ee:	6819      	ldr	r1, [r3, #0]
 800b7f0:	6808      	ldr	r0, [r1, #0]
 800b7f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b7f6:	f380 8809 	msr	PSP, r0
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	4770      	bx	lr

0800b800 <pxCurrentTCBConst>:
 800b800:	20000df0 	.word	0x20000df0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b822:	f7ff fbc3 	bl	800afac <xTaskIncrementTick>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <xPortSysTickHandler+0x40>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	2300      	movs	r3, #0
 800b836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f383 8811 	msr	BASEPRI, r3
}
 800b83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b088      	sub	sp, #32
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	4b5d      	ldr	r3, [pc, #372]	; (800b9cc <vPortSuppressTicksAndSleep+0x180>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d902      	bls.n	800b864 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800b85e:	4b5b      	ldr	r3, [pc, #364]	; (800b9cc <vPortSuppressTicksAndSleep+0x180>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b864:	4b5a      	ldr	r3, [pc, #360]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a59      	ldr	r2, [pc, #356]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b86a:	f023 0301 	bic.w	r3, r3, #1
 800b86e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b870:	4b58      	ldr	r3, [pc, #352]	; (800b9d4 <vPortSuppressTicksAndSleep+0x188>)
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3b01      	subs	r3, #1
 800b878:	4957      	ldr	r1, [pc, #348]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b87a:	6809      	ldr	r1, [r1, #0]
 800b87c:	fb01 f303 	mul.w	r3, r1, r3
 800b880:	4413      	add	r3, r2
 800b882:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b884:	4b55      	ldr	r3, [pc, #340]	; (800b9dc <vPortSuppressTicksAndSleep+0x190>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	69fa      	ldr	r2, [r7, #28]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d904      	bls.n	800b898 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800b88e:	4b53      	ldr	r3, [pc, #332]	; (800b9dc <vPortSuppressTicksAndSleep+0x190>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	69fa      	ldr	r2, [r7, #28]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800b898:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b89a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b89e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b8a2:	f7ff fcd5 	bl	800b250 <eTaskConfirmSleepModeStatus>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d110      	bne.n	800b8ce <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b8ac:	4b49      	ldr	r3, [pc, #292]	; (800b9d4 <vPortSuppressTicksAndSleep+0x188>)
 800b8ae:	4a4c      	ldr	r2, [pc, #304]	; (800b9e0 <vPortSuppressTicksAndSleep+0x194>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b8b4:	4b46      	ldr	r3, [pc, #280]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a45      	ldr	r2, [pc, #276]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b8ba:	f043 0301 	orr.w	r3, r3, #1
 800b8be:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b8c0:	4b45      	ldr	r3, [pc, #276]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a46      	ldr	r2, [pc, #280]	; (800b9e0 <vPortSuppressTicksAndSleep+0x194>)
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b8ca:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b8cc:	e07a      	b.n	800b9c4 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b8ce:	4a44      	ldr	r2, [pc, #272]	; (800b9e0 <vPortSuppressTicksAndSleep+0x194>)
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8d4:	4b3f      	ldr	r3, [pc, #252]	; (800b9d4 <vPortSuppressTicksAndSleep+0x188>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b8da:	4b3d      	ldr	r3, [pc, #244]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a3c      	ldr	r2, [pc, #240]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b8e0:	f043 0301 	orr.w	r3, r3, #1
 800b8e4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800b8ea:	f107 030c 	add.w	r3, r7, #12
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7f5 fc5c 	bl	80011ac <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d004      	beq.n	800b904 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b8fa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b8fe:	bf30      	wfi
				__asm volatile( "isb" );
 800b900:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800b904:	1d3b      	adds	r3, r7, #4
 800b906:	4618      	mov	r0, r3
 800b908:	f7f5 fc6e 	bl	80011e8 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b90c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b90e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b912:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b916:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b918:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b91c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b920:	4b2b      	ldr	r3, [pc, #172]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b922:	2206      	movs	r2, #6
 800b924:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b926:	4b2a      	ldr	r3, [pc, #168]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01d      	beq.n	800b96e <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b932:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	4b27      	ldr	r3, [pc, #156]	; (800b9d4 <vPortSuppressTicksAndSleep+0x188>)
 800b938:	6819      	ldr	r1, [r3, #0]
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	1acb      	subs	r3, r1, r3
 800b93e:	4413      	add	r3, r2
 800b940:	3b01      	subs	r3, #1
 800b942:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b944:	4b25      	ldr	r3, [pc, #148]	; (800b9dc <vPortSuppressTicksAndSleep+0x190>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d304      	bcc.n	800b958 <vPortSuppressTicksAndSleep+0x10c>
 800b94e:	4b22      	ldr	r3, [pc, #136]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	429a      	cmp	r2, r3
 800b956:	d903      	bls.n	800b960 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b958:	4b1f      	ldr	r3, [pc, #124]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3b01      	subs	r3, #1
 800b95e:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b960:	4a1f      	ldr	r2, [pc, #124]	; (800b9e0 <vPortSuppressTicksAndSleep+0x194>)
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	3b01      	subs	r3, #1
 800b96a:	61bb      	str	r3, [r7, #24]
 800b96c:	e018      	b.n	800b9a0 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a19      	ldr	r2, [pc, #100]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b972:	6812      	ldr	r2, [r2, #0]
 800b974:	fb03 f202 	mul.w	r2, r3, r2
 800b978:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <vPortSuppressTicksAndSleep+0x188>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b980:	4b15      	ldr	r3, [pc, #84]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	fbb2 f3f3 	udiv	r3, r2, r3
 800b98a:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	3301      	adds	r3, #1
 800b990:	4a11      	ldr	r2, [pc, #68]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b992:	6812      	ldr	r2, [r2, #0]
 800b994:	fb03 f202 	mul.w	r2, r3, r2
 800b998:	4911      	ldr	r1, [pc, #68]	; (800b9e0 <vPortSuppressTicksAndSleep+0x194>)
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9a0:	4b0c      	ldr	r3, [pc, #48]	; (800b9d4 <vPortSuppressTicksAndSleep+0x188>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b9a6:	4b0a      	ldr	r3, [pc, #40]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a09      	ldr	r2, [pc, #36]	; (800b9d0 <vPortSuppressTicksAndSleep+0x184>)
 800b9ac:	f043 0301 	orr.w	r3, r3, #1
 800b9b0:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b9b2:	69b8      	ldr	r0, [r7, #24]
 800b9b4:	f7ff fad4 	bl	800af60 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b9b8:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <vPortSuppressTicksAndSleep+0x18c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a08      	ldr	r2, [pc, #32]	; (800b9e0 <vPortSuppressTicksAndSleep+0x194>)
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b9c2:	b662      	cpsie	i
	}
 800b9c4:	bf00      	nop
 800b9c6:	3720      	adds	r7, #32
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	20000f20 	.word	0x20000f20
 800b9d0:	e000e010 	.word	0xe000e010
 800b9d4:	e000e018 	.word	0xe000e018
 800b9d8:	20000f1c 	.word	0x20000f1c
 800b9dc:	20000f24 	.word	0x20000f24
 800b9e0:	e000e014 	.word	0xe000e014

0800b9e4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b9e8:	4b14      	ldr	r3, [pc, #80]	; (800ba3c <vPortSetupTimerInterrupt+0x58>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a14      	ldr	r2, [pc, #80]	; (800ba40 <vPortSetupTimerInterrupt+0x5c>)
 800b9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f2:	099b      	lsrs	r3, r3, #6
 800b9f4:	4a13      	ldr	r2, [pc, #76]	; (800ba44 <vPortSetupTimerInterrupt+0x60>)
 800b9f6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b9f8:	4b12      	ldr	r3, [pc, #72]	; (800ba44 <vPortSetupTimerInterrupt+0x60>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ba00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba04:	4a10      	ldr	r2, [pc, #64]	; (800ba48 <vPortSetupTimerInterrupt+0x64>)
 800ba06:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800ba08:	4b10      	ldr	r3, [pc, #64]	; (800ba4c <vPortSetupTimerInterrupt+0x68>)
 800ba0a:	222d      	movs	r2, #45	; 0x2d
 800ba0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba0e:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <vPortSetupTimerInterrupt+0x6c>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba14:	4b0f      	ldr	r3, [pc, #60]	; (800ba54 <vPortSetupTimerInterrupt+0x70>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba1a:	4b08      	ldr	r3, [pc, #32]	; (800ba3c <vPortSetupTimerInterrupt+0x58>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a08      	ldr	r2, [pc, #32]	; (800ba40 <vPortSetupTimerInterrupt+0x5c>)
 800ba20:	fba2 2303 	umull	r2, r3, r2, r3
 800ba24:	099b      	lsrs	r3, r3, #6
 800ba26:	4a0c      	ldr	r2, [pc, #48]	; (800ba58 <vPortSetupTimerInterrupt+0x74>)
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba2c:	4b08      	ldr	r3, [pc, #32]	; (800ba50 <vPortSetupTimerInterrupt+0x6c>)
 800ba2e:	2207      	movs	r2, #7
 800ba30:	601a      	str	r2, [r3, #0]
}
 800ba32:	bf00      	nop
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	20000000 	.word	0x20000000
 800ba40:	10624dd3 	.word	0x10624dd3
 800ba44:	20000f1c 	.word	0x20000f1c
 800ba48:	20000f20 	.word	0x20000f20
 800ba4c:	20000f24 	.word	0x20000f24
 800ba50:	e000e010 	.word	0xe000e010
 800ba54:	e000e018 	.word	0xe000e018
 800ba58:	e000e014 	.word	0xe000e014

0800ba5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b08a      	sub	sp, #40	; 0x28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba64:	2300      	movs	r3, #0
 800ba66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba68:	f7ff f996 	bl	800ad98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba6c:	4b58      	ldr	r3, [pc, #352]	; (800bbd0 <pvPortMalloc+0x174>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d101      	bne.n	800ba78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba74:	f000 f910 	bl	800bc98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba78:	4b56      	ldr	r3, [pc, #344]	; (800bbd4 <pvPortMalloc+0x178>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4013      	ands	r3, r2
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f040 808e 	bne.w	800bba2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01d      	beq.n	800bac8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ba8c:	2208      	movs	r2, #8
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4413      	add	r3, r2
 800ba92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d014      	beq.n	800bac8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f023 0307 	bic.w	r3, r3, #7
 800baa4:	3308      	adds	r3, #8
 800baa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f003 0307 	and.w	r3, r3, #7
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00a      	beq.n	800bac8 <pvPortMalloc+0x6c>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	617b      	str	r3, [r7, #20]
}
 800bac4:	bf00      	nop
 800bac6:	e7fe      	b.n	800bac6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d069      	beq.n	800bba2 <pvPortMalloc+0x146>
 800bace:	4b42      	ldr	r3, [pc, #264]	; (800bbd8 <pvPortMalloc+0x17c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d864      	bhi.n	800bba2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bad8:	4b40      	ldr	r3, [pc, #256]	; (800bbdc <pvPortMalloc+0x180>)
 800bada:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800badc:	4b3f      	ldr	r3, [pc, #252]	; (800bbdc <pvPortMalloc+0x180>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bae2:	e004      	b.n	800baee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d903      	bls.n	800bb00 <pvPortMalloc+0xa4>
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1f1      	bne.n	800bae4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb00:	4b33      	ldr	r3, [pc, #204]	; (800bbd0 <pvPortMalloc+0x174>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d04b      	beq.n	800bba2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2208      	movs	r2, #8
 800bb10:	4413      	add	r3, r2
 800bb12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	685a      	ldr	r2, [r3, #4]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	1ad2      	subs	r2, r2, r3
 800bb24:	2308      	movs	r3, #8
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d91f      	bls.n	800bb6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	f003 0307 	and.w	r3, r3, #7
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <pvPortMalloc+0xf8>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	613b      	str	r3, [r7, #16]
}
 800bb50:	bf00      	nop
 800bb52:	e7fe      	b.n	800bb52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	1ad2      	subs	r2, r2, r3
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb66:	69b8      	ldr	r0, [r7, #24]
 800bb68:	f000 f8f8 	bl	800bd5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb6c:	4b1a      	ldr	r3, [pc, #104]	; (800bbd8 <pvPortMalloc+0x17c>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	4a18      	ldr	r2, [pc, #96]	; (800bbd8 <pvPortMalloc+0x17c>)
 800bb78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb7a:	4b17      	ldr	r3, [pc, #92]	; (800bbd8 <pvPortMalloc+0x17c>)
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	4b18      	ldr	r3, [pc, #96]	; (800bbe0 <pvPortMalloc+0x184>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d203      	bcs.n	800bb8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb86:	4b14      	ldr	r3, [pc, #80]	; (800bbd8 <pvPortMalloc+0x17c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a15      	ldr	r2, [pc, #84]	; (800bbe0 <pvPortMalloc+0x184>)
 800bb8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	4b10      	ldr	r3, [pc, #64]	; (800bbd4 <pvPortMalloc+0x178>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	431a      	orrs	r2, r3
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	2200      	movs	r2, #0
 800bba0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bba2:	f7ff f941 	bl	800ae28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	f003 0307 	and.w	r3, r3, #7
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00a      	beq.n	800bbc6 <pvPortMalloc+0x16a>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	60fb      	str	r3, [r7, #12]
}
 800bbc2:	bf00      	nop
 800bbc4:	e7fe      	b.n	800bbc4 <pvPortMalloc+0x168>
	return pvReturn;
 800bbc6:	69fb      	ldr	r3, [r7, #28]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3728      	adds	r7, #40	; 0x28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20002ef0 	.word	0x20002ef0
 800bbd4:	20002efc 	.word	0x20002efc
 800bbd8:	20002ef4 	.word	0x20002ef4
 800bbdc:	20002ee8 	.word	0x20002ee8
 800bbe0:	20002ef8 	.word	0x20002ef8

0800bbe4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d048      	beq.n	800bc88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bbf6:	2308      	movs	r3, #8
 800bbf8:	425b      	negs	r3, r3
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	4b21      	ldr	r3, [pc, #132]	; (800bc90 <vPortFree+0xac>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10a      	bne.n	800bc28 <vPortFree+0x44>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	60fb      	str	r3, [r7, #12]
}
 800bc24:	bf00      	nop
 800bc26:	e7fe      	b.n	800bc26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00a      	beq.n	800bc46 <vPortFree+0x62>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	60bb      	str	r3, [r7, #8]
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	4b11      	ldr	r3, [pc, #68]	; (800bc90 <vPortFree+0xac>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4013      	ands	r3, r2
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d019      	beq.n	800bc88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d115      	bne.n	800bc88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	685a      	ldr	r2, [r3, #4]
 800bc60:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <vPortFree+0xac>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	43db      	mvns	r3, r3
 800bc66:	401a      	ands	r2, r3
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc6c:	f7ff f894 	bl	800ad98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	685a      	ldr	r2, [r3, #4]
 800bc74:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <vPortFree+0xb0>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4413      	add	r3, r2
 800bc7a:	4a06      	ldr	r2, [pc, #24]	; (800bc94 <vPortFree+0xb0>)
 800bc7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc7e:	6938      	ldr	r0, [r7, #16]
 800bc80:	f000 f86c 	bl	800bd5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bc84:	f7ff f8d0 	bl	800ae28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc88:	bf00      	nop
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20002efc 	.word	0x20002efc
 800bc94:	20002ef4 	.word	0x20002ef4

0800bc98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc9e:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 800bca2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bca4:	4b27      	ldr	r3, [pc, #156]	; (800bd44 <prvHeapInit+0xac>)
 800bca6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00c      	beq.n	800bccc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3307      	adds	r3, #7
 800bcb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f023 0307 	bic.w	r3, r3, #7
 800bcbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	4a1f      	ldr	r2, [pc, #124]	; (800bd44 <prvHeapInit+0xac>)
 800bcc8:	4413      	add	r3, r2
 800bcca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcd0:	4a1d      	ldr	r2, [pc, #116]	; (800bd48 <prvHeapInit+0xb0>)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcd6:	4b1c      	ldr	r3, [pc, #112]	; (800bd48 <prvHeapInit+0xb0>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	4413      	add	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bce4:	2208      	movs	r2, #8
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	1a9b      	subs	r3, r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f023 0307 	bic.w	r3, r3, #7
 800bcf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4a15      	ldr	r2, [pc, #84]	; (800bd4c <prvHeapInit+0xb4>)
 800bcf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bcfa:	4b14      	ldr	r3, [pc, #80]	; (800bd4c <prvHeapInit+0xb4>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd02:	4b12      	ldr	r3, [pc, #72]	; (800bd4c <prvHeapInit+0xb4>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2200      	movs	r2, #0
 800bd08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	1ad2      	subs	r2, r2, r3
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd18:	4b0c      	ldr	r3, [pc, #48]	; (800bd4c <prvHeapInit+0xb4>)
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	4a0a      	ldr	r2, [pc, #40]	; (800bd50 <prvHeapInit+0xb8>)
 800bd26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	4a09      	ldr	r2, [pc, #36]	; (800bd54 <prvHeapInit+0xbc>)
 800bd2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd30:	4b09      	ldr	r3, [pc, #36]	; (800bd58 <prvHeapInit+0xc0>)
 800bd32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd36:	601a      	str	r2, [r3, #0]
}
 800bd38:	bf00      	nop
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bc80      	pop	{r7}
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	20000f30 	.word	0x20000f30
 800bd48:	20002ee8 	.word	0x20002ee8
 800bd4c:	20002ef0 	.word	0x20002ef0
 800bd50:	20002ef8 	.word	0x20002ef8
 800bd54:	20002ef4 	.word	0x20002ef4
 800bd58:	20002efc 	.word	0x20002efc

0800bd5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd64:	4b27      	ldr	r3, [pc, #156]	; (800be04 <prvInsertBlockIntoFreeList+0xa8>)
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	e002      	b.n	800bd70 <prvInsertBlockIntoFreeList+0x14>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d8f7      	bhi.n	800bd6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4413      	add	r3, r2
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d108      	bne.n	800bd9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	685a      	ldr	r2, [r3, #4]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	441a      	add	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	441a      	add	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d118      	bne.n	800bde4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	4b14      	ldr	r3, [pc, #80]	; (800be08 <prvInsertBlockIntoFreeList+0xac>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d00d      	beq.n	800bdda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685a      	ldr	r2, [r3, #4]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	441a      	add	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	e008      	b.n	800bdec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdda:	4b0b      	ldr	r3, [pc, #44]	; (800be08 <prvInsertBlockIntoFreeList+0xac>)
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	e003      	b.n	800bdec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d002      	beq.n	800bdfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdfa:	bf00      	nop
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bc80      	pop	{r7}
 800be02:	4770      	bx	lr
 800be04:	20002ee8 	.word	0x20002ee8
 800be08:	20002ef0 	.word	0x20002ef0

0800be0c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	33f1      	adds	r3, #241	; 0xf1
 800be18:	2210      	movs	r2, #16
 800be1a:	2100      	movs	r1, #0
 800be1c:	4618      	mov	r0, r3
 800be1e:	f00d f963 	bl	80190e8 <memset1>
    ctx->M_n = 0;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	22f0      	movs	r2, #240	; 0xf0
 800be2e:	2100      	movs	r1, #0
 800be30:	4618      	mov	r0, r3
 800be32:	f00d f959 	bl	80190e8 <memset1>
}
 800be36:	bf00      	nop
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	461a      	mov	r2, r3
 800be4c:	2110      	movs	r1, #16
 800be4e:	6838      	ldr	r0, [r7, #0]
 800be50:	f000 fe5c 	bl	800cb0c <lorawan_aes_set_key>
}
 800be54:	bf00      	nop
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08c      	sub	sp, #48	; 0x30
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f000 80a1 	beq.w	800bfb6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800be7a:	f1c3 0310 	rsb	r3, r3, #16
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	4293      	cmp	r3, r2
 800be82:	bf28      	it	cs
 800be84:	4613      	movcs	r3, r2
 800be86:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800be94:	4413      	add	r3, r2
 800be96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be98:	b292      	uxth	r2, r2
 800be9a:	68b9      	ldr	r1, [r7, #8]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f00d f8e8 	bl	8019072 <memcpy1>
        ctx->M_n += mlen;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	441a      	add	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800beb8:	2b0f      	cmp	r3, #15
 800beba:	f240 808d 	bls.w	800bfd8 <AES_CMAC_Update+0x17c>
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	429a      	cmp	r2, r3
 800bec4:	f000 8088 	beq.w	800bfd8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bec8:	2300      	movs	r3, #0
 800beca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800becc:	e015      	b.n	800befa <AES_CMAC_Update+0x9e>
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed2:	4413      	add	r3, r2
 800bed4:	33f1      	adds	r3, #241	; 0xf1
 800bed6:	781a      	ldrb	r2, [r3, #0]
 800bed8:	68f9      	ldr	r1, [r7, #12]
 800beda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bedc:	440b      	add	r3, r1
 800bede:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	4053      	eors	r3, r2
 800bee6:	b2d9      	uxtb	r1, r3
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	4413      	add	r3, r2
 800beee:	33f1      	adds	r3, #241	; 0xf1
 800bef0:	460a      	mov	r2, r1
 800bef2:	701a      	strb	r2, [r3, #0]
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	3301      	adds	r3, #1
 800bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	2b0f      	cmp	r3, #15
 800befe:	dde6      	ble.n	800bece <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bf06:	f107 0314 	add.w	r3, r7, #20
 800bf0a:	2210      	movs	r2, #16
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f00d f8b0 	bl	8019072 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	f107 0114 	add.w	r1, r7, #20
 800bf18:	f107 0314 	add.w	r3, r7, #20
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 fed3 	bl	800ccc8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	33f1      	adds	r3, #241	; 0xf1
 800bf26:	f107 0114 	add.w	r1, r7, #20
 800bf2a:	2210      	movs	r2, #16
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f00d f8a0 	bl	8019072 <memcpy1>

        data += mlen;
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	4413      	add	r3, r2
 800bf38:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bf42:	e038      	b.n	800bfb6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800bf44:	2300      	movs	r3, #0
 800bf46:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf48:	e013      	b.n	800bf72 <AES_CMAC_Update+0x116>
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	4413      	add	r3, r2
 800bf50:	33f1      	adds	r3, #241	; 0xf1
 800bf52:	781a      	ldrb	r2, [r3, #0]
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	68b9      	ldr	r1, [r7, #8]
 800bf58:	440b      	add	r3, r1
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	4053      	eors	r3, r2
 800bf5e:	b2d9      	uxtb	r1, r3
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	4413      	add	r3, r2
 800bf66:	33f1      	adds	r3, #241	; 0xf1
 800bf68:	460a      	mov	r2, r1
 800bf6a:	701a      	strb	r2, [r3, #0]
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	3301      	adds	r3, #1
 800bf70:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	2b0f      	cmp	r3, #15
 800bf76:	dde8      	ble.n	800bf4a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bf7e:	f107 0314 	add.w	r3, r7, #20
 800bf82:	2210      	movs	r2, #16
 800bf84:	4618      	mov	r0, r3
 800bf86:	f00d f874 	bl	8019072 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	f107 0114 	add.w	r1, r7, #20
 800bf90:	f107 0314 	add.w	r3, r7, #20
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 fe97 	bl	800ccc8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	33f1      	adds	r3, #241	; 0xf1
 800bf9e:	f107 0114 	add.w	r1, r7, #20
 800bfa2:	2210      	movs	r2, #16
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f00d f864 	bl	8019072 <memcpy1>

        data += 16;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	3310      	adds	r3, #16
 800bfae:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	3b10      	subs	r3, #16
 800bfb4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b10      	cmp	r3, #16
 800bfba:	d8c3      	bhi.n	800bf44 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	b292      	uxth	r2, r2
 800bfc6:	68b9      	ldr	r1, [r7, #8]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f00d f852 	bl	8019072 <memcpy1>
    ctx->M_n = len;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bfd6:	e000      	b.n	800bfda <AES_CMAC_Update+0x17e>
            return;
 800bfd8:	bf00      	nop
}
 800bfda:	3730      	adds	r7, #48	; 0x30
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b092      	sub	sp, #72	; 0x48
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800bfea:	f107 031c 	add.w	r3, r7, #28
 800bfee:	2210      	movs	r2, #16
 800bff0:	2100      	movs	r1, #0
 800bff2:	4618      	mov	r0, r3
 800bff4:	f00d f878 	bl	80190e8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	f107 011c 	add.w	r1, r7, #28
 800bffe:	f107 031c 	add.w	r3, r7, #28
 800c002:	4618      	mov	r0, r3
 800c004:	f000 fe60 	bl	800ccc8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c008:	7f3b      	ldrb	r3, [r7, #28]
 800c00a:	b25b      	sxtb	r3, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	da30      	bge.n	800c072 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800c010:	2300      	movs	r3, #0
 800c012:	647b      	str	r3, [r7, #68]	; 0x44
 800c014:	e01b      	b.n	800c04e <AES_CMAC_Final+0x6e>
 800c016:	f107 021c 	add.w	r2, r7, #28
 800c01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c01c:	4413      	add	r3, r2
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	005b      	lsls	r3, r3, #1
 800c022:	b25a      	sxtb	r2, r3
 800c024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c026:	3301      	adds	r3, #1
 800c028:	3348      	adds	r3, #72	; 0x48
 800c02a:	443b      	add	r3, r7
 800c02c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c030:	09db      	lsrs	r3, r3, #7
 800c032:	b2db      	uxtb	r3, r3
 800c034:	b25b      	sxtb	r3, r3
 800c036:	4313      	orrs	r3, r2
 800c038:	b25b      	sxtb	r3, r3
 800c03a:	b2d9      	uxtb	r1, r3
 800c03c:	f107 021c 	add.w	r2, r7, #28
 800c040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c042:	4413      	add	r3, r2
 800c044:	460a      	mov	r2, r1
 800c046:	701a      	strb	r2, [r3, #0]
 800c048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c04a:	3301      	adds	r3, #1
 800c04c:	647b      	str	r3, [r7, #68]	; 0x44
 800c04e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c050:	2b0e      	cmp	r3, #14
 800c052:	dde0      	ble.n	800c016 <AES_CMAC_Final+0x36>
 800c054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800c060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c064:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c068:	43db      	mvns	r3, r3
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c070:	e027      	b.n	800c0c2 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800c072:	2300      	movs	r3, #0
 800c074:	643b      	str	r3, [r7, #64]	; 0x40
 800c076:	e01b      	b.n	800c0b0 <AES_CMAC_Final+0xd0>
 800c078:	f107 021c 	add.w	r2, r7, #28
 800c07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c07e:	4413      	add	r3, r2
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	b25a      	sxtb	r2, r3
 800c086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c088:	3301      	adds	r3, #1
 800c08a:	3348      	adds	r3, #72	; 0x48
 800c08c:	443b      	add	r3, r7
 800c08e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c092:	09db      	lsrs	r3, r3, #7
 800c094:	b2db      	uxtb	r3, r3
 800c096:	b25b      	sxtb	r3, r3
 800c098:	4313      	orrs	r3, r2
 800c09a:	b25b      	sxtb	r3, r3
 800c09c:	b2d9      	uxtb	r1, r3
 800c09e:	f107 021c 	add.w	r2, r7, #28
 800c0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0a4:	4413      	add	r3, r2
 800c0a6:	460a      	mov	r2, r1
 800c0a8:	701a      	strb	r2, [r3, #0]
 800c0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0b2:	2b0e      	cmp	r3, #14
 800c0b4:	dde0      	ble.n	800c078 <AES_CMAC_Final+0x98>
 800c0b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c0c8:	2b10      	cmp	r3, #16
 800c0ca:	d11d      	bne.n	800c108 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0d0:	e016      	b.n	800c100 <AES_CMAC_Final+0x120>
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d6:	4413      	add	r3, r2
 800c0d8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c0dc:	781a      	ldrb	r2, [r3, #0]
 800c0de:	f107 011c 	add.w	r1, r7, #28
 800c0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e4:	440b      	add	r3, r1
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	4053      	eors	r3, r2
 800c0ea:	b2d9      	uxtb	r1, r3
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c0f6:	460a      	mov	r2, r1
 800c0f8:	701a      	strb	r2, [r3, #0]
 800c0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	2b0f      	cmp	r3, #15
 800c104:	dde5      	ble.n	800c0d2 <AES_CMAC_Final+0xf2>
 800c106:	e096      	b.n	800c236 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c108:	7f3b      	ldrb	r3, [r7, #28]
 800c10a:	b25b      	sxtb	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da30      	bge.n	800c172 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800c110:	2300      	movs	r3, #0
 800c112:	63bb      	str	r3, [r7, #56]	; 0x38
 800c114:	e01b      	b.n	800c14e <AES_CMAC_Final+0x16e>
 800c116:	f107 021c 	add.w	r2, r7, #28
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	4413      	add	r3, r2
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	b25a      	sxtb	r2, r3
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	3301      	adds	r3, #1
 800c128:	3348      	adds	r3, #72	; 0x48
 800c12a:	443b      	add	r3, r7
 800c12c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c130:	09db      	lsrs	r3, r3, #7
 800c132:	b2db      	uxtb	r3, r3
 800c134:	b25b      	sxtb	r3, r3
 800c136:	4313      	orrs	r3, r2
 800c138:	b25b      	sxtb	r3, r3
 800c13a:	b2d9      	uxtb	r1, r3
 800c13c:	f107 021c 	add.w	r2, r7, #28
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	4413      	add	r3, r2
 800c144:	460a      	mov	r2, r1
 800c146:	701a      	strb	r2, [r3, #0]
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	3301      	adds	r3, #1
 800c14c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c150:	2b0e      	cmp	r3, #14
 800c152:	dde0      	ble.n	800c116 <AES_CMAC_Final+0x136>
 800c154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c158:	005b      	lsls	r3, r3, #1
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800c160:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c164:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c168:	43db      	mvns	r3, r3
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c170:	e027      	b.n	800c1c2 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800c172:	2300      	movs	r3, #0
 800c174:	637b      	str	r3, [r7, #52]	; 0x34
 800c176:	e01b      	b.n	800c1b0 <AES_CMAC_Final+0x1d0>
 800c178:	f107 021c 	add.w	r2, r7, #28
 800c17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c17e:	4413      	add	r3, r2
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	b25a      	sxtb	r2, r3
 800c186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c188:	3301      	adds	r3, #1
 800c18a:	3348      	adds	r3, #72	; 0x48
 800c18c:	443b      	add	r3, r7
 800c18e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c192:	09db      	lsrs	r3, r3, #7
 800c194:	b2db      	uxtb	r3, r3
 800c196:	b25b      	sxtb	r3, r3
 800c198:	4313      	orrs	r3, r2
 800c19a:	b25b      	sxtb	r3, r3
 800c19c:	b2d9      	uxtb	r1, r3
 800c19e:	f107 021c 	add.w	r2, r7, #28
 800c1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a4:	4413      	add	r3, r2
 800c1a6:	460a      	mov	r2, r1
 800c1a8:	701a      	strb	r2, [r3, #0]
 800c1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	637b      	str	r3, [r7, #52]	; 0x34
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b2:	2b0e      	cmp	r3, #14
 800c1b4:	dde0      	ble.n	800c178 <AES_CMAC_Final+0x198>
 800c1b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	2280      	movs	r2, #128	; 0x80
 800c1ce:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c1d2:	e007      	b.n	800c1e4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	4413      	add	r3, r2
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c1f8:	2b0f      	cmp	r3, #15
 800c1fa:	d9eb      	bls.n	800c1d4 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	633b      	str	r3, [r7, #48]	; 0x30
 800c200:	e016      	b.n	800c230 <AES_CMAC_Final+0x250>
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	4413      	add	r3, r2
 800c208:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c20c:	781a      	ldrb	r2, [r3, #0]
 800c20e:	f107 011c 	add.w	r1, r7, #28
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	440b      	add	r3, r1
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	4053      	eors	r3, r2
 800c21a:	b2d9      	uxtb	r1, r3
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	4413      	add	r3, r2
 800c222:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c226:	460a      	mov	r2, r1
 800c228:	701a      	strb	r2, [r3, #0]
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	3301      	adds	r3, #1
 800c22e:	633b      	str	r3, [r7, #48]	; 0x30
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	2b0f      	cmp	r3, #15
 800c234:	dde5      	ble.n	800c202 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c236:	2300      	movs	r3, #0
 800c238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c23a:	e015      	b.n	800c268 <AES_CMAC_Final+0x288>
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c240:	4413      	add	r3, r2
 800c242:	33f1      	adds	r3, #241	; 0xf1
 800c244:	781a      	ldrb	r2, [r3, #0]
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	440b      	add	r3, r1
 800c24c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	4053      	eors	r3, r2
 800c254:	b2d9      	uxtb	r1, r3
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	4413      	add	r3, r2
 800c25c:	33f1      	adds	r3, #241	; 0xf1
 800c25e:	460a      	mov	r2, r1
 800c260:	701a      	strb	r2, [r3, #0]
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	3301      	adds	r3, #1
 800c266:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	2b0f      	cmp	r3, #15
 800c26c:	dde6      	ble.n	800c23c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c274:	f107 030c 	add.w	r3, r7, #12
 800c278:	2210      	movs	r2, #16
 800c27a:	4618      	mov	r0, r3
 800c27c:	f00c fef9 	bl	8019072 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	f107 030c 	add.w	r3, r7, #12
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fd1d 	bl	800ccc8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c28e:	f107 031c 	add.w	r3, r7, #28
 800c292:	2210      	movs	r2, #16
 800c294:	2100      	movs	r1, #0
 800c296:	4618      	mov	r0, r3
 800c298:	f00c ff26 	bl	80190e8 <memset1>
}
 800c29c:	bf00      	nop
 800c29e:	3748      	adds	r7, #72	; 0x48
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	781a      	ldrb	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	7852      	ldrb	r2, [r2, #1]
 800c2be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3302      	adds	r3, #2
 800c2c4:	683a      	ldr	r2, [r7, #0]
 800c2c6:	7892      	ldrb	r2, [r2, #2]
 800c2c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3303      	adds	r3, #3
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	78d2      	ldrb	r2, [r2, #3]
 800c2d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	7912      	ldrb	r2, [r2, #4]
 800c2dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	3305      	adds	r3, #5
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	7952      	ldrb	r2, [r2, #5]
 800c2e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3306      	adds	r3, #6
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	7992      	ldrb	r2, [r2, #6]
 800c2f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	3307      	adds	r3, #7
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	79d2      	ldrb	r2, [r2, #7]
 800c2fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	3308      	adds	r3, #8
 800c300:	683a      	ldr	r2, [r7, #0]
 800c302:	7a12      	ldrb	r2, [r2, #8]
 800c304:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3309      	adds	r3, #9
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	7a52      	ldrb	r2, [r2, #9]
 800c30e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	330a      	adds	r3, #10
 800c314:	683a      	ldr	r2, [r7, #0]
 800c316:	7a92      	ldrb	r2, [r2, #10]
 800c318:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	330b      	adds	r3, #11
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	7ad2      	ldrb	r2, [r2, #11]
 800c322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	330c      	adds	r3, #12
 800c328:	683a      	ldr	r2, [r7, #0]
 800c32a:	7b12      	ldrb	r2, [r2, #12]
 800c32c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	330d      	adds	r3, #13
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	7b52      	ldrb	r2, [r2, #13]
 800c336:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	330e      	adds	r3, #14
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	7b92      	ldrb	r2, [r2, #14]
 800c340:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	330f      	adds	r3, #15
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	7bd2      	ldrb	r2, [r2, #15]
 800c34a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	bc80      	pop	{r7}
 800c354:	4770      	bx	lr

0800c356 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c356:	b480      	push	{r7}
 800c358:	b085      	sub	sp, #20
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	60b9      	str	r1, [r7, #8]
 800c360:	4613      	mov	r3, r2
 800c362:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c364:	e007      	b.n	800c376 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	1c53      	adds	r3, r2, #1
 800c36a:	60bb      	str	r3, [r7, #8]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	1c59      	adds	r1, r3, #1
 800c370:	60f9      	str	r1, [r7, #12]
 800c372:	7812      	ldrb	r2, [r2, #0]
 800c374:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c376:	79fb      	ldrb	r3, [r7, #7]
 800c378:	1e5a      	subs	r2, r3, #1
 800c37a:	71fa      	strb	r2, [r7, #7]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1f2      	bne.n	800c366 <copy_block_nn+0x10>
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	bc80      	pop	{r7}
 800c38a:	4770      	bx	lr

0800c38c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	4053      	eors	r3, r2
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	7819      	ldrb	r1, [r3, #0]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	781a      	ldrb	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	404a      	eors	r2, r1
 800c3b8:	b2d2      	uxtb	r2, r2
 800c3ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3302      	adds	r3, #2
 800c3c0:	7819      	ldrb	r1, [r3, #0]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	3302      	adds	r3, #2
 800c3c6:	781a      	ldrb	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3302      	adds	r3, #2
 800c3cc:	404a      	eors	r2, r1
 800c3ce:	b2d2      	uxtb	r2, r2
 800c3d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3303      	adds	r3, #3
 800c3d6:	7819      	ldrb	r1, [r3, #0]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	3303      	adds	r3, #3
 800c3dc:	781a      	ldrb	r2, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	3303      	adds	r3, #3
 800c3e2:	404a      	eors	r2, r1
 800c3e4:	b2d2      	uxtb	r2, r2
 800c3e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	7819      	ldrb	r1, [r3, #0]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	781a      	ldrb	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	3304      	adds	r3, #4
 800c3f8:	404a      	eors	r2, r1
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3305      	adds	r3, #5
 800c402:	7819      	ldrb	r1, [r3, #0]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	3305      	adds	r3, #5
 800c408:	781a      	ldrb	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3305      	adds	r3, #5
 800c40e:	404a      	eors	r2, r1
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	3306      	adds	r3, #6
 800c418:	7819      	ldrb	r1, [r3, #0]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	3306      	adds	r3, #6
 800c41e:	781a      	ldrb	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3306      	adds	r3, #6
 800c424:	404a      	eors	r2, r1
 800c426:	b2d2      	uxtb	r2, r2
 800c428:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3307      	adds	r3, #7
 800c42e:	7819      	ldrb	r1, [r3, #0]
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	3307      	adds	r3, #7
 800c434:	781a      	ldrb	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3307      	adds	r3, #7
 800c43a:	404a      	eors	r2, r1
 800c43c:	b2d2      	uxtb	r2, r2
 800c43e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3308      	adds	r3, #8
 800c444:	7819      	ldrb	r1, [r3, #0]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	3308      	adds	r3, #8
 800c44a:	781a      	ldrb	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	3308      	adds	r3, #8
 800c450:	404a      	eors	r2, r1
 800c452:	b2d2      	uxtb	r2, r2
 800c454:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3309      	adds	r3, #9
 800c45a:	7819      	ldrb	r1, [r3, #0]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	3309      	adds	r3, #9
 800c460:	781a      	ldrb	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	3309      	adds	r3, #9
 800c466:	404a      	eors	r2, r1
 800c468:	b2d2      	uxtb	r2, r2
 800c46a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	330a      	adds	r3, #10
 800c470:	7819      	ldrb	r1, [r3, #0]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	330a      	adds	r3, #10
 800c476:	781a      	ldrb	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	330a      	adds	r3, #10
 800c47c:	404a      	eors	r2, r1
 800c47e:	b2d2      	uxtb	r2, r2
 800c480:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	330b      	adds	r3, #11
 800c486:	7819      	ldrb	r1, [r3, #0]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	330b      	adds	r3, #11
 800c48c:	781a      	ldrb	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	330b      	adds	r3, #11
 800c492:	404a      	eors	r2, r1
 800c494:	b2d2      	uxtb	r2, r2
 800c496:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	330c      	adds	r3, #12
 800c49c:	7819      	ldrb	r1, [r3, #0]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	330c      	adds	r3, #12
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	330c      	adds	r3, #12
 800c4a8:	404a      	eors	r2, r1
 800c4aa:	b2d2      	uxtb	r2, r2
 800c4ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	330d      	adds	r3, #13
 800c4b2:	7819      	ldrb	r1, [r3, #0]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	330d      	adds	r3, #13
 800c4b8:	781a      	ldrb	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	330d      	adds	r3, #13
 800c4be:	404a      	eors	r2, r1
 800c4c0:	b2d2      	uxtb	r2, r2
 800c4c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	330e      	adds	r3, #14
 800c4c8:	7819      	ldrb	r1, [r3, #0]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	330e      	adds	r3, #14
 800c4ce:	781a      	ldrb	r2, [r3, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	330e      	adds	r3, #14
 800c4d4:	404a      	eors	r2, r1
 800c4d6:	b2d2      	uxtb	r2, r2
 800c4d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	330f      	adds	r3, #15
 800c4de:	7819      	ldrb	r1, [r3, #0]
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	330f      	adds	r3, #15
 800c4e4:	781a      	ldrb	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	330f      	adds	r3, #15
 800c4ea:	404a      	eors	r2, r1
 800c4ec:	b2d2      	uxtb	r2, r2
 800c4ee:	701a      	strb	r2, [r3, #0]
#endif
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bc80      	pop	{r7}
 800c4f8:	4770      	bx	lr

0800c4fa <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b085      	sub	sp, #20
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	781a      	ldrb	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	4053      	eors	r3, r2
 800c510:	b2da      	uxtb	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	3301      	adds	r3, #1
 800c51a:	7819      	ldrb	r1, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3301      	adds	r3, #1
 800c520:	781a      	ldrb	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	3301      	adds	r3, #1
 800c526:	404a      	eors	r2, r1
 800c528:	b2d2      	uxtb	r2, r2
 800c52a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	3302      	adds	r3, #2
 800c530:	7819      	ldrb	r1, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	3302      	adds	r3, #2
 800c536:	781a      	ldrb	r2, [r3, #0]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	3302      	adds	r3, #2
 800c53c:	404a      	eors	r2, r1
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	3303      	adds	r3, #3
 800c546:	7819      	ldrb	r1, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3303      	adds	r3, #3
 800c54c:	781a      	ldrb	r2, [r3, #0]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	3303      	adds	r3, #3
 800c552:	404a      	eors	r2, r1
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	3304      	adds	r3, #4
 800c55c:	7819      	ldrb	r1, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	3304      	adds	r3, #4
 800c562:	781a      	ldrb	r2, [r3, #0]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3304      	adds	r3, #4
 800c568:	404a      	eors	r2, r1
 800c56a:	b2d2      	uxtb	r2, r2
 800c56c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	3305      	adds	r3, #5
 800c572:	7819      	ldrb	r1, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3305      	adds	r3, #5
 800c578:	781a      	ldrb	r2, [r3, #0]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3305      	adds	r3, #5
 800c57e:	404a      	eors	r2, r1
 800c580:	b2d2      	uxtb	r2, r2
 800c582:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	3306      	adds	r3, #6
 800c588:	7819      	ldrb	r1, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3306      	adds	r3, #6
 800c58e:	781a      	ldrb	r2, [r3, #0]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3306      	adds	r3, #6
 800c594:	404a      	eors	r2, r1
 800c596:	b2d2      	uxtb	r2, r2
 800c598:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	3307      	adds	r3, #7
 800c59e:	7819      	ldrb	r1, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3307      	adds	r3, #7
 800c5a4:	781a      	ldrb	r2, [r3, #0]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3307      	adds	r3, #7
 800c5aa:	404a      	eors	r2, r1
 800c5ac:	b2d2      	uxtb	r2, r2
 800c5ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	3308      	adds	r3, #8
 800c5b4:	7819      	ldrb	r1, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	781a      	ldrb	r2, [r3, #0]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	404a      	eors	r2, r1
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	3309      	adds	r3, #9
 800c5ca:	7819      	ldrb	r1, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3309      	adds	r3, #9
 800c5d0:	781a      	ldrb	r2, [r3, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3309      	adds	r3, #9
 800c5d6:	404a      	eors	r2, r1
 800c5d8:	b2d2      	uxtb	r2, r2
 800c5da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	330a      	adds	r3, #10
 800c5e0:	7819      	ldrb	r1, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	330a      	adds	r3, #10
 800c5e6:	781a      	ldrb	r2, [r3, #0]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	330a      	adds	r3, #10
 800c5ec:	404a      	eors	r2, r1
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	330b      	adds	r3, #11
 800c5f6:	7819      	ldrb	r1, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	330b      	adds	r3, #11
 800c5fc:	781a      	ldrb	r2, [r3, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	330b      	adds	r3, #11
 800c602:	404a      	eors	r2, r1
 800c604:	b2d2      	uxtb	r2, r2
 800c606:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	330c      	adds	r3, #12
 800c60c:	7819      	ldrb	r1, [r3, #0]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	330c      	adds	r3, #12
 800c612:	781a      	ldrb	r2, [r3, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	330c      	adds	r3, #12
 800c618:	404a      	eors	r2, r1
 800c61a:	b2d2      	uxtb	r2, r2
 800c61c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	330d      	adds	r3, #13
 800c622:	7819      	ldrb	r1, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	330d      	adds	r3, #13
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	330d      	adds	r3, #13
 800c62e:	404a      	eors	r2, r1
 800c630:	b2d2      	uxtb	r2, r2
 800c632:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	330e      	adds	r3, #14
 800c638:	7819      	ldrb	r1, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	330e      	adds	r3, #14
 800c63e:	781a      	ldrb	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	330e      	adds	r3, #14
 800c644:	404a      	eors	r2, r1
 800c646:	b2d2      	uxtb	r2, r2
 800c648:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	330f      	adds	r3, #15
 800c64e:	7819      	ldrb	r1, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	330f      	adds	r3, #15
 800c654:	781a      	ldrb	r2, [r3, #0]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	330f      	adds	r3, #15
 800c65a:	404a      	eors	r2, r1
 800c65c:	b2d2      	uxtb	r2, r2
 800c65e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c660:	bf00      	nop
 800c662:	3714      	adds	r7, #20
 800c664:	46bd      	mov	sp, r7
 800c666:	bc80      	pop	{r7}
 800c668:	4770      	bx	lr

0800c66a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b082      	sub	sp, #8
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff fe88 	bl	800c38c <xor_block>
}
 800c67c:	bf00      	nop
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	461a      	mov	r2, r3
 800c692:	4b48      	ldr	r3, [pc, #288]	; (800c7b4 <shift_sub_rows+0x130>)
 800c694:	5c9a      	ldrb	r2, [r3, r2]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	701a      	strb	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3304      	adds	r3, #4
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	4a43      	ldr	r2, [pc, #268]	; (800c7b4 <shift_sub_rows+0x130>)
 800c6a8:	5c52      	ldrb	r2, [r2, r1]
 800c6aa:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3308      	adds	r3, #8
 800c6b8:	4a3e      	ldr	r2, [pc, #248]	; (800c7b4 <shift_sub_rows+0x130>)
 800c6ba:	5c52      	ldrb	r2, [r2, r1]
 800c6bc:	701a      	strb	r2, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	330c      	adds	r3, #12
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	330c      	adds	r3, #12
 800c6ca:	4a3a      	ldr	r2, [pc, #232]	; (800c7b4 <shift_sub_rows+0x130>)
 800c6cc:	5c52      	ldrb	r2, [r2, r1]
 800c6ce:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	785b      	ldrb	r3, [r3, #1]
 800c6d4:	73fb      	strb	r3, [r7, #15]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3305      	adds	r3, #5
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	4a34      	ldr	r2, [pc, #208]	; (800c7b4 <shift_sub_rows+0x130>)
 800c6e4:	5c52      	ldrb	r2, [r2, r1]
 800c6e6:	701a      	strb	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3309      	adds	r3, #9
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3305      	adds	r3, #5
 800c6f4:	4a2f      	ldr	r2, [pc, #188]	; (800c7b4 <shift_sub_rows+0x130>)
 800c6f6:	5c52      	ldrb	r2, [r2, r1]
 800c6f8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	330d      	adds	r3, #13
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	4619      	mov	r1, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3309      	adds	r3, #9
 800c706:	4a2b      	ldr	r2, [pc, #172]	; (800c7b4 <shift_sub_rows+0x130>)
 800c708:	5c52      	ldrb	r2, [r2, r1]
 800c70a:	701a      	strb	r2, [r3, #0]
 800c70c:	7bfa      	ldrb	r2, [r7, #15]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	330d      	adds	r3, #13
 800c712:	4928      	ldr	r1, [pc, #160]	; (800c7b4 <shift_sub_rows+0x130>)
 800c714:	5c8a      	ldrb	r2, [r1, r2]
 800c716:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	789b      	ldrb	r3, [r3, #2]
 800c71c:	73fb      	strb	r3, [r7, #15]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	330a      	adds	r3, #10
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	4619      	mov	r1, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	3302      	adds	r3, #2
 800c72a:	4a22      	ldr	r2, [pc, #136]	; (800c7b4 <shift_sub_rows+0x130>)
 800c72c:	5c52      	ldrb	r2, [r2, r1]
 800c72e:	701a      	strb	r2, [r3, #0]
 800c730:	7bfa      	ldrb	r2, [r7, #15]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	330a      	adds	r3, #10
 800c736:	491f      	ldr	r1, [pc, #124]	; (800c7b4 <shift_sub_rows+0x130>)
 800c738:	5c8a      	ldrb	r2, [r1, r2]
 800c73a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	799b      	ldrb	r3, [r3, #6]
 800c740:	73fb      	strb	r3, [r7, #15]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	330e      	adds	r3, #14
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	4619      	mov	r1, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3306      	adds	r3, #6
 800c74e:	4a19      	ldr	r2, [pc, #100]	; (800c7b4 <shift_sub_rows+0x130>)
 800c750:	5c52      	ldrb	r2, [r2, r1]
 800c752:	701a      	strb	r2, [r3, #0]
 800c754:	7bfa      	ldrb	r2, [r7, #15]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	330e      	adds	r3, #14
 800c75a:	4916      	ldr	r1, [pc, #88]	; (800c7b4 <shift_sub_rows+0x130>)
 800c75c:	5c8a      	ldrb	r2, [r1, r2]
 800c75e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7bdb      	ldrb	r3, [r3, #15]
 800c764:	73fb      	strb	r3, [r7, #15]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	330b      	adds	r3, #11
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	4619      	mov	r1, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	330f      	adds	r3, #15
 800c772:	4a10      	ldr	r2, [pc, #64]	; (800c7b4 <shift_sub_rows+0x130>)
 800c774:	5c52      	ldrb	r2, [r2, r1]
 800c776:	701a      	strb	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	3307      	adds	r3, #7
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	4619      	mov	r1, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	330b      	adds	r3, #11
 800c784:	4a0b      	ldr	r2, [pc, #44]	; (800c7b4 <shift_sub_rows+0x130>)
 800c786:	5c52      	ldrb	r2, [r2, r1]
 800c788:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	3303      	adds	r3, #3
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	4619      	mov	r1, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3307      	adds	r3, #7
 800c796:	4a07      	ldr	r2, [pc, #28]	; (800c7b4 <shift_sub_rows+0x130>)
 800c798:	5c52      	ldrb	r2, [r2, r1]
 800c79a:	701a      	strb	r2, [r3, #0]
 800c79c:	7bfa      	ldrb	r2, [r7, #15]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	3303      	adds	r3, #3
 800c7a2:	4904      	ldr	r1, [pc, #16]	; (800c7b4 <shift_sub_rows+0x130>)
 800c7a4:	5c8a      	ldrb	r2, [r1, r2]
 800c7a6:	701a      	strb	r2, [r3, #0]
}
 800c7a8:	bf00      	nop
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bc80      	pop	{r7}
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	0801e370 	.word	0x0801e370

0800c7b8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c7c0:	f107 0308 	add.w	r3, r7, #8
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff fd6c 	bl	800c2a4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c7cc:	7a3b      	ldrb	r3, [r7, #8]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	4b9a      	ldr	r3, [pc, #616]	; (800ca3c <mix_sub_columns+0x284>)
 800c7d2:	5c9a      	ldrb	r2, [r3, r2]
 800c7d4:	7b7b      	ldrb	r3, [r7, #13]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4b99      	ldr	r3, [pc, #612]	; (800ca40 <mix_sub_columns+0x288>)
 800c7da:	5c5b      	ldrb	r3, [r3, r1]
 800c7dc:	4053      	eors	r3, r2
 800c7de:	b2da      	uxtb	r2, r3
 800c7e0:	7cbb      	ldrb	r3, [r7, #18]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	4b97      	ldr	r3, [pc, #604]	; (800ca44 <mix_sub_columns+0x28c>)
 800c7e6:	5c5b      	ldrb	r3, [r3, r1]
 800c7e8:	4053      	eors	r3, r2
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	7dfb      	ldrb	r3, [r7, #23]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	4b94      	ldr	r3, [pc, #592]	; (800ca44 <mix_sub_columns+0x28c>)
 800c7f2:	5c5b      	ldrb	r3, [r3, r1]
 800c7f4:	4053      	eors	r3, r2
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c7fc:	7a3b      	ldrb	r3, [r7, #8]
 800c7fe:	461a      	mov	r2, r3
 800c800:	4b90      	ldr	r3, [pc, #576]	; (800ca44 <mix_sub_columns+0x28c>)
 800c802:	5c9a      	ldrb	r2, [r3, r2]
 800c804:	7b7b      	ldrb	r3, [r7, #13]
 800c806:	4619      	mov	r1, r3
 800c808:	4b8c      	ldr	r3, [pc, #560]	; (800ca3c <mix_sub_columns+0x284>)
 800c80a:	5c5b      	ldrb	r3, [r3, r1]
 800c80c:	4053      	eors	r3, r2
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	7cbb      	ldrb	r3, [r7, #18]
 800c812:	4619      	mov	r1, r3
 800c814:	4b8a      	ldr	r3, [pc, #552]	; (800ca40 <mix_sub_columns+0x288>)
 800c816:	5c5b      	ldrb	r3, [r3, r1]
 800c818:	4053      	eors	r3, r2
 800c81a:	b2d9      	uxtb	r1, r3
 800c81c:	7dfb      	ldrb	r3, [r7, #23]
 800c81e:	461a      	mov	r2, r3
 800c820:	4b88      	ldr	r3, [pc, #544]	; (800ca44 <mix_sub_columns+0x28c>)
 800c822:	5c9a      	ldrb	r2, [r3, r2]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	3301      	adds	r3, #1
 800c828:	404a      	eors	r2, r1
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c82e:	7a3b      	ldrb	r3, [r7, #8]
 800c830:	461a      	mov	r2, r3
 800c832:	4b84      	ldr	r3, [pc, #528]	; (800ca44 <mix_sub_columns+0x28c>)
 800c834:	5c9a      	ldrb	r2, [r3, r2]
 800c836:	7b7b      	ldrb	r3, [r7, #13]
 800c838:	4619      	mov	r1, r3
 800c83a:	4b82      	ldr	r3, [pc, #520]	; (800ca44 <mix_sub_columns+0x28c>)
 800c83c:	5c5b      	ldrb	r3, [r3, r1]
 800c83e:	4053      	eors	r3, r2
 800c840:	b2da      	uxtb	r2, r3
 800c842:	7cbb      	ldrb	r3, [r7, #18]
 800c844:	4619      	mov	r1, r3
 800c846:	4b7d      	ldr	r3, [pc, #500]	; (800ca3c <mix_sub_columns+0x284>)
 800c848:	5c5b      	ldrb	r3, [r3, r1]
 800c84a:	4053      	eors	r3, r2
 800c84c:	b2d9      	uxtb	r1, r3
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	461a      	mov	r2, r3
 800c852:	4b7b      	ldr	r3, [pc, #492]	; (800ca40 <mix_sub_columns+0x288>)
 800c854:	5c9a      	ldrb	r2, [r3, r2]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	3302      	adds	r3, #2
 800c85a:	404a      	eors	r2, r1
 800c85c:	b2d2      	uxtb	r2, r2
 800c85e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c860:	7a3b      	ldrb	r3, [r7, #8]
 800c862:	461a      	mov	r2, r3
 800c864:	4b76      	ldr	r3, [pc, #472]	; (800ca40 <mix_sub_columns+0x288>)
 800c866:	5c9a      	ldrb	r2, [r3, r2]
 800c868:	7b7b      	ldrb	r3, [r7, #13]
 800c86a:	4619      	mov	r1, r3
 800c86c:	4b75      	ldr	r3, [pc, #468]	; (800ca44 <mix_sub_columns+0x28c>)
 800c86e:	5c5b      	ldrb	r3, [r3, r1]
 800c870:	4053      	eors	r3, r2
 800c872:	b2da      	uxtb	r2, r3
 800c874:	7cbb      	ldrb	r3, [r7, #18]
 800c876:	4619      	mov	r1, r3
 800c878:	4b72      	ldr	r3, [pc, #456]	; (800ca44 <mix_sub_columns+0x28c>)
 800c87a:	5c5b      	ldrb	r3, [r3, r1]
 800c87c:	4053      	eors	r3, r2
 800c87e:	b2d9      	uxtb	r1, r3
 800c880:	7dfb      	ldrb	r3, [r7, #23]
 800c882:	461a      	mov	r2, r3
 800c884:	4b6d      	ldr	r3, [pc, #436]	; (800ca3c <mix_sub_columns+0x284>)
 800c886:	5c9a      	ldrb	r2, [r3, r2]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	3303      	adds	r3, #3
 800c88c:	404a      	eors	r2, r1
 800c88e:	b2d2      	uxtb	r2, r2
 800c890:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c892:	7b3b      	ldrb	r3, [r7, #12]
 800c894:	461a      	mov	r2, r3
 800c896:	4b69      	ldr	r3, [pc, #420]	; (800ca3c <mix_sub_columns+0x284>)
 800c898:	5c9a      	ldrb	r2, [r3, r2]
 800c89a:	7c7b      	ldrb	r3, [r7, #17]
 800c89c:	4619      	mov	r1, r3
 800c89e:	4b68      	ldr	r3, [pc, #416]	; (800ca40 <mix_sub_columns+0x288>)
 800c8a0:	5c5b      	ldrb	r3, [r3, r1]
 800c8a2:	4053      	eors	r3, r2
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	7dbb      	ldrb	r3, [r7, #22]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4b66      	ldr	r3, [pc, #408]	; (800ca44 <mix_sub_columns+0x28c>)
 800c8ac:	5c5b      	ldrb	r3, [r3, r1]
 800c8ae:	4053      	eors	r3, r2
 800c8b0:	b2d9      	uxtb	r1, r3
 800c8b2:	7afb      	ldrb	r3, [r7, #11]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	4b63      	ldr	r3, [pc, #396]	; (800ca44 <mix_sub_columns+0x28c>)
 800c8b8:	5c9a      	ldrb	r2, [r3, r2]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3304      	adds	r3, #4
 800c8be:	404a      	eors	r2, r1
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c8c4:	7b3b      	ldrb	r3, [r7, #12]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	4b5e      	ldr	r3, [pc, #376]	; (800ca44 <mix_sub_columns+0x28c>)
 800c8ca:	5c9a      	ldrb	r2, [r3, r2]
 800c8cc:	7c7b      	ldrb	r3, [r7, #17]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4b5a      	ldr	r3, [pc, #360]	; (800ca3c <mix_sub_columns+0x284>)
 800c8d2:	5c5b      	ldrb	r3, [r3, r1]
 800c8d4:	4053      	eors	r3, r2
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	7dbb      	ldrb	r3, [r7, #22]
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4b58      	ldr	r3, [pc, #352]	; (800ca40 <mix_sub_columns+0x288>)
 800c8de:	5c5b      	ldrb	r3, [r3, r1]
 800c8e0:	4053      	eors	r3, r2
 800c8e2:	b2d9      	uxtb	r1, r3
 800c8e4:	7afb      	ldrb	r3, [r7, #11]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	4b56      	ldr	r3, [pc, #344]	; (800ca44 <mix_sub_columns+0x28c>)
 800c8ea:	5c9a      	ldrb	r2, [r3, r2]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3305      	adds	r3, #5
 800c8f0:	404a      	eors	r2, r1
 800c8f2:	b2d2      	uxtb	r2, r2
 800c8f4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c8f6:	7b3b      	ldrb	r3, [r7, #12]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4b52      	ldr	r3, [pc, #328]	; (800ca44 <mix_sub_columns+0x28c>)
 800c8fc:	5c9a      	ldrb	r2, [r3, r2]
 800c8fe:	7c7b      	ldrb	r3, [r7, #17]
 800c900:	4619      	mov	r1, r3
 800c902:	4b50      	ldr	r3, [pc, #320]	; (800ca44 <mix_sub_columns+0x28c>)
 800c904:	5c5b      	ldrb	r3, [r3, r1]
 800c906:	4053      	eors	r3, r2
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	7dbb      	ldrb	r3, [r7, #22]
 800c90c:	4619      	mov	r1, r3
 800c90e:	4b4b      	ldr	r3, [pc, #300]	; (800ca3c <mix_sub_columns+0x284>)
 800c910:	5c5b      	ldrb	r3, [r3, r1]
 800c912:	4053      	eors	r3, r2
 800c914:	b2d9      	uxtb	r1, r3
 800c916:	7afb      	ldrb	r3, [r7, #11]
 800c918:	461a      	mov	r2, r3
 800c91a:	4b49      	ldr	r3, [pc, #292]	; (800ca40 <mix_sub_columns+0x288>)
 800c91c:	5c9a      	ldrb	r2, [r3, r2]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3306      	adds	r3, #6
 800c922:	404a      	eors	r2, r1
 800c924:	b2d2      	uxtb	r2, r2
 800c926:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c928:	7b3b      	ldrb	r3, [r7, #12]
 800c92a:	461a      	mov	r2, r3
 800c92c:	4b44      	ldr	r3, [pc, #272]	; (800ca40 <mix_sub_columns+0x288>)
 800c92e:	5c9a      	ldrb	r2, [r3, r2]
 800c930:	7c7b      	ldrb	r3, [r7, #17]
 800c932:	4619      	mov	r1, r3
 800c934:	4b43      	ldr	r3, [pc, #268]	; (800ca44 <mix_sub_columns+0x28c>)
 800c936:	5c5b      	ldrb	r3, [r3, r1]
 800c938:	4053      	eors	r3, r2
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	7dbb      	ldrb	r3, [r7, #22]
 800c93e:	4619      	mov	r1, r3
 800c940:	4b40      	ldr	r3, [pc, #256]	; (800ca44 <mix_sub_columns+0x28c>)
 800c942:	5c5b      	ldrb	r3, [r3, r1]
 800c944:	4053      	eors	r3, r2
 800c946:	b2d9      	uxtb	r1, r3
 800c948:	7afb      	ldrb	r3, [r7, #11]
 800c94a:	461a      	mov	r2, r3
 800c94c:	4b3b      	ldr	r3, [pc, #236]	; (800ca3c <mix_sub_columns+0x284>)
 800c94e:	5c9a      	ldrb	r2, [r3, r2]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3307      	adds	r3, #7
 800c954:	404a      	eors	r2, r1
 800c956:	b2d2      	uxtb	r2, r2
 800c958:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c95a:	7c3b      	ldrb	r3, [r7, #16]
 800c95c:	461a      	mov	r2, r3
 800c95e:	4b37      	ldr	r3, [pc, #220]	; (800ca3c <mix_sub_columns+0x284>)
 800c960:	5c9a      	ldrb	r2, [r3, r2]
 800c962:	7d7b      	ldrb	r3, [r7, #21]
 800c964:	4619      	mov	r1, r3
 800c966:	4b36      	ldr	r3, [pc, #216]	; (800ca40 <mix_sub_columns+0x288>)
 800c968:	5c5b      	ldrb	r3, [r3, r1]
 800c96a:	4053      	eors	r3, r2
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	7abb      	ldrb	r3, [r7, #10]
 800c970:	4619      	mov	r1, r3
 800c972:	4b34      	ldr	r3, [pc, #208]	; (800ca44 <mix_sub_columns+0x28c>)
 800c974:	5c5b      	ldrb	r3, [r3, r1]
 800c976:	4053      	eors	r3, r2
 800c978:	b2d9      	uxtb	r1, r3
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	461a      	mov	r2, r3
 800c97e:	4b31      	ldr	r3, [pc, #196]	; (800ca44 <mix_sub_columns+0x28c>)
 800c980:	5c9a      	ldrb	r2, [r3, r2]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	3308      	adds	r3, #8
 800c986:	404a      	eors	r2, r1
 800c988:	b2d2      	uxtb	r2, r2
 800c98a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c98c:	7c3b      	ldrb	r3, [r7, #16]
 800c98e:	461a      	mov	r2, r3
 800c990:	4b2c      	ldr	r3, [pc, #176]	; (800ca44 <mix_sub_columns+0x28c>)
 800c992:	5c9a      	ldrb	r2, [r3, r2]
 800c994:	7d7b      	ldrb	r3, [r7, #21]
 800c996:	4619      	mov	r1, r3
 800c998:	4b28      	ldr	r3, [pc, #160]	; (800ca3c <mix_sub_columns+0x284>)
 800c99a:	5c5b      	ldrb	r3, [r3, r1]
 800c99c:	4053      	eors	r3, r2
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	7abb      	ldrb	r3, [r7, #10]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	4b26      	ldr	r3, [pc, #152]	; (800ca40 <mix_sub_columns+0x288>)
 800c9a6:	5c5b      	ldrb	r3, [r3, r1]
 800c9a8:	4053      	eors	r3, r2
 800c9aa:	b2d9      	uxtb	r1, r3
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	4b24      	ldr	r3, [pc, #144]	; (800ca44 <mix_sub_columns+0x28c>)
 800c9b2:	5c9a      	ldrb	r2, [r3, r2]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	3309      	adds	r3, #9
 800c9b8:	404a      	eors	r2, r1
 800c9ba:	b2d2      	uxtb	r2, r2
 800c9bc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c9be:	7c3b      	ldrb	r3, [r7, #16]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	4b20      	ldr	r3, [pc, #128]	; (800ca44 <mix_sub_columns+0x28c>)
 800c9c4:	5c9a      	ldrb	r2, [r3, r2]
 800c9c6:	7d7b      	ldrb	r3, [r7, #21]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	4b1e      	ldr	r3, [pc, #120]	; (800ca44 <mix_sub_columns+0x28c>)
 800c9cc:	5c5b      	ldrb	r3, [r3, r1]
 800c9ce:	4053      	eors	r3, r2
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	7abb      	ldrb	r3, [r7, #10]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	4b19      	ldr	r3, [pc, #100]	; (800ca3c <mix_sub_columns+0x284>)
 800c9d8:	5c5b      	ldrb	r3, [r3, r1]
 800c9da:	4053      	eors	r3, r2
 800c9dc:	b2d9      	uxtb	r1, r3
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	4b17      	ldr	r3, [pc, #92]	; (800ca40 <mix_sub_columns+0x288>)
 800c9e4:	5c9a      	ldrb	r2, [r3, r2]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	330a      	adds	r3, #10
 800c9ea:	404a      	eors	r2, r1
 800c9ec:	b2d2      	uxtb	r2, r2
 800c9ee:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c9f0:	7c3b      	ldrb	r3, [r7, #16]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4b12      	ldr	r3, [pc, #72]	; (800ca40 <mix_sub_columns+0x288>)
 800c9f6:	5c9a      	ldrb	r2, [r3, r2]
 800c9f8:	7d7b      	ldrb	r3, [r7, #21]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	4b11      	ldr	r3, [pc, #68]	; (800ca44 <mix_sub_columns+0x28c>)
 800c9fe:	5c5b      	ldrb	r3, [r3, r1]
 800ca00:	4053      	eors	r3, r2
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	7abb      	ldrb	r3, [r7, #10]
 800ca06:	4619      	mov	r1, r3
 800ca08:	4b0e      	ldr	r3, [pc, #56]	; (800ca44 <mix_sub_columns+0x28c>)
 800ca0a:	5c5b      	ldrb	r3, [r3, r1]
 800ca0c:	4053      	eors	r3, r2
 800ca0e:	b2d9      	uxtb	r1, r3
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	461a      	mov	r2, r3
 800ca14:	4b09      	ldr	r3, [pc, #36]	; (800ca3c <mix_sub_columns+0x284>)
 800ca16:	5c9a      	ldrb	r2, [r3, r2]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	330b      	adds	r3, #11
 800ca1c:	404a      	eors	r2, r1
 800ca1e:	b2d2      	uxtb	r2, r2
 800ca20:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ca22:	7d3b      	ldrb	r3, [r7, #20]
 800ca24:	461a      	mov	r2, r3
 800ca26:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <mix_sub_columns+0x284>)
 800ca28:	5c9a      	ldrb	r2, [r3, r2]
 800ca2a:	7a7b      	ldrb	r3, [r7, #9]
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	4b04      	ldr	r3, [pc, #16]	; (800ca40 <mix_sub_columns+0x288>)
 800ca30:	5c5b      	ldrb	r3, [r3, r1]
 800ca32:	4053      	eors	r3, r2
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	7bbb      	ldrb	r3, [r7, #14]
 800ca38:	4619      	mov	r1, r3
 800ca3a:	e005      	b.n	800ca48 <mix_sub_columns+0x290>
 800ca3c:	0801e470 	.word	0x0801e470
 800ca40:	0801e570 	.word	0x0801e570
 800ca44:	0801e370 	.word	0x0801e370
 800ca48:	4b2d      	ldr	r3, [pc, #180]	; (800cb00 <mix_sub_columns+0x348>)
 800ca4a:	5c5b      	ldrb	r3, [r3, r1]
 800ca4c:	4053      	eors	r3, r2
 800ca4e:	b2d9      	uxtb	r1, r3
 800ca50:	7cfb      	ldrb	r3, [r7, #19]
 800ca52:	461a      	mov	r2, r3
 800ca54:	4b2a      	ldr	r3, [pc, #168]	; (800cb00 <mix_sub_columns+0x348>)
 800ca56:	5c9a      	ldrb	r2, [r3, r2]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	330c      	adds	r3, #12
 800ca5c:	404a      	eors	r2, r1
 800ca5e:	b2d2      	uxtb	r2, r2
 800ca60:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ca62:	7d3b      	ldrb	r3, [r7, #20]
 800ca64:	461a      	mov	r2, r3
 800ca66:	4b26      	ldr	r3, [pc, #152]	; (800cb00 <mix_sub_columns+0x348>)
 800ca68:	5c9a      	ldrb	r2, [r3, r2]
 800ca6a:	7a7b      	ldrb	r3, [r7, #9]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	4b25      	ldr	r3, [pc, #148]	; (800cb04 <mix_sub_columns+0x34c>)
 800ca70:	5c5b      	ldrb	r3, [r3, r1]
 800ca72:	4053      	eors	r3, r2
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	7bbb      	ldrb	r3, [r7, #14]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	4b23      	ldr	r3, [pc, #140]	; (800cb08 <mix_sub_columns+0x350>)
 800ca7c:	5c5b      	ldrb	r3, [r3, r1]
 800ca7e:	4053      	eors	r3, r2
 800ca80:	b2d9      	uxtb	r1, r3
 800ca82:	7cfb      	ldrb	r3, [r7, #19]
 800ca84:	461a      	mov	r2, r3
 800ca86:	4b1e      	ldr	r3, [pc, #120]	; (800cb00 <mix_sub_columns+0x348>)
 800ca88:	5c9a      	ldrb	r2, [r3, r2]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	330d      	adds	r3, #13
 800ca8e:	404a      	eors	r2, r1
 800ca90:	b2d2      	uxtb	r2, r2
 800ca92:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ca94:	7d3b      	ldrb	r3, [r7, #20]
 800ca96:	461a      	mov	r2, r3
 800ca98:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <mix_sub_columns+0x348>)
 800ca9a:	5c9a      	ldrb	r2, [r3, r2]
 800ca9c:	7a7b      	ldrb	r3, [r7, #9]
 800ca9e:	4619      	mov	r1, r3
 800caa0:	4b17      	ldr	r3, [pc, #92]	; (800cb00 <mix_sub_columns+0x348>)
 800caa2:	5c5b      	ldrb	r3, [r3, r1]
 800caa4:	4053      	eors	r3, r2
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	7bbb      	ldrb	r3, [r7, #14]
 800caaa:	4619      	mov	r1, r3
 800caac:	4b15      	ldr	r3, [pc, #84]	; (800cb04 <mix_sub_columns+0x34c>)
 800caae:	5c5b      	ldrb	r3, [r3, r1]
 800cab0:	4053      	eors	r3, r2
 800cab2:	b2d9      	uxtb	r1, r3
 800cab4:	7cfb      	ldrb	r3, [r7, #19]
 800cab6:	461a      	mov	r2, r3
 800cab8:	4b13      	ldr	r3, [pc, #76]	; (800cb08 <mix_sub_columns+0x350>)
 800caba:	5c9a      	ldrb	r2, [r3, r2]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	330e      	adds	r3, #14
 800cac0:	404a      	eors	r2, r1
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800cac6:	7d3b      	ldrb	r3, [r7, #20]
 800cac8:	461a      	mov	r2, r3
 800caca:	4b0f      	ldr	r3, [pc, #60]	; (800cb08 <mix_sub_columns+0x350>)
 800cacc:	5c9a      	ldrb	r2, [r3, r2]
 800cace:	7a7b      	ldrb	r3, [r7, #9]
 800cad0:	4619      	mov	r1, r3
 800cad2:	4b0b      	ldr	r3, [pc, #44]	; (800cb00 <mix_sub_columns+0x348>)
 800cad4:	5c5b      	ldrb	r3, [r3, r1]
 800cad6:	4053      	eors	r3, r2
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	7bbb      	ldrb	r3, [r7, #14]
 800cadc:	4619      	mov	r1, r3
 800cade:	4b08      	ldr	r3, [pc, #32]	; (800cb00 <mix_sub_columns+0x348>)
 800cae0:	5c5b      	ldrb	r3, [r3, r1]
 800cae2:	4053      	eors	r3, r2
 800cae4:	b2d9      	uxtb	r1, r3
 800cae6:	7cfb      	ldrb	r3, [r7, #19]
 800cae8:	461a      	mov	r2, r3
 800caea:	4b06      	ldr	r3, [pc, #24]	; (800cb04 <mix_sub_columns+0x34c>)
 800caec:	5c9a      	ldrb	r2, [r3, r2]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	330f      	adds	r3, #15
 800caf2:	404a      	eors	r2, r1
 800caf4:	b2d2      	uxtb	r2, r2
 800caf6:	701a      	strb	r2, [r3, #0]
  }
 800caf8:	bf00      	nop
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	0801e370 	.word	0x0801e370
 800cb04:	0801e470 	.word	0x0801e470
 800cb08:	0801e570 	.word	0x0801e570

0800cb0c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	460b      	mov	r3, r1
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800cb1a:	7afb      	ldrb	r3, [r7, #11]
 800cb1c:	3b10      	subs	r3, #16
 800cb1e:	2b10      	cmp	r3, #16
 800cb20:	bf8c      	ite	hi
 800cb22:	2201      	movhi	r2, #1
 800cb24:	2200      	movls	r2, #0
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	2a00      	cmp	r2, #0
 800cb2a:	d10d      	bne.n	800cb48 <lorawan_aes_set_key+0x3c>
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb32:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800cb36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bf14      	ite	ne
 800cb3e:	2301      	movne	r3, #1
 800cb40:	2300      	moveq	r3, #0
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d105      	bne.n	800cb54 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800cb50:	23ff      	movs	r3, #255	; 0xff
 800cb52:	e0b2      	b.n	800ccba <lorawan_aes_set_key+0x1ae>
        break;
 800cb54:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	7afa      	ldrb	r2, [r7, #11]
 800cb5a:	68f9      	ldr	r1, [r7, #12]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7ff fbfa 	bl	800c356 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800cb62:	7afb      	ldrb	r3, [r7, #11]
 800cb64:	331c      	adds	r3, #28
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800cb6c:	7c7b      	ldrb	r3, [r7, #17]
 800cb6e:	091b      	lsrs	r3, r3, #4
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	3b01      	subs	r3, #1
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cb7c:	7afb      	ldrb	r3, [r7, #11]
 800cb7e:	75fb      	strb	r3, [r7, #23]
 800cb80:	2301      	movs	r3, #1
 800cb82:	75bb      	strb	r3, [r7, #22]
 800cb84:	e093      	b.n	800ccae <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800cb86:	7dfb      	ldrb	r3, [r7, #23]
 800cb88:	3b04      	subs	r3, #4
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	5cd3      	ldrb	r3, [r2, r3]
 800cb8e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	3b03      	subs	r3, #3
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	5cd3      	ldrb	r3, [r2, r3]
 800cb98:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800cb9a:	7dfb      	ldrb	r3, [r7, #23]
 800cb9c:	3b02      	subs	r3, #2
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	5cd3      	ldrb	r3, [r2, r3]
 800cba2:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	5cd3      	ldrb	r3, [r2, r3]
 800cbac:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
 800cbb0:	7afa      	ldrb	r2, [r7, #11]
 800cbb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbb6:	fb01 f202 	mul.w	r2, r1, r2
 800cbba:	1a9b      	subs	r3, r3, r2
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d127      	bne.n	800cc12 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800cbc2:	7d7b      	ldrb	r3, [r7, #21]
 800cbc4:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800cbc6:	7d3b      	ldrb	r3, [r7, #20]
 800cbc8:	4a3e      	ldr	r2, [pc, #248]	; (800ccc4 <lorawan_aes_set_key+0x1b8>)
 800cbca:	5cd2      	ldrb	r2, [r2, r3]
 800cbcc:	7dbb      	ldrb	r3, [r7, #22]
 800cbce:	4053      	eors	r3, r2
 800cbd0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800cbd2:	7cfb      	ldrb	r3, [r7, #19]
 800cbd4:	4a3b      	ldr	r2, [pc, #236]	; (800ccc4 <lorawan_aes_set_key+0x1b8>)
 800cbd6:	5cd3      	ldrb	r3, [r2, r3]
 800cbd8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800cbda:	7cbb      	ldrb	r3, [r7, #18]
 800cbdc:	4a39      	ldr	r2, [pc, #228]	; (800ccc4 <lorawan_aes_set_key+0x1b8>)
 800cbde:	5cd3      	ldrb	r3, [r2, r3]
 800cbe0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800cbe2:	7c3b      	ldrb	r3, [r7, #16]
 800cbe4:	4a37      	ldr	r2, [pc, #220]	; (800ccc4 <lorawan_aes_set_key+0x1b8>)
 800cbe6:	5cd3      	ldrb	r3, [r2, r3]
 800cbe8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800cbea:	7dbb      	ldrb	r3, [r7, #22]
 800cbec:	005b      	lsls	r3, r3, #1
 800cbee:	b25a      	sxtb	r2, r3
 800cbf0:	7dbb      	ldrb	r3, [r7, #22]
 800cbf2:	09db      	lsrs	r3, r3, #7
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	0049      	lsls	r1, r1, #1
 800cbfa:	440b      	add	r3, r1
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	00c8      	lsls	r0, r1, #3
 800cc00:	4619      	mov	r1, r3
 800cc02:	4603      	mov	r3, r0
 800cc04:	440b      	add	r3, r1
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	b25b      	sxtb	r3, r3
 800cc0a:	4053      	eors	r3, r2
 800cc0c:	b25b      	sxtb	r3, r3
 800cc0e:	75bb      	strb	r3, [r7, #22]
 800cc10:	e01c      	b.n	800cc4c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800cc12:	7afb      	ldrb	r3, [r7, #11]
 800cc14:	2b18      	cmp	r3, #24
 800cc16:	d919      	bls.n	800cc4c <lorawan_aes_set_key+0x140>
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
 800cc1a:	7afa      	ldrb	r2, [r7, #11]
 800cc1c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc20:	fb01 f202 	mul.w	r2, r1, r2
 800cc24:	1a9b      	subs	r3, r3, r2
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b10      	cmp	r3, #16
 800cc2a:	d10f      	bne.n	800cc4c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800cc2c:	7d7b      	ldrb	r3, [r7, #21]
 800cc2e:	4a25      	ldr	r2, [pc, #148]	; (800ccc4 <lorawan_aes_set_key+0x1b8>)
 800cc30:	5cd3      	ldrb	r3, [r2, r3]
 800cc32:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800cc34:	7d3b      	ldrb	r3, [r7, #20]
 800cc36:	4a23      	ldr	r2, [pc, #140]	; (800ccc4 <lorawan_aes_set_key+0x1b8>)
 800cc38:	5cd3      	ldrb	r3, [r2, r3]
 800cc3a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800cc3c:	7cfb      	ldrb	r3, [r7, #19]
 800cc3e:	4a21      	ldr	r2, [pc, #132]	; (800ccc4 <lorawan_aes_set_key+0x1b8>)
 800cc40:	5cd3      	ldrb	r3, [r2, r3]
 800cc42:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800cc44:	7cbb      	ldrb	r3, [r7, #18]
 800cc46:	4a1f      	ldr	r2, [pc, #124]	; (800ccc4 <lorawan_aes_set_key+0x1b8>)
 800cc48:	5cd3      	ldrb	r3, [r2, r3]
 800cc4a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800cc4c:	7dfa      	ldrb	r2, [r7, #23]
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800cc54:	7c3b      	ldrb	r3, [r7, #16]
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	5cd1      	ldrb	r1, [r2, r3]
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	7d7a      	ldrb	r2, [r7, #21]
 800cc5e:	404a      	eors	r2, r1
 800cc60:	b2d1      	uxtb	r1, r2
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800cc66:	7c3b      	ldrb	r3, [r7, #16]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	5cd1      	ldrb	r1, [r2, r3]
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	3301      	adds	r3, #1
 800cc72:	7d3a      	ldrb	r2, [r7, #20]
 800cc74:	404a      	eors	r2, r1
 800cc76:	b2d1      	uxtb	r1, r2
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800cc7c:	7c3b      	ldrb	r3, [r7, #16]
 800cc7e:	3302      	adds	r3, #2
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	5cd1      	ldrb	r1, [r2, r3]
 800cc84:	7dfb      	ldrb	r3, [r7, #23]
 800cc86:	3302      	adds	r3, #2
 800cc88:	7cfa      	ldrb	r2, [r7, #19]
 800cc8a:	404a      	eors	r2, r1
 800cc8c:	b2d1      	uxtb	r1, r2
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800cc92:	7c3b      	ldrb	r3, [r7, #16]
 800cc94:	3303      	adds	r3, #3
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	5cd1      	ldrb	r1, [r2, r3]
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	3303      	adds	r3, #3
 800cc9e:	7cba      	ldrb	r2, [r7, #18]
 800cca0:	404a      	eors	r2, r1
 800cca2:	b2d1      	uxtb	r1, r2
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	75fb      	strb	r3, [r7, #23]
 800ccae:	7dfa      	ldrb	r2, [r7, #23]
 800ccb0:	7c7b      	ldrb	r3, [r7, #17]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	f4ff af67 	bcc.w	800cb86 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	0801e370 	.word	0x0801e370

0800ccc8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	; 0x28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d038      	beq.n	800cd50 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	f107 0314 	add.w	r3, r7, #20
 800cce4:	68f9      	ldr	r1, [r7, #12]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff fc07 	bl	800c4fa <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ccec:	2301      	movs	r3, #1
 800ccee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ccf2:	e014      	b.n	800cd1e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ccf4:	f107 0314 	add.w	r3, r7, #20
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff fd5d 	bl	800c7b8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cd04:	0112      	lsls	r2, r2, #4
 800cd06:	441a      	add	r2, r3
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	4611      	mov	r1, r2
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff fcab 	bl	800c66a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cd14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd18:	3301      	adds	r3, #1
 800cd1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800cd24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d3e3      	bcc.n	800ccf4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800cd2c:	f107 0314 	add.w	r3, r7, #20
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff fca7 	bl	800c684 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cd3c:	0112      	lsls	r2, r2, #4
 800cd3e:	441a      	add	r2, r3
 800cd40:	f107 0314 	add.w	r3, r7, #20
 800cd44:	4619      	mov	r1, r3
 800cd46:	68b8      	ldr	r0, [r7, #8]
 800cd48:	f7ff fbd7 	bl	800c4fa <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	e000      	b.n	800cd52 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800cd50:	23ff      	movs	r3, #255	; 0xff
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3728      	adds	r7, #40	; 0x28
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
	...

0800cd5c <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800cd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd5e:	b09d      	sub	sp, #116	; 0x74
 800cd60:	af10      	add	r7, sp, #64	; 0x40
 800cd62:	4603      	mov	r3, r0
 800cd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cd68:	2306      	movs	r3, #6
 800cd6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800cd6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cd72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd76:	4611      	mov	r1, r2
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f000 fa19 	bl	800d1b0 <SecureElementGetKeyByID>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800cd84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f040 80b0 	bne.w	800ceee <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800cd8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d106      	bne.n	800cda4 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800cd96:	4b58      	ldr	r3, [pc, #352]	; (800cef8 <PrintKey+0x19c>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	2002      	movs	r0, #2
 800cd9e:	f00f fabb 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 800cda2:	e056      	b.n	800ce52 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800cda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d106      	bne.n	800cdba <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800cdac:	4b53      	ldr	r3, [pc, #332]	; (800cefc <PrintKey+0x1a0>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	2002      	movs	r0, #2
 800cdb4:	f00f fab0 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 800cdb8:	e04b      	b.n	800ce52 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800cdba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d106      	bne.n	800cdd0 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800cdc2:	4b4f      	ldr	r3, [pc, #316]	; (800cf00 <PrintKey+0x1a4>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	2002      	movs	r0, #2
 800cdca:	f00f faa5 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 800cdce:	e040      	b.n	800ce52 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800cdd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d106      	bne.n	800cde6 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800cdd8:	4b4a      	ldr	r3, [pc, #296]	; (800cf04 <PrintKey+0x1a8>)
 800cdda:	2200      	movs	r2, #0
 800cddc:	2100      	movs	r1, #0
 800cdde:	2002      	movs	r0, #2
 800cde0:	f00f fa9a 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 800cde4:	e035      	b.n	800ce52 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800cde6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	d106      	bne.n	800cdfc <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800cdee:	4b46      	ldr	r3, [pc, #280]	; (800cf08 <PrintKey+0x1ac>)
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	2002      	movs	r0, #2
 800cdf6:	f00f fa8f 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 800cdfa:	e02a      	b.n	800ce52 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800cdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce00:	2b7f      	cmp	r3, #127	; 0x7f
 800ce02:	d106      	bne.n	800ce12 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ce04:	4b41      	ldr	r3, [pc, #260]	; (800cf0c <PrintKey+0x1b0>)
 800ce06:	2200      	movs	r2, #0
 800ce08:	2100      	movs	r1, #0
 800ce0a:	2002      	movs	r0, #2
 800ce0c:	f00f fa84 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 800ce10:	e01f      	b.n	800ce52 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ce12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce16:	2b80      	cmp	r3, #128	; 0x80
 800ce18:	d106      	bne.n	800ce28 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ce1a:	4b3d      	ldr	r3, [pc, #244]	; (800cf10 <PrintKey+0x1b4>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2100      	movs	r1, #0
 800ce20:	2002      	movs	r0, #2
 800ce22:	f00f fa79 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 800ce26:	e014      	b.n	800ce52 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ce28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce2c:	2b81      	cmp	r3, #129	; 0x81
 800ce2e:	d106      	bne.n	800ce3e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ce30:	4b38      	ldr	r3, [pc, #224]	; (800cf14 <PrintKey+0x1b8>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	2100      	movs	r1, #0
 800ce36:	2002      	movs	r0, #2
 800ce38:	f00f fa6e 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 800ce3c:	e009      	b.n	800ce52 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ce3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce42:	2b82      	cmp	r3, #130	; 0x82
 800ce44:	d105      	bne.n	800ce52 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ce46:	4b34      	ldr	r3, [pc, #208]	; (800cf18 <PrintKey+0x1bc>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	2002      	movs	r0, #2
 800ce4e:	f00f fa63 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ce52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce54:	785b      	ldrb	r3, [r3, #1]
 800ce56:	4618      	mov	r0, r3
 800ce58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5a:	789b      	ldrb	r3, [r3, #2]
 800ce5c:	461c      	mov	r4, r3
 800ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce60:	78db      	ldrb	r3, [r3, #3]
 800ce62:	461d      	mov	r5, r3
 800ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce66:	791b      	ldrb	r3, [r3, #4]
 800ce68:	461e      	mov	r6, r3
 800ce6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6c:	795b      	ldrb	r3, [r3, #5]
 800ce6e:	623b      	str	r3, [r7, #32]
 800ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce72:	799b      	ldrb	r3, [r3, #6]
 800ce74:	61fb      	str	r3, [r7, #28]
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	79db      	ldrb	r3, [r3, #7]
 800ce7a:	61bb      	str	r3, [r7, #24]
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	7a1b      	ldrb	r3, [r3, #8]
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce84:	7a5b      	ldrb	r3, [r3, #9]
 800ce86:	613b      	str	r3, [r7, #16]
 800ce88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8a:	7a9b      	ldrb	r3, [r3, #10]
 800ce8c:	60fb      	str	r3, [r7, #12]
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	7adb      	ldrb	r3, [r3, #11]
 800ce92:	60bb      	str	r3, [r7, #8]
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	7b1b      	ldrb	r3, [r3, #12]
 800ce98:	607b      	str	r3, [r7, #4]
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	7b5b      	ldrb	r3, [r3, #13]
 800ce9e:	603b      	str	r3, [r7, #0]
 800cea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea2:	7b9b      	ldrb	r3, [r3, #14]
 800cea4:	4619      	mov	r1, r3
 800cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea8:	7bdb      	ldrb	r3, [r3, #15]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	7c1b      	ldrb	r3, [r3, #16]
 800ceb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceb2:	920e      	str	r2, [sp, #56]	; 0x38
 800ceb4:	910d      	str	r1, [sp, #52]	; 0x34
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	920c      	str	r2, [sp, #48]	; 0x30
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	920b      	str	r2, [sp, #44]	; 0x2c
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	920a      	str	r2, [sp, #40]	; 0x28
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	9209      	str	r2, [sp, #36]	; 0x24
 800cec6:	693a      	ldr	r2, [r7, #16]
 800cec8:	9208      	str	r2, [sp, #32]
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	9207      	str	r2, [sp, #28]
 800cece:	69ba      	ldr	r2, [r7, #24]
 800ced0:	9206      	str	r2, [sp, #24]
 800ced2:	69fa      	ldr	r2, [r7, #28]
 800ced4:	9205      	str	r2, [sp, #20]
 800ced6:	6a3b      	ldr	r3, [r7, #32]
 800ced8:	9304      	str	r3, [sp, #16]
 800ceda:	9603      	str	r6, [sp, #12]
 800cedc:	9502      	str	r5, [sp, #8]
 800cede:	9401      	str	r4, [sp, #4]
 800cee0:	9000      	str	r0, [sp, #0]
 800cee2:	4b0e      	ldr	r3, [pc, #56]	; (800cf1c <PrintKey+0x1c0>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	2100      	movs	r1, #0
 800cee8:	2002      	movs	r0, #2
 800ceea:	f00f fa15 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800ceee:	bf00      	nop
 800cef0:	3734      	adds	r7, #52	; 0x34
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef6:	bf00      	nop
 800cef8:	0801ddd0 	.word	0x0801ddd0
 800cefc:	0801dde8 	.word	0x0801dde8
 800cf00:	0801de00 	.word	0x0801de00
 800cf04:	0801de18 	.word	0x0801de18
 800cf08:	0801de30 	.word	0x0801de30
 800cf0c:	0801de48 	.word	0x0801de48
 800cf10:	0801de60 	.word	0x0801de60
 800cf14:	0801de78 	.word	0x0801de78
 800cf18:	0801de90 	.word	0x0801de90
 800cf1c:	0801dea8 	.word	0x0801dea8

0800cf20 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4603      	mov	r3, r0
 800cf28:	6039      	str	r1, [r7, #0]
 800cf2a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]
 800cf30:	e01a      	b.n	800cf68 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cf32:	4b12      	ldr	r3, [pc, #72]	; (800cf7c <GetKeyByID+0x5c>)
 800cf34:	6819      	ldr	r1, [r3, #0]
 800cf36:	7bfa      	ldrb	r2, [r7, #15]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	011b      	lsls	r3, r3, #4
 800cf3c:	4413      	add	r3, r2
 800cf3e:	440b      	add	r3, r1
 800cf40:	3310      	adds	r3, #16
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	79fa      	ldrb	r2, [r7, #7]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d10b      	bne.n	800cf62 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cf4a:	4b0c      	ldr	r3, [pc, #48]	; (800cf7c <GetKeyByID+0x5c>)
 800cf4c:	6819      	ldr	r1, [r3, #0]
 800cf4e:	7bfa      	ldrb	r2, [r7, #15]
 800cf50:	4613      	mov	r3, r2
 800cf52:	011b      	lsls	r3, r3, #4
 800cf54:	4413      	add	r3, r2
 800cf56:	3310      	adds	r3, #16
 800cf58:	18ca      	adds	r2, r1, r3
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e006      	b.n	800cf70 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	3301      	adds	r3, #1
 800cf66:	73fb      	strb	r3, [r7, #15]
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
 800cf6a:	2b09      	cmp	r3, #9
 800cf6c:	d9e1      	bls.n	800cf32 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cf6e:	2303      	movs	r3, #3
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bc80      	pop	{r7}
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	20002f00 	.word	0x20002f00

0800cf80 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800cf80:	b590      	push	{r4, r7, lr}
 800cf82:	b0d1      	sub	sp, #324	; 0x144
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800cf8a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800cf8e:	6020      	str	r0, [r4, #0]
 800cf90:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800cf94:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800cf98:	6001      	str	r1, [r0, #0]
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cfa0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800cfa4:	801a      	strh	r2, [r3, #0]
 800cfa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cfaa:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800cfae:	460a      	mov	r2, r1
 800cfb0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cfb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cfb6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d003      	beq.n	800cfc8 <ComputeCmac+0x48>
 800cfc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d101      	bne.n	800cfcc <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cfc8:	2302      	movs	r3, #2
 800cfca:	e05c      	b.n	800d086 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800cfcc:	f107 0314 	add.w	r3, r7, #20
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fe ff1b 	bl	800be0c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800cfd6:	f107 0210 	add.w	r2, r7, #16
 800cfda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cfde:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff ff9a 	bl	800cf20 <GetKeyByID>
 800cfec:	4603      	mov	r3, r0
 800cfee:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cff2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d143      	bne.n	800d082 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800cffa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	f107 0314 	add.w	r3, r7, #20
 800d00a:	4611      	mov	r1, r2
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fe ff16 	bl	800be3e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d012:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d016:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d009      	beq.n	800d034 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800d020:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d024:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d028:	f107 0014 	add.w	r0, r7, #20
 800d02c:	2210      	movs	r2, #16
 800d02e:	6819      	ldr	r1, [r3, #0]
 800d030:	f7fe ff14 	bl	800be5c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d034:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d038:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d03c:	881a      	ldrh	r2, [r3, #0]
 800d03e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d042:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d046:	f107 0014 	add.w	r0, r7, #20
 800d04a:	6819      	ldr	r1, [r3, #0]
 800d04c:	f7fe ff06 	bl	800be5c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d050:	f107 0214 	add.w	r2, r7, #20
 800d054:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d058:	4611      	mov	r1, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fe ffc0 	bl	800bfe0 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800d060:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800d064:	061a      	lsls	r2, r3, #24
 800d066:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800d06a:	041b      	lsls	r3, r3, #16
 800d06c:	431a      	orrs	r2, r3
 800d06e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800d072:	021b      	lsls	r3, r3, #8
 800d074:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800d076:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800d07a:	431a      	orrs	r2, r3
 800d07c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d080:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d082:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800d086:	4618      	mov	r0, r3
 800d088:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd90      	pop	{r4, r7, pc}

0800d090 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800d090:	b5b0      	push	{r4, r5, r7, lr}
 800d092:	b0b2      	sub	sp, #200	; 0xc8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800d09a:	f107 0308 	add.w	r3, r7, #8
 800d09e:	22c0      	movs	r2, #192	; 0xc0
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f010 fc4c 	bl	801d940 <memset>
 800d0a8:	4a3b      	ldr	r2, [pc, #236]	; (800d198 <SecureElementInit+0x108>)
 800d0aa:	f107 0308 	add.w	r3, r7, #8
 800d0ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0b2:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0b6:	4a39      	ldr	r2, [pc, #228]	; (800d19c <SecureElementInit+0x10c>)
 800d0b8:	f107 0310 	add.w	r3, r7, #16
 800d0bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0c0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0c4:	4b36      	ldr	r3, [pc, #216]	; (800d1a0 <SecureElementInit+0x110>)
 800d0c6:	f107 0419 	add.w	r4, r7, #25
 800d0ca:	461d      	mov	r5, r3
 800d0cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0ce:	6020      	str	r0, [r4, #0]
 800d0d0:	6061      	str	r1, [r4, #4]
 800d0d2:	60a2      	str	r2, [r4, #8]
 800d0d4:	60e3      	str	r3, [r4, #12]
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800d0dc:	4b30      	ldr	r3, [pc, #192]	; (800d1a0 <SecureElementInit+0x110>)
 800d0de:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800d0e2:	461d      	mov	r5, r3
 800d0e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0e6:	6020      	str	r0, [r4, #0]
 800d0e8:	6061      	str	r1, [r4, #4]
 800d0ea:	60a2      	str	r2, [r4, #8]
 800d0ec:	60e3      	str	r3, [r4, #12]
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d0f4:	4b2a      	ldr	r3, [pc, #168]	; (800d1a0 <SecureElementInit+0x110>)
 800d0f6:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800d0fa:	461d      	mov	r5, r3
 800d0fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0fe:	6020      	str	r0, [r4, #0]
 800d100:	6061      	str	r1, [r4, #4]
 800d102:	60a2      	str	r2, [r4, #8]
 800d104:	60e3      	str	r3, [r4, #12]
 800d106:	2303      	movs	r3, #3
 800d108:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d10c:	4b24      	ldr	r3, [pc, #144]	; (800d1a0 <SecureElementInit+0x110>)
 800d10e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d118:	2304      	movs	r3, #4
 800d11a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800d11e:	237f      	movs	r3, #127	; 0x7f
 800d120:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800d124:	2380      	movs	r3, #128	; 0x80
 800d126:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800d12a:	2381      	movs	r3, #129	; 0x81
 800d12c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d130:	2382      	movs	r3, #130	; 0x82
 800d132:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800d136:	2383      	movs	r3, #131	; 0x83
 800d138:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d142:	2302      	movs	r3, #2
 800d144:	e023      	b.n	800d18e <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800d146:	4a17      	ldr	r2, [pc, #92]	; (800d1a4 <SecureElementInit+0x114>)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800d14c:	4b15      	ldr	r3, [pc, #84]	; (800d1a4 <SecureElementInit+0x114>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f107 0108 	add.w	r1, r7, #8
 800d154:	22c0      	movs	r2, #192	; 0xc0
 800d156:	4618      	mov	r0, r3
 800d158:	f00b ff8b 	bl	8019072 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d15c:	4b12      	ldr	r3, [pc, #72]	; (800d1a8 <SecureElementInit+0x118>)
 800d15e:	2200      	movs	r2, #0
 800d160:	2100      	movs	r1, #0
 800d162:	2002      	movs	r0, #2
 800d164:	f00f f8d8 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800d168:	2000      	movs	r0, #0
 800d16a:	f7ff fdf7 	bl	800cd5c <PrintKey>
    PrintKey(NWK_KEY);
 800d16e:	2001      	movs	r0, #1
 800d170:	f7ff fdf4 	bl	800cd5c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d174:	4b0d      	ldr	r3, [pc, #52]	; (800d1ac <SecureElementInit+0x11c>)
 800d176:	2200      	movs	r2, #0
 800d178:	2100      	movs	r1, #0
 800d17a:	2002      	movs	r0, #2
 800d17c:	f00f f8cc 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800d180:	2003      	movs	r0, #3
 800d182:	f7ff fdeb 	bl	800cd5c <PrintKey>
    PrintKey(NWK_S_KEY);
 800d186:	2002      	movs	r0, #2
 800d188:	f7ff fde8 	bl	800cd5c <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	37c8      	adds	r7, #200	; 0xc8
 800d192:	46bd      	mov	sp, r7
 800d194:	bdb0      	pop	{r4, r5, r7, pc}
 800d196:	bf00      	nop
 800d198:	0801df2c 	.word	0x0801df2c
 800d19c:	0801df34 	.word	0x0801df34
 800d1a0:	0801df3c 	.word	0x0801df3c
 800d1a4:	20002f00 	.word	0x20002f00
 800d1a8:	0801defc 	.word	0x0801defc
 800d1ac:	0801df14 	.word	0x0801df14

0800d1b0 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	6039      	str	r1, [r7, #0]
 800d1ba:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73fb      	strb	r3, [r7, #15]
 800d1c0:	e01a      	b.n	800d1f8 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800d1c2:	4b12      	ldr	r3, [pc, #72]	; (800d20c <SecureElementGetKeyByID+0x5c>)
 800d1c4:	6819      	ldr	r1, [r3, #0]
 800d1c6:	7bfa      	ldrb	r2, [r7, #15]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	011b      	lsls	r3, r3, #4
 800d1cc:	4413      	add	r3, r2
 800d1ce:	440b      	add	r3, r1
 800d1d0:	3310      	adds	r3, #16
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	79fa      	ldrb	r2, [r7, #7]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d10b      	bne.n	800d1f2 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800d1da:	4b0c      	ldr	r3, [pc, #48]	; (800d20c <SecureElementGetKeyByID+0x5c>)
 800d1dc:	6819      	ldr	r1, [r3, #0]
 800d1de:	7bfa      	ldrb	r2, [r7, #15]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	011b      	lsls	r3, r3, #4
 800d1e4:	4413      	add	r3, r2
 800d1e6:	3310      	adds	r3, #16
 800d1e8:	18ca      	adds	r2, r1, r3
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	e006      	b.n	800d200 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d1f2:	7bfb      	ldrb	r3, [r7, #15]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	73fb      	strb	r3, [r7, #15]
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
 800d1fa:	2b09      	cmp	r3, #9
 800d1fc:	d9e1      	bls.n	800d1c2 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d1fe:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800d200:	4618      	mov	r0, r3
 800d202:	3714      	adds	r7, #20
 800d204:	46bd      	mov	sp, r7
 800d206:	bc80      	pop	{r7}
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	20002f00 	.word	0x20002f00

0800d210 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	6039      	str	r1, [r7, #0]
 800d21a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d101      	bne.n	800d226 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d222:	2302      	movs	r3, #2
 800d224:	e04c      	b.n	800d2c0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d226:	2300      	movs	r3, #0
 800d228:	77fb      	strb	r3, [r7, #31]
 800d22a:	e045      	b.n	800d2b8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d22c:	4b26      	ldr	r3, [pc, #152]	; (800d2c8 <SecureElementSetKey+0xb8>)
 800d22e:	6819      	ldr	r1, [r3, #0]
 800d230:	7ffa      	ldrb	r2, [r7, #31]
 800d232:	4613      	mov	r3, r2
 800d234:	011b      	lsls	r3, r3, #4
 800d236:	4413      	add	r3, r2
 800d238:	440b      	add	r3, r1
 800d23a:	3310      	adds	r3, #16
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	79fa      	ldrb	r2, [r7, #7]
 800d240:	429a      	cmp	r2, r3
 800d242:	d136      	bne.n	800d2b2 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	2b80      	cmp	r3, #128	; 0x80
 800d248:	d123      	bne.n	800d292 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800d24a:	2306      	movs	r3, #6
 800d24c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800d24e:	2300      	movs	r3, #0
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	f107 0310 	add.w	r3, r7, #16
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	605a      	str	r2, [r3, #4]
 800d25c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800d25e:	f107 030c 	add.w	r3, r7, #12
 800d262:	227f      	movs	r2, #127	; 0x7f
 800d264:	2110      	movs	r1, #16
 800d266:	6838      	ldr	r0, [r7, #0]
 800d268:	f000 f87d 	bl	800d366 <SecureElementAesEncrypt>
 800d26c:	4603      	mov	r3, r0
 800d26e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d270:	4b15      	ldr	r3, [pc, #84]	; (800d2c8 <SecureElementSetKey+0xb8>)
 800d272:	6819      	ldr	r1, [r3, #0]
 800d274:	7ffa      	ldrb	r2, [r7, #31]
 800d276:	4613      	mov	r3, r2
 800d278:	011b      	lsls	r3, r3, #4
 800d27a:	4413      	add	r3, r2
 800d27c:	3310      	adds	r3, #16
 800d27e:	440b      	add	r3, r1
 800d280:	3301      	adds	r3, #1
 800d282:	f107 010c 	add.w	r1, r7, #12
 800d286:	2210      	movs	r2, #16
 800d288:	4618      	mov	r0, r3
 800d28a:	f00b fef2 	bl	8019072 <memcpy1>
                return retval;
 800d28e:	7fbb      	ldrb	r3, [r7, #30]
 800d290:	e016      	b.n	800d2c0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d292:	4b0d      	ldr	r3, [pc, #52]	; (800d2c8 <SecureElementSetKey+0xb8>)
 800d294:	6819      	ldr	r1, [r3, #0]
 800d296:	7ffa      	ldrb	r2, [r7, #31]
 800d298:	4613      	mov	r3, r2
 800d29a:	011b      	lsls	r3, r3, #4
 800d29c:	4413      	add	r3, r2
 800d29e:	3310      	adds	r3, #16
 800d2a0:	440b      	add	r3, r1
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	2210      	movs	r2, #16
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f00b fee2 	bl	8019072 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e006      	b.n	800d2c0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d2b2:	7ffb      	ldrb	r3, [r7, #31]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	77fb      	strb	r3, [r7, #31]
 800d2b8:	7ffb      	ldrb	r3, [r7, #31]
 800d2ba:	2b09      	cmp	r3, #9
 800d2bc:	d9b6      	bls.n	800d22c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d2be:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3720      	adds	r7, #32
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20002f00 	.word	0x20002f00

0800d2cc <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af02      	add	r7, sp, #8
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	461a      	mov	r2, r3
 800d2da:	460b      	mov	r3, r1
 800d2dc:	80fb      	strh	r3, [r7, #6]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800d2e2:	797b      	ldrb	r3, [r7, #5]
 800d2e4:	2b7e      	cmp	r3, #126	; 0x7e
 800d2e6:	d901      	bls.n	800d2ec <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e009      	b.n	800d300 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d2ec:	7979      	ldrb	r1, [r7, #5]
 800d2ee:	88fa      	ldrh	r2, [r7, #6]
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	68b9      	ldr	r1, [r7, #8]
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f7ff fe41 	bl	800cf80 <ComputeCmac>
 800d2fe:	4603      	mov	r3, r0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b088      	sub	sp, #32
 800d30c:	af02      	add	r7, sp, #8
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	607a      	str	r2, [r7, #4]
 800d312:	461a      	mov	r2, r3
 800d314:	460b      	mov	r3, r1
 800d316:	817b      	strh	r3, [r7, #10]
 800d318:	4613      	mov	r3, r2
 800d31a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d322:	2302      	movs	r3, #2
 800d324:	e01b      	b.n	800d35e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d326:	2306      	movs	r3, #6
 800d328:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d32e:	7a79      	ldrb	r1, [r7, #9]
 800d330:	897a      	ldrh	r2, [r7, #10]
 800d332:	f107 0310 	add.w	r3, r7, #16
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	460b      	mov	r3, r1
 800d33a:	68f9      	ldr	r1, [r7, #12]
 800d33c:	2000      	movs	r0, #0
 800d33e:	f7ff fe1f 	bl	800cf80 <ComputeCmac>
 800d342:	4603      	mov	r3, r0
 800d344:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	e006      	b.n	800d35e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	429a      	cmp	r2, r3
 800d356:	d001      	beq.n	800d35c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d358:	2301      	movs	r3, #1
 800d35a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3718      	adds	r7, #24
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b0c2      	sub	sp, #264	; 0x108
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	60f8      	str	r0, [r7, #12]
 800d36e:	4608      	mov	r0, r1
 800d370:	4611      	mov	r1, r2
 800d372:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d376:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	4603      	mov	r3, r0
 800d37e:	817b      	strh	r3, [r7, #10]
 800d380:	460b      	mov	r3, r1
 800d382:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d006      	beq.n	800d398 <SecureElementAesEncrypt+0x32>
 800d38a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d38e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d101      	bne.n	800d39c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d398:	2302      	movs	r3, #2
 800d39a:	e046      	b.n	800d42a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d39c:	897b      	ldrh	r3, [r7, #10]
 800d39e:	f003 030f 	and.w	r3, r3, #15
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d001      	beq.n	800d3ac <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d3a8:	2305      	movs	r3, #5
 800d3aa:	e03e      	b.n	800d42a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d3ac:	f107 0314 	add.w	r3, r7, #20
 800d3b0:	22f0      	movs	r2, #240	; 0xf0
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f00b fe97 	bl	80190e8 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d3ba:	f107 0210 	add.w	r2, r7, #16
 800d3be:	7a7b      	ldrb	r3, [r7, #9]
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7ff fdac 	bl	800cf20 <GetKeyByID>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d3ce:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d127      	bne.n	800d426 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	f107 0214 	add.w	r2, r7, #20
 800d3de:	2110      	movs	r1, #16
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7ff fb93 	bl	800cb0c <lorawan_aes_set_key>

        uint8_t block = 0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800d3ec:	e018      	b.n	800d420 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d3ee:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	18d0      	adds	r0, r2, r3
 800d3f6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d3fa:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d3fe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d402:	6812      	ldr	r2, [r2, #0]
 800d404:	4413      	add	r3, r2
 800d406:	f107 0214 	add.w	r2, r7, #20
 800d40a:	4619      	mov	r1, r3
 800d40c:	f7ff fc5c 	bl	800ccc8 <lorawan_aes_encrypt>
            block = block + 16;
 800d410:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d414:	3310      	adds	r3, #16
 800d416:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800d41a:	897b      	ldrh	r3, [r7, #10]
 800d41c:	3b10      	subs	r3, #16
 800d41e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d420:	897b      	ldrh	r3, [r7, #10]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1e3      	bne.n	800d3ee <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d426:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b088      	sub	sp, #32
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	70fb      	strb	r3, [r7, #3]
 800d440:	4613      	mov	r3, r2
 800d442:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d101      	bne.n	800d44e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d44a:	2302      	movs	r3, #2
 800d44c:	e02e      	b.n	800d4ac <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d44e:	2306      	movs	r3, #6
 800d450:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d452:	78bb      	ldrb	r3, [r7, #2]
 800d454:	2b7f      	cmp	r3, #127	; 0x7f
 800d456:	d104      	bne.n	800d462 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d458:	78fb      	ldrb	r3, [r7, #3]
 800d45a:	2b04      	cmp	r3, #4
 800d45c:	d001      	beq.n	800d462 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d45e:	2303      	movs	r3, #3
 800d460:	e024      	b.n	800d4ac <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d462:	2300      	movs	r3, #0
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	f107 0310 	add.w	r3, r7, #16
 800d46a:	2200      	movs	r2, #0
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	605a      	str	r2, [r3, #4]
 800d470:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d472:	f107 030c 	add.w	r3, r7, #12
 800d476:	78fa      	ldrb	r2, [r7, #3]
 800d478:	2110      	movs	r1, #16
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff ff73 	bl	800d366 <SecureElementAesEncrypt>
 800d480:	4603      	mov	r3, r0
 800d482:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d484:	7ffb      	ldrb	r3, [r7, #31]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d48a:	7ffb      	ldrb	r3, [r7, #31]
 800d48c:	e00e      	b.n	800d4ac <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800d48e:	f107 020c 	add.w	r2, r7, #12
 800d492:	78bb      	ldrb	r3, [r7, #2]
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff feba 	bl	800d210 <SecureElementSetKey>
 800d49c:	4603      	mov	r3, r0
 800d49e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d4a0:	7ffb      	ldrb	r3, [r7, #31]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d001      	beq.n	800d4aa <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d4a6:	7ffb      	ldrb	r3, [r7, #31]
 800d4a8:	e000      	b.n	800d4ac <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d4aa:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3720      	adds	r7, #32
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60b9      	str	r1, [r7, #8]
 800d4bc:	607b      	str	r3, [r7, #4]
 800d4be:	4603      	mov	r3, r0
 800d4c0:	73fb      	strb	r3, [r7, #15]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d005      	beq.n	800d4d8 <SecureElementProcessJoinAccept+0x24>
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d002      	beq.n	800d4d8 <SecureElementProcessJoinAccept+0x24>
 800d4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d101      	bne.n	800d4dc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d4d8:	2302      	movs	r3, #2
 800d4da:	e064      	b.n	800d5a6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d4dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4e0:	2b21      	cmp	r3, #33	; 0x21
 800d4e2:	d901      	bls.n	800d4e8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d4e4:	2305      	movs	r3, #5
 800d4e6:	e05e      	b.n	800d5a6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d4ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4f8:	f00b fdbb 	bl	8019072 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	1c58      	adds	r0, r3, #1
 800d500:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d504:	b29b      	uxth	r3, r3
 800d506:	3b01      	subs	r3, #1
 800d508:	b299      	uxth	r1, r3
 800d50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50c:	3301      	adds	r3, #1
 800d50e:	7dfa      	ldrb	r2, [r7, #23]
 800d510:	f7ff ff29 	bl	800d366 <SecureElementAesEncrypt>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d51a:	2307      	movs	r3, #7
 800d51c:	e043      	b.n	800d5a6 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d520:	330b      	adds	r3, #11
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	09db      	lsrs	r3, r3, #7
 800d526:	b2da      	uxtb	r2, r3
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800d530:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d534:	3b04      	subs	r3, #4
 800d536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d538:	4413      	add	r3, r2
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800d53e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d542:	3b03      	subs	r3, #3
 800d544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d546:	4413      	add	r3, r2
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	021b      	lsls	r3, r3, #8
 800d54c:	693a      	ldr	r2, [r7, #16]
 800d54e:	4313      	orrs	r3, r2
 800d550:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800d552:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d556:	3b02      	subs	r3, #2
 800d558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d55a:	4413      	add	r3, r2
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	041b      	lsls	r3, r3, #16
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	4313      	orrs	r3, r2
 800d564:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800d566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d56a:	3b01      	subs	r3, #1
 800d56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d56e:	4413      	add	r3, r2
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	061b      	lsls	r3, r3, #24
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	4313      	orrs	r3, r2
 800d578:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10e      	bne.n	800d5a0 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d582:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d586:	b29b      	uxth	r3, r3
 800d588:	3b04      	subs	r3, #4
 800d58a:	b299      	uxth	r1, r3
 800d58c:	2301      	movs	r3, #1
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d592:	f7ff feb9 	bl	800d308 <SecureElementVerifyAesCmac>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d003      	beq.n	800d5a4 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d59c:	2301      	movs	r3, #1
 800d59e:	e002      	b.n	800d5a6 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d5a0:	2304      	movs	r3, #4
 800d5a2:	e000      	b.n	800d5a6 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3718      	adds	r7, #24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
	...

0800d5b0 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d5be:	2302      	movs	r3, #2
 800d5c0:	e006      	b.n	800d5d0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800d5c2:	4b05      	ldr	r3, [pc, #20]	; (800d5d8 <SecureElementRandomNumber+0x28>)
 800d5c4:	695b      	ldr	r3, [r3, #20]
 800d5c6:	4798      	blx	r3
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	0801e73c 	.word	0x0801e73c

0800d5dc <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	e007      	b.n	800d5fe <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800d5ee:	4b06      	ldr	r3, [pc, #24]	; (800d608 <SecureElementSetDevEui+0x2c>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2208      	movs	r2, #8
 800d5f4:	6879      	ldr	r1, [r7, #4]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f00b fd3b 	bl	8019072 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	20002f00 	.word	0x20002f00

0800d60c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800d60c:	b480      	push	{r7}
 800d60e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800d610:	4b02      	ldr	r3, [pc, #8]	; (800d61c <SecureElementGetDevEui+0x10>)
 800d612:	681b      	ldr	r3, [r3, #0]
}
 800d614:	4618      	mov	r0, r3
 800d616:	46bd      	mov	sp, r7
 800d618:	bc80      	pop	{r7}
 800d61a:	4770      	bx	lr
 800d61c:	20002f00 	.word	0x20002f00

0800d620 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d101      	bne.n	800d632 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d62e:	2302      	movs	r3, #2
 800d630:	e008      	b.n	800d644 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800d632:	4b06      	ldr	r3, [pc, #24]	; (800d64c <SecureElementSetJoinEui+0x2c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3308      	adds	r3, #8
 800d638:	2208      	movs	r2, #8
 800d63a:	6879      	ldr	r1, [r7, #4]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f00b fd18 	bl	8019072 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20002f00 	.word	0x20002f00

0800d650 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d650:	b480      	push	{r7}
 800d652:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800d654:	4b03      	ldr	r3, [pc, #12]	; (800d664 <SecureElementGetJoinEui+0x14>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3308      	adds	r3, #8
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bc80      	pop	{r7}
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	20002f00 	.word	0x20002f00

0800d668 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800d670:	4a1a      	ldr	r2, [pc, #104]	; (800d6dc <LmHandlerInit+0x74>)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d676:	4b1a      	ldr	r3, [pc, #104]	; (800d6e0 <LmHandlerInit+0x78>)
 800d678:	4a1a      	ldr	r2, [pc, #104]	; (800d6e4 <LmHandlerInit+0x7c>)
 800d67a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d67c:	4b18      	ldr	r3, [pc, #96]	; (800d6e0 <LmHandlerInit+0x78>)
 800d67e:	4a1a      	ldr	r2, [pc, #104]	; (800d6e8 <LmHandlerInit+0x80>)
 800d680:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d682:	4b17      	ldr	r3, [pc, #92]	; (800d6e0 <LmHandlerInit+0x78>)
 800d684:	4a19      	ldr	r2, [pc, #100]	; (800d6ec <LmHandlerInit+0x84>)
 800d686:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d688:	4b15      	ldr	r3, [pc, #84]	; (800d6e0 <LmHandlerInit+0x78>)
 800d68a:	4a19      	ldr	r2, [pc, #100]	; (800d6f0 <LmHandlerInit+0x88>)
 800d68c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d68e:	4b13      	ldr	r3, [pc, #76]	; (800d6dc <LmHandlerInit+0x74>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a17      	ldr	r2, [pc, #92]	; (800d6f4 <LmHandlerInit+0x8c>)
 800d696:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d698:	4b10      	ldr	r3, [pc, #64]	; (800d6dc <LmHandlerInit+0x74>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	4a15      	ldr	r2, [pc, #84]	; (800d6f4 <LmHandlerInit+0x8c>)
 800d6a0:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d6a2:	4b0e      	ldr	r3, [pc, #56]	; (800d6dc <LmHandlerInit+0x74>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	4a12      	ldr	r2, [pc, #72]	; (800d6f4 <LmHandlerInit+0x8c>)
 800d6aa:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d6ac:	4b11      	ldr	r3, [pc, #68]	; (800d6f4 <LmHandlerInit+0x8c>)
 800d6ae:	4a12      	ldr	r2, [pc, #72]	; (800d6f8 <LmHandlerInit+0x90>)
 800d6b0:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d6b2:	4b0a      	ldr	r3, [pc, #40]	; (800d6dc <LmHandlerInit+0x74>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	4a0e      	ldr	r2, [pc, #56]	; (800d6f4 <LmHandlerInit+0x8c>)
 800d6ba:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d6bc:	490f      	ldr	r1, [pc, #60]	; (800d6fc <LmHandlerInit+0x94>)
 800d6be:	2000      	movs	r0, #0
 800d6c0:	f000 fcf4 	bl	800e0ac <LmHandlerPackageRegister>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d002      	beq.n	800d6d0 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800d6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ce:	e000      	b.n	800d6d2 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	20002f28 	.word	0x20002f28
 800d6e0:	20002f2c 	.word	0x20002f2c
 800d6e4:	0800de01 	.word	0x0800de01
 800d6e8:	0800de69 	.word	0x0800de69
 800d6ec:	0800df49 	.word	0x0800df49
 800d6f0:	0800e00d 	.word	0x0800e00d
 800d6f4:	20002f3c 	.word	0x20002f3c
 800d6f8:	0800e31d 	.word	0x0800e31d
 800d6fc:	2000009c 	.word	0x2000009c

0800d700 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d702:	b099      	sub	sp, #100	; 0x64
 800d704:	af08      	add	r7, sp, #32
 800d706:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d70c:	2210      	movs	r2, #16
 800d70e:	6879      	ldr	r1, [r7, #4]
 800d710:	487e      	ldr	r0, [pc, #504]	; (800d90c <LmHandlerConfigure+0x20c>)
 800d712:	f00f f8e9 	bl	801c8e8 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800d716:	f7fc ffb7 	bl	800a688 <LoraInfo_GetPtr>
 800d71a:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d71c:	4b7b      	ldr	r3, [pc, #492]	; (800d90c <LmHandlerConfigure+0x20c>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	461a      	mov	r2, r3
 800d722:	2301      	movs	r3, #1
 800d724:	4093      	lsls	r3, r2
 800d726:	461a      	mov	r2, r3
 800d728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	4013      	ands	r3, r2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00c      	beq.n	800d74c <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d732:	4b76      	ldr	r3, [pc, #472]	; (800d90c <LmHandlerConfigure+0x20c>)
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	461a      	mov	r2, r3
 800d738:	4975      	ldr	r1, [pc, #468]	; (800d910 <LmHandlerConfigure+0x210>)
 800d73a:	4876      	ldr	r0, [pc, #472]	; (800d914 <LmHandlerConfigure+0x214>)
 800d73c:	f004 fb10 	bl	8011d60 <LoRaMacInitialization>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d009      	beq.n	800d75a <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800d746:	f04f 33ff 	mov.w	r3, #4294967295
 800d74a:	e0db      	b.n	800d904 <LmHandlerConfigure+0x204>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d74c:	4b72      	ldr	r3, [pc, #456]	; (800d918 <LmHandlerConfigure+0x218>)
 800d74e:	2201      	movs	r2, #1
 800d750:	2100      	movs	r1, #0
 800d752:	2000      	movs	r0, #0
 800d754:	f00e fde0 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d758:	e7fe      	b.n	800d758 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800d75a:	f000 fdf0 	bl	800e33e <NvmDataMgmtRestore>
 800d75e:	4603      	mov	r3, r0
 800d760:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800d762:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d764:	2b00      	cmp	r3, #0
 800d766:	d003      	beq.n	800d770 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800d768:	4b6c      	ldr	r3, [pc, #432]	; (800d91c <LmHandlerConfigure+0x21c>)
 800d76a:	2201      	movs	r2, #1
 800d76c:	701a      	strb	r2, [r3, #0]
 800d76e:	e002      	b.n	800d776 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800d770:	4b6a      	ldr	r3, [pc, #424]	; (800d91c <LmHandlerConfigure+0x21c>)
 800d772:	2200      	movs	r2, #0
 800d774:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d776:	2302      	movs	r3, #2
 800d778:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d77a:	f107 0314 	add.w	r3, r7, #20
 800d77e:	4618      	mov	r0, r3
 800d780:	f004 fe38 	bl	80123f4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	2208      	movs	r2, #8
 800d788:	4619      	mov	r1, r3
 800d78a:	4865      	ldr	r0, [pc, #404]	; (800d920 <LmHandlerConfigure+0x220>)
 800d78c:	f00b fc71 	bl	8019072 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d790:	2303      	movs	r3, #3
 800d792:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d794:	f107 0314 	add.w	r3, r7, #20
 800d798:	4618      	mov	r0, r3
 800d79a:	f004 fe2b 	bl	80123f4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	2208      	movs	r2, #8
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	485f      	ldr	r0, [pc, #380]	; (800d924 <LmHandlerConfigure+0x224>)
 800d7a6:	f00b fc64 	bl	8019072 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800d7aa:	2306      	movs	r3, #6
 800d7ac:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d7ae:	4b5c      	ldr	r3, [pc, #368]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7b0:	695b      	ldr	r3, [r3, #20]
 800d7b2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d7b4:	f107 0314 	add.w	r3, r7, #20
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f004 ff79 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d7be:	4b58      	ldr	r3, [pc, #352]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	4b56      	ldr	r3, [pc, #344]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7c6:	785b      	ldrb	r3, [r3, #1]
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	4b55      	ldr	r3, [pc, #340]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7cc:	789b      	ldrb	r3, [r3, #2]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	4b53      	ldr	r3, [pc, #332]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7d2:	78db      	ldrb	r3, [r3, #3]
 800d7d4:	461c      	mov	r4, r3
 800d7d6:	4b52      	ldr	r3, [pc, #328]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7d8:	791b      	ldrb	r3, [r3, #4]
 800d7da:	461d      	mov	r5, r3
 800d7dc:	4b50      	ldr	r3, [pc, #320]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7de:	795b      	ldrb	r3, [r3, #5]
 800d7e0:	461e      	mov	r6, r3
 800d7e2:	4b4f      	ldr	r3, [pc, #316]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7e4:	799b      	ldrb	r3, [r3, #6]
 800d7e6:	603b      	str	r3, [r7, #0]
 800d7e8:	4b4d      	ldr	r3, [pc, #308]	; (800d920 <LmHandlerConfigure+0x220>)
 800d7ea:	79db      	ldrb	r3, [r3, #7]
 800d7ec:	9307      	str	r3, [sp, #28]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	9306      	str	r3, [sp, #24]
 800d7f2:	9605      	str	r6, [sp, #20]
 800d7f4:	9504      	str	r5, [sp, #16]
 800d7f6:	9403      	str	r4, [sp, #12]
 800d7f8:	9002      	str	r0, [sp, #8]
 800d7fa:	9101      	str	r1, [sp, #4]
 800d7fc:	9200      	str	r2, [sp, #0]
 800d7fe:	4b4a      	ldr	r3, [pc, #296]	; (800d928 <LmHandlerConfigure+0x228>)
 800d800:	2200      	movs	r2, #0
 800d802:	2100      	movs	r1, #0
 800d804:	2002      	movs	r0, #2
 800d806:	f00e fd87 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d80a:	4b45      	ldr	r3, [pc, #276]	; (800d920 <LmHandlerConfigure+0x220>)
 800d80c:	7a1b      	ldrb	r3, [r3, #8]
 800d80e:	461a      	mov	r2, r3
 800d810:	4b43      	ldr	r3, [pc, #268]	; (800d920 <LmHandlerConfigure+0x220>)
 800d812:	7a5b      	ldrb	r3, [r3, #9]
 800d814:	4619      	mov	r1, r3
 800d816:	4b42      	ldr	r3, [pc, #264]	; (800d920 <LmHandlerConfigure+0x220>)
 800d818:	7a9b      	ldrb	r3, [r3, #10]
 800d81a:	4618      	mov	r0, r3
 800d81c:	4b40      	ldr	r3, [pc, #256]	; (800d920 <LmHandlerConfigure+0x220>)
 800d81e:	7adb      	ldrb	r3, [r3, #11]
 800d820:	461c      	mov	r4, r3
 800d822:	4b3f      	ldr	r3, [pc, #252]	; (800d920 <LmHandlerConfigure+0x220>)
 800d824:	7b1b      	ldrb	r3, [r3, #12]
 800d826:	461d      	mov	r5, r3
 800d828:	4b3d      	ldr	r3, [pc, #244]	; (800d920 <LmHandlerConfigure+0x220>)
 800d82a:	7b5b      	ldrb	r3, [r3, #13]
 800d82c:	461e      	mov	r6, r3
 800d82e:	4b3c      	ldr	r3, [pc, #240]	; (800d920 <LmHandlerConfigure+0x220>)
 800d830:	7b9b      	ldrb	r3, [r3, #14]
 800d832:	603b      	str	r3, [r7, #0]
 800d834:	4b3a      	ldr	r3, [pc, #232]	; (800d920 <LmHandlerConfigure+0x220>)
 800d836:	7bdb      	ldrb	r3, [r3, #15]
 800d838:	9307      	str	r3, [sp, #28]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	9306      	str	r3, [sp, #24]
 800d83e:	9605      	str	r6, [sp, #20]
 800d840:	9504      	str	r5, [sp, #16]
 800d842:	9403      	str	r4, [sp, #12]
 800d844:	9002      	str	r0, [sp, #8]
 800d846:	9101      	str	r1, [sp, #4]
 800d848:	9200      	str	r2, [sp, #0]
 800d84a:	4b38      	ldr	r3, [pc, #224]	; (800d92c <LmHandlerConfigure+0x22c>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	2100      	movs	r1, #0
 800d850:	2002      	movs	r0, #2
 800d852:	f00e fd61 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800d856:	4b36      	ldr	r3, [pc, #216]	; (800d930 <LmHandlerConfigure+0x230>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	4b35      	ldr	r3, [pc, #212]	; (800d934 <LmHandlerConfigure+0x234>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	4619      	mov	r1, r3
 800d862:	4b35      	ldr	r3, [pc, #212]	; (800d938 <LmHandlerConfigure+0x238>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	4618      	mov	r0, r3
 800d868:	4b34      	ldr	r3, [pc, #208]	; (800d93c <LmHandlerConfigure+0x23c>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	9303      	str	r3, [sp, #12]
 800d86e:	9002      	str	r0, [sp, #8]
 800d870:	9101      	str	r1, [sp, #4]
 800d872:	9200      	str	r2, [sp, #0]
 800d874:	4b32      	ldr	r3, [pc, #200]	; (800d940 <LmHandlerConfigure+0x240>)
 800d876:	2200      	movs	r2, #0
 800d878:	2100      	movs	r1, #0
 800d87a:	2002      	movs	r0, #2
 800d87c:	f00e fd4c 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d880:	230f      	movs	r3, #15
 800d882:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d884:	2301      	movs	r3, #1
 800d886:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d888:	f107 0314 	add.w	r3, r7, #20
 800d88c:	4618      	mov	r0, r3
 800d88e:	f004 ff0f 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800d892:	2305      	movs	r3, #5
 800d894:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d896:	2300      	movs	r3, #0
 800d898:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d89a:	f107 0314 	add.w	r3, r7, #20
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f004 ff06 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d8a4:	2310      	movs	r3, #16
 800d8a6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d8ac:	f107 0314 	add.w	r3, r7, #20
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f004 fefd 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d8b6:	2304      	movs	r3, #4
 800d8b8:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d8ba:	4b14      	ldr	r3, [pc, #80]	; (800d90c <LmHandlerConfigure+0x20c>)
 800d8bc:	789b      	ldrb	r3, [r3, #2]
 800d8be:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d8c0:	f107 0314 	add.w	r3, r7, #20
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f004 fef3 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d8ca:	230f      	movs	r3, #15
 800d8cc:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d8ce:	4b0f      	ldr	r3, [pc, #60]	; (800d90c <LmHandlerConfigure+0x20c>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	f107 020c 	add.w	r2, r7, #12
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f007 fcfa 	bl	80152d2 <RegionGetPhyParam>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	bf14      	ite	ne
 800d8e8:	2301      	movne	r3, #1
 800d8ea:	2300      	moveq	r3, #0
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	4b07      	ldr	r3, [pc, #28]	; (800d90c <LmHandlerConfigure+0x20c>)
 800d8f0:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800d8f2:	2014      	movs	r0, #20
 800d8f4:	f000 fa6c 	bl	800ddd0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d8f8:	4b04      	ldr	r3, [pc, #16]	; (800d90c <LmHandlerConfigure+0x20c>)
 800d8fa:	795b      	ldrb	r3, [r3, #5]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f005 fc4b 	bl	8013198 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3744      	adds	r7, #68	; 0x44
 800d908:	46bd      	mov	sp, r7
 800d90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d90c:	20002f18 	.word	0x20002f18
 800d910:	20002f3c 	.word	0x20002f3c
 800d914:	20002f2c 	.word	0x20002f2c
 800d918:	0801df4c 	.word	0x0801df4c
 800d91c:	2000305a 	.word	0x2000305a
 800d920:	20000084 	.word	0x20000084
 800d924:	2000008c 	.word	0x2000008c
 800d928:	0801df98 	.word	0x0801df98
 800d92c:	0801dfd4 	.word	0x0801dfd4
 800d930:	2000009b 	.word	0x2000009b
 800d934:	2000009a 	.word	0x2000009a
 800d938:	20000099 	.word	0x20000099
 800d93c:	20000098 	.word	0x20000098
 800d940:	0801e010 	.word	0x0801e010

0800d944 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d948:	f002 f9b8 	bl	800fcbc <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d94c:	f000 fc9a 	bl	800e284 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800d950:	f000 fcee 	bl	800e330 <NvmDataMgmtStore>
}
 800d954:	bf00      	nop
 800d956:	bd80      	pop	{r7, pc}

0800d958 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b090      	sub	sp, #64	; 0x40
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d962:	79fb      	ldrb	r3, [r7, #7]
 800d964:	2b02      	cmp	r3, #2
 800d966:	d111      	bne.n	800d98c <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d968:	4b23      	ldr	r3, [pc, #140]	; (800d9f8 <LmHandlerJoin+0xa0>)
 800d96a:	2202      	movs	r2, #2
 800d96c:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800d96e:	f004 fcab 	bl	80122c8 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800d972:	2301      	movs	r3, #1
 800d974:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d976:	4b21      	ldr	r3, [pc, #132]	; (800d9fc <LmHandlerJoin+0xa4>)
 800d978:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d980:	f107 0308 	add.w	r3, r7, #8
 800d984:	4618      	mov	r0, r3
 800d986:	f005 f9d1 	bl	8012d2c <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800d98a:	e030      	b.n	800d9ee <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d98c:	4b1a      	ldr	r3, [pc, #104]	; (800d9f8 <LmHandlerJoin+0xa0>)
 800d98e:	2201      	movs	r2, #1
 800d990:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d992:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <LmHandlerJoin+0xa4>)
 800d994:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d998:	4b17      	ldr	r3, [pc, #92]	; (800d9f8 <LmHandlerJoin+0xa0>)
 800d99a:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d99c:	4b16      	ldr	r3, [pc, #88]	; (800d9f8 <LmHandlerJoin+0xa0>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800d9a2:	4b17      	ldr	r3, [pc, #92]	; (800da00 <LmHandlerJoin+0xa8>)
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	f083 0301 	eor.w	r3, r3, #1
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d008      	beq.n	800d9c2 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d9b0:	2327      	movs	r3, #39	; 0x27
 800d9b2:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d9b4:	4b13      	ldr	r3, [pc, #76]	; (800da04 <LmHandlerJoin+0xac>)
 800d9b6:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d9b8:	f107 031c 	add.w	r3, r7, #28
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f004 fe77 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800d9c2:	f004 fc81 	bl	80122c8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d9d0:	f107 031c 	add.w	r3, r7, #28
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f004 fe6b 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d9da:	4b0b      	ldr	r3, [pc, #44]	; (800da08 <LmHandlerJoin+0xb0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	69db      	ldr	r3, [r3, #28]
 800d9e0:	4805      	ldr	r0, [pc, #20]	; (800d9f8 <LmHandlerJoin+0xa0>)
 800d9e2:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <LmHandlerJoin+0xa4>)
 800d9e6:	785b      	ldrb	r3, [r3, #1]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 f917 	bl	800dc1c <LmHandlerRequestClass>
}
 800d9ee:	bf00      	nop
 800d9f0:	3740      	adds	r7, #64	; 0x40
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	200000a8 	.word	0x200000a8
 800d9fc:	20002f18 	.word	0x20002f18
 800da00:	2000305a 	.word	0x2000305a
 800da04:	01000300 	.word	0x01000300
 800da08:	20002f28 	.word	0x20002f28

0800da0c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08a      	sub	sp, #40	; 0x28
 800da10:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800da12:	2301      	movs	r3, #1
 800da14:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800da16:	463b      	mov	r3, r7
 800da18:	4618      	mov	r0, r3
 800da1a:	f004 fceb 	bl	80123f4 <LoRaMacMibGetRequestConfirm>
 800da1e:	4603      	mov	r3, r0
 800da20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800da24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d106      	bne.n	800da3a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da2c:	793b      	ldrb	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800da32:	2300      	movs	r3, #0
 800da34:	e002      	b.n	800da3c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800da36:	2301      	movs	r3, #1
 800da38:	e000      	b.n	800da3c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800da3a:	2300      	movs	r3, #0
    }
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3728      	adds	r7, #40	; 0x28
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b08c      	sub	sp, #48	; 0x30
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	607a      	str	r2, [r7, #4]
 800da4e:	461a      	mov	r2, r3
 800da50:	460b      	mov	r3, r1
 800da52:	72fb      	strb	r3, [r7, #11]
 800da54:	4613      	mov	r3, r2
 800da56:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800da58:	23ff      	movs	r3, #255	; 0xff
 800da5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800da5e:	f001 fe97 	bl	800f790 <LoRaMacIsBusy>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800da68:	f06f 0301 	mvn.w	r3, #1
 800da6c:	e0b4      	b.n	800dbd8 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800da6e:	f7ff ffcd 	bl	800da0c <LmHandlerJoinStatus>
 800da72:	4603      	mov	r3, r0
 800da74:	2b01      	cmp	r3, #1
 800da76:	d007      	beq.n	800da88 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800da78:	4b59      	ldr	r3, [pc, #356]	; (800dbe0 <LmHandlerSend+0x19c>)
 800da7a:	789b      	ldrb	r3, [r3, #2]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff ff6b 	bl	800d958 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da82:	f06f 0302 	mvn.w	r3, #2
 800da86:	e0a7      	b.n	800dbd8 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800da88:	4b56      	ldr	r3, [pc, #344]	; (800dbe4 <LmHandlerSend+0x1a0>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	4798      	blx	r3
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00d      	beq.n	800dab2 <LmHandlerSend+0x6e>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	781a      	ldrb	r2, [r3, #0]
 800da9a:	4b52      	ldr	r3, [pc, #328]	; (800dbe4 <LmHandlerSend+0x1a0>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d006      	beq.n	800dab2 <LmHandlerSend+0x6e>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800daac:	f06f 0303 	mvn.w	r3, #3
 800dab0:	e092      	b.n	800dbd8 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800dab2:	4b4d      	ldr	r3, [pc, #308]	; (800dbe8 <LmHandlerSend+0x1a4>)
 800dab4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800dab8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	785b      	ldrb	r3, [r3, #1]
 800dac0:	f107 0214 	add.w	r2, r7, #20
 800dac4:	4611      	mov	r1, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f004 fc0c 	bl	80122e4 <LoRaMacQueryTxPossible>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d009      	beq.n	800dae6 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800dad2:	4b46      	ldr	r3, [pc, #280]	; (800dbec <LmHandlerSend+0x1a8>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800dad8:	2300      	movs	r3, #0
 800dada:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800dadc:	2300      	movs	r3, #0
 800dade:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dae4:	e017      	b.n	800db16 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800dae6:	4a41      	ldr	r2, [pc, #260]	; (800dbec <LmHandlerSend+0x1a8>)
 800dae8:	7afb      	ldrb	r3, [r7, #11]
 800daea:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	785b      	ldrb	r3, [r3, #1]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800db00:	7afb      	ldrb	r3, [r7, #11]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d102      	bne.n	800db0c <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800db06:	2300      	movs	r3, #0
 800db08:	763b      	strb	r3, [r7, #24]
 800db0a:	e004      	b.n	800db16 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800db0c:	2301      	movs	r3, #1
 800db0e:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800db10:	2308      	movs	r3, #8
 800db12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800db16:	4b35      	ldr	r3, [pc, #212]	; (800dbec <LmHandlerSend+0x1a8>)
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	330c      	adds	r3, #12
 800db1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db20:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800db24:	4b30      	ldr	r3, [pc, #192]	; (800dbe8 <LmHandlerSend+0x1a4>)
 800db26:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800db2a:	4b30      	ldr	r3, [pc, #192]	; (800dbec <LmHandlerSend+0x1a8>)
 800db2c:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800db2e:	7aba      	ldrb	r2, [r7, #10]
 800db30:	f107 0318 	add.w	r3, r7, #24
 800db34:	4611      	mov	r1, r2
 800db36:	4618      	mov	r0, r3
 800db38:	f005 fa38 	bl	8012fac <LoRaMacMcpsRequest>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800db48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800db4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800db52:	2b11      	cmp	r3, #17
 800db54:	d83a      	bhi.n	800dbcc <LmHandlerSend+0x188>
 800db56:	a201      	add	r2, pc, #4	; (adr r2, 800db5c <LmHandlerSend+0x118>)
 800db58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5c:	0800dba5 	.word	0x0800dba5
 800db60:	0800dbad 	.word	0x0800dbad
 800db64:	0800dbcd 	.word	0x0800dbcd
 800db68:	0800dbcd 	.word	0x0800dbcd
 800db6c:	0800dbcd 	.word	0x0800dbcd
 800db70:	0800dbcd 	.word	0x0800dbcd
 800db74:	0800dbcd 	.word	0x0800dbcd
 800db78:	0800dbb5 	.word	0x0800dbb5
 800db7c:	0800dbcd 	.word	0x0800dbcd
 800db80:	0800dbcd 	.word	0x0800dbcd
 800db84:	0800dbcd 	.word	0x0800dbcd
 800db88:	0800dbc5 	.word	0x0800dbc5
 800db8c:	0800dbcd 	.word	0x0800dbcd
 800db90:	0800dbcd 	.word	0x0800dbcd
 800db94:	0800dbad 	.word	0x0800dbad
 800db98:	0800dbad 	.word	0x0800dbad
 800db9c:	0800dbad 	.word	0x0800dbad
 800dba0:	0800dbbd 	.word	0x0800dbbd
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800dba4:	2300      	movs	r3, #0
 800dba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dbaa:	e013      	b.n	800dbd4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800dbac:	23fe      	movs	r3, #254	; 0xfe
 800dbae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dbb2:	e00f      	b.n	800dbd4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dbb4:	23fd      	movs	r3, #253	; 0xfd
 800dbb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dbba:	e00b      	b.n	800dbd4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800dbbc:	23fb      	movs	r3, #251	; 0xfb
 800dbbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dbc2:	e007      	b.n	800dbd4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800dbc4:	23fa      	movs	r3, #250	; 0xfa
 800dbc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dbca:	e003      	b.n	800dbd4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800dbcc:	23ff      	movs	r3, #255	; 0xff
 800dbce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dbd2:	bf00      	nop
    }

    return lmhStatus;
 800dbd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3730      	adds	r7, #48	; 0x30
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	200000a8 	.word	0x200000a8
 800dbe4:	20002f04 	.word	0x20002f04
 800dbe8:	20002f18 	.word	0x20002f18
 800dbec:	20002f50 	.word	0x20002f50

0800dbf0 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800dbf6:	230a      	movs	r3, #10
 800dbf8:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800dbfa:	463b      	mov	r3, r7
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f005 f895 	bl	8012d2c <LoRaMacMlmeRequest>
 800dc02:	4603      	mov	r3, r0
 800dc04:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	e001      	b.n	800dc14 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800dc10:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08c      	sub	sp, #48	; 0x30
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	4603      	mov	r3, r0
 800dc24:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800dc26:	2300      	movs	r3, #0
 800dc28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800dc2c:	f001 fdb0 	bl	800f790 <LoRaMacIsBusy>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d002      	beq.n	800dc3c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800dc36:	f06f 0301 	mvn.w	r3, #1
 800dc3a:	e07b      	b.n	800dd34 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800dc3c:	f7ff fee6 	bl	800da0c <LmHandlerJoinStatus>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d002      	beq.n	800dc4c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dc46:	f06f 0302 	mvn.w	r3, #2
 800dc4a:	e073      	b.n	800dd34 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dc50:	f107 0308 	add.w	r3, r7, #8
 800dc54:	4618      	mov	r0, r3
 800dc56:	f004 fbcd 	bl	80123f4 <LoRaMacMibGetRequestConfirm>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc60:	f04f 33ff 	mov.w	r3, #4294967295
 800dc64:	e066      	b.n	800dd34 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800dc66:	7b3b      	ldrb	r3, [r7, #12]
 800dc68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800dc6c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc70:	79fb      	ldrb	r3, [r7, #7]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d055      	beq.n	800dd22 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d02c      	beq.n	800dcd6 <LmHandlerRequestClass+0xba>
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	dc52      	bgt.n	800dd26 <LmHandlerRequestClass+0x10a>
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <LmHandlerRequestClass+0x6e>
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d022      	beq.n	800dcce <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800dc88:	e04d      	b.n	800dd26 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800dc8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d04b      	beq.n	800dd2a <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800dc92:	79fb      	ldrb	r3, [r7, #7]
 800dc94:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dc96:	f107 0308 	add.w	r3, r7, #8
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f004 fd08 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10f      	bne.n	800dcc6 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 fb1f 	bl	800e2ec <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800dcae:	4b23      	ldr	r3, [pc, #140]	; (800dd3c <LmHandlerRequestClass+0x120>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d038      	beq.n	800dd2a <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800dcb8:	4b20      	ldr	r3, [pc, #128]	; (800dd3c <LmHandlerRequestClass+0x120>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcbe:	79fa      	ldrb	r2, [r7, #7]
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	4798      	blx	r3
            break;
 800dcc4:	e031      	b.n	800dd2a <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dcc6:	23ff      	movs	r3, #255	; 0xff
 800dcc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dccc:	e02d      	b.n	800dd2a <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800dcce:	23ff      	movs	r3, #255	; 0xff
 800dcd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dcd4:	e02c      	b.n	800dd30 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800dcd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d003      	beq.n	800dce6 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800dcde:	23ff      	movs	r3, #255	; 0xff
 800dce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dce4:	e023      	b.n	800dd2e <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800dce6:	79fb      	ldrb	r3, [r7, #7]
 800dce8:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dcea:	f107 0308 	add.w	r3, r7, #8
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f004 fcde 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10f      	bne.n	800dd1a <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 faf5 	bl	800e2ec <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800dd02:	4b0e      	ldr	r3, [pc, #56]	; (800dd3c <LmHandlerRequestClass+0x120>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d010      	beq.n	800dd2e <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800dd0c:	4b0b      	ldr	r3, [pc, #44]	; (800dd3c <LmHandlerRequestClass+0x120>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd12:	79fa      	ldrb	r2, [r7, #7]
 800dd14:	4610      	mov	r0, r2
 800dd16:	4798      	blx	r3
            break;
 800dd18:	e009      	b.n	800dd2e <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dd1a:	23ff      	movs	r3, #255	; 0xff
 800dd1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dd20:	e005      	b.n	800dd2e <LmHandlerRequestClass+0x112>
        }
    }
 800dd22:	bf00      	nop
 800dd24:	e004      	b.n	800dd30 <LmHandlerRequestClass+0x114>
            break;
 800dd26:	bf00      	nop
 800dd28:	e002      	b.n	800dd30 <LmHandlerRequestClass+0x114>
            break;
 800dd2a:	bf00      	nop
 800dd2c:	e000      	b.n	800dd30 <LmHandlerRequestClass+0x114>
            break;
 800dd2e:	bf00      	nop
    return errorStatus;
 800dd30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3730      	adds	r7, #48	; 0x30
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	20002f28 	.word	0x20002f28

0800dd40 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08c      	sub	sp, #48	; 0x30
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd52:	e010      	b.n	800dd76 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dd54:	2300      	movs	r3, #0
 800dd56:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800dd58:	f107 030c 	add.w	r3, r7, #12
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f004 fb49 	bl	80123f4 <LoRaMacMibGetRequestConfirm>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd68:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6c:	e003      	b.n	800dd76 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800dd6e:	7c3a      	ldrb	r2, [r7, #16]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3730      	adds	r7, #48	; 0x30
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b08c      	sub	sp, #48	; 0x30
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd8e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd92:	e016      	b.n	800ddc2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800dd94:	231f      	movs	r3, #31
 800dd96:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800dd98:	f107 030c 	add.w	r3, r7, #12
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f004 fb29 	bl	80123f4 <LoRaMacMibGetRequestConfirm>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dda8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddac:	e009      	b.n	800ddc2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ddae:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f993 2000 	ldrsb.w	r2, [r3]
 800ddbc:	4b03      	ldr	r3, [pc, #12]	; (800ddcc <LmHandlerGetTxDatarate+0x4c>)
 800ddbe:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3730      	adds	r7, #48	; 0x30
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20002f18 	.word	0x20002f18

0800ddd0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b08c      	sub	sp, #48	; 0x30
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ddd8:	2322      	movs	r3, #34	; 0x22
 800ddda:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dde0:	f107 030c 	add.w	r3, r7, #12
 800dde4:	4618      	mov	r0, r3
 800dde6:	f004 fc63 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ddf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf4:	e000      	b.n	800ddf8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3730      	adds	r7, #48	; 0x30
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800de08:	4b15      	ldr	r3, [pc, #84]	; (800de60 <McpsConfirm+0x60>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	785a      	ldrb	r2, [r3, #1]
 800de12:	4b13      	ldr	r3, [pc, #76]	; (800de60 <McpsConfirm+0x60>)
 800de14:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	789b      	ldrb	r3, [r3, #2]
 800de1a:	b25a      	sxtb	r2, r3
 800de1c:	4b10      	ldr	r3, [pc, #64]	; (800de60 <McpsConfirm+0x60>)
 800de1e:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	4a0e      	ldr	r2, [pc, #56]	; (800de60 <McpsConfirm+0x60>)
 800de26:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800de2e:	4b0c      	ldr	r3, [pc, #48]	; (800de60 <McpsConfirm+0x60>)
 800de30:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	b2da      	uxtb	r2, r3
 800de38:	4b09      	ldr	r3, [pc, #36]	; (800de60 <McpsConfirm+0x60>)
 800de3a:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	791b      	ldrb	r3, [r3, #4]
 800de40:	461a      	mov	r2, r3
 800de42:	4b07      	ldr	r3, [pc, #28]	; (800de60 <McpsConfirm+0x60>)
 800de44:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800de46:	4b07      	ldr	r3, [pc, #28]	; (800de64 <McpsConfirm+0x64>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	4804      	ldr	r0, [pc, #16]	; (800de60 <McpsConfirm+0x60>)
 800de4e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800de50:	6879      	ldr	r1, [r7, #4]
 800de52:	2000      	movs	r0, #0
 800de54:	f000 f99a 	bl	800e18c <LmHandlerPackagesNotify>
}
 800de58:	bf00      	nop
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20002f50 	.word	0x20002f50
 800de64:	20002f28 	.word	0x20002f28

0800de68 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800de72:	2300      	movs	r3, #0
 800de74:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800de76:	4b32      	ldr	r3, [pc, #200]	; (800df40 <McpsIndication+0xd8>)
 800de78:	2201      	movs	r2, #1
 800de7a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	785a      	ldrb	r2, [r3, #1]
 800de80:	4b2f      	ldr	r3, [pc, #188]	; (800df40 <McpsIndication+0xd8>)
 800de82:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800de84:	4b2e      	ldr	r3, [pc, #184]	; (800df40 <McpsIndication+0xd8>)
 800de86:	785b      	ldrb	r3, [r3, #1]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d154      	bne.n	800df36 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	791b      	ldrb	r3, [r3, #4]
 800de90:	b25a      	sxtb	r2, r3
 800de92:	4b2b      	ldr	r3, [pc, #172]	; (800df40 <McpsIndication+0xd8>)
 800de94:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de9c:	b25a      	sxtb	r2, r3
 800de9e:	4b28      	ldr	r3, [pc, #160]	; (800df40 <McpsIndication+0xd8>)
 800dea0:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dea8:	4b25      	ldr	r3, [pc, #148]	; (800df40 <McpsIndication+0xd8>)
 800deaa:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	78db      	ldrb	r3, [r3, #3]
 800deb0:	b25a      	sxtb	r2, r3
 800deb2:	4b23      	ldr	r3, [pc, #140]	; (800df40 <McpsIndication+0xd8>)
 800deb4:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	4a21      	ldr	r2, [pc, #132]	; (800df40 <McpsIndication+0xd8>)
 800debc:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	78db      	ldrb	r3, [r3, #3]
 800dec2:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	7b1b      	ldrb	r3, [r3, #12]
 800dec8:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800ded0:	4b1c      	ldr	r3, [pc, #112]	; (800df44 <McpsIndication+0xdc>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded6:	f107 0218 	add.w	r2, r7, #24
 800deda:	4919      	ldr	r1, [pc, #100]	; (800df40 <McpsIndication+0xd8>)
 800dedc:	4610      	mov	r0, r2
 800dede:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800dee0:	4b18      	ldr	r3, [pc, #96]	; (800df44 <McpsIndication+0xdc>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d007      	beq.n	800defa <McpsIndication+0x92>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7e1b      	ldrb	r3, [r3, #24]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d003      	beq.n	800defa <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800def2:	4b14      	ldr	r3, [pc, #80]	; (800df44 <McpsIndication+0xdc>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def8:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800defa:	6879      	ldr	r1, [r7, #4]
 800defc:	2001      	movs	r0, #1
 800defe:	f000 f945 	bl	800e18c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800df02:	f107 0317 	add.w	r3, r7, #23
 800df06:	4618      	mov	r0, r3
 800df08:	f7ff ff1a 	bl	800dd40 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	795b      	ldrb	r3, [r3, #5]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d111      	bne.n	800df38 <McpsIndication+0xd0>
 800df14:	7dfb      	ldrb	r3, [r7, #23]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10e      	bne.n	800df38 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800df1a:	2300      	movs	r3, #0
 800df1c:	733b      	strb	r3, [r7, #12]
 800df1e:	2300      	movs	r3, #0
 800df20:	737b      	strb	r3, [r7, #13]
 800df22:	2300      	movs	r3, #0
 800df24:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800df26:	f107 000c 	add.w	r0, r7, #12
 800df2a:	2301      	movs	r3, #1
 800df2c:	2200      	movs	r2, #0
 800df2e:	2100      	movs	r1, #0
 800df30:	f7ff fd88 	bl	800da44 <LmHandlerSend>
 800df34:	e000      	b.n	800df38 <McpsIndication+0xd0>
        return;
 800df36:	bf00      	nop
    }
}
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	200000ac 	.word	0x200000ac
 800df44:	20002f28 	.word	0x20002f28

0800df48 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08c      	sub	sp, #48	; 0x30
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800df50:	4b28      	ldr	r3, [pc, #160]	; (800dff4 <MlmeConfirm+0xac>)
 800df52:	2200      	movs	r2, #0
 800df54:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	785a      	ldrb	r2, [r3, #1]
 800df5a:	4b26      	ldr	r3, [pc, #152]	; (800dff4 <MlmeConfirm+0xac>)
 800df5c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800df5e:	4b26      	ldr	r3, [pc, #152]	; (800dff8 <MlmeConfirm+0xb0>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6a1b      	ldr	r3, [r3, #32]
 800df64:	4823      	ldr	r0, [pc, #140]	; (800dff4 <MlmeConfirm+0xac>)
 800df66:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800df68:	6879      	ldr	r1, [r7, #4]
 800df6a:	2002      	movs	r0, #2
 800df6c:	f000 f90e 	bl	800e18c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b0a      	cmp	r3, #10
 800df76:	d035      	beq.n	800dfe4 <MlmeConfirm+0x9c>
 800df78:	2b0a      	cmp	r3, #10
 800df7a:	dc35      	bgt.n	800dfe8 <MlmeConfirm+0xa0>
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d002      	beq.n	800df86 <MlmeConfirm+0x3e>
 800df80:	2b04      	cmp	r3, #4
 800df82:	d023      	beq.n	800dfcc <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800df84:	e030      	b.n	800dfe8 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800df86:	2306      	movs	r3, #6
 800df88:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800df8a:	f107 030c 	add.w	r3, r7, #12
 800df8e:	4618      	mov	r0, r3
 800df90:	f004 fa30 	bl	80123f4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	4a19      	ldr	r2, [pc, #100]	; (800dffc <MlmeConfirm+0xb4>)
 800df98:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800df9a:	4819      	ldr	r0, [pc, #100]	; (800e000 <MlmeConfirm+0xb8>)
 800df9c:	f7ff fef0 	bl	800dd80 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	785b      	ldrb	r3, [r3, #1]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d108      	bne.n	800dfba <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dfa8:	4b15      	ldr	r3, [pc, #84]	; (800e000 <MlmeConfirm+0xb8>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dfae:	4b15      	ldr	r3, [pc, #84]	; (800e004 <MlmeConfirm+0xbc>)
 800dfb0:	785b      	ldrb	r3, [r3, #1]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7ff fe32 	bl	800dc1c <LmHandlerRequestClass>
 800dfb8:	e002      	b.n	800dfc0 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800dfba:	4b11      	ldr	r3, [pc, #68]	; (800e000 <MlmeConfirm+0xb8>)
 800dfbc:	22ff      	movs	r2, #255	; 0xff
 800dfbe:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800dfc0:	4b0d      	ldr	r3, [pc, #52]	; (800dff8 <MlmeConfirm+0xb0>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	69db      	ldr	r3, [r3, #28]
 800dfc6:	480e      	ldr	r0, [pc, #56]	; (800e000 <MlmeConfirm+0xb8>)
 800dfc8:	4798      	blx	r3
        break;
 800dfca:	e00e      	b.n	800dfea <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800dfcc:	4b0e      	ldr	r3, [pc, #56]	; (800e008 <MlmeConfirm+0xc0>)
 800dfce:	2201      	movs	r2, #1
 800dfd0:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	7a1a      	ldrb	r2, [r3, #8]
 800dfd6:	4b0c      	ldr	r3, [pc, #48]	; (800e008 <MlmeConfirm+0xc0>)
 800dfd8:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	7a5a      	ldrb	r2, [r3, #9]
 800dfde:	4b0a      	ldr	r3, [pc, #40]	; (800e008 <MlmeConfirm+0xc0>)
 800dfe0:	73da      	strb	r2, [r3, #15]
        break;
 800dfe2:	e002      	b.n	800dfea <MlmeConfirm+0xa2>
        break;
 800dfe4:	bf00      	nop
 800dfe6:	e000      	b.n	800dfea <MlmeConfirm+0xa2>
        break;
 800dfe8:	bf00      	nop
    }
}
 800dfea:	bf00      	nop
 800dfec:	3730      	adds	r7, #48	; 0x30
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20002f50 	.word	0x20002f50
 800dff8:	20002f28 	.word	0x20002f28
 800dffc:	20000084 	.word	0x20000084
 800e000:	200000a8 	.word	0x200000a8
 800e004:	20002f18 	.word	0x20002f18
 800e008:	200000ac 	.word	0x200000ac

0800e00c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e016:	4b22      	ldr	r3, [pc, #136]	; (800e0a0 <MlmeIndication+0x94>)
 800e018:	2200      	movs	r2, #0
 800e01a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	785a      	ldrb	r2, [r3, #1]
 800e020:	4b1f      	ldr	r3, [pc, #124]	; (800e0a0 <MlmeIndication+0x94>)
 800e022:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e02a:	b25a      	sxtb	r2, r3
 800e02c:	4b1c      	ldr	r3, [pc, #112]	; (800e0a0 <MlmeIndication+0x94>)
 800e02e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e036:	4b1a      	ldr	r3, [pc, #104]	; (800e0a0 <MlmeIndication+0x94>)
 800e038:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	78db      	ldrb	r3, [r3, #3]
 800e03e:	b25a      	sxtb	r2, r3
 800e040:	4b17      	ldr	r3, [pc, #92]	; (800e0a0 <MlmeIndication+0x94>)
 800e042:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800e044:	4b16      	ldr	r3, [pc, #88]	; (800e0a0 <MlmeIndication+0x94>)
 800e046:	785b      	ldrb	r3, [r3, #1]
 800e048:	2b0e      	cmp	r3, #14
 800e04a:	d005      	beq.n	800e058 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e04c:	4b15      	ldr	r3, [pc, #84]	; (800e0a4 <MlmeIndication+0x98>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e052:	4913      	ldr	r1, [pc, #76]	; (800e0a0 <MlmeIndication+0x94>)
 800e054:	2000      	movs	r0, #0
 800e056:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b07      	cmp	r3, #7
 800e05e:	d117      	bne.n	800e090 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800e060:	2300      	movs	r3, #0
 800e062:	723b      	strb	r3, [r7, #8]
 800e064:	2300      	movs	r3, #0
 800e066:	727b      	strb	r3, [r7, #9]
 800e068:	2300      	movs	r3, #0
 800e06a:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800e06c:	4b0e      	ldr	r3, [pc, #56]	; (800e0a8 <MlmeIndication+0x9c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	4798      	blx	r3
 800e074:	4603      	mov	r3, r0
 800e076:	f083 0301 	eor.w	r3, r3, #1
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d009      	beq.n	800e094 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800e080:	f107 0008 	add.w	r0, r7, #8
 800e084:	2301      	movs	r3, #1
 800e086:	2200      	movs	r2, #0
 800e088:	2100      	movs	r1, #0
 800e08a:	f7ff fcdb 	bl	800da44 <LmHandlerSend>
            }
        }
        break;
 800e08e:	e001      	b.n	800e094 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800e090:	bf00      	nop
 800e092:	e000      	b.n	800e096 <MlmeIndication+0x8a>
        break;
 800e094:	bf00      	nop
    }
}
 800e096:	bf00      	nop
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	200000ac 	.word	0x200000ac
 800e0a4:	20002f28 	.word	0x20002f28
 800e0a8:	20002f04 	.word	0x20002f04

0800e0ac <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	6039      	str	r1, [r7, #0]
 800e0b6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e0bc:	79fb      	ldrb	r3, [r7, #7]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d103      	bne.n	800e0ca <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800e0c2:	f000 f943 	bl	800e34c <LmhpCompliancePackageFactory>
 800e0c6:	60f8      	str	r0, [r7, #12]
            break;
 800e0c8:	e000      	b.n	800e0cc <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800e0ca:	bf00      	nop
        }
    }
    if( package != NULL )
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d02b      	beq.n	800e12a <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800e0d2:	79fb      	ldrb	r3, [r7, #7]
 800e0d4:	4918      	ldr	r1, [pc, #96]	; (800e138 <LmHandlerPackageRegister+0x8c>)
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	4a16      	ldr	r2, [pc, #88]	; (800e138 <LmHandlerPackageRegister+0x8c>)
 800e0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0e4:	4a15      	ldr	r2, [pc, #84]	; (800e13c <LmHandlerPackageRegister+0x90>)
 800e0e6:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	4a13      	ldr	r2, [pc, #76]	; (800e138 <LmHandlerPackageRegister+0x8c>)
 800e0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0f0:	4a13      	ldr	r2, [pc, #76]	; (800e140 <LmHandlerPackageRegister+0x94>)
 800e0f2:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	4a10      	ldr	r2, [pc, #64]	; (800e138 <LmHandlerPackageRegister+0x8c>)
 800e0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0fc:	4a11      	ldr	r2, [pc, #68]	; (800e144 <LmHandlerPackageRegister+0x98>)
 800e0fe:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e100:	4b11      	ldr	r3, [pc, #68]	; (800e148 <LmHandlerPackageRegister+0x9c>)
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	490c      	ldr	r1, [pc, #48]	; (800e138 <LmHandlerPackageRegister+0x8c>)
 800e108:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e10c:	6912      	ldr	r2, [r2, #16]
 800e10e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e110:	79fb      	ldrb	r3, [r7, #7]
 800e112:	4a09      	ldr	r2, [pc, #36]	; (800e138 <LmHandlerPackageRegister+0x8c>)
 800e114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	4a0c      	ldr	r2, [pc, #48]	; (800e14c <LmHandlerPackageRegister+0xa0>)
 800e11c:	6851      	ldr	r1, [r2, #4]
 800e11e:	4a0b      	ldr	r2, [pc, #44]	; (800e14c <LmHandlerPackageRegister+0xa0>)
 800e120:	7852      	ldrb	r2, [r2, #1]
 800e122:	6838      	ldr	r0, [r7, #0]
 800e124:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e126:	2300      	movs	r3, #0
 800e128:	e001      	b.n	800e12e <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e12a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	20002f04 	.word	0x20002f04
 800e13c:	0800d959 	.word	0x0800d959
 800e140:	0800da45 	.word	0x0800da45
 800e144:	0800dbf1 	.word	0x0800dbf1
 800e148:	20002f28 	.word	0x20002f28
 800e14c:	200000bc 	.word	0x200000bc

0800e150 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	4603      	mov	r3, r0
 800e158:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800e15a:	79fb      	ldrb	r3, [r7, #7]
 800e15c:	2b04      	cmp	r3, #4
 800e15e:	d80e      	bhi.n	800e17e <LmHandlerPackageIsInitialized+0x2e>
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	4a09      	ldr	r2, [pc, #36]	; (800e188 <LmHandlerPackageIsInitialized+0x38>)
 800e164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d007      	beq.n	800e17e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	4a05      	ldr	r2, [pc, #20]	; (800e188 <LmHandlerPackageIsInitialized+0x38>)
 800e172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e176:	689b      	ldr	r3, [r3, #8]
 800e178:	4798      	blx	r3
 800e17a:	4603      	mov	r3, r0
 800e17c:	e000      	b.n	800e180 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e17e:	2300      	movs	r3, #0
    }
}
 800e180:	4618      	mov	r0, r3
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	20002f04 	.word	0x20002f04

0800e18c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	4603      	mov	r3, r0
 800e194:	6039      	str	r1, [r7, #0]
 800e196:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e198:	2300      	movs	r3, #0
 800e19a:	73fb      	strb	r3, [r7, #15]
 800e19c:	e067      	b.n	800e26e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800e19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1a2:	4a37      	ldr	r2, [pc, #220]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d051      	beq.n	800e250 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800e1ac:	79fb      	ldrb	r3, [r7, #7]
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	d03d      	beq.n	800e22e <LmHandlerPackagesNotify+0xa2>
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	dc4e      	bgt.n	800e254 <LmHandlerPackagesNotify+0xc8>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d002      	beq.n	800e1c0 <LmHandlerPackagesNotify+0x34>
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d011      	beq.n	800e1e2 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800e1be:	e049      	b.n	800e254 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e1c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1c4:	4a2e      	ldr	r2, [pc, #184]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1ca:	699b      	ldr	r3, [r3, #24]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d043      	beq.n	800e258 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800e1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1d4:	4a2a      	ldr	r2, [pc, #168]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e1d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	6838      	ldr	r0, [r7, #0]
 800e1de:	4798      	blx	r3
                    break;
 800e1e0:	e03a      	b.n	800e258 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1e6:	4a26      	ldr	r2, [pc, #152]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d034      	beq.n	800e25c <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800e1f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1f6:	4a22      	ldr	r2, [pc, #136]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1fc:	781a      	ldrb	r2, [r3, #0]
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e202:	429a      	cmp	r2, r3
 800e204:	d00a      	beq.n	800e21c <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800e206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d126      	bne.n	800e25c <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800e20e:	4b1c      	ldr	r3, [pc, #112]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	4798      	blx	r3
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d01f      	beq.n	800e25c <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800e21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e220:	4a17      	ldr	r2, [pc, #92]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e226:	69db      	ldr	r3, [r3, #28]
 800e228:	6838      	ldr	r0, [r7, #0]
 800e22a:	4798      	blx	r3
                    break;
 800e22c:	e016      	b.n	800e25c <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e232:	4a13      	ldr	r2, [pc, #76]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d010      	beq.n	800e260 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800e23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e242:	4a0f      	ldr	r2, [pc, #60]	; (800e280 <LmHandlerPackagesNotify+0xf4>)
 800e244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e248:	6a1b      	ldr	r3, [r3, #32]
 800e24a:	6838      	ldr	r0, [r7, #0]
 800e24c:	4798      	blx	r3
                    break;
 800e24e:	e007      	b.n	800e260 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800e250:	bf00      	nop
 800e252:	e006      	b.n	800e262 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e254:	bf00      	nop
 800e256:	e004      	b.n	800e262 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e258:	bf00      	nop
 800e25a:	e002      	b.n	800e262 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e25c:	bf00      	nop
 800e25e:	e000      	b.n	800e262 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e260:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e266:	b2db      	uxtb	r3, r3
 800e268:	3301      	adds	r3, #1
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	73fb      	strb	r3, [r7, #15]
 800e26e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e272:	2b04      	cmp	r3, #4
 800e274:	dd93      	ble.n	800e19e <LmHandlerPackagesNotify+0x12>
    }
}
 800e276:	bf00      	nop
 800e278:	bf00      	nop
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	20002f04 	.word	0x20002f04

0800e284 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e28a:	2300      	movs	r3, #0
 800e28c:	71fb      	strb	r3, [r7, #7]
 800e28e:	e022      	b.n	800e2d6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e294:	4a14      	ldr	r2, [pc, #80]	; (800e2e8 <LmHandlerPackagesProcess+0x64>)
 800e296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d015      	beq.n	800e2ca <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e29e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2a2:	4a11      	ldr	r2, [pc, #68]	; (800e2e8 <LmHandlerPackagesProcess+0x64>)
 800e2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2a8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00d      	beq.n	800e2ca <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e2ae:	79fb      	ldrb	r3, [r7, #7]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff ff4d 	bl	800e150 <LmHandlerPackageIsInitialized>
 800e2b6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d006      	beq.n	800e2ca <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e2bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2c0:	4a09      	ldr	r2, [pc, #36]	; (800e2e8 <LmHandlerPackagesProcess+0x64>)
 800e2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2c6:	691b      	ldr	r3, [r3, #16]
 800e2c8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e2ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	71fb      	strb	r3, [r7, #7]
 800e2d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2da:	2b04      	cmp	r3, #4
 800e2dc:	ddd8      	ble.n	800e290 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e2de:	bf00      	nop
 800e2e0:	bf00      	nop
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20002f04 	.word	0x20002f04

0800e2ec <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af02      	add	r7, sp, #8
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e2f6:	79fb      	ldrb	r3, [r7, #7]
 800e2f8:	4a06      	ldr	r2, [pc, #24]	; (800e314 <DisplayClassUpdate+0x28>)
 800e2fa:	5cd3      	ldrb	r3, [r2, r3]
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	4b06      	ldr	r3, [pc, #24]	; (800e318 <DisplayClassUpdate+0x2c>)
 800e300:	2200      	movs	r2, #0
 800e302:	2100      	movs	r1, #0
 800e304:	2002      	movs	r0, #2
 800e306:	f00e f807 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	0801e054 	.word	0x0801e054
 800e318:	0801e038 	.word	0x0801e038

0800e31c <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	4603      	mov	r3, r0
 800e324:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e326:	bf00      	nop
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bc80      	pop	{r7}
 800e32e:	4770      	bx	lr

0800e330 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800e330:	b480      	push	{r7}
 800e332:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800e334:	2300      	movs	r3, #0
#endif
}
 800e336:	4618      	mov	r0, r3
 800e338:	46bd      	mov	sp, r7
 800e33a:	bc80      	pop	{r7}
 800e33c:	4770      	bx	lr

0800e33e <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800e33e:	b480      	push	{r7}
 800e340:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	46bd      	mov	sp, r7
 800e348:	bc80      	pop	{r7}
 800e34a:	4770      	bx	lr

0800e34c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e34c:	b480      	push	{r7}
 800e34e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800e350:	4b02      	ldr	r3, [pc, #8]	; (800e35c <LmhpCompliancePackageFactory+0x10>)
}
 800e352:	4618      	mov	r0, r3
 800e354:	46bd      	mov	sp, r7
 800e356:	bc80      	pop	{r7}
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	200000c4 	.word	0x200000c4

0800e360 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800e360:	b480      	push	{r7}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	4613      	mov	r3, r2
 800e36c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00f      	beq.n	800e394 <LmhpComplianceInit+0x34>
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00c      	beq.n	800e394 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800e37a:	4a0c      	ldr	r2, [pc, #48]	; (800e3ac <LmhpComplianceInit+0x4c>)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800e380:	4a0b      	ldr	r2, [pc, #44]	; (800e3b0 <LmhpComplianceInit+0x50>)
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e386:	4a0a      	ldr	r2, [pc, #40]	; (800e3b0 <LmhpComplianceInit+0x50>)
 800e388:	79fb      	ldrb	r3, [r7, #7]
 800e38a:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800e38c:	4b08      	ldr	r3, [pc, #32]	; (800e3b0 <LmhpComplianceInit+0x50>)
 800e38e:	2201      	movs	r2, #1
 800e390:	701a      	strb	r2, [r3, #0]
 800e392:	e006      	b.n	800e3a2 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800e394:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <LmhpComplianceInit+0x4c>)
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e39a:	4b05      	ldr	r3, [pc, #20]	; (800e3b0 <LmhpComplianceInit+0x50>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	701a      	strb	r2, [r3, #0]
    }
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	3714      	adds	r7, #20
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bc80      	pop	{r7}
 800e3aa:	4770      	bx	lr
 800e3ac:	20003088 	.word	0x20003088
 800e3b0:	20003074 	.word	0x20003074

0800e3b4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e3b8:	4b02      	ldr	r3, [pc, #8]	; (800e3c4 <LmhpComplianceIsInitialized+0x10>)
 800e3ba:	781b      	ldrb	r3, [r3, #0]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bc80      	pop	{r7}
 800e3c2:	4770      	bx	lr
 800e3c4:	20003074 	.word	0x20003074

0800e3c8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e3cc:	4b07      	ldr	r3, [pc, #28]	; (800e3ec <LmhpComplianceIsRunning+0x24>)
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	f083 0301 	eor.w	r3, r3, #1
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e001      	b.n	800e3e2 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800e3de:	4b03      	ldr	r3, [pc, #12]	; (800e3ec <LmhpComplianceIsRunning+0x24>)
 800e3e0:	785b      	ldrb	r3, [r3, #1]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bc80      	pop	{r7}
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	20003074 	.word	0x20003074

0800e3f0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800e3f8:	4b0f      	ldr	r3, [pc, #60]	; (800e438 <LmhpComplianceOnMcpsConfirm+0x48>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	f083 0301 	eor.w	r3, r3, #1
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b00      	cmp	r3, #0
 800e404:	d112      	bne.n	800e42c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800e406:	4b0c      	ldr	r3, [pc, #48]	; (800e438 <LmhpComplianceOnMcpsConfirm+0x48>)
 800e408:	785b      	ldrb	r3, [r3, #1]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00f      	beq.n	800e42e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800e412:	2b01      	cmp	r3, #1
 800e414:	d10b      	bne.n	800e42e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d007      	beq.n	800e42e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e41e:	4b06      	ldr	r3, [pc, #24]	; (800e438 <LmhpComplianceOnMcpsConfirm+0x48>)
 800e420:	899b      	ldrh	r3, [r3, #12]
 800e422:	3301      	adds	r3, #1
 800e424:	b29a      	uxth	r2, r3
 800e426:	4b04      	ldr	r3, [pc, #16]	; (800e438 <LmhpComplianceOnMcpsConfirm+0x48>)
 800e428:	819a      	strh	r2, [r3, #12]
 800e42a:	e000      	b.n	800e42e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800e42c:	bf00      	nop
    }
}
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	bc80      	pop	{r7}
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	20003074 	.word	0x20003074

0800e43c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e444:	4b12      	ldr	r3, [pc, #72]	; (800e490 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	f083 0301 	eor.w	r3, r3, #1
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d116      	bne.n	800e480 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e452:	4b0f      	ldr	r3, [pc, #60]	; (800e490 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e454:	785b      	ldrb	r3, [r3, #1]
 800e456:	f083 0301 	eor.w	r3, r3, #1
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d111      	bne.n	800e484 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	2b04      	cmp	r3, #4
 800e466:	d10e      	bne.n	800e486 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800e468:	4b09      	ldr	r3, [pc, #36]	; (800e490 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e46a:	2201      	movs	r2, #1
 800e46c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	7a1a      	ldrb	r2, [r3, #8]
 800e472:	4b07      	ldr	r3, [pc, #28]	; (800e490 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e474:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	7a5a      	ldrb	r2, [r3, #9]
 800e47a:	4b05      	ldr	r3, [pc, #20]	; (800e490 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e47c:	741a      	strb	r2, [r3, #16]
 800e47e:	e002      	b.n	800e486 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800e480:	bf00      	nop
 800e482:	e000      	b.n	800e486 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800e484:	bf00      	nop
    }
}
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	bc80      	pop	{r7}
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	20003074 	.word	0x20003074

0800e494 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800e494:	b590      	push	{r4, r7, lr}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e49a:	4b33      	ldr	r3, [pc, #204]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	f083 0301 	eor.w	r3, r3, #1
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ac:	e058      	b.n	800e560 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800e4ae:	4b2e      	ldr	r3, [pc, #184]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4b0:	785b      	ldrb	r3, [r3, #1]
 800e4b2:	f083 0301 	eor.w	r3, r3, #1
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d001      	beq.n	800e4c0 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	e04f      	b.n	800e560 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800e4c0:	4b29      	ldr	r3, [pc, #164]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4c2:	7b9b      	ldrb	r3, [r3, #14]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d019      	beq.n	800e4fc <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800e4c8:	4b27      	ldr	r3, [pc, #156]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800e4ce:	4b26      	ldr	r3, [pc, #152]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4d0:	2203      	movs	r2, #3
 800e4d2:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800e4d4:	4b24      	ldr	r3, [pc, #144]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	2205      	movs	r2, #5
 800e4da:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800e4dc:	4b22      	ldr	r3, [pc, #136]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	4a21      	ldr	r2, [pc, #132]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4e4:	7bd2      	ldrb	r2, [r2, #15]
 800e4e6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800e4e8:	4b1f      	ldr	r3, [pc, #124]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	3302      	adds	r3, #2
 800e4ee:	4a1e      	ldr	r2, [pc, #120]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4f0:	7c12      	ldrb	r2, [r2, #16]
 800e4f2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800e4f4:	4b1c      	ldr	r3, [pc, #112]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	709a      	strb	r2, [r3, #2]
 800e4fa:	e01c      	b.n	800e536 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800e4fc:	4b1a      	ldr	r3, [pc, #104]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e4fe:	789b      	ldrb	r3, [r3, #2]
 800e500:	2b01      	cmp	r3, #1
 800e502:	d005      	beq.n	800e510 <LmhpComplianceTxProcess+0x7c>
 800e504:	2b04      	cmp	r3, #4
 800e506:	d116      	bne.n	800e536 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800e508:	4b17      	ldr	r3, [pc, #92]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e50a:	2201      	movs	r2, #1
 800e50c:	709a      	strb	r2, [r3, #2]
            break;
 800e50e:	e012      	b.n	800e536 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800e510:	4b15      	ldr	r3, [pc, #84]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e512:	2202      	movs	r2, #2
 800e514:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e516:	4b14      	ldr	r3, [pc, #80]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e518:	899b      	ldrh	r3, [r3, #12]
 800e51a:	0a1b      	lsrs	r3, r3, #8
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	4b12      	ldr	r3, [pc, #72]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	b2d2      	uxtb	r2, r2
 800e524:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e526:	4b10      	ldr	r3, [pc, #64]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e528:	899a      	ldrh	r2, [r3, #12]
 800e52a:	4b0f      	ldr	r3, [pc, #60]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	3301      	adds	r3, #1
 800e530:	b2d2      	uxtb	r2, r2
 800e532:	701a      	strb	r2, [r3, #0]
            break;
 800e534:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800e536:	23e0      	movs	r3, #224	; 0xe0
 800e538:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800e53a:	4b0b      	ldr	r3, [pc, #44]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e53c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800e53e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800e540:	4b09      	ldr	r3, [pc, #36]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e542:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800e544:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800e546:	4809      	ldr	r0, [pc, #36]	; (800e56c <LmhpComplianceTxProcess+0xd8>)
 800e548:	f00e fd22 	bl	801cf90 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800e54c:	4b08      	ldr	r3, [pc, #32]	; (800e570 <LmhpComplianceTxProcess+0xdc>)
 800e54e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800e550:	4b05      	ldr	r3, [pc, #20]	; (800e568 <LmhpComplianceTxProcess+0xd4>)
 800e552:	78db      	ldrb	r3, [r3, #3]
 800e554:	4619      	mov	r1, r3
 800e556:	4638      	mov	r0, r7
 800e558:	2301      	movs	r3, #1
 800e55a:	2200      	movs	r2, #0
 800e55c:	47a0      	blx	r4
 800e55e:	4603      	mov	r3, r0
}
 800e560:	4618      	mov	r0, r3
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	bd90      	pop	{r4, r7, pc}
 800e568:	20003074 	.word	0x20003074
 800e56c:	2000305c 	.word	0x2000305c
 800e570:	200000c4 	.word	0x200000c4

0800e574 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b0a2      	sub	sp, #136	; 0x88
 800e578:	af02      	add	r7, sp, #8
 800e57a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e57c:	4ba2      	ldr	r3, [pc, #648]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f083 0301 	eor.w	r3, r3, #1
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	f040 81c0 	bne.w	800e90c <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	7b5b      	ldrb	r3, [r3, #13]
 800e590:	f083 0301 	eor.w	r3, r3, #1
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	f040 81ba 	bne.w	800e910 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800e59c:	4b9a      	ldr	r3, [pc, #616]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e59e:	785b      	ldrb	r3, [r3, #1]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00c      	beq.n	800e5be <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	7b9b      	ldrb	r3, [r3, #14]
 800e5a8:	f083 0301 	eor.w	r3, r3, #1
 800e5ac:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d005      	beq.n	800e5be <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e5b2:	4b95      	ldr	r3, [pc, #596]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e5b4:	899b      	ldrh	r3, [r3, #12]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	4b93      	ldr	r3, [pc, #588]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e5bc:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	78db      	ldrb	r3, [r3, #3]
 800e5c2:	2be0      	cmp	r3, #224	; 0xe0
 800e5c4:	f040 81a6 	bne.w	800e914 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e5c8:	4b8f      	ldr	r3, [pc, #572]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e5ca:	785b      	ldrb	r3, [r3, #1]
 800e5cc:	f083 0301 	eor.w	r3, r3, #1
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d060      	beq.n	800e698 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	7b1b      	ldrb	r3, [r3, #12]
 800e5da:	2b04      	cmp	r3, #4
 800e5dc:	f040 819f 	bne.w	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	f040 8199 	bne.w	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	f040 8192 	bne.w	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	689b      	ldr	r3, [r3, #8]
 800e5fe:	3302      	adds	r3, #2
 800e600:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e602:	2b01      	cmp	r3, #1
 800e604:	f040 818b 	bne.w	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	689b      	ldr	r3, [r3, #8]
 800e60c:	3303      	adds	r3, #3
 800e60e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e610:	2b01      	cmp	r3, #1
 800e612:	f040 8184 	bne.w	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800e616:	4b7c      	ldr	r3, [pc, #496]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e618:	2200      	movs	r2, #0
 800e61a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800e61c:	4b7a      	ldr	r3, [pc, #488]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e61e:	22e0      	movs	r2, #224	; 0xe0
 800e620:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800e622:	4b79      	ldr	r3, [pc, #484]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e624:	2202      	movs	r2, #2
 800e626:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800e628:	4b77      	ldr	r3, [pc, #476]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800e62e:	4b76      	ldr	r3, [pc, #472]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e630:	2200      	movs	r2, #0
 800e632:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800e634:	4b74      	ldr	r3, [pc, #464]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e636:	2200      	movs	r2, #0
 800e638:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800e63a:	4b73      	ldr	r3, [pc, #460]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800e640:	4b71      	ldr	r3, [pc, #452]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e642:	2201      	movs	r2, #1
 800e644:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800e646:	4b70      	ldr	r3, [pc, #448]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e648:	2201      	movs	r2, #1
 800e64a:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800e64c:	2304      	movs	r3, #4
 800e64e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800e650:	2301      	movs	r3, #1
 800e652:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e654:	f107 0308 	add.w	r3, r7, #8
 800e658:	4618      	mov	r0, r3
 800e65a:	f004 f829 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800e65e:	2000      	movs	r0, #0
 800e660:	f004 fd9a 	bl	8013198 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800e664:	4b69      	ldr	r3, [pc, #420]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d003      	beq.n	800e676 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800e66e:	4b67      	ldr	r3, [pc, #412]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800e676:	2300      	movs	r3, #0
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	4b65      	ldr	r3, [pc, #404]	; (800e810 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	f04f 31ff 	mov.w	r1, #4294967295
 800e682:	4864      	ldr	r0, [pc, #400]	; (800e814 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e684:	f00e fc4e 	bl	801cf24 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800e688:	f241 3188 	movw	r1, #5000	; 0x1388
 800e68c:	4861      	ldr	r0, [pc, #388]	; (800e814 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e68e:	f00e fd5d 	bl	801d14c <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800e692:	f7ff feff 	bl	800e494 <LmhpComplianceTxProcess>
 800e696:	e142      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	781a      	ldrb	r2, [r3, #0]
 800e69e:	4b5a      	ldr	r3, [pc, #360]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e6a0:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800e6a2:	4b59      	ldr	r3, [pc, #356]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e6a4:	789b      	ldrb	r3, [r3, #2]
 800e6a6:	2b0a      	cmp	r3, #10
 800e6a8:	f200 8136 	bhi.w	800e918 <LmhpComplianceOnMcpsIndication+0x3a4>
 800e6ac:	a201      	add	r2, pc, #4	; (adr r2, 800e6b4 <LmhpComplianceOnMcpsIndication+0x140>)
 800e6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b2:	bf00      	nop
 800e6b4:	0800e6e1 	.word	0x0800e6e1
 800e6b8:	0800e72b 	.word	0x0800e72b
 800e6bc:	0800e733 	.word	0x0800e733
 800e6c0:	0800e741 	.word	0x0800e741
 800e6c4:	0800e74f 	.word	0x0800e74f
 800e6c8:	0800e7a7 	.word	0x0800e7a7
 800e6cc:	0800e7b9 	.word	0x0800e7b9
 800e6d0:	0800e81d 	.word	0x0800e81d
 800e6d4:	0800e8c5 	.word	0x0800e8c5
 800e6d8:	0800e8d7 	.word	0x0800e8d7
 800e6dc:	0800e8f1 	.word	0x0800e8f1
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800e6e0:	484c      	ldr	r0, [pc, #304]	; (800e814 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e6e2:	f00e fcc3 	bl	801d06c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e6e6:	4b48      	ldr	r3, [pc, #288]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e6ec:	4b46      	ldr	r3, [pc, #280]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800e6f2:	2304      	movs	r3, #4
 800e6f4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e6f6:	4b45      	ldr	r3, [pc, #276]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e6fe:	f107 0308 	add.w	r3, r7, #8
 800e702:	4618      	mov	r0, r3
 800e704:	f003 ffd4 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e708:	4b40      	ldr	r3, [pc, #256]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	785b      	ldrb	r3, [r3, #1]
 800e70e:	4618      	mov	r0, r3
 800e710:	f004 fd42 	bl	8013198 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e714:	4b3d      	ldr	r3, [pc, #244]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 80fe 	beq.w	800e91c <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e720:	4b3a      	ldr	r3, [pc, #232]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	4798      	blx	r3
                }
            }
            break;
 800e728:	e0f8      	b.n	800e91c <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800e72a:	4b37      	ldr	r3, [pc, #220]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e72c:	2202      	movs	r2, #2
 800e72e:	719a      	strb	r2, [r3, #6]
            break;
 800e730:	e0f5      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800e732:	4b35      	ldr	r3, [pc, #212]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e734:	2201      	movs	r2, #1
 800e736:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800e738:	4b33      	ldr	r3, [pc, #204]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e73a:	2201      	movs	r2, #1
 800e73c:	709a      	strb	r2, [r3, #2]
            break;
 800e73e:	e0ee      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800e740:	4b31      	ldr	r3, [pc, #196]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e742:	2200      	movs	r2, #0
 800e744:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800e746:	4b30      	ldr	r3, [pc, #192]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e748:	2201      	movs	r2, #1
 800e74a:	709a      	strb	r2, [r3, #2]
            break;
 800e74c:	e0e7      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	7b1a      	ldrb	r2, [r3, #12]
 800e752:	4b2d      	ldr	r3, [pc, #180]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e754:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800e756:	4b2c      	ldr	r3, [pc, #176]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	2204      	movs	r2, #4
 800e75c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e75e:	2301      	movs	r3, #1
 800e760:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e764:	e012      	b.n	800e78c <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	689a      	ldr	r2, [r3, #8]
 800e76a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e76e:	4413      	add	r3, r2
 800e770:	781a      	ldrb	r2, [r3, #0]
 800e772:	4b25      	ldr	r3, [pc, #148]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e774:	6899      	ldr	r1, [r3, #8]
 800e776:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e77a:	440b      	add	r3, r1
 800e77c:	3201      	adds	r2, #1
 800e77e:	b2d2      	uxtb	r2, r2
 800e780:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e782:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e786:	3301      	adds	r3, #1
 800e788:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e78c:	4b1e      	ldr	r3, [pc, #120]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e78e:	795a      	ldrb	r2, [r3, #5]
 800e790:	4b1d      	ldr	r3, [pc, #116]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e792:	799b      	ldrb	r3, [r3, #6]
 800e794:	4293      	cmp	r3, r2
 800e796:	bf28      	it	cs
 800e798:	4613      	movcs	r3, r2
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d3e0      	bcc.n	800e766 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800e7a4:	e0bb      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800e7a6:	2304      	movs	r3, #4
 800e7a8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800e7ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f004 fabb 	bl	8012d2c <LoRaMacMlmeRequest>
            }
            break;
 800e7b6:	e0b2      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800e7b8:	4816      	ldr	r0, [pc, #88]	; (800e814 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e7ba:	f00e fc57 	bl	801d06c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e7be:	4b12      	ldr	r3, [pc, #72]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e7c4:	4b10      	ldr	r3, [pc, #64]	; (800e808 <LmhpComplianceOnMcpsIndication+0x294>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800e7ca:	2304      	movs	r3, #4
 800e7cc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e7ce:	4b0f      	ldr	r3, [pc, #60]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e7d6:	f107 0308 	add.w	r3, r7, #8
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f003 ff68 	bl	80126b0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e7e0:	4b0a      	ldr	r3, [pc, #40]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	785b      	ldrb	r3, [r3, #1]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f004 fcd6 	bl	8013198 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e7ec:	4b07      	ldr	r3, [pc, #28]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d003      	beq.n	800e7fe <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e7f6:	4b05      	ldr	r3, [pc, #20]	; (800e80c <LmhpComplianceOnMcpsIndication+0x298>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800e7fe:	4b06      	ldr	r3, [pc, #24]	; (800e818 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800e800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e802:	2002      	movs	r0, #2
 800e804:	4798      	blx	r3
            }
            break;
 800e806:	e08a      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
 800e808:	20003074 	.word	0x20003074
 800e80c:	20003088 	.word	0x20003088
 800e810:	0800e935 	.word	0x0800e935
 800e814:	2000305c 	.word	0x2000305c
 800e818:	200000c4 	.word	0x200000c4
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	7b1b      	ldrb	r3, [r3, #12]
 800e820:	2b03      	cmp	r3, #3
 800e822:	d113      	bne.n	800e84c <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800e824:	2305      	movs	r3, #5
 800e826:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	3301      	adds	r3, #1
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	021b      	lsls	r3, r3, #8
 800e834:	b21a      	sxth	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	3302      	adds	r3, #2
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	b21b      	sxth	r3, r3
 800e840:	4313      	orrs	r3, r2
 800e842:	b21b      	sxth	r3, r3
 800e844:	b29b      	uxth	r3, r3
 800e846:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800e84a:	e032      	b.n	800e8b2 <LmhpComplianceOnMcpsIndication+0x33e>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	7b1b      	ldrb	r3, [r3, #12]
 800e850:	2b07      	cmp	r3, #7
 800e852:	d12e      	bne.n	800e8b2 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800e854:	2306      	movs	r3, #6
 800e856:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	3301      	adds	r3, #1
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	021b      	lsls	r3, r3, #8
 800e864:	b21a      	sxth	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	3302      	adds	r3, #2
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	b21b      	sxth	r3, r3
 800e870:	4313      	orrs	r3, r2
 800e872:	b21b      	sxth	r3, r3
 800e874:	b29b      	uxth	r3, r3
 800e876:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	3303      	adds	r3, #3
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	041a      	lsls	r2, r3, #16
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	3304      	adds	r3, #4
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	021b      	lsls	r3, r3, #8
 800e88e:	4313      	orrs	r3, r2
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	6892      	ldr	r2, [r2, #8]
 800e894:	3205      	adds	r2, #5
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	4313      	orrs	r3, r2
 800e89a:	461a      	mov	r2, r3
 800e89c:	2364      	movs	r3, #100	; 0x64
 800e89e:	fb02 f303 	mul.w	r3, r2, r3
 800e8a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	3306      	adds	r3, #6
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	b25b      	sxtb	r3, r3
 800e8ae:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800e8b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f004 fa38 	bl	8012d2c <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800e8bc:	4b19      	ldr	r3, [pc, #100]	; (800e924 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800e8be:	2201      	movs	r2, #1
 800e8c0:	709a      	strb	r2, [r3, #2]
            }
            break;
 800e8c2:	e02c      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800e8c4:	230a      	movs	r3, #10
 800e8c6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800e8ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f004 fa2c 	bl	8012d2c <LoRaMacMlmeRequest>
            }
            break;
 800e8d4:	e023      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e8e4:	f107 0308 	add.w	r3, r7, #8
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f003 fee1 	bl	80126b0 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800e8ee:	e016      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e8f0:	230d      	movs	r3, #13
 800e8f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	785b      	ldrb	r3, [r3, #1]
 800e8fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800e900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e904:	4618      	mov	r0, r3
 800e906:	f004 fa11 	bl	8012d2c <LoRaMacMlmeRequest>
            }
            break;
 800e90a:	e008      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e90c:	bf00      	nop
 800e90e:	e006      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e910:	bf00      	nop
 800e912:	e004      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e914:	bf00      	nop
 800e916:	e002      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800e918:	bf00      	nop
 800e91a:	e000      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800e91c:	bf00      	nop
        }
    }
}
 800e91e:	3780      	adds	r7, #128	; 0x80
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	20003074 	.word	0x20003074

0800e928 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e928:	b480      	push	{r7}
 800e92a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800e92c:	bf00      	nop
 800e92e:	46bd      	mov	sp, r7
 800e930:	bc80      	pop	{r7}
 800e932:	4770      	bx	lr

0800e934 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800e93c:	f7ff fdaa 	bl	800e494 <LmhpComplianceTxProcess>
}
 800e940:	bf00      	nop
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e948:	b590      	push	{r4, r7, lr}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e94e:	f00e fca7 	bl	801d2a0 <UTIL_TIMER_GetCurrentTime>
 800e952:	4603      	mov	r3, r0
 800e954:	4a16      	ldr	r2, [pc, #88]	; (800e9b0 <OnRadioTxDone+0x68>)
 800e956:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e958:	4c16      	ldr	r4, [pc, #88]	; (800e9b4 <OnRadioTxDone+0x6c>)
 800e95a:	463b      	mov	r3, r7
 800e95c:	4618      	mov	r0, r3
 800e95e:	f00e fa13 	bl	801cd88 <SysTimeGet>
 800e962:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e966:	463a      	mov	r2, r7
 800e968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e96c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e970:	4a11      	ldr	r2, [pc, #68]	; (800e9b8 <OnRadioTxDone+0x70>)
 800e972:	7813      	ldrb	r3, [r2, #0]
 800e974:	f043 0310 	orr.w	r3, r3, #16
 800e978:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e97a:	4b0e      	ldr	r3, [pc, #56]	; (800e9b4 <OnRadioTxDone+0x6c>)
 800e97c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00a      	beq.n	800e99a <OnRadioTxDone+0x52>
 800e984:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <OnRadioTxDone+0x6c>)
 800e986:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d004      	beq.n	800e99a <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e990:	4b08      	ldr	r3, [pc, #32]	; (800e9b4 <OnRadioTxDone+0x6c>)
 800e992:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e996:	691b      	ldr	r3, [r3, #16]
 800e998:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e99a:	4b08      	ldr	r3, [pc, #32]	; (800e9bc <OnRadioTxDone+0x74>)
 800e99c:	2201      	movs	r2, #1
 800e99e:	2100      	movs	r1, #0
 800e9a0:	2002      	movs	r0, #2
 800e9a2:	f00d fcb9 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800e9a6:	bf00      	nop
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd90      	pop	{r4, r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20003ba8 	.word	0x20003ba8
 800e9b4:	2000308c 	.word	0x2000308c
 800e9b8:	20003ba4 	.word	0x20003ba4
 800e9bc:	0801e058 	.word	0x0801e058

0800e9c0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	4608      	mov	r0, r1
 800e9ca:	4611      	mov	r1, r2
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	817b      	strh	r3, [r7, #10]
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	813b      	strh	r3, [r7, #8]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e9da:	f00e fc61 	bl	801d2a0 <UTIL_TIMER_GetCurrentTime>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	4a16      	ldr	r2, [pc, #88]	; (800ea3c <OnRadioRxDone+0x7c>)
 800e9e2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e9e4:	4a15      	ldr	r2, [pc, #84]	; (800ea3c <OnRadioRxDone+0x7c>)
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e9ea:	4a14      	ldr	r2, [pc, #80]	; (800ea3c <OnRadioRxDone+0x7c>)
 800e9ec:	897b      	ldrh	r3, [r7, #10]
 800e9ee:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e9f0:	4a12      	ldr	r2, [pc, #72]	; (800ea3c <OnRadioRxDone+0x7c>)
 800e9f2:	893b      	ldrh	r3, [r7, #8]
 800e9f4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e9f6:	4a11      	ldr	r2, [pc, #68]	; (800ea3c <OnRadioRxDone+0x7c>)
 800e9f8:	79fb      	ldrb	r3, [r7, #7]
 800e9fa:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e9fc:	4a10      	ldr	r2, [pc, #64]	; (800ea40 <OnRadioRxDone+0x80>)
 800e9fe:	7813      	ldrb	r3, [r2, #0]
 800ea00:	f043 0308 	orr.w	r3, r3, #8
 800ea04:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea06:	4b0f      	ldr	r3, [pc, #60]	; (800ea44 <OnRadioRxDone+0x84>)
 800ea08:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d00a      	beq.n	800ea26 <OnRadioRxDone+0x66>
 800ea10:	4b0c      	ldr	r3, [pc, #48]	; (800ea44 <OnRadioRxDone+0x84>)
 800ea12:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d004      	beq.n	800ea26 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea1c:	4b09      	ldr	r3, [pc, #36]	; (800ea44 <OnRadioRxDone+0x84>)
 800ea1e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800ea26:	4b08      	ldr	r3, [pc, #32]	; (800ea48 <OnRadioRxDone+0x88>)
 800ea28:	2201      	movs	r2, #1
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	2002      	movs	r0, #2
 800ea2e:	f00d fc73 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800ea32:	bf00      	nop
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	20003bac 	.word	0x20003bac
 800ea40:	20003ba4 	.word	0x20003ba4
 800ea44:	2000308c 	.word	0x2000308c
 800ea48:	0801e068 	.word	0x0801e068

0800ea4c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800ea50:	4a0e      	ldr	r2, [pc, #56]	; (800ea8c <OnRadioTxTimeout+0x40>)
 800ea52:	7813      	ldrb	r3, [r2, #0]
 800ea54:	f043 0304 	orr.w	r3, r3, #4
 800ea58:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea5a:	4b0d      	ldr	r3, [pc, #52]	; (800ea90 <OnRadioTxTimeout+0x44>)
 800ea5c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00a      	beq.n	800ea7a <OnRadioTxTimeout+0x2e>
 800ea64:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <OnRadioTxTimeout+0x44>)
 800ea66:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d004      	beq.n	800ea7a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea70:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <OnRadioTxTimeout+0x44>)
 800ea72:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800ea7a:	4b06      	ldr	r3, [pc, #24]	; (800ea94 <OnRadioTxTimeout+0x48>)
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	2100      	movs	r1, #0
 800ea80:	2002      	movs	r0, #2
 800ea82:	f00d fc49 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800ea86:	bf00      	nop
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20003ba4 	.word	0x20003ba4
 800ea90:	2000308c 	.word	0x2000308c
 800ea94:	0801e078 	.word	0x0801e078

0800ea98 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ea9c:	4a0b      	ldr	r2, [pc, #44]	; (800eacc <OnRadioRxError+0x34>)
 800ea9e:	7813      	ldrb	r3, [r2, #0]
 800eaa0:	f043 0302 	orr.w	r3, r3, #2
 800eaa4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eaa6:	4b0a      	ldr	r3, [pc, #40]	; (800ead0 <OnRadioRxError+0x38>)
 800eaa8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d00a      	beq.n	800eac6 <OnRadioRxError+0x2e>
 800eab0:	4b07      	ldr	r3, [pc, #28]	; (800ead0 <OnRadioRxError+0x38>)
 800eab2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d004      	beq.n	800eac6 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eabc:	4b04      	ldr	r3, [pc, #16]	; (800ead0 <OnRadioRxError+0x38>)
 800eabe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eac2:	691b      	ldr	r3, [r3, #16]
 800eac4:	4798      	blx	r3
    }
}
 800eac6:	bf00      	nop
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20003ba4 	.word	0x20003ba4
 800ead0:	2000308c 	.word	0x2000308c

0800ead4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ead8:	4a0e      	ldr	r2, [pc, #56]	; (800eb14 <OnRadioRxTimeout+0x40>)
 800eada:	7813      	ldrb	r3, [r2, #0]
 800eadc:	f043 0301 	orr.w	r3, r3, #1
 800eae0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eae2:	4b0d      	ldr	r3, [pc, #52]	; (800eb18 <OnRadioRxTimeout+0x44>)
 800eae4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00a      	beq.n	800eb02 <OnRadioRxTimeout+0x2e>
 800eaec:	4b0a      	ldr	r3, [pc, #40]	; (800eb18 <OnRadioRxTimeout+0x44>)
 800eaee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d004      	beq.n	800eb02 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eaf8:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <OnRadioRxTimeout+0x44>)
 800eafa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eafe:	691b      	ldr	r3, [r3, #16]
 800eb00:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800eb02:	4b06      	ldr	r3, [pc, #24]	; (800eb1c <OnRadioRxTimeout+0x48>)
 800eb04:	2201      	movs	r2, #1
 800eb06:	2100      	movs	r1, #0
 800eb08:	2002      	movs	r0, #2
 800eb0a:	f00d fc05 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb0e:	bf00      	nop
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20003ba4 	.word	0x20003ba4
 800eb18:	2000308c 	.word	0x2000308c
 800eb1c:	0801e088 	.word	0x0801e088

0800eb20 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800eb20:	b480      	push	{r7}
 800eb22:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eb24:	4b08      	ldr	r3, [pc, #32]	; (800eb48 <UpdateRxSlotIdleState+0x28>)
 800eb26:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eb2a:	2b02      	cmp	r3, #2
 800eb2c:	d004      	beq.n	800eb38 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800eb2e:	4b07      	ldr	r3, [pc, #28]	; (800eb4c <UpdateRxSlotIdleState+0x2c>)
 800eb30:	2206      	movs	r2, #6
 800eb32:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800eb36:	e003      	b.n	800eb40 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800eb38:	4b04      	ldr	r3, [pc, #16]	; (800eb4c <UpdateRxSlotIdleState+0x2c>)
 800eb3a:	2202      	movs	r2, #2
 800eb3c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800eb40:	bf00      	nop
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bc80      	pop	{r7}
 800eb46:	4770      	bx	lr
 800eb48:	20003594 	.word	0x20003594
 800eb4c:	2000308c 	.word	0x2000308c

0800eb50 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b08e      	sub	sp, #56	; 0x38
 800eb54:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eb56:	4b44      	ldr	r3, [pc, #272]	; (800ec68 <ProcessRadioTxDone+0x118>)
 800eb58:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eb5c:	2b02      	cmp	r3, #2
 800eb5e:	d002      	beq.n	800eb66 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800eb60:	4b42      	ldr	r3, [pc, #264]	; (800ec6c <ProcessRadioTxDone+0x11c>)
 800eb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb64:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800eb66:	4b42      	ldr	r3, [pc, #264]	; (800ec70 <ProcessRadioTxDone+0x120>)
 800eb68:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4841      	ldr	r0, [pc, #260]	; (800ec74 <ProcessRadioTxDone+0x124>)
 800eb70:	f00e faec 	bl	801d14c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800eb74:	483f      	ldr	r0, [pc, #252]	; (800ec74 <ProcessRadioTxDone+0x124>)
 800eb76:	f00e fa0b 	bl	801cf90 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800eb7a:	4b3d      	ldr	r3, [pc, #244]	; (800ec70 <ProcessRadioTxDone+0x120>)
 800eb7c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800eb80:	4619      	mov	r1, r3
 800eb82:	483d      	ldr	r0, [pc, #244]	; (800ec78 <ProcessRadioTxDone+0x128>)
 800eb84:	f00e fae2 	bl	801d14c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800eb88:	483b      	ldr	r0, [pc, #236]	; (800ec78 <ProcessRadioTxDone+0x128>)
 800eb8a:	f00e fa01 	bl	801cf90 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800eb8e:	4b36      	ldr	r3, [pc, #216]	; (800ec68 <ProcessRadioTxDone+0x118>)
 800eb90:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d004      	beq.n	800eba2 <ProcessRadioTxDone+0x52>
 800eb98:	4b35      	ldr	r3, [pc, #212]	; (800ec70 <ProcessRadioTxDone+0x120>)
 800eb9a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d019      	beq.n	800ebd6 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800eba2:	2316      	movs	r3, #22
 800eba4:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eba8:	4b2f      	ldr	r3, [pc, #188]	; (800ec68 <ProcessRadioTxDone+0x118>)
 800ebaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebae:	f107 0220 	add.w	r2, r7, #32
 800ebb2:	4611      	mov	r1, r2
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f006 fb8c 	bl	80152d2 <RegionGetPhyParam>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ebbe:	4b2c      	ldr	r3, [pc, #176]	; (800ec70 <ProcessRadioTxDone+0x120>)
 800ebc0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	4619      	mov	r1, r3
 800ebca:	482c      	ldr	r0, [pc, #176]	; (800ec7c <ProcessRadioTxDone+0x12c>)
 800ebcc:	f00e fabe 	bl	801d14c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800ebd0:	482a      	ldr	r0, [pc, #168]	; (800ec7c <ProcessRadioTxDone+0x12c>)
 800ebd2:	f00e f9dd 	bl	801cf90 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800ebd6:	4b2a      	ldr	r3, [pc, #168]	; (800ec80 <ProcessRadioTxDone+0x130>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a23      	ldr	r2, [pc, #140]	; (800ec68 <ProcessRadioTxDone+0x118>)
 800ebdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ebde:	4b24      	ldr	r3, [pc, #144]	; (800ec70 <ProcessRadioTxDone+0x120>)
 800ebe0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800ebe4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ebe6:	4b26      	ldr	r3, [pc, #152]	; (800ec80 <ProcessRadioTxDone+0x130>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ebec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f00e f901 	bl	801cdf8 <SysTimeGetMcuTime>
 800ebf6:	4638      	mov	r0, r7
 800ebf8:	4b1b      	ldr	r3, [pc, #108]	; (800ec68 <ProcessRadioTxDone+0x118>)
 800ebfa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800ebfe:	9200      	str	r2, [sp, #0]
 800ec00:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ec04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec08:	ca06      	ldmia	r2, {r1, r2}
 800ec0a:	f00e f856 	bl	801ccba <SysTimeSub>
 800ec0e:	f107 0314 	add.w	r3, r7, #20
 800ec12:	463a      	mov	r2, r7
 800ec14:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec18:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800ec1c:	4b14      	ldr	r3, [pc, #80]	; (800ec70 <ProcessRadioTxDone+0x120>)
 800ec1e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800ec22:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800ec24:	2301      	movs	r3, #1
 800ec26:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ec28:	4b0f      	ldr	r3, [pc, #60]	; (800ec68 <ProcessRadioTxDone+0x118>)
 800ec2a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800ec32:	2300      	movs	r3, #0
 800ec34:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800ec36:	4b0c      	ldr	r3, [pc, #48]	; (800ec68 <ProcessRadioTxDone+0x118>)
 800ec38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec3c:	f107 0208 	add.w	r2, r7, #8
 800ec40:	4611      	mov	r1, r2
 800ec42:	4618      	mov	r0, r3
 800ec44:	f006 fb66 	bl	8015314 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800ec48:	4b09      	ldr	r3, [pc, #36]	; (800ec70 <ProcessRadioTxDone+0x120>)
 800ec4a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ec4e:	f083 0301 	eor.w	r3, r3, #1
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d003      	beq.n	800ec60 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ec58:	4b05      	ldr	r3, [pc, #20]	; (800ec70 <ProcessRadioTxDone+0x120>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800ec60:	bf00      	nop
 800ec62:	3730      	adds	r7, #48	; 0x30
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20003594 	.word	0x20003594
 800ec6c:	0801e73c 	.word	0x0801e73c
 800ec70:	2000308c 	.word	0x2000308c
 800ec74:	2000340c 	.word	0x2000340c
 800ec78:	20003424 	.word	0x20003424
 800ec7c:	20003484 	.word	0x20003484
 800ec80:	20003ba8 	.word	0x20003ba8

0800ec84 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ec88:	4b10      	ldr	r3, [pc, #64]	; (800eccc <PrepareRxDoneAbort+0x48>)
 800ec8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec92:	4a0e      	ldr	r2, [pc, #56]	; (800eccc <PrepareRxDoneAbort+0x48>)
 800ec94:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800ec98:	4b0c      	ldr	r3, [pc, #48]	; (800eccc <PrepareRxDoneAbort+0x48>)
 800ec9a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d002      	beq.n	800eca8 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800eca2:	2000      	movs	r0, #0
 800eca4:	f001 f8f8 	bl	800fe98 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800eca8:	4a08      	ldr	r2, [pc, #32]	; (800eccc <PrepareRxDoneAbort+0x48>)
 800ecaa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ecae:	f043 0302 	orr.w	r3, r3, #2
 800ecb2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ecb6:	4a05      	ldr	r2, [pc, #20]	; (800eccc <PrepareRxDoneAbort+0x48>)
 800ecb8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ecbc:	f043 0320 	orr.w	r3, r3, #32
 800ecc0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800ecc4:	f7ff ff2c 	bl	800eb20 <UpdateRxSlotIdleState>
}
 800ecc8:	bf00      	nop
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	2000308c 	.word	0x2000308c

0800ecd0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800ecd0:	b5b0      	push	{r4, r5, r7, lr}
 800ecd2:	b0a6      	sub	sp, #152	; 0x98
 800ecd4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ecd6:	2313      	movs	r3, #19
 800ecd8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800ecdc:	4bb9      	ldr	r3, [pc, #740]	; (800efc4 <ProcessRadioRxDone+0x2f4>)
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800ece2:	4bb8      	ldr	r3, [pc, #736]	; (800efc4 <ProcessRadioRxDone+0x2f4>)
 800ece4:	891b      	ldrh	r3, [r3, #8]
 800ece6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800ecea:	4bb6      	ldr	r3, [pc, #728]	; (800efc4 <ProcessRadioRxDone+0x2f4>)
 800ecec:	895b      	ldrh	r3, [r3, #10]
 800ecee:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800ecf2:	4bb4      	ldr	r3, [pc, #720]	; (800efc4 <ProcessRadioRxDone+0x2f4>)
 800ecf4:	7b1b      	ldrb	r3, [r3, #12]
 800ecf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800ed04:	4bb0      	ldr	r3, [pc, #704]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ed06:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ed0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800ed14:	2301      	movs	r3, #1
 800ed16:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800ed1a:	4bac      	ldr	r3, [pc, #688]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800ed22:	4aaa      	ldr	r2, [pc, #680]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ed28:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800ed2c:	4aa7      	ldr	r2, [pc, #668]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ed32:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800ed36:	4ba5      	ldr	r3, [pc, #660]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed38:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800ed3c:	4ba3      	ldr	r3, [pc, #652]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed3e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800ed42:	4ba2      	ldr	r3, [pc, #648]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800ed4a:	4ba0      	ldr	r3, [pc, #640]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800ed52:	4b9e      	ldr	r3, [pc, #632]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800ed5a:	4b9c      	ldr	r3, [pc, #624]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800ed62:	4b9a      	ldr	r3, [pc, #616]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800ed6a:	4b98      	ldr	r3, [pc, #608]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800ed72:	4b96      	ldr	r3, [pc, #600]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ed7a:	4b94      	ldr	r3, [pc, #592]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ed82:	4b92      	ldr	r3, [pc, #584]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800ed8a:	4b90      	ldr	r3, [pc, #576]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ed92:	4b8e      	ldr	r3, [pc, #568]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800ed9a:	4b8d      	ldr	r3, [pc, #564]	; (800efd0 <ProcessRadioRxDone+0x300>)
 800ed9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9e:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800eda0:	488c      	ldr	r0, [pc, #560]	; (800efd4 <ProcessRadioRxDone+0x304>)
 800eda2:	f00e f963 	bl	801d06c <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800eda6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800edaa:	4619      	mov	r1, r3
 800edac:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800edae:	f004 fb28 	bl	8013402 <LoRaMacClassBRxBeacon>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00a      	beq.n	800edce <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800edb8:	4a84      	ldr	r2, [pc, #528]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800edba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800edbe:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800edc2:	4a82      	ldr	r2, [pc, #520]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800edc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800edc8:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800edcc:	e3bf      	b.n	800f54e <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800edce:	4b7e      	ldr	r3, [pc, #504]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800edd0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d11e      	bne.n	800ee16 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800edd8:	f004 fb26 	bl	8013428 <LoRaMacClassBIsPingExpected>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00a      	beq.n	800edf8 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ede2:	2000      	movs	r0, #0
 800ede4:	f004 fad7 	bl	8013396 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ede8:	2000      	movs	r0, #0
 800edea:	f004 faf8 	bl	80133de <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800edee:	4b77      	ldr	r3, [pc, #476]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800edf0:	2204      	movs	r2, #4
 800edf2:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800edf6:	e00e      	b.n	800ee16 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800edf8:	f004 fb1d 	bl	8013436 <LoRaMacClassBIsMulticastExpected>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d009      	beq.n	800ee16 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ee02:	2000      	movs	r0, #0
 800ee04:	f004 fad1 	bl	80133aa <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ee08:	2000      	movs	r0, #0
 800ee0a:	f004 faf1 	bl	80133f0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ee0e:	4b6f      	ldr	r3, [pc, #444]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ee10:	2205      	movs	r2, #5
 800ee12:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ee16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800ee1a:	1c5a      	adds	r2, r3, #1
 800ee1c:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800ee20:	461a      	mov	r2, r3
 800ee22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee24:	4413      	add	r3, r2
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800ee2c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ee30:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	3b01      	subs	r3, #1
 800ee38:	2b06      	cmp	r3, #6
 800ee3a:	f200 8362 	bhi.w	800f502 <ProcessRadioRxDone+0x832>
 800ee3e:	a201      	add	r2, pc, #4	; (adr r2, 800ee44 <ProcessRadioRxDone+0x174>)
 800ee40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee44:	0800ee61 	.word	0x0800ee61
 800ee48:	0800f503 	.word	0x0800f503
 800ee4c:	0800efe1 	.word	0x0800efe1
 800ee50:	0800f503 	.word	0x0800f503
 800ee54:	0800efd9 	.word	0x0800efd9
 800ee58:	0800f503 	.word	0x0800f503
 800ee5c:	0800f4a9 	.word	0x0800f4a9
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ee60:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee64:	2b10      	cmp	r3, #16
 800ee66:	d806      	bhi.n	800ee76 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee68:	4b58      	ldr	r3, [pc, #352]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ee70:	f7ff ff08 	bl	800ec84 <PrepareRxDoneAbort>
                return;
 800ee74:	e36b      	b.n	800f54e <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800ee76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee78:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800ee7a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ee82:	4b51      	ldr	r3, [pc, #324]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ee84:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d006      	beq.n	800ee9a <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee8c:	4b4f      	ldr	r3, [pc, #316]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800ee8e:	2201      	movs	r2, #1
 800ee90:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ee94:	f7ff fef6 	bl	800ec84 <PrepareRxDoneAbort>
                return;
 800ee98:	e359      	b.n	800f54e <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ee9a:	f7fe fbd9 	bl	800d650 <SecureElementGetJoinEui>
 800ee9e:	4601      	mov	r1, r0
 800eea0:	f107 0308 	add.w	r3, r7, #8
 800eea4:	461a      	mov	r2, r3
 800eea6:	20ff      	movs	r0, #255	; 0xff
 800eea8:	f005 fc92 	bl	80147d0 <LoRaMacCryptoHandleJoinAccept>
 800eeac:	4603      	mov	r3, r0
 800eeae:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800eeb2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d172      	bne.n	800efa0 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800eeba:	7c7b      	ldrb	r3, [r7, #17]
 800eebc:	461a      	mov	r2, r3
 800eebe:	4b42      	ldr	r3, [pc, #264]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800eec0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800eec4:	4b40      	ldr	r3, [pc, #256]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800eec6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800eeca:	7cbb      	ldrb	r3, [r7, #18]
 800eecc:	021b      	lsls	r3, r3, #8
 800eece:	4313      	orrs	r3, r2
 800eed0:	4a3d      	ldr	r2, [pc, #244]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800eed2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800eed6:	4b3c      	ldr	r3, [pc, #240]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800eed8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800eedc:	7cfb      	ldrb	r3, [r7, #19]
 800eede:	041b      	lsls	r3, r3, #16
 800eee0:	4313      	orrs	r3, r2
 800eee2:	4a39      	ldr	r2, [pc, #228]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800eee4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	4a37      	ldr	r2, [pc, #220]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800eeec:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800eef0:	7e3b      	ldrb	r3, [r7, #24]
 800eef2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	461a      	mov	r2, r3
 800eefa:	4b33      	ldr	r3, [pc, #204]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800eefc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ef00:	7e3b      	ldrb	r3, [r7, #24]
 800ef02:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	461a      	mov	r2, r3
 800ef0a:	4b2f      	ldr	r3, [pc, #188]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ef10:	7e3b      	ldrb	r3, [r7, #24]
 800ef12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	461a      	mov	r2, r3
 800ef1a:	4b2b      	ldr	r3, [pc, #172]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ef20:	7e7b      	ldrb	r3, [r7, #25]
 800ef22:	461a      	mov	r2, r3
 800ef24:	4b28      	ldr	r3, [pc, #160]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef26:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800ef28:	4b27      	ldr	r3, [pc, #156]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d102      	bne.n	800ef36 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800ef30:	4b25      	ldr	r3, [pc, #148]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef32:	2201      	movs	r2, #1
 800ef34:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800ef36:	4b24      	ldr	r3, [pc, #144]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef3e:	fb02 f303 	mul.w	r3, r2, r3
 800ef42:	4a21      	ldr	r2, [pc, #132]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef44:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ef46:	4b20      	ldr	r3, [pc, #128]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef4a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ef4e:	4a1e      	ldr	r2, [pc, #120]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef50:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ef52:	4b1d      	ldr	r3, [pc, #116]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef54:	2200      	movs	r2, #0
 800ef56:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ef5a:	f107 0308 	add.w	r3, r7, #8
 800ef5e:	3312      	adds	r3, #18
 800ef60:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ef62:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	3b11      	subs	r3, #17
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ef70:	4b15      	ldr	r3, [pc, #84]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef76:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f006 fa19 	bl	80153b4 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ef82:	4b11      	ldr	r3, [pc, #68]	; (800efc8 <ProcessRadioRxDone+0x2f8>)
 800ef84:	2202      	movs	r2, #2
 800ef86:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ef8a:	2001      	movs	r0, #1
 800ef8c:	f004 ff18 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00e      	beq.n	800efb4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ef96:	2101      	movs	r1, #1
 800ef98:	2000      	movs	r0, #0
 800ef9a:	f004 fe85 	bl	8013ca8 <LoRaMacConfirmQueueSetStatus>
 800ef9e:	e009      	b.n	800efb4 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800efa0:	2001      	movs	r0, #1
 800efa2:	f004 ff0d 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d003      	beq.n	800efb4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800efac:	2101      	movs	r1, #1
 800efae:	2007      	movs	r0, #7
 800efb0:	f004 fe7a 	bl	8013ca8 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800efb4:	4a05      	ldr	r2, [pc, #20]	; (800efcc <ProcessRadioRxDone+0x2fc>)
 800efb6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800efba:	f043 0308 	orr.w	r3, r3, #8
 800efbe:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800efc2:	e2a5      	b.n	800f510 <ProcessRadioRxDone+0x840>
 800efc4:	20003bac 	.word	0x20003bac
 800efc8:	20003594 	.word	0x20003594
 800efcc:	2000308c 	.word	0x2000308c
 800efd0:	0801e73c 	.word	0x0801e73c
 800efd4:	20003424 	.word	0x20003424
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800efd8:	4bae      	ldr	r3, [pc, #696]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800efda:	2201      	movs	r2, #1
 800efdc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800efe0:	4bad      	ldr	r3, [pc, #692]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800efe2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800efe6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800efea:	4baa      	ldr	r3, [pc, #680]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800efec:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800eff0:	b25b      	sxtb	r3, r3
 800eff2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800eff6:	230d      	movs	r3, #13
 800eff8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800effc:	4ba6      	ldr	r3, [pc, #664]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800effe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f006:	230e      	movs	r3, #14
 800f008:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f00c:	4ba2      	ldr	r3, [pc, #648]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f00e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f012:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f016:	4611      	mov	r1, r2
 800f018:	4618      	mov	r0, r3
 800f01a:	f006 f95a 	bl	80152d2 <RegionGetPhyParam>
 800f01e:	4603      	mov	r3, r0
 800f020:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f022:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f026:	3b0d      	subs	r3, #13
 800f028:	b29b      	uxth	r3, r3
 800f02a:	b21b      	sxth	r3, r3
 800f02c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f030:	b21a      	sxth	r2, r3
 800f032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f034:	b21b      	sxth	r3, r3
 800f036:	429a      	cmp	r2, r3
 800f038:	dc03      	bgt.n	800f042 <ProcessRadioRxDone+0x372>
 800f03a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f03e:	2b0b      	cmp	r3, #11
 800f040:	d806      	bhi.n	800f050 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f042:	4b94      	ldr	r3, [pc, #592]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f044:	2201      	movs	r2, #1
 800f046:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f04a:	f7ff fe1b 	bl	800ec84 <PrepareRxDoneAbort>
                return;
 800f04e:	e27e      	b.n	800f54e <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800f050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f052:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800f054:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f05e:	4b8f      	ldr	r3, [pc, #572]	; (800f29c <ProcessRadioRxDone+0x5cc>)
 800f060:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f062:	23ff      	movs	r3, #255	; 0xff
 800f064:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f06c:	4618      	mov	r0, r3
 800f06e:	f005 feae 	bl	8014dce <LoRaMacParserData>
 800f072:	4603      	mov	r3, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d006      	beq.n	800f086 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f078:	4b86      	ldr	r3, [pc, #536]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f080:	f7ff fe00 	bl	800ec84 <PrepareRxDoneAbort>
                return;
 800f084:	e263      	b.n	800f54e <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	4a82      	ldr	r2, [pc, #520]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f08a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f08e:	1cba      	adds	r2, r7, #2
 800f090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f094:	4611      	mov	r1, r2
 800f096:	4618      	mov	r0, r3
 800f098:	f002 fcde 	bl	8011a58 <DetermineFrameType>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d006      	beq.n	800f0b0 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f0a2:	4b7c      	ldr	r3, [pc, #496]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f0aa:	f7ff fdeb 	bl	800ec84 <PrepareRxDoneAbort>
                return;
 800f0ae:	e24e      	b.n	800f54e <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800f0c0:	e049      	b.n	800f156 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f0c2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f0c6:	4a74      	ldr	r2, [pc, #464]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f0c8:	212c      	movs	r1, #44	; 0x2c
 800f0ca:	fb01 f303 	mul.w	r3, r1, r3
 800f0ce:	4413      	add	r3, r2
 800f0d0:	33d4      	adds	r3, #212	; 0xd4
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d138      	bne.n	800f14c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f0da:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f0de:	4a6e      	ldr	r2, [pc, #440]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f0e0:	212c      	movs	r1, #44	; 0x2c
 800f0e2:	fb01 f303 	mul.w	r3, r1, r3
 800f0e6:	4413      	add	r3, r2
 800f0e8:	33d2      	adds	r3, #210	; 0xd2
 800f0ea:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d02d      	beq.n	800f14c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f0f6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f0fa:	4a67      	ldr	r2, [pc, #412]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f0fc:	212c      	movs	r1, #44	; 0x2c
 800f0fe:	fb01 f303 	mul.w	r3, r1, r3
 800f102:	4413      	add	r3, r2
 800f104:	33d3      	adds	r3, #211	; 0xd3
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f10c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f110:	4a61      	ldr	r2, [pc, #388]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f112:	212c      	movs	r1, #44	; 0x2c
 800f114:	fb01 f303 	mul.w	r3, r1, r3
 800f118:	4413      	add	r3, r2
 800f11a:	33f0      	adds	r3, #240	; 0xf0
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f122:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f126:	4a5c      	ldr	r2, [pc, #368]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f128:	212c      	movs	r1, #44	; 0x2c
 800f12a:	fb01 f303 	mul.w	r3, r1, r3
 800f12e:	4413      	add	r3, r2
 800f130:	33d4      	adds	r3, #212	; 0xd4
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f138:	4b57      	ldr	r3, [pc, #348]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f13a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d10e      	bne.n	800f160 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f142:	4b54      	ldr	r3, [pc, #336]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f144:	2203      	movs	r2, #3
 800f146:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800f14a:	e009      	b.n	800f160 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f14c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f150:	3301      	adds	r3, #1
 800f152:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800f156:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d0b1      	beq.n	800f0c2 <ProcessRadioRxDone+0x3f2>
 800f15e:	e000      	b.n	800f162 <ProcessRadioRxDone+0x492>
                    break;
 800f160:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f162:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f166:	2b01      	cmp	r3, #1
 800f168:	d117      	bne.n	800f19a <ProcessRadioRxDone+0x4ca>
 800f16a:	78bb      	ldrb	r3, [r7, #2]
 800f16c:	2b03      	cmp	r3, #3
 800f16e:	d10d      	bne.n	800f18c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f170:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f174:	f003 0320 	and.w	r3, r3, #32
 800f178:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d106      	bne.n	800f18c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f17e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f186:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d006      	beq.n	800f19a <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f18c:	4b41      	ldr	r3, [pc, #260]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f18e:	2201      	movs	r2, #1
 800f190:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f194:	f7ff fd76 	bl	800ec84 <PrepareRxDoneAbort>
                return;
 800f198:	e1d9      	b.n	800f54e <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f19a:	2315      	movs	r3, #21
 800f19c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f1a0:	4b3d      	ldr	r3, [pc, #244]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f1a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1a6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f006 f890 	bl	80152d2 <RegionGetPhyParam>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f1b6:	78b9      	ldrb	r1, [r7, #2]
 800f1b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	4d36      	ldr	r5, [pc, #216]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f1be:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800f1c2:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800f1c6:	1d3a      	adds	r2, r7, #4
 800f1c8:	9202      	str	r2, [sp, #8]
 800f1ca:	1cfa      	adds	r2, r7, #3
 800f1cc:	9201      	str	r2, [sp, #4]
 800f1ce:	9300      	str	r3, [sp, #0]
 800f1d0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800f1d4:	4622      	mov	r2, r4
 800f1d6:	f000 fe95 	bl	800ff04 <GetFCntDown>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f1e0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d031      	beq.n	800f24c <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f1e8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f1ec:	2b07      	cmp	r3, #7
 800f1ee:	d119      	bne.n	800f224 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f1f0:	4b28      	ldr	r3, [pc, #160]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f1f2:	2208      	movs	r2, #8
 800f1f4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800f1f8:	4b27      	ldr	r3, [pc, #156]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f1fa:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d11d      	bne.n	800f23e <ProcessRadioRxDone+0x56e>
 800f202:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f206:	f023 031f 	bic.w	r3, r3, #31
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	2ba0      	cmp	r3, #160	; 0xa0
 800f20e:	d116      	bne.n	800f23e <ProcessRadioRxDone+0x56e>
 800f210:	4b21      	ldr	r3, [pc, #132]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f216:	429a      	cmp	r2, r3
 800f218:	d111      	bne.n	800f23e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800f21a:	4b1f      	ldr	r3, [pc, #124]	; (800f298 <ProcessRadioRxDone+0x5c8>)
 800f21c:	2201      	movs	r2, #1
 800f21e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f222:	e00c      	b.n	800f23e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800f224:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f228:	2b08      	cmp	r3, #8
 800f22a:	d104      	bne.n	800f236 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800f22c:	4b19      	ldr	r3, [pc, #100]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f22e:	220a      	movs	r2, #10
 800f230:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800f234:	e003      	b.n	800f23e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f236:	4b17      	ldr	r3, [pc, #92]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f238:	2201      	movs	r2, #1
 800f23a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4a14      	ldr	r2, [pc, #80]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f242:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800f246:	f7ff fd1d 	bl	800ec84 <PrepareRxDoneAbort>
                return;
 800f24a:	e180      	b.n	800f54e <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f24c:	78fa      	ldrb	r2, [r7, #3]
 800f24e:	6879      	ldr	r1, [r7, #4]
 800f250:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800f254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	460b      	mov	r3, r1
 800f25c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f260:	f005 fc02 	bl	8014a68 <LoRaMacCryptoUnsecureMessage>
 800f264:	4603      	mov	r3, r0
 800f266:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f26a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d016      	beq.n	800f2a0 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f272:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f276:	2b02      	cmp	r3, #2
 800f278:	d104      	bne.n	800f284 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f27a:	4b06      	ldr	r3, [pc, #24]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f27c:	220b      	movs	r2, #11
 800f27e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800f282:	e003      	b.n	800f28c <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f284:	4b03      	ldr	r3, [pc, #12]	; (800f294 <ProcessRadioRxDone+0x5c4>)
 800f286:	220c      	movs	r2, #12
 800f288:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800f28c:	f7ff fcfa 	bl	800ec84 <PrepareRxDoneAbort>
                return;
 800f290:	e15d      	b.n	800f54e <ProcessRadioRxDone+0x87e>
 800f292:	bf00      	nop
 800f294:	2000308c 	.word	0x2000308c
 800f298:	20003594 	.word	0x20003594
 800f29c:	200032c4 	.word	0x200032c4
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f2a0:	4bac      	ldr	r3, [pc, #688]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800f2a8:	4aaa      	ldr	r2, [pc, #680]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f2aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f2ae:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f2b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f2b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	461a      	mov	r2, r3
 800f2be:	4ba5      	ldr	r3, [pc, #660]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f2c0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800f2c4:	4ba3      	ldr	r3, [pc, #652]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800f2cc:	4ba1      	ldr	r3, [pc, #644]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a9f      	ldr	r2, [pc, #636]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f2d8:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f2dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f2e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	bf14      	ite	ne
 800f2ea:	2301      	movne	r3, #1
 800f2ec:	2300      	moveq	r3, #0
 800f2ee:	b2da      	uxtb	r2, r3
 800f2f0:	4b98      	ldr	r3, [pc, #608]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f2f2:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f2f6:	4b97      	ldr	r3, [pc, #604]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f2fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f302:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	bf14      	ite	ne
 800f30c:	2301      	movne	r3, #1
 800f30e:	2300      	moveq	r3, #0
 800f310:	b2da      	uxtb	r2, r3
 800f312:	4b90      	ldr	r3, [pc, #576]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f314:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f318:	4b8e      	ldr	r3, [pc, #568]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f31a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d004      	beq.n	800f32c <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f322:	4b8c      	ldr	r3, [pc, #560]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f324:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d102      	bne.n	800f332 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f32c:	4b8a      	ldr	r3, [pc, #552]	; (800f558 <ProcessRadioRxDone+0x888>)
 800f32e:	2200      	movs	r2, #0
 800f330:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f332:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f336:	2b01      	cmp	r3, #1
 800f338:	d104      	bne.n	800f344 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f33a:	4b86      	ldr	r3, [pc, #536]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f33c:	2202      	movs	r2, #2
 800f33e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800f342:	e01f      	b.n	800f384 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f344:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f348:	f023 031f 	bic.w	r3, r3, #31
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	2ba0      	cmp	r3, #160	; 0xa0
 800f350:	d110      	bne.n	800f374 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f352:	4b81      	ldr	r3, [pc, #516]	; (800f558 <ProcessRadioRxDone+0x888>)
 800f354:	2201      	movs	r2, #1
 800f356:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f35a:	4b7f      	ldr	r3, [pc, #508]	; (800f558 <ProcessRadioRxDone+0x888>)
 800f35c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f366:	4a7c      	ldr	r2, [pc, #496]	; (800f558 <ProcessRadioRxDone+0x888>)
 800f368:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f36a:	4b7a      	ldr	r3, [pc, #488]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800f372:	e007      	b.n	800f384 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f374:	4b78      	ldr	r3, [pc, #480]	; (800f558 <ProcessRadioRxDone+0x888>)
 800f376:	2200      	movs	r2, #0
 800f378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f37c:	4b75      	ldr	r3, [pc, #468]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f37e:	2200      	movs	r2, #0
 800f380:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f384:	4b73      	ldr	r3, [pc, #460]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f386:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f38a:	4a72      	ldr	r2, [pc, #456]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f38c:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800f390:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800f394:	4618      	mov	r0, r3
 800f396:	f001 ff0d 	bl	80111b4 <RemoveMacCommands>

            switch( fType )
 800f39a:	78bb      	ldrb	r3, [r7, #2]
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	d874      	bhi.n	800f48a <ProcessRadioRxDone+0x7ba>
 800f3a0:	a201      	add	r2, pc, #4	; (adr r2, 800f3a8 <ProcessRadioRxDone+0x6d8>)
 800f3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a6:	bf00      	nop
 800f3a8:	0800f3b9 	.word	0x0800f3b9
 800f3ac:	0800f409 	.word	0x0800f409
 800f3b0:	0800f43f 	.word	0x0800f43f
 800f3b4:	0800f465 	.word	0x0800f465
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f3b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f3bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	461c      	mov	r4, r3
 800f3c4:	4b63      	ldr	r3, [pc, #396]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f3c6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f3ca:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f3ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f3d2:	f102 0010 	add.w	r0, r2, #16
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	4622      	mov	r2, r4
 800f3dc:	2100      	movs	r1, #0
 800f3de:	f000 ff03 	bl	80101e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f3e2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f3e6:	4b5b      	ldr	r3, [pc, #364]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f3e8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ee:	4a59      	ldr	r2, [pc, #356]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f3f0:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f3f4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f3f8:	4b56      	ldr	r3, [pc, #344]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f3fa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800f3fe:	4b55      	ldr	r3, [pc, #340]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f400:	2201      	movs	r2, #1
 800f402:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800f406:	e047      	b.n	800f498 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f408:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f40c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f410:	b2db      	uxtb	r3, r3
 800f412:	461c      	mov	r4, r3
 800f414:	4b4f      	ldr	r3, [pc, #316]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f416:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f41a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f41e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f422:	f102 0010 	add.w	r0, r2, #16
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	460b      	mov	r3, r1
 800f42a:	4622      	mov	r2, r4
 800f42c:	2100      	movs	r1, #0
 800f42e:	f000 fedb 	bl	80101e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f432:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f436:	4b47      	ldr	r3, [pc, #284]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f438:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800f43c:	e02c      	b.n	800f498 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f43e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f440:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f444:	4b43      	ldr	r3, [pc, #268]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f446:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f44a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	460b      	mov	r3, r1
 800f452:	2100      	movs	r1, #0
 800f454:	f000 fec8 	bl	80101e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f458:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f45c:	4b3d      	ldr	r3, [pc, #244]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f45e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800f462:	e019      	b.n	800f498 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f464:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f468:	4b3a      	ldr	r3, [pc, #232]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f46a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f46e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f470:	4a38      	ldr	r2, [pc, #224]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f472:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f476:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f47a:	4b36      	ldr	r3, [pc, #216]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f47c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800f480:	4b34      	ldr	r3, [pc, #208]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f482:	2201      	movs	r2, #1
 800f484:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800f488:	e006      	b.n	800f498 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f48a:	4b32      	ldr	r3, [pc, #200]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800f492:	f7ff fbf7 	bl	800ec84 <PrepareRxDoneAbort>
                    break;
 800f496:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f498:	4a2e      	ldr	r2, [pc, #184]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f49a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f49e:	f043 0302 	orr.w	r3, r3, #2
 800f4a2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800f4a6:	e033      	b.n	800f510 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f4a8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f4ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4ae:	18d1      	adds	r1, r2, r3
 800f4b0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	461a      	mov	r2, r3
 800f4c0:	4826      	ldr	r0, [pc, #152]	; (800f55c <ProcessRadioRxDone+0x88c>)
 800f4c2:	f009 fdd6 	bl	8019072 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f4c6:	4b23      	ldr	r3, [pc, #140]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f4c8:	2203      	movs	r2, #3
 800f4ca:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f4ce:	4b21      	ldr	r3, [pc, #132]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f4d6:	4b1f      	ldr	r3, [pc, #124]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f4d8:	4a20      	ldr	r2, [pc, #128]	; (800f55c <ProcessRadioRxDone+0x88c>)
 800f4da:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f4de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f4e2:	b2da      	uxtb	r2, r3
 800f4e4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f4e8:	1ad3      	subs	r3, r2, r3
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	4b19      	ldr	r3, [pc, #100]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f4ee:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f4f2:	4a18      	ldr	r2, [pc, #96]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f4f4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f4f8:	f043 0302 	orr.w	r3, r3, #2
 800f4fc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800f500:	e006      	b.n	800f510 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f502:	4b14      	ldr	r3, [pc, #80]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f504:	2201      	movs	r2, #1
 800f506:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800f50a:	f7ff fbbb 	bl	800ec84 <PrepareRxDoneAbort>
            break;
 800f50e:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f510:	4b10      	ldr	r3, [pc, #64]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f512:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f516:	2b00      	cmp	r3, #0
 800f518:	d008      	beq.n	800f52c <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f51a:	4b0e      	ldr	r3, [pc, #56]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f51c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00b      	beq.n	800f53c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f524:	2000      	movs	r0, #0
 800f526:	f000 fcb7 	bl	800fe98 <OnAckTimeoutTimerEvent>
 800f52a:	e007      	b.n	800f53c <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f52c:	4b0a      	ldr	r3, [pc, #40]	; (800f558 <ProcessRadioRxDone+0x888>)
 800f52e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f532:	2b02      	cmp	r3, #2
 800f534:	d102      	bne.n	800f53c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f536:	2000      	movs	r0, #0
 800f538:	f000 fcae 	bl	800fe98 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f53c:	4a05      	ldr	r2, [pc, #20]	; (800f554 <ProcessRadioRxDone+0x884>)
 800f53e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f542:	f043 0320 	orr.w	r3, r3, #32
 800f546:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800f54a:	f7ff fae9 	bl	800eb20 <UpdateRxSlotIdleState>
}
 800f54e:	3788      	adds	r7, #136	; 0x88
 800f550:	46bd      	mov	sp, r7
 800f552:	bdb0      	pop	{r4, r5, r7, pc}
 800f554:	2000308c 	.word	0x2000308c
 800f558:	20003594 	.word	0x20003594
 800f55c:	200032c4 	.word	0x200032c4

0800f560 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f564:	4b11      	ldr	r3, [pc, #68]	; (800f5ac <ProcessRadioTxTimeout+0x4c>)
 800f566:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	d002      	beq.n	800f574 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f56e:	4b10      	ldr	r3, [pc, #64]	; (800f5b0 <ProcessRadioTxTimeout+0x50>)
 800f570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f572:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f574:	f7ff fad4 	bl	800eb20 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f578:	4b0e      	ldr	r3, [pc, #56]	; (800f5b4 <ProcessRadioTxTimeout+0x54>)
 800f57a:	2202      	movs	r2, #2
 800f57c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f580:	2002      	movs	r0, #2
 800f582:	f004 fbe9 	bl	8013d58 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f586:	4b0b      	ldr	r3, [pc, #44]	; (800f5b4 <ProcessRadioTxTimeout+0x54>)
 800f588:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d003      	beq.n	800f598 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800f590:	4b08      	ldr	r3, [pc, #32]	; (800f5b4 <ProcessRadioTxTimeout+0x54>)
 800f592:	2201      	movs	r2, #1
 800f594:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f598:	4a06      	ldr	r2, [pc, #24]	; (800f5b4 <ProcessRadioTxTimeout+0x54>)
 800f59a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f59e:	f043 0320 	orr.w	r3, r3, #32
 800f5a2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800f5a6:	bf00      	nop
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20003594 	.word	0x20003594
 800f5b0:	0801e73c 	.word	0x0801e73c
 800f5b4:	2000308c 	.word	0x2000308c

0800f5b8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	4603      	mov	r3, r0
 800f5c0:	460a      	mov	r2, r1
 800f5c2:	71fb      	strb	r3, [r7, #7]
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f5cc:	4b40      	ldr	r3, [pc, #256]	; (800f6d0 <HandleRadioRxErrorTimeout+0x118>)
 800f5ce:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f5d2:	2b02      	cmp	r3, #2
 800f5d4:	d002      	beq.n	800f5dc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f5d6:	4b3f      	ldr	r3, [pc, #252]	; (800f6d4 <HandleRadioRxErrorTimeout+0x11c>)
 800f5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5da:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f5dc:	f003 ff1d 	bl	801341a <LoRaMacClassBIsBeaconExpected>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d007      	beq.n	800f5f6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f5e6:	2002      	movs	r0, #2
 800f5e8:	f003 fecb 	bl	8013382 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	f003 feed 	bl	80133cc <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f5f6:	4b36      	ldr	r3, [pc, #216]	; (800f6d0 <HandleRadioRxErrorTimeout+0x118>)
 800f5f8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d119      	bne.n	800f634 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f600:	f003 ff12 	bl	8013428 <LoRaMacClassBIsPingExpected>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d007      	beq.n	800f61a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f60a:	2000      	movs	r0, #0
 800f60c:	f003 fec3 	bl	8013396 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f610:	2000      	movs	r0, #0
 800f612:	f003 fee4 	bl	80133de <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f616:	2301      	movs	r3, #1
 800f618:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f61a:	f003 ff0c 	bl	8013436 <LoRaMacClassBIsMulticastExpected>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d007      	beq.n	800f634 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f624:	2000      	movs	r0, #0
 800f626:	f003 fec0 	bl	80133aa <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f62a:	2000      	movs	r0, #0
 800f62c:	f003 fee0 	bl	80133f0 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f630:	2301      	movs	r3, #1
 800f632:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f634:	7bfb      	ldrb	r3, [r7, #15]
 800f636:	f083 0301 	eor.w	r3, r3, #1
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d040      	beq.n	800f6c2 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f640:	4b25      	ldr	r3, [pc, #148]	; (800f6d8 <HandleRadioRxErrorTimeout+0x120>)
 800f642:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f646:	2b00      	cmp	r3, #0
 800f648:	d122      	bne.n	800f690 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f64a:	4b23      	ldr	r3, [pc, #140]	; (800f6d8 <HandleRadioRxErrorTimeout+0x120>)
 800f64c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f650:	2b00      	cmp	r3, #0
 800f652:	d003      	beq.n	800f65c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f654:	4a20      	ldr	r2, [pc, #128]	; (800f6d8 <HandleRadioRxErrorTimeout+0x120>)
 800f656:	79fb      	ldrb	r3, [r7, #7]
 800f658:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f65c:	79fb      	ldrb	r3, [r7, #7]
 800f65e:	4618      	mov	r0, r3
 800f660:	f004 fb7a 	bl	8013d58 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f664:	4b1a      	ldr	r3, [pc, #104]	; (800f6d0 <HandleRadioRxErrorTimeout+0x118>)
 800f666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f668:	4618      	mov	r0, r3
 800f66a:	f00d fe2b 	bl	801d2c4 <UTIL_TIMER_GetElapsedTime>
 800f66e:	4602      	mov	r2, r0
 800f670:	4b19      	ldr	r3, [pc, #100]	; (800f6d8 <HandleRadioRxErrorTimeout+0x120>)
 800f672:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f676:	429a      	cmp	r2, r3
 800f678:	d323      	bcc.n	800f6c2 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f67a:	4818      	ldr	r0, [pc, #96]	; (800f6dc <HandleRadioRxErrorTimeout+0x124>)
 800f67c:	f00d fcf6 	bl	801d06c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f680:	4a15      	ldr	r2, [pc, #84]	; (800f6d8 <HandleRadioRxErrorTimeout+0x120>)
 800f682:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f686:	f043 0320 	orr.w	r3, r3, #32
 800f68a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800f68e:	e018      	b.n	800f6c2 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f690:	4b11      	ldr	r3, [pc, #68]	; (800f6d8 <HandleRadioRxErrorTimeout+0x120>)
 800f692:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f696:	2b00      	cmp	r3, #0
 800f698:	d003      	beq.n	800f6a2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f69a:	4a0f      	ldr	r2, [pc, #60]	; (800f6d8 <HandleRadioRxErrorTimeout+0x120>)
 800f69c:	79bb      	ldrb	r3, [r7, #6]
 800f69e:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f6a2:	79bb      	ldrb	r3, [r7, #6]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f004 fb57 	bl	8013d58 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f6aa:	4b09      	ldr	r3, [pc, #36]	; (800f6d0 <HandleRadioRxErrorTimeout+0x118>)
 800f6ac:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d006      	beq.n	800f6c2 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f6b4:	4a08      	ldr	r2, [pc, #32]	; (800f6d8 <HandleRadioRxErrorTimeout+0x120>)
 800f6b6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f6ba:	f043 0320 	orr.w	r3, r3, #32
 800f6be:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800f6c2:	f7ff fa2d 	bl	800eb20 <UpdateRxSlotIdleState>
}
 800f6c6:	bf00      	nop
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	20003594 	.word	0x20003594
 800f6d4:	0801e73c 	.word	0x0801e73c
 800f6d8:	2000308c 	.word	0x2000308c
 800f6dc:	20003424 	.word	0x20003424

0800f6e0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f6e4:	2106      	movs	r1, #6
 800f6e6:	2005      	movs	r0, #5
 800f6e8:	f7ff ff66 	bl	800f5b8 <HandleRadioRxErrorTimeout>
}
 800f6ec:	bf00      	nop
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f6f4:	2104      	movs	r1, #4
 800f6f6:	2003      	movs	r0, #3
 800f6f8:	f7ff ff5e 	bl	800f5b8 <HandleRadioRxErrorTimeout>
}
 800f6fc:	bf00      	nop
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f706:	f3ef 8310 	mrs	r3, PRIMASK
 800f70a:	607b      	str	r3, [r7, #4]
  return(result);
 800f70c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f70e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f710:	b672      	cpsid	i
}
 800f712:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f714:	4b1d      	ldr	r3, [pc, #116]	; (800f78c <LoRaMacHandleIrqEvents+0x8c>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f71a:	4b1c      	ldr	r3, [pc, #112]	; (800f78c <LoRaMacHandleIrqEvents+0x8c>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	601a      	str	r2, [r3, #0]
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	f383 8810 	msr	PRIMASK, r3
}
 800f72a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d027      	beq.n	800f782 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f732:	783b      	ldrb	r3, [r7, #0]
 800f734:	f003 0310 	and.w	r3, r3, #16
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d001      	beq.n	800f742 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f73e:	f7ff fa07 	bl	800eb50 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f742:	783b      	ldrb	r3, [r7, #0]
 800f744:	f003 0308 	and.w	r3, r3, #8
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d001      	beq.n	800f752 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f74e:	f7ff fabf 	bl	800ecd0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f752:	783b      	ldrb	r3, [r7, #0]
 800f754:	f003 0304 	and.w	r3, r3, #4
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d001      	beq.n	800f762 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f75e:	f7ff feff 	bl	800f560 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f762:	783b      	ldrb	r3, [r7, #0]
 800f764:	f003 0302 	and.w	r3, r3, #2
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d001      	beq.n	800f772 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f76e:	f7ff ffb7 	bl	800f6e0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f772:	783b      	ldrb	r3, [r7, #0]
 800f774:	f003 0301 	and.w	r3, r3, #1
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f77e:	f7ff ffb7 	bl	800f6f0 <ProcessRadioRxTimeout>
        }
    }
}
 800f782:	bf00      	nop
 800f784:	3710      	adds	r7, #16
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	20003ba4 	.word	0x20003ba4

0800f790 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f790:	b480      	push	{r7}
 800f792:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f794:	4b08      	ldr	r3, [pc, #32]	; (800f7b8 <LoRaMacIsBusy+0x28>)
 800f796:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d106      	bne.n	800f7ac <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f79e:	4b06      	ldr	r3, [pc, #24]	; (800f7b8 <LoRaMacIsBusy+0x28>)
 800f7a0:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d101      	bne.n	800f7ac <LoRaMacIsBusy+0x1c>
    {
        return false;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	e000      	b.n	800f7ae <LoRaMacIsBusy+0x1e>
    }
    return true;
 800f7ac:	2301      	movs	r3, #1
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bc80      	pop	{r7}
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop
 800f7b8:	2000308c 	.word	0x2000308c

0800f7bc <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f7c6:	4a04      	ldr	r2, [pc, #16]	; (800f7d8 <LoRaMacEnableRequests+0x1c>)
 800f7c8:	79fb      	ldrb	r3, [r7, #7]
 800f7ca:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800f7ce:	bf00      	nop
 800f7d0:	370c      	adds	r7, #12
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bc80      	pop	{r7}
 800f7d6:	4770      	bx	lr
 800f7d8:	2000308c 	.word	0x2000308c

0800f7dc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f7e2:	4b2c      	ldr	r3, [pc, #176]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f7e4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f7e8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f7ea:	4b2a      	ldr	r3, [pc, #168]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f7ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d14a      	bne.n	800f88a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f7f4:	4b27      	ldr	r3, [pc, #156]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f7f6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f7fa:	f003 0301 	and.w	r3, r3, #1
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	2b00      	cmp	r3, #0
 800f802:	d006      	beq.n	800f812 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f804:	4a23      	ldr	r2, [pc, #140]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f806:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f80a:	f36f 0300 	bfc	r3, #0, #1
 800f80e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f812:	4b20      	ldr	r3, [pc, #128]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f814:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f818:	f003 0304 	and.w	r3, r3, #4
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d006      	beq.n	800f830 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f822:	4a1c      	ldr	r2, [pc, #112]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f824:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f828:	f36f 0382 	bfc	r3, #2, #1
 800f82c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f830:	2001      	movs	r0, #1
 800f832:	f7ff ffc3 	bl	800f7bc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f836:	793b      	ldrb	r3, [r7, #4]
 800f838:	f003 0301 	and.w	r3, r3, #1
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d005      	beq.n	800f84e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f842:	4b14      	ldr	r3, [pc, #80]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f844:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4813      	ldr	r0, [pc, #76]	; (800f898 <LoRaMacHandleRequestEvents+0xbc>)
 800f84c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f84e:	793b      	ldrb	r3, [r7, #4]
 800f850:	f003 0304 	and.w	r3, r3, #4
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00e      	beq.n	800f878 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f85a:	4810      	ldr	r0, [pc, #64]	; (800f89c <LoRaMacHandleRequestEvents+0xc0>)
 800f85c:	f004 faca 	bl	8013df4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f860:	f004 fb14 	bl	8013e8c <LoRaMacConfirmQueueGetCnt>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d006      	beq.n	800f878 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f86a:	4a0a      	ldr	r2, [pc, #40]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f86c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f870:	f043 0304 	orr.w	r3, r3, #4
 800f874:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f878:	f003 fdfb 	bl	8013472 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f87c:	4a05      	ldr	r2, [pc, #20]	; (800f894 <LoRaMacHandleRequestEvents+0xb8>)
 800f87e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f882:	f36f 1345 	bfc	r3, #5, #1
 800f886:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800f88a:	bf00      	nop
 800f88c:	3708      	adds	r7, #8
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	2000308c 	.word	0x2000308c
 800f898:	200034c4 	.word	0x200034c4
 800f89c:	200034d8 	.word	0x200034d8

0800f8a0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f8a6:	4b0a      	ldr	r3, [pc, #40]	; (800f8d0 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800f8a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d10a      	bne.n	800f8c6 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f8b4:	1dfb      	adds	r3, r7, #7
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f004 f882 	bl	80139c0 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800f8bc:	79fb      	ldrb	r3, [r7, #7]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d001      	beq.n	800f8c6 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800f8c2:	f000 fc81 	bl	80101c8 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800f8c6:	bf00      	nop
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	2000308c 	.word	0x2000308c

0800f8d4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b088      	sub	sp, #32
 800f8d8:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f8da:	4b25      	ldr	r3, [pc, #148]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f8dc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f8e0:	f003 0308 	and.w	r3, r3, #8
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00d      	beq.n	800f906 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f8ea:	4a21      	ldr	r2, [pc, #132]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f8ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f8f0:	f36f 03c3 	bfc	r3, #3, #1
 800f8f4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f8f8:	4b1d      	ldr	r3, [pc, #116]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f8fa:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	491c      	ldr	r1, [pc, #112]	; (800f974 <LoRaMacHandleIndicationEvents+0xa0>)
 800f902:	481d      	ldr	r0, [pc, #116]	; (800f978 <LoRaMacHandleIndicationEvents+0xa4>)
 800f904:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800f906:	4b1a      	ldr	r3, [pc, #104]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f908:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f90c:	f003 0310 	and.w	r3, r3, #16
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	d012      	beq.n	800f93c <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f916:	2307      	movs	r3, #7
 800f918:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f91a:	2300      	movs	r3, #0
 800f91c:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800f91e:	4b14      	ldr	r3, [pc, #80]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f920:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	1d3a      	adds	r2, r7, #4
 800f928:	4912      	ldr	r1, [pc, #72]	; (800f974 <LoRaMacHandleIndicationEvents+0xa0>)
 800f92a:	4610      	mov	r0, r2
 800f92c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800f92e:	4a10      	ldr	r2, [pc, #64]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f930:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f934:	f36f 1304 	bfc	r3, #4, #1
 800f938:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f93c:	4b0c      	ldr	r3, [pc, #48]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f93e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f942:	f003 0302 	and.w	r3, r3, #2
 800f946:	b2db      	uxtb	r3, r3
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00d      	beq.n	800f968 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f94c:	4a08      	ldr	r2, [pc, #32]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f94e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f952:	f36f 0341 	bfc	r3, #1, #1
 800f956:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f95a:	4b05      	ldr	r3, [pc, #20]	; (800f970 <LoRaMacHandleIndicationEvents+0x9c>)
 800f95c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	4904      	ldr	r1, [pc, #16]	; (800f974 <LoRaMacHandleIndicationEvents+0xa0>)
 800f964:	4805      	ldr	r0, [pc, #20]	; (800f97c <LoRaMacHandleIndicationEvents+0xa8>)
 800f966:	4798      	blx	r3
    }
}
 800f968:	bf00      	nop
 800f96a:	3720      	adds	r7, #32
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	2000308c 	.word	0x2000308c
 800f974:	20003508 	.word	0x20003508
 800f978:	200034ec 	.word	0x200034ec
 800f97c:	200034a8 	.word	0x200034a8

0800f980 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f986:	4b32      	ldr	r3, [pc, #200]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800f988:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f98c:	f003 0301 	and.w	r3, r3, #1
 800f990:	b2db      	uxtb	r3, r3
 800f992:	2b00      	cmp	r3, #0
 800f994:	d058      	beq.n	800fa48 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800f996:	2300      	movs	r3, #0
 800f998:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f99a:	2300      	movs	r3, #0
 800f99c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f99e:	4b2c      	ldr	r3, [pc, #176]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800f9a0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d004      	beq.n	800f9b2 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f9a8:	4b29      	ldr	r3, [pc, #164]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800f9aa:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f9ae:	2b03      	cmp	r3, #3
 800f9b0:	d104      	bne.n	800f9bc <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f9b2:	f002 f89f 	bl	8011af4 <CheckRetransUnconfirmedUplink>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	71fb      	strb	r3, [r7, #7]
 800f9ba:	e020      	b.n	800f9fe <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f9bc:	4b24      	ldr	r3, [pc, #144]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800f9be:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d11b      	bne.n	800f9fe <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800f9c6:	4b22      	ldr	r3, [pc, #136]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800f9c8:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d014      	beq.n	800f9fa <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f9d0:	f002 f8bc 	bl	8011b4c <CheckRetransConfirmedUplink>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f9d8:	4b1e      	ldr	r3, [pc, #120]	; (800fa54 <LoRaMacHandleMcpsRequest+0xd4>)
 800f9da:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10d      	bne.n	800f9fe <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800f9e2:	79fb      	ldrb	r3, [r7, #7]
 800f9e4:	f083 0301 	eor.w	r3, r3, #1
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d002      	beq.n	800f9f4 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800f9ee:	f002 f929 	bl	8011c44 <AckTimeoutRetriesProcess>
 800f9f2:	e004      	b.n	800f9fe <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f9f4:	f002 f964 	bl	8011cc0 <AckTimeoutRetriesFinalize>
 800f9f8:	e001      	b.n	800f9fe <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800f9fe:	79fb      	ldrb	r3, [r7, #7]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00d      	beq.n	800fa20 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800fa04:	4814      	ldr	r0, [pc, #80]	; (800fa58 <LoRaMacHandleMcpsRequest+0xd8>)
 800fa06:	f00d fb31 	bl	801d06c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fa0a:	4b11      	ldr	r3, [pc, #68]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800fa0c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fa10:	f023 0320 	bic.w	r3, r3, #32
 800fa14:	4a0e      	ldr	r2, [pc, #56]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800fa16:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800fa1a:	f002 f8b9 	bl	8011b90 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800fa1e:	e013      	b.n	800fa48 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800fa20:	79bb      	ldrb	r3, [r7, #6]
 800fa22:	f083 0301 	eor.w	r3, r3, #1
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d00d      	beq.n	800fa48 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800fa2c:	4a08      	ldr	r2, [pc, #32]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800fa2e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fa32:	f36f 1345 	bfc	r3, #5, #1
 800fa36:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800fa3a:	4b05      	ldr	r3, [pc, #20]	; (800fa50 <LoRaMacHandleMcpsRequest+0xd0>)
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800fa42:	2000      	movs	r0, #0
 800fa44:	f000 f97e 	bl	800fd44 <OnTxDelayedTimerEvent>
}
 800fa48:	bf00      	nop
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	2000308c 	.word	0x2000308c
 800fa54:	20003594 	.word	0x20003594
 800fa58:	200033f4 	.word	0x200033f4

0800fa5c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fa60:	4b1b      	ldr	r3, [pc, #108]	; (800fad0 <LoRaMacHandleMlmeRequest+0x74>)
 800fa62:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fa66:	f003 0304 	and.w	r3, r3, #4
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d02c      	beq.n	800faca <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fa70:	2001      	movs	r0, #1
 800fa72:	f004 f9a5 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d012      	beq.n	800faa2 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800fa7c:	2001      	movs	r0, #1
 800fa7e:	f004 f941 	bl	8013d04 <LoRaMacConfirmQueueGetStatus>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d103      	bne.n	800fa90 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800fa88:	4b11      	ldr	r3, [pc, #68]	; (800fad0 <LoRaMacHandleMlmeRequest+0x74>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fa90:	4b0f      	ldr	r3, [pc, #60]	; (800fad0 <LoRaMacHandleMlmeRequest+0x74>)
 800fa92:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fa96:	f023 0302 	bic.w	r3, r3, #2
 800fa9a:	4a0d      	ldr	r2, [pc, #52]	; (800fad0 <LoRaMacHandleMlmeRequest+0x74>)
 800fa9c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800faa0:	e013      	b.n	800faca <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800faa2:	2005      	movs	r0, #5
 800faa4:	f004 f98c 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d105      	bne.n	800faba <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800faae:	2006      	movs	r0, #6
 800fab0:	f004 f986 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 800fab4:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d007      	beq.n	800faca <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800faba:	4b05      	ldr	r3, [pc, #20]	; (800fad0 <LoRaMacHandleMlmeRequest+0x74>)
 800fabc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fac0:	f023 0302 	bic.w	r3, r3, #2
 800fac4:	4a02      	ldr	r2, [pc, #8]	; (800fad0 <LoRaMacHandleMlmeRequest+0x74>)
 800fac6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800faca:	bf00      	nop
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	2000308c 	.word	0x2000308c

0800fad4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fad8:	200c      	movs	r0, #12
 800fada:	f004 f971 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d019      	beq.n	800fb18 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800fae4:	4b0e      	ldr	r3, [pc, #56]	; (800fb20 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fae6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800faea:	f003 0301 	and.w	r3, r3, #1
 800faee:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d111      	bne.n	800fb18 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800faf4:	4b0a      	ldr	r3, [pc, #40]	; (800fb20 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800faf6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fafa:	f003 0304 	and.w	r3, r3, #4
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d009      	beq.n	800fb18 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fb04:	4b06      	ldr	r3, [pc, #24]	; (800fb20 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fb06:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb0a:	f023 0302 	bic.w	r3, r3, #2
 800fb0e:	4a04      	ldr	r2, [pc, #16]	; (800fb20 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fb10:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800fb14:	2301      	movs	r3, #1
 800fb16:	e000      	b.n	800fb1a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800fb18:	2300      	movs	r3, #0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	2000308c 	.word	0x2000308c

0800fb24 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800fb24:	b480      	push	{r7}
 800fb26:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800fb28:	4b0d      	ldr	r3, [pc, #52]	; (800fb60 <LoRaMacCheckForRxAbort+0x3c>)
 800fb2a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00f      	beq.n	800fb56 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800fb36:	4b0a      	ldr	r3, [pc, #40]	; (800fb60 <LoRaMacCheckForRxAbort+0x3c>)
 800fb38:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb40:	4a07      	ldr	r2, [pc, #28]	; (800fb60 <LoRaMacCheckForRxAbort+0x3c>)
 800fb42:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fb46:	4b06      	ldr	r3, [pc, #24]	; (800fb60 <LoRaMacCheckForRxAbort+0x3c>)
 800fb48:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb4c:	f023 0302 	bic.w	r3, r3, #2
 800fb50:	4a03      	ldr	r2, [pc, #12]	; (800fb60 <LoRaMacCheckForRxAbort+0x3c>)
 800fb52:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800fb56:	bf00      	nop
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bc80      	pop	{r7}
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	2000308c 	.word	0x2000308c

0800fb64 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fb70:	2300      	movs	r3, #0
 800fb72:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800fb74:	4b50      	ldr	r3, [pc, #320]	; (800fcb8 <LoRaMacHandleNvm+0x154>)
 800fb76:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f040 8098 	bne.w	800fcb0 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2124      	movs	r1, #36	; 0x24
 800fb84:	4618      	mov	r0, r3
 800fb86:	f009 fac9 	bl	801911c <Crc32>
 800fb8a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb90:	68ba      	ldr	r2, [r7, #8]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d006      	beq.n	800fba4 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800fb9c:	89fb      	ldrh	r3, [r7, #14]
 800fb9e:	f043 0301 	orr.w	r3, r3, #1
 800fba2:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	3328      	adds	r3, #40	; 0x28
 800fba8:	2114      	movs	r1, #20
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f009 fab6 	bl	801911c <Crc32>
 800fbb0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d006      	beq.n	800fbca <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	68ba      	ldr	r2, [r7, #8]
 800fbc0:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800fbc2:	89fb      	ldrh	r3, [r7, #14]
 800fbc4:	f043 0302 	orr.w	r3, r3, #2
 800fbc8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	3340      	adds	r3, #64	; 0x40
 800fbce:	21d4      	movs	r1, #212	; 0xd4
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f009 faa3 	bl	801911c <Crc32>
 800fbd6:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d007      	beq.n	800fbf4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	68ba      	ldr	r2, [r7, #8]
 800fbe8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800fbec:	89fb      	ldrh	r3, [r7, #14]
 800fbee:	f043 0304 	orr.w	r3, r3, #4
 800fbf2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800fbfa:	21bc      	movs	r1, #188	; 0xbc
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f009 fa8d 	bl	801911c <Crc32>
 800fc02:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d007      	beq.n	800fc20 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	68ba      	ldr	r2, [r7, #8]
 800fc14:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800fc18:	89fb      	ldrh	r3, [r7, #14]
 800fc1a:	f043 0308 	orr.w	r3, r3, #8
 800fc1e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800fc26:	21a0      	movs	r1, #160	; 0xa0
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f009 fa77 	bl	801911c <Crc32>
 800fc2e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800fc36:	68ba      	ldr	r2, [r7, #8]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d007      	beq.n	800fc4c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	68ba      	ldr	r2, [r7, #8]
 800fc40:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800fc44:	89fb      	ldrh	r3, [r7, #14]
 800fc46:	f043 0310 	orr.w	r3, r3, #16
 800fc4a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800fc52:	f44f 715e 	mov.w	r1, #888	; 0x378
 800fc56:	4618      	mov	r0, r3
 800fc58:	f009 fa60 	bl	801911c <Crc32>
 800fc5c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d007      	beq.n	800fc7a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800fc72:	89fb      	ldrh	r3, [r7, #14]
 800fc74:	f043 0320 	orr.w	r3, r3, #32
 800fc78:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800fc80:	2114      	movs	r1, #20
 800fc82:	4618      	mov	r0, r3
 800fc84:	f009 fa4a 	bl	801911c <Crc32>
 800fc88:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d007      	beq.n	800fca6 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	68ba      	ldr	r2, [r7, #8]
 800fc9a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800fc9e:	89fb      	ldrh	r3, [r7, #14]
 800fca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fca4:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800fca6:	89fb      	ldrh	r3, [r7, #14]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f001 ffad 	bl	8011c08 <CallNvmDataChangeCallback>
 800fcae:	e000      	b.n	800fcb2 <LoRaMacHandleNvm+0x14e>
        return;
 800fcb0:	bf00      	nop
}
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	2000308c 	.word	0x2000308c

0800fcbc <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800fcc6:	f7ff fd1b 	bl	800f700 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800fcca:	f003 fc36 	bl	801353a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800fcce:	4b1b      	ldr	r3, [pc, #108]	; (800fd3c <LoRaMacProcess+0x80>)
 800fcd0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fcd4:	f003 0320 	and.w	r3, r3, #32
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d021      	beq.n	800fd22 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800fcde:	2000      	movs	r0, #0
 800fce0:	f7ff fd6c 	bl	800f7bc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800fce4:	f7ff ff1e 	bl	800fb24 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800fce8:	f002 f81e 	bl	8011d28 <IsRequestPending>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d006      	beq.n	800fd00 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800fcf2:	f7ff feef 	bl	800fad4 <LoRaMacCheckForBeaconAcquisition>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800fd00:	79fb      	ldrb	r3, [r7, #7]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d103      	bne.n	800fd0e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800fd06:	f7ff fea9 	bl	800fa5c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800fd0a:	f7ff fe39 	bl	800f980 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800fd0e:	f7ff fd65 	bl	800f7dc <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800fd12:	f7ff fdc5 	bl	800f8a0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800fd16:	480a      	ldr	r0, [pc, #40]	; (800fd40 <LoRaMacProcess+0x84>)
 800fd18:	f7ff ff24 	bl	800fb64 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fd1c:	2001      	movs	r0, #1
 800fd1e:	f7ff fd4d 	bl	800f7bc <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800fd22:	f7ff fdd7 	bl	800f8d4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800fd26:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <LoRaMacProcess+0x80>)
 800fd28:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	d101      	bne.n	800fd34 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800fd30:	f001 fb7c 	bl	801142c <OpenContinuousRxCWindow>
    }
}
 800fd34:	bf00      	nop
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	2000308c 	.word	0x2000308c
 800fd40:	20003594 	.word	0x20003594

0800fd44 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800fd4c:	4817      	ldr	r0, [pc, #92]	; (800fdac <OnTxDelayedTimerEvent+0x68>)
 800fd4e:	f00d f98d 	bl	801d06c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fd52:	4b17      	ldr	r3, [pc, #92]	; (800fdb0 <OnTxDelayedTimerEvent+0x6c>)
 800fd54:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fd58:	f023 0320 	bic.w	r3, r3, #32
 800fd5c:	4a14      	ldr	r2, [pc, #80]	; (800fdb0 <OnTxDelayedTimerEvent+0x6c>)
 800fd5e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800fd62:	2001      	movs	r0, #1
 800fd64:	f001 f8fc 	bl	8010f60 <ScheduleTx>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d018      	beq.n	800fda0 <OnTxDelayedTimerEvent+0x5c>
 800fd6e:	2b0b      	cmp	r3, #11
 800fd70:	d016      	beq.n	800fda0 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fd72:	4b10      	ldr	r3, [pc, #64]	; (800fdb4 <OnTxDelayedTimerEvent+0x70>)
 800fd74:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fd78:	b2da      	uxtb	r2, r3
 800fd7a:	4b0d      	ldr	r3, [pc, #52]	; (800fdb0 <OnTxDelayedTimerEvent+0x6c>)
 800fd7c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800fd80:	4b0b      	ldr	r3, [pc, #44]	; (800fdb0 <OnTxDelayedTimerEvent+0x6c>)
 800fd82:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fd86:	4b0a      	ldr	r3, [pc, #40]	; (800fdb0 <OnTxDelayedTimerEvent+0x6c>)
 800fd88:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fd8c:	4b08      	ldr	r3, [pc, #32]	; (800fdb0 <OnTxDelayedTimerEvent+0x6c>)
 800fd8e:	2209      	movs	r2, #9
 800fd90:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fd94:	2009      	movs	r0, #9
 800fd96:	f003 ffdf 	bl	8013d58 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fd9a:	f001 fef9 	bl	8011b90 <StopRetransmission>
            break;
 800fd9e:	e000      	b.n	800fda2 <OnTxDelayedTimerEvent+0x5e>
            break;
 800fda0:	bf00      	nop
        }
    }
}
 800fda2:	bf00      	nop
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	200033f4 	.word	0x200033f4
 800fdb0:	2000308c 	.word	0x2000308c
 800fdb4:	20003594 	.word	0x20003594

0800fdb8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fdc0:	4b14      	ldr	r3, [pc, #80]	; (800fe14 <OnRxWindow1TimerEvent+0x5c>)
 800fdc2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fdc6:	4b13      	ldr	r3, [pc, #76]	; (800fe14 <OnRxWindow1TimerEvent+0x5c>)
 800fdc8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fdcc:	4b12      	ldr	r3, [pc, #72]	; (800fe18 <OnRxWindow1TimerEvent+0x60>)
 800fdce:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fdd2:	b25a      	sxtb	r2, r3
 800fdd4:	4b0f      	ldr	r3, [pc, #60]	; (800fe14 <OnRxWindow1TimerEvent+0x5c>)
 800fdd6:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fdda:	4b0f      	ldr	r3, [pc, #60]	; (800fe18 <OnRxWindow1TimerEvent+0x60>)
 800fddc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fde0:	4b0c      	ldr	r3, [pc, #48]	; (800fe14 <OnRxWindow1TimerEvent+0x5c>)
 800fde2:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fde6:	4b0c      	ldr	r3, [pc, #48]	; (800fe18 <OnRxWindow1TimerEvent+0x60>)
 800fde8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fdec:	4b09      	ldr	r3, [pc, #36]	; (800fe14 <OnRxWindow1TimerEvent+0x5c>)
 800fdee:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fdf2:	4b08      	ldr	r3, [pc, #32]	; (800fe14 <OnRxWindow1TimerEvent+0x5c>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fdfa:	4b06      	ldr	r3, [pc, #24]	; (800fe14 <OnRxWindow1TimerEvent+0x5c>)
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fe02:	4906      	ldr	r1, [pc, #24]	; (800fe1c <OnRxWindow1TimerEvent+0x64>)
 800fe04:	4806      	ldr	r0, [pc, #24]	; (800fe20 <OnRxWindow1TimerEvent+0x68>)
 800fe06:	f001 fae3 	bl	80113d0 <RxWindowSetup>
}
 800fe0a:	bf00      	nop
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	2000308c 	.word	0x2000308c
 800fe18:	20003594 	.word	0x20003594
 800fe1c:	20003444 	.word	0x20003444
 800fe20:	2000340c 	.word	0x2000340c

0800fe24 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fe2c:	4b16      	ldr	r3, [pc, #88]	; (800fe88 <OnRxWindow2TimerEvent+0x64>)
 800fe2e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d023      	beq.n	800fe7e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fe36:	4b14      	ldr	r3, [pc, #80]	; (800fe88 <OnRxWindow2TimerEvent+0x64>)
 800fe38:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fe3c:	4b12      	ldr	r3, [pc, #72]	; (800fe88 <OnRxWindow2TimerEvent+0x64>)
 800fe3e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fe42:	4b12      	ldr	r3, [pc, #72]	; (800fe8c <OnRxWindow2TimerEvent+0x68>)
 800fe44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe46:	4a10      	ldr	r2, [pc, #64]	; (800fe88 <OnRxWindow2TimerEvent+0x64>)
 800fe48:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe4c:	4b0f      	ldr	r3, [pc, #60]	; (800fe8c <OnRxWindow2TimerEvent+0x68>)
 800fe4e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fe52:	4b0d      	ldr	r3, [pc, #52]	; (800fe88 <OnRxWindow2TimerEvent+0x64>)
 800fe54:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fe58:	4b0c      	ldr	r3, [pc, #48]	; (800fe8c <OnRxWindow2TimerEvent+0x68>)
 800fe5a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fe5e:	4b0a      	ldr	r3, [pc, #40]	; (800fe88 <OnRxWindow2TimerEvent+0x64>)
 800fe60:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fe64:	4b08      	ldr	r3, [pc, #32]	; (800fe88 <OnRxWindow2TimerEvent+0x64>)
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fe6c:	4b06      	ldr	r3, [pc, #24]	; (800fe88 <OnRxWindow2TimerEvent+0x64>)
 800fe6e:	2201      	movs	r2, #1
 800fe70:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fe74:	4906      	ldr	r1, [pc, #24]	; (800fe90 <OnRxWindow2TimerEvent+0x6c>)
 800fe76:	4807      	ldr	r0, [pc, #28]	; (800fe94 <OnRxWindow2TimerEvent+0x70>)
 800fe78:	f001 faaa 	bl	80113d0 <RxWindowSetup>
 800fe7c:	e000      	b.n	800fe80 <OnRxWindow2TimerEvent+0x5c>
        return;
 800fe7e:	bf00      	nop
}
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	2000308c 	.word	0x2000308c
 800fe8c:	20003594 	.word	0x20003594
 800fe90:	20003458 	.word	0x20003458
 800fe94:	20003424 	.word	0x20003424

0800fe98 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800fea0:	4815      	ldr	r0, [pc, #84]	; (800fef8 <OnAckTimeoutTimerEvent+0x60>)
 800fea2:	f00d f8e3 	bl	801d06c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fea6:	4b15      	ldr	r3, [pc, #84]	; (800fefc <OnAckTimeoutTimerEvent+0x64>)
 800fea8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800feac:	2b00      	cmp	r3, #0
 800feae:	d003      	beq.n	800feb8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800feb0:	4b12      	ldr	r3, [pc, #72]	; (800fefc <OnAckTimeoutTimerEvent+0x64>)
 800feb2:	2201      	movs	r2, #1
 800feb4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800feb8:	4b11      	ldr	r3, [pc, #68]	; (800ff00 <OnAckTimeoutTimerEvent+0x68>)
 800feba:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800febe:	2b02      	cmp	r3, #2
 800fec0:	d106      	bne.n	800fed0 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fec2:	4a0e      	ldr	r2, [pc, #56]	; (800fefc <OnAckTimeoutTimerEvent+0x64>)
 800fec4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fec8:	f043 0320 	orr.w	r3, r3, #32
 800fecc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <OnAckTimeoutTimerEvent+0x64>)
 800fed2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00a      	beq.n	800fef0 <OnAckTimeoutTimerEvent+0x58>
 800feda:	4b08      	ldr	r3, [pc, #32]	; (800fefc <OnAckTimeoutTimerEvent+0x64>)
 800fedc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fee0:	691b      	ldr	r3, [r3, #16]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d004      	beq.n	800fef0 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fee6:	4b05      	ldr	r3, [pc, #20]	; (800fefc <OnAckTimeoutTimerEvent+0x64>)
 800fee8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	4798      	blx	r3
    }
}
 800fef0:	bf00      	nop
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	20003484 	.word	0x20003484
 800fefc:	2000308c 	.word	0x2000308c
 800ff00:	20003594 	.word	0x20003594

0800ff04 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60ba      	str	r2, [r7, #8]
 800ff0c:	607b      	str	r3, [r7, #4]
 800ff0e:	4603      	mov	r3, r0
 800ff10:	73fb      	strb	r3, [r7, #15]
 800ff12:	460b      	mov	r3, r1
 800ff14:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d005      	beq.n	800ff28 <GetFCntDown+0x24>
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d002      	beq.n	800ff28 <GetFCntDown+0x24>
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d101      	bne.n	800ff2c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff28:	230a      	movs	r3, #10
 800ff2a:	e029      	b.n	800ff80 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d016      	beq.n	800ff60 <GetFCntDown+0x5c>
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d118      	bne.n	800ff68 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ff36:	79bb      	ldrb	r3, [r7, #6]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d10d      	bne.n	800ff58 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ff3c:	7bbb      	ldrb	r3, [r7, #14]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d002      	beq.n	800ff48 <GetFCntDown+0x44>
 800ff42:	7bbb      	ldrb	r3, [r7, #14]
 800ff44:	2b03      	cmp	r3, #3
 800ff46:	d103      	bne.n	800ff50 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	2202      	movs	r2, #2
 800ff4c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ff4e:	e00d      	b.n	800ff6c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	2201      	movs	r2, #1
 800ff54:	701a      	strb	r2, [r3, #0]
            break;
 800ff56:	e009      	b.n	800ff6c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800ff58:	69fb      	ldr	r3, [r7, #28]
 800ff5a:	2203      	movs	r2, #3
 800ff5c:	701a      	strb	r2, [r3, #0]
            break;
 800ff5e:	e005      	b.n	800ff6c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	2204      	movs	r2, #4
 800ff64:	701a      	strb	r2, [r3, #0]
            break;
 800ff66:	e001      	b.n	800ff6c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800ff68:	2305      	movs	r3, #5
 800ff6a:	e009      	b.n	800ff80 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	7818      	ldrb	r0, [r3, #0]
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	89db      	ldrh	r3, [r3, #14]
 800ff74:	461a      	mov	r2, r3
 800ff76:	8b39      	ldrh	r1, [r7, #24]
 800ff78:	6a3b      	ldr	r3, [r7, #32]
 800ff7a:	f004 fb17 	bl	80145ac <LoRaMacCryptoGetFCntDown>
 800ff7e:	4603      	mov	r3, r0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800ff88:	b5b0      	push	{r4, r5, r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ff92:	2303      	movs	r3, #3
 800ff94:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800ff96:	4b61      	ldr	r3, [pc, #388]	; (801011c <SwitchClass+0x194>)
 800ff98:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	f000 80a5 	beq.w	80100ec <SwitchClass+0x164>
 800ffa2:	2b02      	cmp	r3, #2
 800ffa4:	f300 80b4 	bgt.w	8010110 <SwitchClass+0x188>
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d003      	beq.n	800ffb4 <SwitchClass+0x2c>
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	f000 808f 	beq.w	80100d0 <SwitchClass+0x148>
 800ffb2:	e0ad      	b.n	8010110 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ffb4:	79fb      	ldrb	r3, [r7, #7]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d107      	bne.n	800ffca <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ffba:	4b58      	ldr	r3, [pc, #352]	; (801011c <SwitchClass+0x194>)
 800ffbc:	4a57      	ldr	r2, [pc, #348]	; (801011c <SwitchClass+0x194>)
 800ffbe:	336c      	adds	r3, #108	; 0x6c
 800ffc0:	3264      	adds	r2, #100	; 0x64
 800ffc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffc6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ffca:	79fb      	ldrb	r3, [r7, #7]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d10c      	bne.n	800ffea <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ffd0:	79fb      	ldrb	r3, [r7, #7]
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f003 fa53 	bl	801347e <LoRaMacClassBSwitchClass>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ffdc:	7bfb      	ldrb	r3, [r7, #15]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d103      	bne.n	800ffea <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ffe2:	4a4e      	ldr	r2, [pc, #312]	; (801011c <SwitchClass+0x194>)
 800ffe4:	79fb      	ldrb	r3, [r7, #7]
 800ffe6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800ffea:	79fb      	ldrb	r3, [r7, #7]
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	f040 808a 	bne.w	8010106 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fff2:	4a4a      	ldr	r2, [pc, #296]	; (801011c <SwitchClass+0x194>)
 800fff4:	79fb      	ldrb	r3, [r7, #7]
 800fff6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fffa:	4a49      	ldr	r2, [pc, #292]	; (8010120 <SwitchClass+0x198>)
 800fffc:	4b48      	ldr	r3, [pc, #288]	; (8010120 <SwitchClass+0x198>)
 800fffe:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8010002:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8010006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801000a:	682b      	ldr	r3, [r5, #0]
 801000c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801000e:	4b44      	ldr	r3, [pc, #272]	; (8010120 <SwitchClass+0x198>)
 8010010:	2202      	movs	r2, #2
 8010012:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010016:	2300      	movs	r3, #0
 8010018:	73bb      	strb	r3, [r7, #14]
 801001a:	e049      	b.n	80100b0 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 801001c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010020:	4a3e      	ldr	r2, [pc, #248]	; (801011c <SwitchClass+0x194>)
 8010022:	212c      	movs	r1, #44	; 0x2c
 8010024:	fb01 f303 	mul.w	r3, r1, r3
 8010028:	4413      	add	r3, r2
 801002a:	33d2      	adds	r3, #210	; 0xd2
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d038      	beq.n	80100a4 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010036:	4a39      	ldr	r2, [pc, #228]	; (801011c <SwitchClass+0x194>)
 8010038:	212c      	movs	r1, #44	; 0x2c
 801003a:	fb01 f303 	mul.w	r3, r1, r3
 801003e:	4413      	add	r3, r2
 8010040:	33e8      	adds	r3, #232	; 0xe8
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	4a35      	ldr	r2, [pc, #212]	; (801011c <SwitchClass+0x194>)
 8010046:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801004c:	4a33      	ldr	r2, [pc, #204]	; (801011c <SwitchClass+0x194>)
 801004e:	212c      	movs	r1, #44	; 0x2c
 8010050:	fb01 f303 	mul.w	r3, r1, r3
 8010054:	4413      	add	r3, r2
 8010056:	33ec      	adds	r3, #236	; 0xec
 8010058:	f993 3000 	ldrsb.w	r3, [r3]
 801005c:	b2da      	uxtb	r2, r3
 801005e:	4b2f      	ldr	r3, [pc, #188]	; (801011c <SwitchClass+0x194>)
 8010060:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010064:	4b2e      	ldr	r3, [pc, #184]	; (8010120 <SwitchClass+0x198>)
 8010066:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801006a:	4b2d      	ldr	r3, [pc, #180]	; (8010120 <SwitchClass+0x198>)
 801006c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010070:	4b2a      	ldr	r3, [pc, #168]	; (801011c <SwitchClass+0x194>)
 8010072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010074:	4a2a      	ldr	r2, [pc, #168]	; (8010120 <SwitchClass+0x198>)
 8010076:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801007a:	4b28      	ldr	r3, [pc, #160]	; (801011c <SwitchClass+0x194>)
 801007c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010080:	4b27      	ldr	r3, [pc, #156]	; (8010120 <SwitchClass+0x198>)
 8010082:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010086:	4b25      	ldr	r3, [pc, #148]	; (801011c <SwitchClass+0x194>)
 8010088:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801008c:	4b24      	ldr	r3, [pc, #144]	; (8010120 <SwitchClass+0x198>)
 801008e:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010092:	4b23      	ldr	r3, [pc, #140]	; (8010120 <SwitchClass+0x198>)
 8010094:	2203      	movs	r2, #3
 8010096:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 801009a:	4b21      	ldr	r3, [pc, #132]	; (8010120 <SwitchClass+0x198>)
 801009c:	2201      	movs	r2, #1
 801009e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 80100a2:	e009      	b.n	80100b8 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80100a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100a8:	b2db      	uxtb	r3, r3
 80100aa:	3301      	adds	r3, #1
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	73bb      	strb	r3, [r7, #14]
 80100b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	ddb1      	ble.n	801001c <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80100b8:	4b19      	ldr	r3, [pc, #100]	; (8010120 <SwitchClass+0x198>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80100c0:	4b18      	ldr	r3, [pc, #96]	; (8010124 <SwitchClass+0x19c>)
 80100c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80100c6:	f001 f9b1 	bl	801142c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80100ca:	2300      	movs	r3, #0
 80100cc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80100ce:	e01a      	b.n	8010106 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80100d0:	79fb      	ldrb	r3, [r7, #7]
 80100d2:	4618      	mov	r0, r3
 80100d4:	f003 f9d3 	bl	801347e <LoRaMacClassBSwitchClass>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d113      	bne.n	801010a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80100e2:	4a0e      	ldr	r2, [pc, #56]	; (801011c <SwitchClass+0x194>)
 80100e4:	79fb      	ldrb	r3, [r7, #7]
 80100e6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 80100ea:	e00e      	b.n	801010a <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80100ec:	79fb      	ldrb	r3, [r7, #7]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d10d      	bne.n	801010e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80100f2:	4a0a      	ldr	r2, [pc, #40]	; (801011c <SwitchClass+0x194>)
 80100f4:	79fb      	ldrb	r3, [r7, #7]
 80100f6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80100fa:	4b0a      	ldr	r3, [pc, #40]	; (8010124 <SwitchClass+0x19c>)
 80100fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100fe:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010100:	2300      	movs	r3, #0
 8010102:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010104:	e003      	b.n	801010e <SwitchClass+0x186>
            break;
 8010106:	bf00      	nop
 8010108:	e002      	b.n	8010110 <SwitchClass+0x188>
            break;
 801010a:	bf00      	nop
 801010c:	e000      	b.n	8010110 <SwitchClass+0x188>
            break;
 801010e:	bf00      	nop
        }
    }

    return status;
 8010110:	7bfb      	ldrb	r3, [r7, #15]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bdb0      	pop	{r4, r5, r7, pc}
 801011a:	bf00      	nop
 801011c:	20003594 	.word	0x20003594
 8010120:	2000308c 	.word	0x2000308c
 8010124:	0801e73c 	.word	0x0801e73c

08010128 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b086      	sub	sp, #24
 801012c:	af00      	add	r7, sp, #0
 801012e:	4603      	mov	r3, r0
 8010130:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010132:	4b10      	ldr	r3, [pc, #64]	; (8010174 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010134:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010138:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801013a:	79fb      	ldrb	r3, [r7, #7]
 801013c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801013e:	230d      	movs	r3, #13
 8010140:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010142:	4b0c      	ldr	r3, [pc, #48]	; (8010174 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010144:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010148:	2b00      	cmp	r3, #0
 801014a:	d001      	beq.n	8010150 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801014c:	230e      	movs	r3, #14
 801014e:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010150:	4b08      	ldr	r3, [pc, #32]	; (8010174 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010156:	f107 0210 	add.w	r2, r7, #16
 801015a:	4611      	mov	r1, r2
 801015c:	4618      	mov	r0, r3
 801015e:	f005 f8b8 	bl	80152d2 <RegionGetPhyParam>
 8010162:	4603      	mov	r3, r0
 8010164:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	b2db      	uxtb	r3, r3
}
 801016a:	4618      	mov	r0, r3
 801016c:	3718      	adds	r7, #24
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop
 8010174:	20003594 	.word	0x20003594

08010178 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	71fb      	strb	r3, [r7, #7]
 8010182:	460b      	mov	r3, r1
 8010184:	71bb      	strb	r3, [r7, #6]
 8010186:	4613      	mov	r3, r2
 8010188:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801018e:	2300      	movs	r3, #0
 8010190:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010192:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010196:	4618      	mov	r0, r3
 8010198:	f7ff ffc6 	bl	8010128 <GetMaxAppPayloadWithoutFOptsLength>
 801019c:	4603      	mov	r3, r0
 801019e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80101a0:	79fb      	ldrb	r3, [r7, #7]
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	797b      	ldrb	r3, [r7, #5]
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	4413      	add	r3, r2
 80101aa:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80101ac:	89ba      	ldrh	r2, [r7, #12]
 80101ae:	89fb      	ldrh	r3, [r7, #14]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d804      	bhi.n	80101be <ValidatePayloadLength+0x46>
 80101b4:	89bb      	ldrh	r3, [r7, #12]
 80101b6:	2bff      	cmp	r3, #255	; 0xff
 80101b8:	d801      	bhi.n	80101be <ValidatePayloadLength+0x46>
    {
        return true;
 80101ba:	2301      	movs	r3, #1
 80101bc:	e000      	b.n	80101c0 <ValidatePayloadLength+0x48>
    }
    return false;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 80101c8:	b480      	push	{r7}
 80101ca:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80101cc:	4a05      	ldr	r2, [pc, #20]	; (80101e4 <SetMlmeScheduleUplinkIndication+0x1c>)
 80101ce:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80101d2:	f043 0310 	orr.w	r3, r3, #16
 80101d6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80101da:	bf00      	nop
 80101dc:	46bd      	mov	sp, r7
 80101de:	bc80      	pop	{r7}
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	2000308c 	.word	0x2000308c

080101e8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80101e8:	b590      	push	{r4, r7, lr}
 80101ea:	b0a5      	sub	sp, #148	; 0x94
 80101ec:	af02      	add	r7, sp, #8
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	4608      	mov	r0, r1
 80101f2:	4611      	mov	r1, r2
 80101f4:	461a      	mov	r2, r3
 80101f6:	4603      	mov	r3, r0
 80101f8:	70fb      	strb	r3, [r7, #3]
 80101fa:	460b      	mov	r3, r1
 80101fc:	70bb      	strb	r3, [r7, #2]
 80101fe:	4613      	mov	r3, r2
 8010200:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010202:	2300      	movs	r3, #0
 8010204:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8010208:	2300      	movs	r3, #0
 801020a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801020e:	2300      	movs	r3, #0
 8010210:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 8010214:	f000 bc73 	b.w	8010afe <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010218:	78fb      	ldrb	r3, [r7, #3]
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	4413      	add	r3, r2
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	4618      	mov	r0, r3
 8010222:	f003 fbf5 	bl	8013a10 <LoRaMacCommandsGetCmdSize>
 8010226:	4603      	mov	r3, r0
 8010228:	461a      	mov	r2, r3
 801022a:	78fb      	ldrb	r3, [r7, #3]
 801022c:	441a      	add	r2, r3
 801022e:	78bb      	ldrb	r3, [r7, #2]
 8010230:	429a      	cmp	r2, r3
 8010232:	f300 846a 	bgt.w	8010b0a <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010236:	78fb      	ldrb	r3, [r7, #3]
 8010238:	1c5a      	adds	r2, r3, #1
 801023a:	70fa      	strb	r2, [r7, #3]
 801023c:	461a      	mov	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4413      	add	r3, r2
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	3b02      	subs	r3, #2
 8010246:	2b11      	cmp	r3, #17
 8010248:	f200 8461 	bhi.w	8010b0e <ProcessMacCommands+0x926>
 801024c:	a201      	add	r2, pc, #4	; (adr r2, 8010254 <ProcessMacCommands+0x6c>)
 801024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010252:	bf00      	nop
 8010254:	0801029d 	.word	0x0801029d
 8010258:	080102df 	.word	0x080102df
 801025c:	080103fb 	.word	0x080103fb
 8010260:	08010439 	.word	0x08010439
 8010264:	08010529 	.word	0x08010529
 8010268:	08010585 	.word	0x08010585
 801026c:	08010641 	.word	0x08010641
 8010270:	0801069b 	.word	0x0801069b
 8010274:	0801077f 	.word	0x0801077f
 8010278:	08010b0f 	.word	0x08010b0f
 801027c:	08010b0f 	.word	0x08010b0f
 8010280:	08010829 	.word	0x08010829
 8010284:	08010b0f 	.word	0x08010b0f
 8010288:	08010b0f 	.word	0x08010b0f
 801028c:	0801093f 	.word	0x0801093f
 8010290:	08010973 	.word	0x08010973
 8010294:	08010a03 	.word	0x08010a03
 8010298:	08010a79 	.word	0x08010a79
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 801029c:	2004      	movs	r0, #4
 801029e:	f003 fd8f 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f000 842a 	beq.w	8010afe <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80102aa:	2104      	movs	r1, #4
 80102ac:	2000      	movs	r0, #0
 80102ae:	f003 fcfb 	bl	8013ca8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80102b2:	78fb      	ldrb	r3, [r7, #3]
 80102b4:	1c5a      	adds	r2, r3, #1
 80102b6:	70fa      	strb	r2, [r7, #3]
 80102b8:	461a      	mov	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4413      	add	r3, r2
 80102be:	781a      	ldrb	r2, [r3, #0]
 80102c0:	4bad      	ldr	r3, [pc, #692]	; (8010578 <ProcessMacCommands+0x390>)
 80102c2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80102c6:	78fb      	ldrb	r3, [r7, #3]
 80102c8:	1c5a      	adds	r2, r3, #1
 80102ca:	70fa      	strb	r2, [r7, #3]
 80102cc:	461a      	mov	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4413      	add	r3, r2
 80102d2:	781a      	ldrb	r2, [r3, #0]
 80102d4:	4ba8      	ldr	r3, [pc, #672]	; (8010578 <ProcessMacCommands+0x390>)
 80102d6:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 80102da:	f000 bc10 	b.w	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80102de:	2300      	movs	r3, #0
 80102e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80102e4:	2300      	movs	r3, #0
 80102e6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 80102f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80102fa:	f083 0301 	eor.w	r3, r3, #1
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	2b00      	cmp	r3, #0
 8010302:	d078      	beq.n	80103f6 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8010304:	2301      	movs	r3, #1
 8010306:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 801030a:	78fb      	ldrb	r3, [r7, #3]
 801030c:	3b01      	subs	r3, #1
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	4413      	add	r3, r2
 8010312:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010314:	78ba      	ldrb	r2, [r7, #2]
 8010316:	78fb      	ldrb	r3, [r7, #3]
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	b2db      	uxtb	r3, r3
 801031c:	3301      	adds	r3, #1
 801031e:	b2db      	uxtb	r3, r3
 8010320:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010324:	4b95      	ldr	r3, [pc, #596]	; (801057c <ProcessMacCommands+0x394>)
 8010326:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801032a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801032e:	4b93      	ldr	r3, [pc, #588]	; (801057c <ProcessMacCommands+0x394>)
 8010330:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010334:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010338:	4b90      	ldr	r3, [pc, #576]	; (801057c <ProcessMacCommands+0x394>)
 801033a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801033e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010342:	4b8e      	ldr	r3, [pc, #568]	; (801057c <ProcessMacCommands+0x394>)
 8010344:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010348:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801034c:	4b8b      	ldr	r3, [pc, #556]	; (801057c <ProcessMacCommands+0x394>)
 801034e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010352:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8010356:	4b89      	ldr	r3, [pc, #548]	; (801057c <ProcessMacCommands+0x394>)
 8010358:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801035c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801035e:	4b87      	ldr	r3, [pc, #540]	; (801057c <ProcessMacCommands+0x394>)
 8010360:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010364:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8010368:	f107 0257 	add.w	r2, r7, #87	; 0x57
 801036c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010370:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010374:	9301      	str	r3, [sp, #4]
 8010376:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	4623      	mov	r3, r4
 801037e:	f005 f8af 	bl	80154e0 <RegionLinkAdrReq>
 8010382:	4603      	mov	r3, r0
 8010384:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010388:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801038c:	f003 0307 	and.w	r3, r3, #7
 8010390:	2b07      	cmp	r3, #7
 8010392:	d10e      	bne.n	80103b2 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010394:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8010398:	4b78      	ldr	r3, [pc, #480]	; (801057c <ProcessMacCommands+0x394>)
 801039a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801039e:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80103a2:	4b76      	ldr	r3, [pc, #472]	; (801057c <ProcessMacCommands+0x394>)
 80103a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80103a8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80103ac:	4b73      	ldr	r3, [pc, #460]	; (801057c <ProcessMacCommands+0x394>)
 80103ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80103b2:	2300      	movs	r3, #0
 80103b4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80103b8:	e00b      	b.n	80103d2 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80103ba:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80103be:	2201      	movs	r2, #1
 80103c0:	4619      	mov	r1, r3
 80103c2:	2003      	movs	r0, #3
 80103c4:	f003 f9d4 	bl	8013770 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80103c8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80103cc:	3301      	adds	r3, #1
 80103ce:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80103d2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80103d6:	4a6a      	ldr	r2, [pc, #424]	; (8010580 <ProcessMacCommands+0x398>)
 80103d8:	fba2 2303 	umull	r2, r3, r2, r3
 80103dc:	089b      	lsrs	r3, r3, #2
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d3e8      	bcc.n	80103ba <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80103e8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80103ec:	78fb      	ldrb	r3, [r7, #3]
 80103ee:	4413      	add	r3, r2
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	3b01      	subs	r3, #1
 80103f4:	70fb      	strb	r3, [r7, #3]
                }
                break;
 80103f6:	bf00      	nop
 80103f8:	e381      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80103fa:	78fb      	ldrb	r3, [r7, #3]
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	70fa      	strb	r2, [r7, #3]
 8010400:	461a      	mov	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4413      	add	r3, r2
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	f003 030f 	and.w	r3, r3, #15
 801040c:	b2da      	uxtb	r2, r3
 801040e:	4b5b      	ldr	r3, [pc, #364]	; (801057c <ProcessMacCommands+0x394>)
 8010410:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010414:	4b59      	ldr	r3, [pc, #356]	; (801057c <ProcessMacCommands+0x394>)
 8010416:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 801041a:	461a      	mov	r2, r3
 801041c:	2301      	movs	r3, #1
 801041e:	4093      	lsls	r3, r2
 8010420:	b29a      	uxth	r2, r3
 8010422:	4b56      	ldr	r3, [pc, #344]	; (801057c <ProcessMacCommands+0x394>)
 8010424:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010428:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801042c:	2200      	movs	r2, #0
 801042e:	4619      	mov	r1, r3
 8010430:	2004      	movs	r0, #4
 8010432:	f003 f99d 	bl	8013770 <LoRaMacCommandsAddCmd>
                break;
 8010436:	e362      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010438:	2307      	movs	r3, #7
 801043a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801043e:	78fb      	ldrb	r3, [r7, #3]
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	4413      	add	r3, r2
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	091b      	lsrs	r3, r3, #4
 8010448:	b2db      	uxtb	r3, r3
 801044a:	b25b      	sxtb	r3, r3
 801044c:	f003 0307 	and.w	r3, r3, #7
 8010450:	b25b      	sxtb	r3, r3
 8010452:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010456:	78fb      	ldrb	r3, [r7, #3]
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	4413      	add	r3, r2
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	b25b      	sxtb	r3, r3
 8010460:	f003 030f 	and.w	r3, r3, #15
 8010464:	b25b      	sxtb	r3, r3
 8010466:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801046a:	78fb      	ldrb	r3, [r7, #3]
 801046c:	3301      	adds	r3, #1
 801046e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010470:	78fb      	ldrb	r3, [r7, #3]
 8010472:	1c5a      	adds	r2, r3, #1
 8010474:	70fa      	strb	r2, [r7, #3]
 8010476:	461a      	mov	r2, r3
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4413      	add	r3, r2
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010480:	78fb      	ldrb	r3, [r7, #3]
 8010482:	1c5a      	adds	r2, r3, #1
 8010484:	70fa      	strb	r2, [r7, #3]
 8010486:	461a      	mov	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4413      	add	r3, r2
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	021a      	lsls	r2, r3, #8
 8010490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010492:	4313      	orrs	r3, r2
 8010494:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010496:	78fb      	ldrb	r3, [r7, #3]
 8010498:	1c5a      	adds	r2, r3, #1
 801049a:	70fa      	strb	r2, [r7, #3]
 801049c:	461a      	mov	r2, r3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4413      	add	r3, r2
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	041a      	lsls	r2, r3, #16
 80104a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104a8:	4313      	orrs	r3, r2
 80104aa:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80104ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104ae:	2264      	movs	r2, #100	; 0x64
 80104b0:	fb02 f303 	mul.w	r3, r2, r3
 80104b4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80104b6:	4b31      	ldr	r3, [pc, #196]	; (801057c <ProcessMacCommands+0x394>)
 80104b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104bc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80104c0:	4611      	mov	r1, r2
 80104c2:	4618      	mov	r0, r3
 80104c4:	f005 f833 	bl	801552e <RegionRxParamSetupReq>
 80104c8:	4603      	mov	r3, r0
 80104ca:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80104ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80104d2:	f003 0307 	and.w	r3, r3, #7
 80104d6:	2b07      	cmp	r3, #7
 80104d8:	d117      	bne.n	801050a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80104da:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80104de:	b2da      	uxtb	r2, r3
 80104e0:	4b26      	ldr	r3, [pc, #152]	; (801057c <ProcessMacCommands+0x394>)
 80104e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80104e6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80104ea:	b2da      	uxtb	r2, r3
 80104ec:	4b23      	ldr	r3, [pc, #140]	; (801057c <ProcessMacCommands+0x394>)
 80104ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80104f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104f4:	4a21      	ldr	r2, [pc, #132]	; (801057c <ProcessMacCommands+0x394>)
 80104f6:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80104f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104fa:	4a20      	ldr	r2, [pc, #128]	; (801057c <ProcessMacCommands+0x394>)
 80104fc:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80104fe:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8010502:	b2da      	uxtb	r2, r3
 8010504:	4b1d      	ldr	r3, [pc, #116]	; (801057c <ProcessMacCommands+0x394>)
 8010506:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 801050a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801050e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010512:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010516:	2201      	movs	r2, #1
 8010518:	4619      	mov	r1, r3
 801051a:	2005      	movs	r0, #5
 801051c:	f003 f928 	bl	8013770 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010520:	f7ff fe52 	bl	80101c8 <SetMlmeScheduleUplinkIndication>
                break;
 8010524:	bf00      	nop
 8010526:	e2ea      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010528:	23ff      	movs	r3, #255	; 0xff
 801052a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801052e:	4b12      	ldr	r3, [pc, #72]	; (8010578 <ProcessMacCommands+0x390>)
 8010530:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010534:	2b00      	cmp	r3, #0
 8010536:	d00d      	beq.n	8010554 <ProcessMacCommands+0x36c>
 8010538:	4b0f      	ldr	r3, [pc, #60]	; (8010578 <ProcessMacCommands+0x390>)
 801053a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d007      	beq.n	8010554 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010544:	4b0c      	ldr	r3, [pc, #48]	; (8010578 <ProcessMacCommands+0x390>)
 8010546:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4798      	blx	r3
 801054e:	4603      	mov	r3, r0
 8010550:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010554:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010558:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801055c:	787b      	ldrb	r3, [r7, #1]
 801055e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010562:	b2db      	uxtb	r3, r3
 8010564:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010568:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801056c:	2202      	movs	r2, #2
 801056e:	4619      	mov	r1, r3
 8010570:	2006      	movs	r0, #6
 8010572:	f003 f8fd 	bl	8013770 <LoRaMacCommandsAddCmd>
                break;
 8010576:	e2c2      	b.n	8010afe <ProcessMacCommands+0x916>
 8010578:	2000308c 	.word	0x2000308c
 801057c:	20003594 	.word	0x20003594
 8010580:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010584:	2303      	movs	r3, #3
 8010586:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801058a:	78fb      	ldrb	r3, [r7, #3]
 801058c:	1c5a      	adds	r2, r3, #1
 801058e:	70fa      	strb	r2, [r7, #3]
 8010590:	461a      	mov	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4413      	add	r3, r2
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	b25b      	sxtb	r3, r3
 801059a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801059e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80105a2:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80105a4:	78fb      	ldrb	r3, [r7, #3]
 80105a6:	1c5a      	adds	r2, r3, #1
 80105a8:	70fa      	strb	r2, [r7, #3]
 80105aa:	461a      	mov	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4413      	add	r3, r2
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80105b4:	78fb      	ldrb	r3, [r7, #3]
 80105b6:	1c5a      	adds	r2, r3, #1
 80105b8:	70fa      	strb	r2, [r7, #3]
 80105ba:	461a      	mov	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4413      	add	r3, r2
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	021a      	lsls	r2, r3, #8
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	4313      	orrs	r3, r2
 80105c8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80105ca:	78fb      	ldrb	r3, [r7, #3]
 80105cc:	1c5a      	adds	r2, r3, #1
 80105ce:	70fa      	strb	r2, [r7, #3]
 80105d0:	461a      	mov	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	4413      	add	r3, r2
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	041a      	lsls	r2, r3, #16
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	4313      	orrs	r3, r2
 80105de:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	2264      	movs	r2, #100	; 0x64
 80105e4:	fb02 f303 	mul.w	r3, r2, r3
 80105e8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80105ea:	2300      	movs	r3, #0
 80105ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80105ee:	78fb      	ldrb	r3, [r7, #3]
 80105f0:	1c5a      	adds	r2, r3, #1
 80105f2:	70fa      	strb	r2, [r7, #3]
 80105f4:	461a      	mov	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4413      	add	r3, r2
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	b25b      	sxtb	r3, r3
 80105fe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010602:	4b87      	ldr	r3, [pc, #540]	; (8010820 <ProcessMacCommands+0x638>)
 8010604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010608:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801060c:	4611      	mov	r1, r2
 801060e:	4618      	mov	r0, r3
 8010610:	f004 ffa8 	bl	8015564 <RegionNewChannelReq>
 8010614:	4603      	mov	r3, r0
 8010616:	b2db      	uxtb	r3, r3
 8010618:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801061c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010620:	b25b      	sxtb	r3, r3
 8010622:	2b00      	cmp	r3, #0
 8010624:	db0a      	blt.n	801063c <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 8010626:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801062a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801062e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010632:	2201      	movs	r2, #1
 8010634:	4619      	mov	r1, r3
 8010636:	2007      	movs	r0, #7
 8010638:	f003 f89a 	bl	8013770 <LoRaMacCommandsAddCmd>
                }
                break;
 801063c:	bf00      	nop
 801063e:	e25e      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010640:	78fb      	ldrb	r3, [r7, #3]
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	70fa      	strb	r2, [r7, #3]
 8010646:	461a      	mov	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4413      	add	r3, r2
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	f003 030f 	and.w	r3, r3, #15
 8010652:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8010656:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801065a:	2b00      	cmp	r3, #0
 801065c:	d104      	bne.n	8010668 <ProcessMacCommands+0x480>
                {
                    delay++;
 801065e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010662:	3301      	adds	r3, #1
 8010664:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010668:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801066c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010670:	fb02 f303 	mul.w	r3, r2, r3
 8010674:	461a      	mov	r2, r3
 8010676:	4b6a      	ldr	r3, [pc, #424]	; (8010820 <ProcessMacCommands+0x638>)
 8010678:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801067a:	4b69      	ldr	r3, [pc, #420]	; (8010820 <ProcessMacCommands+0x638>)
 801067c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801067e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010682:	4a67      	ldr	r2, [pc, #412]	; (8010820 <ProcessMacCommands+0x638>)
 8010684:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010686:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801068a:	2200      	movs	r2, #0
 801068c:	4619      	mov	r1, r3
 801068e:	2008      	movs	r0, #8
 8010690:	f003 f86e 	bl	8013770 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010694:	f7ff fd98 	bl	80101c8 <SetMlmeScheduleUplinkIndication>
                break;
 8010698:	e231      	b.n	8010afe <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801069a:	78fb      	ldrb	r3, [r7, #3]
 801069c:	1c5a      	adds	r2, r3, #1
 801069e:	70fa      	strb	r2, [r7, #3]
 80106a0:	461a      	mov	r2, r3
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4413      	add	r3, r2
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80106ac:	2300      	movs	r3, #0
 80106ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80106b2:	2300      	movs	r3, #0
 80106b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80106b8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80106bc:	f003 0320 	and.w	r3, r3, #32
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d002      	beq.n	80106ca <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80106c4:	2301      	movs	r3, #1
 80106c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80106ca:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80106ce:	f003 0310 	and.w	r3, r3, #16
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d002      	beq.n	80106dc <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80106d6:	2301      	movs	r3, #1
 80106d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80106dc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80106e0:	f003 030f 	and.w	r3, r3, #15
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80106ea:	4b4d      	ldr	r3, [pc, #308]	; (8010820 <ProcessMacCommands+0x638>)
 80106ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80106f4:	4611      	mov	r1, r2
 80106f6:	4618      	mov	r0, r3
 80106f8:	f004 ff4f 	bl	801559a <RegionTxParamSetupReq>
 80106fc:	4603      	mov	r3, r0
 80106fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010702:	d03a      	beq.n	801077a <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010704:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010708:	4b45      	ldr	r3, [pc, #276]	; (8010820 <ProcessMacCommands+0x638>)
 801070a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801070e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010712:	4b43      	ldr	r3, [pc, #268]	; (8010820 <ProcessMacCommands+0x638>)
 8010714:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010718:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801071c:	461a      	mov	r2, r3
 801071e:	4b41      	ldr	r3, [pc, #260]	; (8010824 <ProcessMacCommands+0x63c>)
 8010720:	5c9b      	ldrb	r3, [r3, r2]
 8010722:	4618      	mov	r0, r3
 8010724:	f7f0 f856 	bl	80007d4 <__aeabi_ui2f>
 8010728:	4603      	mov	r3, r0
 801072a:	4a3d      	ldr	r2, [pc, #244]	; (8010820 <ProcessMacCommands+0x638>)
 801072c:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801072e:	2302      	movs	r3, #2
 8010730:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010734:	4b3a      	ldr	r3, [pc, #232]	; (8010820 <ProcessMacCommands+0x638>)
 8010736:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801073a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801073e:	4b38      	ldr	r3, [pc, #224]	; (8010820 <ProcessMacCommands+0x638>)
 8010740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010744:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010748:	4611      	mov	r1, r2
 801074a:	4618      	mov	r0, r3
 801074c:	f004 fdc1 	bl	80152d2 <RegionGetPhyParam>
 8010750:	4603      	mov	r3, r0
 8010752:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010756:	b25a      	sxtb	r2, r3
 8010758:	4b31      	ldr	r3, [pc, #196]	; (8010820 <ProcessMacCommands+0x638>)
 801075a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801075e:	4293      	cmp	r3, r2
 8010760:	bfb8      	it	lt
 8010762:	4613      	movlt	r3, r2
 8010764:	b25a      	sxtb	r2, r3
 8010766:	4b2e      	ldr	r3, [pc, #184]	; (8010820 <ProcessMacCommands+0x638>)
 8010768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801076c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010770:	2200      	movs	r2, #0
 8010772:	4619      	mov	r1, r3
 8010774:	2009      	movs	r0, #9
 8010776:	f002 fffb 	bl	8013770 <LoRaMacCommandsAddCmd>
                }
                break;
 801077a:	bf00      	nop
 801077c:	e1bf      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801077e:	2303      	movs	r3, #3
 8010780:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010784:	78fb      	ldrb	r3, [r7, #3]
 8010786:	1c5a      	adds	r2, r3, #1
 8010788:	70fa      	strb	r2, [r7, #3]
 801078a:	461a      	mov	r2, r3
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4413      	add	r3, r2
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010796:	78fb      	ldrb	r3, [r7, #3]
 8010798:	1c5a      	adds	r2, r3, #1
 801079a:	70fa      	strb	r2, [r7, #3]
 801079c:	461a      	mov	r2, r3
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4413      	add	r3, r2
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80107a6:	78fb      	ldrb	r3, [r7, #3]
 80107a8:	1c5a      	adds	r2, r3, #1
 80107aa:	70fa      	strb	r2, [r7, #3]
 80107ac:	461a      	mov	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4413      	add	r3, r2
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	021a      	lsls	r2, r3, #8
 80107b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b8:	4313      	orrs	r3, r2
 80107ba:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80107bc:	78fb      	ldrb	r3, [r7, #3]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	70fa      	strb	r2, [r7, #3]
 80107c2:	461a      	mov	r2, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4413      	add	r3, r2
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	041a      	lsls	r2, r3, #16
 80107cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ce:	4313      	orrs	r3, r2
 80107d0:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80107d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d4:	2264      	movs	r2, #100	; 0x64
 80107d6:	fb02 f303 	mul.w	r3, r2, r3
 80107da:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80107dc:	4b10      	ldr	r3, [pc, #64]	; (8010820 <ProcessMacCommands+0x638>)
 80107de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107e2:	f107 0220 	add.w	r2, r7, #32
 80107e6:	4611      	mov	r1, r2
 80107e8:	4618      	mov	r0, r3
 80107ea:	f004 fef1 	bl	80155d0 <RegionDlChannelReq>
 80107ee:	4603      	mov	r3, r0
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80107f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80107fa:	b25b      	sxtb	r3, r3
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	db0c      	blt.n	801081a <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 8010800:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010804:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010808:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801080c:	2201      	movs	r2, #1
 801080e:	4619      	mov	r1, r3
 8010810:	200a      	movs	r0, #10
 8010812:	f002 ffad 	bl	8013770 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 8010816:	f7ff fcd7 	bl	80101c8 <SetMlmeScheduleUplinkIndication>
                }
                break;
 801081a:	bf00      	nop
 801081c:	e16f      	b.n	8010afe <ProcessMacCommands+0x916>
 801081e:	bf00      	nop
 8010820:	20003594 	.word	0x20003594
 8010824:	0801e670 	.word	0x0801e670
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010828:	200a      	movs	r0, #10
 801082a:	f003 fac9 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	f000 8164 	beq.w	8010afe <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010836:	210a      	movs	r1, #10
 8010838:	2000      	movs	r0, #0
 801083a:	f003 fa35 	bl	8013ca8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 801083e:	f107 0318 	add.w	r3, r7, #24
 8010842:	2200      	movs	r2, #0
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010848:	f107 0310 	add.w	r3, r7, #16
 801084c:	2200      	movs	r2, #0
 801084e:	601a      	str	r2, [r3, #0]
 8010850:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010852:	f107 0308 	add.w	r3, r7, #8
 8010856:	2200      	movs	r2, #0
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801085c:	78fb      	ldrb	r3, [r7, #3]
 801085e:	1c5a      	adds	r2, r3, #1
 8010860:	70fa      	strb	r2, [r7, #3]
 8010862:	461a      	mov	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4413      	add	r3, r2
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 801086c:	78fb      	ldrb	r3, [r7, #3]
 801086e:	1c5a      	adds	r2, r3, #1
 8010870:	70fa      	strb	r2, [r7, #3]
 8010872:	461a      	mov	r2, r3
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	4413      	add	r3, r2
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	021a      	lsls	r2, r3, #8
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	4313      	orrs	r3, r2
 8010880:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010882:	78fb      	ldrb	r3, [r7, #3]
 8010884:	1c5a      	adds	r2, r3, #1
 8010886:	70fa      	strb	r2, [r7, #3]
 8010888:	461a      	mov	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4413      	add	r3, r2
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	041a      	lsls	r2, r3, #16
 8010892:	69bb      	ldr	r3, [r7, #24]
 8010894:	4313      	orrs	r3, r2
 8010896:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010898:	78fb      	ldrb	r3, [r7, #3]
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	70fa      	strb	r2, [r7, #3]
 801089e:	461a      	mov	r2, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	4413      	add	r3, r2
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	061a      	lsls	r2, r3, #24
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	4313      	orrs	r3, r2
 80108ac:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80108ae:	78fb      	ldrb	r3, [r7, #3]
 80108b0:	1c5a      	adds	r2, r3, #1
 80108b2:	70fa      	strb	r2, [r7, #3]
 80108b4:	461a      	mov	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	4413      	add	r3, r2
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	b21b      	sxth	r3, r3
 80108be:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80108c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80108c4:	461a      	mov	r2, r3
 80108c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108ca:	fb02 f303 	mul.w	r3, r2, r3
 80108ce:	121b      	asrs	r3, r3, #8
 80108d0:	b21b      	sxth	r3, r3
 80108d2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80108d4:	f107 0310 	add.w	r3, r7, #16
 80108d8:	f107 0218 	add.w	r2, r7, #24
 80108dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108e0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80108e4:	693a      	ldr	r2, [r7, #16]
 80108e6:	4b8c      	ldr	r3, [pc, #560]	; (8010b18 <ProcessMacCommands+0x930>)
 80108e8:	4413      	add	r3, r2
 80108ea:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80108ec:	f107 0308 	add.w	r3, r7, #8
 80108f0:	4618      	mov	r0, r3
 80108f2:	f00c fa49 	bl	801cd88 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80108f6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80108fa:	4b88      	ldr	r3, [pc, #544]	; (8010b1c <ProcessMacCommands+0x934>)
 80108fc:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8010900:	9200      	str	r2, [sp, #0]
 8010902:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8010906:	f107 0210 	add.w	r2, r7, #16
 801090a:	ca06      	ldmia	r2, {r1, r2}
 801090c:	f00c f9d5 	bl	801ccba <SysTimeSub>
 8010910:	f107 0010 	add.w	r0, r7, #16
 8010914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801091a:	f107 0208 	add.w	r2, r7, #8
 801091e:	ca06      	ldmia	r2, {r1, r2}
 8010920:	f00c f992 	bl	801cc48 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010924:	f107 0310 	add.w	r3, r7, #16
 8010928:	e893 0003 	ldmia.w	r3, {r0, r1}
 801092c:	f00c f9fe 	bl	801cd2c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010930:	f002 fde3 	bl	80134fa <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010934:	4b79      	ldr	r3, [pc, #484]	; (8010b1c <ProcessMacCommands+0x934>)
 8010936:	2201      	movs	r2, #1
 8010938:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 801093c:	e0df      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801093e:	200d      	movs	r0, #13
 8010940:	f003 fa3e 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	f000 80d9 	beq.w	8010afe <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801094c:	210d      	movs	r1, #13
 801094e:	2000      	movs	r0, #0
 8010950:	f003 f9aa 	bl	8013ca8 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010954:	4b71      	ldr	r3, [pc, #452]	; (8010b1c <ProcessMacCommands+0x934>)
 8010956:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801095a:	2b04      	cmp	r3, #4
 801095c:	f000 80cf 	beq.w	8010afe <ProcessMacCommands+0x916>
 8010960:	4b6e      	ldr	r3, [pc, #440]	; (8010b1c <ProcessMacCommands+0x934>)
 8010962:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8010966:	2b05      	cmp	r3, #5
 8010968:	f000 80c9 	beq.w	8010afe <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801096c:	f002 fda6 	bl	80134bc <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010970:	e0c5      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010972:	2303      	movs	r3, #3
 8010974:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8010978:	2300      	movs	r3, #0
 801097a:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801097c:	78fb      	ldrb	r3, [r7, #3]
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	70fa      	strb	r2, [r7, #3]
 8010982:	461a      	mov	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	4413      	add	r3, r2
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801098c:	78fb      	ldrb	r3, [r7, #3]
 801098e:	1c5a      	adds	r2, r3, #1
 8010990:	70fa      	strb	r2, [r7, #3]
 8010992:	461a      	mov	r2, r3
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4413      	add	r3, r2
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	021b      	lsls	r3, r3, #8
 801099c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801099e:	4313      	orrs	r3, r2
 80109a0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80109a2:	78fb      	ldrb	r3, [r7, #3]
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	70fa      	strb	r2, [r7, #3]
 80109a8:	461a      	mov	r2, r3
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4413      	add	r3, r2
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	041b      	lsls	r3, r3, #16
 80109b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80109b4:	4313      	orrs	r3, r2
 80109b6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80109b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109ba:	2264      	movs	r2, #100	; 0x64
 80109bc:	fb02 f303 	mul.w	r3, r2, r3
 80109c0:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80109c2:	78fb      	ldrb	r3, [r7, #3]
 80109c4:	1c5a      	adds	r2, r3, #1
 80109c6:	70fa      	strb	r2, [r7, #3]
 80109c8:	461a      	mov	r2, r3
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4413      	add	r3, r2
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	f003 030f 	and.w	r3, r3, #15
 80109d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80109d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80109dc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80109de:	4618      	mov	r0, r3
 80109e0:	f002 fd72 	bl	80134c8 <LoRaMacClassBPingSlotChannelReq>
 80109e4:	4603      	mov	r3, r0
 80109e6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80109ea:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80109ee:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80109f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80109f6:	2201      	movs	r2, #1
 80109f8:	4619      	mov	r1, r3
 80109fa:	2011      	movs	r0, #17
 80109fc:	f002 feb8 	bl	8013770 <LoRaMacCommandsAddCmd>
                break;
 8010a00:	e07d      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010a02:	200e      	movs	r0, #14
 8010a04:	f003 f9dc 	bl	8013dc0 <LoRaMacConfirmQueueIsCmdActive>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d077      	beq.n	8010afe <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010a0e:	210e      	movs	r1, #14
 8010a10:	2000      	movs	r0, #0
 8010a12:	f003 f949 	bl	8013ca8 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8010a16:	2300      	movs	r3, #0
 8010a18:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010a22:	78fb      	ldrb	r3, [r7, #3]
 8010a24:	1c5a      	adds	r2, r3, #1
 8010a26:	70fa      	strb	r2, [r7, #3]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010a34:	78fb      	ldrb	r3, [r7, #3]
 8010a36:	1c5a      	adds	r2, r3, #1
 8010a38:	70fa      	strb	r2, [r7, #3]
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	4413      	add	r3, r2
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	021b      	lsls	r3, r3, #8
 8010a44:	b21a      	sxth	r2, r3
 8010a46:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	b21b      	sxth	r3, r3
 8010a4e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010a52:	78fb      	ldrb	r3, [r7, #3]
 8010a54:	1c5a      	adds	r2, r3, #1
 8010a56:	70fa      	strb	r2, [r7, #3]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010a64:	4b2e      	ldr	r3, [pc, #184]	; (8010b20 <ProcessMacCommands+0x938>)
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8010a6c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8010a70:	4618      	mov	r0, r3
 8010a72:	f002 fd35 	bl	80134e0 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010a76:	e042      	b.n	8010afe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010a7e:	78fb      	ldrb	r3, [r7, #3]
 8010a80:	1c5a      	adds	r2, r3, #1
 8010a82:	70fa      	strb	r2, [r7, #3]
 8010a84:	461a      	mov	r2, r3
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4413      	add	r3, r2
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010a90:	78fb      	ldrb	r3, [r7, #3]
 8010a92:	1c5a      	adds	r2, r3, #1
 8010a94:	70fa      	strb	r2, [r7, #3]
 8010a96:	461a      	mov	r2, r3
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	021b      	lsls	r3, r3, #8
 8010aa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010aaa:	78fb      	ldrb	r3, [r7, #3]
 8010aac:	1c5a      	adds	r2, r3, #1
 8010aae:	70fa      	strb	r2, [r7, #3]
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	041b      	lsls	r3, r3, #16
 8010aba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8010ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ac8:	2264      	movs	r2, #100	; 0x64
 8010aca:	fb02 f303 	mul.w	r3, r2, r3
 8010ace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010ad2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010ad6:	f002 fd16 	bl	8013506 <LoRaMacClassBBeaconFreqReq>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d003      	beq.n	8010ae8 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8010ae6:	e002      	b.n	8010aee <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010aee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010af2:	2201      	movs	r2, #1
 8010af4:	4619      	mov	r1, r3
 8010af6:	2013      	movs	r0, #19
 8010af8:	f002 fe3a 	bl	8013770 <LoRaMacCommandsAddCmd>
                }
                break;
 8010afc:	bf00      	nop
    while( macIndex < commandsSize )
 8010afe:	78fa      	ldrb	r2, [r7, #3]
 8010b00:	78bb      	ldrb	r3, [r7, #2]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	f4ff ab88 	bcc.w	8010218 <ProcessMacCommands+0x30>
 8010b08:	e002      	b.n	8010b10 <ProcessMacCommands+0x928>
            return;
 8010b0a:	bf00      	nop
 8010b0c:	e000      	b.n	8010b10 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010b0e:	bf00      	nop
        }
    }
}
 8010b10:	378c      	adds	r7, #140	; 0x8c
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd90      	pop	{r4, r7, pc}
 8010b16:	bf00      	nop
 8010b18:	12d53d80 	.word	0x12d53d80
 8010b1c:	2000308c 	.word	0x2000308c
 8010b20:	20003bac 	.word	0x20003bac

08010b24 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b08e      	sub	sp, #56	; 0x38
 8010b28:	af02      	add	r7, sp, #8
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	607a      	str	r2, [r7, #4]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	460b      	mov	r3, r1
 8010b32:	72fb      	strb	r3, [r7, #11]
 8010b34:	4613      	mov	r3, r2
 8010b36:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b38:	2303      	movs	r3, #3
 8010b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b3e:	4b65      	ldr	r3, [pc, #404]	; (8010cd4 <Send+0x1b0>)
 8010b40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010b48:	4b62      	ldr	r3, [pc, #392]	; (8010cd4 <Send+0x1b0>)
 8010b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010b4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010b52:	4b60      	ldr	r3, [pc, #384]	; (8010cd4 <Send+0x1b0>)
 8010b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b56:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b58:	4b5e      	ldr	r3, [pc, #376]	; (8010cd4 <Send+0x1b0>)
 8010b5a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d101      	bne.n	8010b66 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010b62:	2307      	movs	r3, #7
 8010b64:	e0b1      	b.n	8010cca <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8010b66:	4b5b      	ldr	r3, [pc, #364]	; (8010cd4 <Send+0x1b0>)
 8010b68:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d102      	bne.n	8010b76 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010b70:	4b58      	ldr	r3, [pc, #352]	; (8010cd4 <Send+0x1b0>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010b7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010b80:	f36f 0303 	bfc	r3, #0, #4
 8010b84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010b88:	4b52      	ldr	r3, [pc, #328]	; (8010cd4 <Send+0x1b0>)
 8010b8a:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 8010b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010b92:	f362 13c7 	bfi	r3, r2, #7, #1
 8010b96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010b9a:	4b4e      	ldr	r3, [pc, #312]	; (8010cd4 <Send+0x1b0>)
 8010b9c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d106      	bne.n	8010bb2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010ba8:	f043 0310 	orr.w	r3, r3, #16
 8010bac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010bb0:	e005      	b.n	8010bbe <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010bb6:	f36f 1304 	bfc	r3, #4, #1
 8010bba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010bbe:	4b45      	ldr	r3, [pc, #276]	; (8010cd4 <Send+0x1b0>)
 8010bc0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d005      	beq.n	8010bd4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010bc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010bcc:	f043 0320 	orr.w	r3, r3, #32
 8010bd0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010bd4:	4b3f      	ldr	r3, [pc, #252]	; (8010cd4 <Send+0x1b0>)
 8010bd6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010bda:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8010bdc:	2301      	movs	r3, #1
 8010bde:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010be0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010be4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	bf14      	ite	ne
 8010bee:	2301      	movne	r3, #1
 8010bf0:	2300      	moveq	r3, #0
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010bf6:	4b37      	ldr	r3, [pc, #220]	; (8010cd4 <Send+0x1b0>)
 8010bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bfa:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010bfc:	4b36      	ldr	r3, [pc, #216]	; (8010cd8 <Send+0x1b4>)
 8010bfe:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010c02:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010c04:	4b34      	ldr	r3, [pc, #208]	; (8010cd8 <Send+0x1b4>)
 8010c06:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010c0a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010c0c:	4b31      	ldr	r3, [pc, #196]	; (8010cd4 <Send+0x1b0>)
 8010c0e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010c12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010c16:	4b2f      	ldr	r3, [pc, #188]	; (8010cd4 <Send+0x1b0>)
 8010c18:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010c1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010c20:	4b2c      	ldr	r3, [pc, #176]	; (8010cd4 <Send+0x1b0>)
 8010c22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010c2a:	4b2a      	ldr	r3, [pc, #168]	; (8010cd4 <Send+0x1b0>)
 8010c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010c34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c38:	f107 0014 	add.w	r0, r7, #20
 8010c3c:	4a27      	ldr	r2, [pc, #156]	; (8010cdc <Send+0x1b8>)
 8010c3e:	4928      	ldr	r1, [pc, #160]	; (8010ce0 <Send+0x1bc>)
 8010c40:	f002 fb7c 	bl	801333c <LoRaMacAdrCalcNext>
 8010c44:	4603      	mov	r3, r0
 8010c46:	461a      	mov	r2, r3
 8010c48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010c4c:	f362 1386 	bfi	r3, r2, #6, #1
 8010c50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010c54:	7afa      	ldrb	r2, [r7, #11]
 8010c56:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010c5a:	893b      	ldrh	r3, [r7, #8]
 8010c5c:	9300      	str	r3, [sp, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	68f8      	ldr	r0, [r7, #12]
 8010c62:	f000 fc21 	bl	80114a8 <PrepareFrame>
 8010c66:	4603      	mov	r3, r0
 8010c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d003      	beq.n	8010c7c <Send+0x158>
 8010c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c78:	2b0a      	cmp	r3, #10
 8010c7a:	d107      	bne.n	8010c8c <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010c7c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010c80:	4618      	mov	r0, r3
 8010c82:	f000 f96d 	bl	8010f60 <ScheduleTx>
 8010c86:	4603      	mov	r3, r0
 8010c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00a      	beq.n	8010caa <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010c94:	4a0f      	ldr	r2, [pc, #60]	; (8010cd4 <Send+0x1b0>)
 8010c96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010c9a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010c9e:	4a0d      	ldr	r2, [pc, #52]	; (8010cd4 <Send+0x1b0>)
 8010ca0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ca4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010ca8:	e00d      	b.n	8010cc6 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010caa:	4b0a      	ldr	r3, [pc, #40]	; (8010cd4 <Send+0x1b0>)
 8010cac:	2200      	movs	r2, #0
 8010cae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb4:	4a07      	ldr	r2, [pc, #28]	; (8010cd4 <Send+0x1b0>)
 8010cb6:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010cb8:	f002 fdd2 	bl	8013860 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010cc2:	2313      	movs	r3, #19
 8010cc4:	e001      	b.n	8010cca <Send+0x1a6>
        }
    }
    return status;
 8010cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3730      	adds	r7, #48	; 0x30
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20003594 	.word	0x20003594
 8010cd8:	2000308c 	.word	0x2000308c
 8010cdc:	200035cc 	.word	0x200035cc
 8010ce0:	200035cd 	.word	0x200035cd

08010ce4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010cfa:	79fb      	ldrb	r3, [r7, #7]
 8010cfc:	2bff      	cmp	r3, #255	; 0xff
 8010cfe:	d129      	bne.n	8010d54 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010d00:	2000      	movs	r0, #0
 8010d02:	f7ff f941 	bl	800ff88 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010d06:	4b1a      	ldr	r3, [pc, #104]	; (8010d70 <SendReJoinReq+0x8c>)
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010d0e:	4b18      	ldr	r3, [pc, #96]	; (8010d70 <SendReJoinReq+0x8c>)
 8010d10:	4a18      	ldr	r2, [pc, #96]	; (8010d74 <SendReJoinReq+0x90>)
 8010d12:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010d16:	4b16      	ldr	r3, [pc, #88]	; (8010d70 <SendReJoinReq+0x8c>)
 8010d18:	22ff      	movs	r2, #255	; 0xff
 8010d1a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010d1e:	7b3b      	ldrb	r3, [r7, #12]
 8010d20:	f36f 1347 	bfc	r3, #5, #3
 8010d24:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010d26:	7b3a      	ldrb	r2, [r7, #12]
 8010d28:	4b11      	ldr	r3, [pc, #68]	; (8010d70 <SendReJoinReq+0x8c>)
 8010d2a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010d2e:	f7fc fc8f 	bl	800d650 <SecureElementGetJoinEui>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2208      	movs	r2, #8
 8010d36:	4619      	mov	r1, r3
 8010d38:	480f      	ldr	r0, [pc, #60]	; (8010d78 <SendReJoinReq+0x94>)
 8010d3a:	f008 f99a 	bl	8019072 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010d3e:	f7fc fc65 	bl	800d60c <SecureElementGetDevEui>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2208      	movs	r2, #8
 8010d46:	4619      	mov	r1, r3
 8010d48:	480c      	ldr	r0, [pc, #48]	; (8010d7c <SendReJoinReq+0x98>)
 8010d4a:	f008 f992 	bl	8019072 <memcpy1>

            allowDelayedTx = false;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	73fb      	strb	r3, [r7, #15]

            break;
 8010d52:	e002      	b.n	8010d5a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010d54:	2302      	movs	r3, #2
 8010d56:	73bb      	strb	r3, [r7, #14]
            break;
 8010d58:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010d5a:	7bfb      	ldrb	r3, [r7, #15]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 f8ff 	bl	8010f60 <ScheduleTx>
 8010d62:	4603      	mov	r3, r0
 8010d64:	73bb      	strb	r3, [r7, #14]
    return status;
 8010d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	2000308c 	.word	0x2000308c
 8010d74:	2000308e 	.word	0x2000308e
 8010d78:	2000319a 	.word	0x2000319a
 8010d7c:	200031a2 	.word	0x200031a2

08010d80 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010d84:	f002 fb49 	bl	801341a <LoRaMacClassBIsBeaconExpected>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d001      	beq.n	8010d92 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010d8e:	230e      	movs	r3, #14
 8010d90:	e013      	b.n	8010dba <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010d92:	4b0b      	ldr	r3, [pc, #44]	; (8010dc0 <CheckForClassBCollision+0x40>)
 8010d94:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d10d      	bne.n	8010db8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010d9c:	f002 fb44 	bl	8013428 <LoRaMacClassBIsPingExpected>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d001      	beq.n	8010daa <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010da6:	230f      	movs	r3, #15
 8010da8:	e007      	b.n	8010dba <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010daa:	f002 fb44 	bl	8013436 <LoRaMacClassBIsMulticastExpected>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d001      	beq.n	8010db8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010db4:	230f      	movs	r3, #15
 8010db6:	e000      	b.n	8010dba <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010db8:	2300      	movs	r3, #0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20003594 	.word	0x20003594

08010dc4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010dc4:	b590      	push	{r4, r7, lr}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010dca:	4b2d      	ldr	r3, [pc, #180]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dcc:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010dd0:	4b2b      	ldr	r3, [pc, #172]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dd2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010dd6:	4b2a      	ldr	r3, [pc, #168]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dd8:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8010ddc:	4b28      	ldr	r3, [pc, #160]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dde:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010de2:	4b27      	ldr	r3, [pc, #156]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010de4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010de8:	b25b      	sxtb	r3, r3
 8010dea:	f004 fc6d 	bl	80156c8 <RegionApplyDrOffset>
 8010dee:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010df0:	b259      	sxtb	r1, r3
 8010df2:	4b23      	ldr	r3, [pc, #140]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010df4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010df8:	4b21      	ldr	r3, [pc, #132]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dfc:	4821      	ldr	r0, [pc, #132]	; (8010e84 <ComputeRxWindowParameters+0xc0>)
 8010dfe:	9000      	str	r0, [sp, #0]
 8010e00:	4620      	mov	r0, r4
 8010e02:	f004 fb0a 	bl	801541a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010e06:	4b1e      	ldr	r3, [pc, #120]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e08:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010e0c:	4b1c      	ldr	r3, [pc, #112]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e0e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010e12:	b259      	sxtb	r1, r3
 8010e14:	4b1a      	ldr	r3, [pc, #104]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e16:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010e1a:	4b19      	ldr	r3, [pc, #100]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e1e:	4c1a      	ldr	r4, [pc, #104]	; (8010e88 <ComputeRxWindowParameters+0xc4>)
 8010e20:	9400      	str	r4, [sp, #0]
 8010e22:	f004 fafa 	bl	801541a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010e26:	4b16      	ldr	r3, [pc, #88]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e2a:	4a18      	ldr	r2, [pc, #96]	; (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e2c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010e30:	4413      	add	r3, r2
 8010e32:	4a16      	ldr	r2, [pc, #88]	; (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e34:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010e38:	4b11      	ldr	r3, [pc, #68]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e3c:	4a13      	ldr	r2, [pc, #76]	; (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e3e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8010e42:	4413      	add	r3, r2
 8010e44:	4a11      	ldr	r2, [pc, #68]	; (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e46:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e4a:	4b0d      	ldr	r3, [pc, #52]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e4c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d111      	bne.n	8010e78 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010e54:	4b0a      	ldr	r3, [pc, #40]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e58:	4a0c      	ldr	r2, [pc, #48]	; (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e5a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010e5e:	4413      	add	r3, r2
 8010e60:	4a0a      	ldr	r2, [pc, #40]	; (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e62:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010e66:	4b06      	ldr	r3, [pc, #24]	; (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e6a:	4a08      	ldr	r2, [pc, #32]	; (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e6c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8010e70:	4413      	add	r3, r2
 8010e72:	4a06      	ldr	r2, [pc, #24]	; (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e74:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010e78:	bf00      	nop
 8010e7a:	3704      	adds	r7, #4
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd90      	pop	{r4, r7, pc}
 8010e80:	20003594 	.word	0x20003594
 8010e84:	20003444 	.word	0x20003444
 8010e88:	20003458 	.word	0x20003458
 8010e8c:	2000308c 	.word	0x2000308c

08010e90 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010e96:	2300      	movs	r3, #0
 8010e98:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010e9a:	4b13      	ldr	r3, [pc, #76]	; (8010ee8 <VerifyTxFrame+0x58>)
 8010e9c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d01b      	beq.n	8010edc <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010ea4:	1d3b      	adds	r3, r7, #4
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f002 fd20 	bl	80138ec <LoRaMacCommandsGetSizeSerializedCmds>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010eb2:	2313      	movs	r3, #19
 8010eb4:	e013      	b.n	8010ede <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010eb6:	4b0d      	ldr	r3, [pc, #52]	; (8010eec <VerifyTxFrame+0x5c>)
 8010eb8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010ebc:	4a0a      	ldr	r2, [pc, #40]	; (8010ee8 <VerifyTxFrame+0x58>)
 8010ebe:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	b2d2      	uxtb	r2, r2
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7ff f956 	bl	8010178 <ValidatePayloadLength>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	f083 0301 	eor.w	r3, r3, #1
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010ed8:	2308      	movs	r3, #8
 8010eda:	e000      	b.n	8010ede <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	20003594 	.word	0x20003594
 8010eec:	2000308c 	.word	0x2000308c

08010ef0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010ef6:	4b18      	ldr	r3, [pc, #96]	; (8010f58 <SerializeTxFrame+0x68>)
 8010ef8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d002      	beq.n	8010f06 <SerializeTxFrame+0x16>
 8010f00:	2b04      	cmp	r3, #4
 8010f02:	d011      	beq.n	8010f28 <SerializeTxFrame+0x38>
 8010f04:	e021      	b.n	8010f4a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010f06:	4815      	ldr	r0, [pc, #84]	; (8010f5c <SerializeTxFrame+0x6c>)
 8010f08:	f004 f855 	bl	8014fb6 <LoRaMacSerializerJoinRequest>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010f10:	79fb      	ldrb	r3, [r7, #7]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d001      	beq.n	8010f1a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f16:	2311      	movs	r3, #17
 8010f18:	e01a      	b.n	8010f50 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010f1a:	4b0f      	ldr	r3, [pc, #60]	; (8010f58 <SerializeTxFrame+0x68>)
 8010f1c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	4b0d      	ldr	r3, [pc, #52]	; (8010f58 <SerializeTxFrame+0x68>)
 8010f24:	801a      	strh	r2, [r3, #0]
            break;
 8010f26:	e012      	b.n	8010f4e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010f28:	480c      	ldr	r0, [pc, #48]	; (8010f5c <SerializeTxFrame+0x6c>)
 8010f2a:	f004 f8c6 	bl	80150ba <LoRaMacSerializerData>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010f32:	79fb      	ldrb	r3, [r7, #7]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d001      	beq.n	8010f3c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f38:	2311      	movs	r3, #17
 8010f3a:	e009      	b.n	8010f50 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010f3c:	4b06      	ldr	r3, [pc, #24]	; (8010f58 <SerializeTxFrame+0x68>)
 8010f3e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	4b04      	ldr	r3, [pc, #16]	; (8010f58 <SerializeTxFrame+0x68>)
 8010f46:	801a      	strh	r2, [r3, #0]
            break;
 8010f48:	e001      	b.n	8010f4e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	e000      	b.n	8010f50 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	2000308c 	.word	0x2000308c
 8010f5c:	20003194 	.word	0x20003194

08010f60 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b090      	sub	sp, #64	; 0x40
 8010f64:	af02      	add	r7, sp, #8
 8010f66:	4603      	mov	r3, r0
 8010f68:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f6a:	2303      	movs	r3, #3
 8010f6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010f70:	f7ff ff06 	bl	8010d80 <CheckForClassBCollision>
 8010f74:	4603      	mov	r3, r0
 8010f76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d002      	beq.n	8010f88 <ScheduleTx+0x28>
    {
        return status;
 8010f82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f86:	e08f      	b.n	80110a8 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010f88:	f000 f8fa 	bl	8011180 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010f8c:	f7ff ffb0 	bl	8010ef0 <SerializeTxFrame>
 8010f90:	4603      	mov	r3, r0
 8010f92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010f96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d002      	beq.n	8010fa4 <ScheduleTx+0x44>
    {
        return status;
 8010f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fa2:	e081      	b.n	80110a8 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010fa4:	4b42      	ldr	r3, [pc, #264]	; (80110b0 <ScheduleTx+0x150>)
 8010fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fa8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010faa:	4b41      	ldr	r3, [pc, #260]	; (80110b0 <ScheduleTx+0x150>)
 8010fac:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010fb0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010fb2:	4b3f      	ldr	r3, [pc, #252]	; (80110b0 <ScheduleTx+0x150>)
 8010fb4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8010fb8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f00b ff1a 	bl	801cdf8 <SysTimeGetMcuTime>
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	4b3a      	ldr	r3, [pc, #232]	; (80110b0 <ScheduleTx+0x150>)
 8010fc8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8010fcc:	9200      	str	r2, [sp, #0]
 8010fce:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8010fd2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010fd6:	ca06      	ldmia	r2, {r1, r2}
 8010fd8:	f00b fe6f 	bl	801ccba <SysTimeSub>
 8010fdc:	f107 0320 	add.w	r3, r7, #32
 8010fe0:	463a      	mov	r2, r7
 8010fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fe6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010fea:	4b31      	ldr	r3, [pc, #196]	; (80110b0 <ScheduleTx+0x150>)
 8010fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fee:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010ffa:	4b2e      	ldr	r3, [pc, #184]	; (80110b4 <ScheduleTx+0x154>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011000:	4b2b      	ldr	r3, [pc, #172]	; (80110b0 <ScheduleTx+0x150>)
 8011002:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8011006:	2b00      	cmp	r3, #0
 8011008:	d104      	bne.n	8011014 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 801100a:	2301      	movs	r3, #1
 801100c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8011010:	2300      	movs	r3, #0
 8011012:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011014:	4b26      	ldr	r3, [pc, #152]	; (80110b0 <ScheduleTx+0x150>)
 8011016:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801101a:	f107 0114 	add.w	r1, r7, #20
 801101e:	4b26      	ldr	r3, [pc, #152]	; (80110b8 <ScheduleTx+0x158>)
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	4b26      	ldr	r3, [pc, #152]	; (80110bc <ScheduleTx+0x15c>)
 8011024:	4a26      	ldr	r2, [pc, #152]	; (80110c0 <ScheduleTx+0x160>)
 8011026:	f004 fb14 	bl	8015652 <RegionNextChannel>
 801102a:	4603      	mov	r3, r0
 801102c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8011030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011034:	2b00      	cmp	r3, #0
 8011036:	d022      	beq.n	801107e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011038:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801103c:	2b0b      	cmp	r3, #11
 801103e:	d11b      	bne.n	8011078 <ScheduleTx+0x118>
 8011040:	7bfb      	ldrb	r3, [r7, #15]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d018      	beq.n	8011078 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011046:	4b1b      	ldr	r3, [pc, #108]	; (80110b4 <ScheduleTx+0x154>)
 8011048:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801104c:	2b00      	cmp	r3, #0
 801104e:	d011      	beq.n	8011074 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011050:	4b18      	ldr	r3, [pc, #96]	; (80110b4 <ScheduleTx+0x154>)
 8011052:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011056:	f043 0320 	orr.w	r3, r3, #32
 801105a:	4a16      	ldr	r2, [pc, #88]	; (80110b4 <ScheduleTx+0x154>)
 801105c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011060:	4b14      	ldr	r3, [pc, #80]	; (80110b4 <ScheduleTx+0x154>)
 8011062:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8011066:	4619      	mov	r1, r3
 8011068:	4816      	ldr	r0, [pc, #88]	; (80110c4 <ScheduleTx+0x164>)
 801106a:	f00c f86f 	bl	801d14c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801106e:	4815      	ldr	r0, [pc, #84]	; (80110c4 <ScheduleTx+0x164>)
 8011070:	f00b ff8e 	bl	801cf90 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011074:	2300      	movs	r3, #0
 8011076:	e017      	b.n	80110a8 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801107c:	e014      	b.n	80110a8 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801107e:	f7ff fea1 	bl	8010dc4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011082:	f7ff ff05 	bl	8010e90 <VerifyTxFrame>
 8011086:	4603      	mov	r3, r0
 8011088:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801108c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011090:	2b00      	cmp	r3, #0
 8011092:	d002      	beq.n	801109a <ScheduleTx+0x13a>
    {
        return status;
 8011094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011098:	e006      	b.n	80110a8 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801109a:	4b06      	ldr	r3, [pc, #24]	; (80110b4 <ScheduleTx+0x154>)
 801109c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80110a0:	4618      	mov	r0, r3
 80110a2:	f000 fb1d 	bl	80116e0 <SendFrameOnChannel>
 80110a6:	4603      	mov	r3, r0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3738      	adds	r7, #56	; 0x38
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	20003594 	.word	0x20003594
 80110b4:	2000308c 	.word	0x2000308c
 80110b8:	200035c4 	.word	0x200035c4
 80110bc:	20003510 	.word	0x20003510
 80110c0:	200034a1 	.word	0x200034a1
 80110c4:	200033f4 	.word	0x200033f4

080110c8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	4603      	mov	r3, r0
 80110d0:	460a      	mov	r2, r1
 80110d2:	71fb      	strb	r3, [r7, #7]
 80110d4:	4613      	mov	r3, r2
 80110d6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80110d8:	2313      	movs	r3, #19
 80110da:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80110dc:	2300      	movs	r3, #0
 80110de:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80110e0:	4b25      	ldr	r3, [pc, #148]	; (8011178 <SecureFrame+0xb0>)
 80110e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d002      	beq.n	80110f0 <SecureFrame+0x28>
 80110ea:	2b04      	cmp	r3, #4
 80110ec:	d011      	beq.n	8011112 <SecureFrame+0x4a>
 80110ee:	e03b      	b.n	8011168 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80110f0:	4822      	ldr	r0, [pc, #136]	; (801117c <SecureFrame+0xb4>)
 80110f2:	f003 fb29 	bl	8014748 <LoRaMacCryptoPrepareJoinRequest>
 80110f6:	4603      	mov	r3, r0
 80110f8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80110fa:	7bfb      	ldrb	r3, [r7, #15]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d001      	beq.n	8011104 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011100:	2311      	movs	r3, #17
 8011102:	e034      	b.n	801116e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011104:	4b1c      	ldr	r3, [pc, #112]	; (8011178 <SecureFrame+0xb0>)
 8011106:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801110a:	b29a      	uxth	r2, r3
 801110c:	4b1a      	ldr	r3, [pc, #104]	; (8011178 <SecureFrame+0xb0>)
 801110e:	801a      	strh	r2, [r3, #0]
            break;
 8011110:	e02c      	b.n	801116c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011112:	f107 0308 	add.w	r3, r7, #8
 8011116:	4618      	mov	r0, r3
 8011118:	f003 fa30 	bl	801457c <LoRaMacCryptoGetFCntUp>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d001      	beq.n	8011126 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011122:	2312      	movs	r3, #18
 8011124:	e023      	b.n	801116e <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011126:	4b14      	ldr	r3, [pc, #80]	; (8011178 <SecureFrame+0xb0>)
 8011128:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801112c:	2b00      	cmp	r3, #0
 801112e:	d104      	bne.n	801113a <SecureFrame+0x72>
 8011130:	4b11      	ldr	r3, [pc, #68]	; (8011178 <SecureFrame+0xb0>)
 8011132:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011136:	2b01      	cmp	r3, #1
 8011138:	d902      	bls.n	8011140 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	3b01      	subs	r3, #1
 801113e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011140:	68b8      	ldr	r0, [r7, #8]
 8011142:	79ba      	ldrb	r2, [r7, #6]
 8011144:	79f9      	ldrb	r1, [r7, #7]
 8011146:	4b0d      	ldr	r3, [pc, #52]	; (801117c <SecureFrame+0xb4>)
 8011148:	f003 fc16 	bl	8014978 <LoRaMacCryptoSecureMessage>
 801114c:	4603      	mov	r3, r0
 801114e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011150:	7bfb      	ldrb	r3, [r7, #15]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011156:	2311      	movs	r3, #17
 8011158:	e009      	b.n	801116e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801115a:	4b07      	ldr	r3, [pc, #28]	; (8011178 <SecureFrame+0xb0>)
 801115c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011160:	b29a      	uxth	r2, r3
 8011162:	4b05      	ldr	r3, [pc, #20]	; (8011178 <SecureFrame+0xb0>)
 8011164:	801a      	strh	r2, [r3, #0]
            break;
 8011166:	e001      	b.n	801116c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011168:	2303      	movs	r3, #3
 801116a:	e000      	b.n	801116e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 801116c:	2300      	movs	r3, #0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	2000308c 	.word	0x2000308c
 801117c:	20003194 	.word	0x20003194

08011180 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011180:	b480      	push	{r7}
 8011182:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011184:	4b09      	ldr	r3, [pc, #36]	; (80111ac <CalculateBackOff+0x2c>)
 8011186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011188:	2b00      	cmp	r3, #0
 801118a:	d10a      	bne.n	80111a2 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801118c:	4b07      	ldr	r3, [pc, #28]	; (80111ac <CalculateBackOff+0x2c>)
 801118e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8011192:	3b01      	subs	r3, #1
 8011194:	4a06      	ldr	r2, [pc, #24]	; (80111b0 <CalculateBackOff+0x30>)
 8011196:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 801119a:	fb02 f303 	mul.w	r3, r2, r3
 801119e:	4a03      	ldr	r2, [pc, #12]	; (80111ac <CalculateBackOff+0x2c>)
 80111a0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80111a2:	bf00      	nop
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bc80      	pop	{r7}
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	20003594 	.word	0x20003594
 80111b0:	2000308c 	.word	0x2000308c

080111b4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	4603      	mov	r3, r0
 80111bc:	7139      	strb	r1, [r7, #4]
 80111be:	71fb      	strb	r3, [r7, #7]
 80111c0:	4613      	mov	r3, r2
 80111c2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80111c4:	79fb      	ldrb	r3, [r7, #7]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d002      	beq.n	80111d0 <RemoveMacCommands+0x1c>
 80111ca:	79fb      	ldrb	r3, [r7, #7]
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d10d      	bne.n	80111ec <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80111d0:	79bb      	ldrb	r3, [r7, #6]
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d108      	bne.n	80111e8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80111d6:	793b      	ldrb	r3, [r7, #4]
 80111d8:	f003 0320 	and.w	r3, r3, #32
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d004      	beq.n	80111ec <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80111e2:	f002 fb61 	bl	80138a8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80111e6:	e001      	b.n	80111ec <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80111e8:	f002 fb5e 	bl	80138a8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80111ec:	bf00      	nop
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}

080111f4 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 80111f4:	b5b0      	push	{r4, r5, r7, lr}
 80111f6:	b08e      	sub	sp, #56	; 0x38
 80111f8:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80111fa:	4b68      	ldr	r3, [pc, #416]	; (801139c <ResetMacParameters+0x1a8>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011202:	4b66      	ldr	r3, [pc, #408]	; (801139c <ResetMacParameters+0x1a8>)
 8011204:	2200      	movs	r2, #0
 8011206:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011208:	4b65      	ldr	r3, [pc, #404]	; (80113a0 <ResetMacParameters+0x1ac>)
 801120a:	2200      	movs	r2, #0
 801120c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8011210:	4b63      	ldr	r3, [pc, #396]	; (80113a0 <ResetMacParameters+0x1ac>)
 8011212:	2201      	movs	r2, #1
 8011214:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011218:	4b61      	ldr	r3, [pc, #388]	; (80113a0 <ResetMacParameters+0x1ac>)
 801121a:	2201      	movs	r2, #1
 801121c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8011220:	4b5f      	ldr	r3, [pc, #380]	; (80113a0 <ResetMacParameters+0x1ac>)
 8011222:	2200      	movs	r2, #0
 8011224:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 8011228:	4b5c      	ldr	r3, [pc, #368]	; (801139c <ResetMacParameters+0x1a8>)
 801122a:	2200      	movs	r2, #0
 801122c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011230:	4b5a      	ldr	r3, [pc, #360]	; (801139c <ResetMacParameters+0x1a8>)
 8011232:	2201      	movs	r2, #1
 8011234:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011238:	4b58      	ldr	r3, [pc, #352]	; (801139c <ResetMacParameters+0x1a8>)
 801123a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801123e:	4b57      	ldr	r3, [pc, #348]	; (801139c <ResetMacParameters+0x1a8>)
 8011240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011244:	4b55      	ldr	r3, [pc, #340]	; (801139c <ResetMacParameters+0x1a8>)
 8011246:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801124a:	4b54      	ldr	r3, [pc, #336]	; (801139c <ResetMacParameters+0x1a8>)
 801124c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011250:	4b52      	ldr	r3, [pc, #328]	; (801139c <ResetMacParameters+0x1a8>)
 8011252:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8011256:	4b51      	ldr	r3, [pc, #324]	; (801139c <ResetMacParameters+0x1a8>)
 8011258:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801125c:	4b4f      	ldr	r3, [pc, #316]	; (801139c <ResetMacParameters+0x1a8>)
 801125e:	4a4f      	ldr	r2, [pc, #316]	; (801139c <ResetMacParameters+0x1a8>)
 8011260:	3364      	adds	r3, #100	; 0x64
 8011262:	32a4      	adds	r2, #164	; 0xa4
 8011264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011268:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801126c:	4b4b      	ldr	r3, [pc, #300]	; (801139c <ResetMacParameters+0x1a8>)
 801126e:	4a4b      	ldr	r2, [pc, #300]	; (801139c <ResetMacParameters+0x1a8>)
 8011270:	336c      	adds	r3, #108	; 0x6c
 8011272:	32ac      	adds	r2, #172	; 0xac
 8011274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011278:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801127c:	4b47      	ldr	r3, [pc, #284]	; (801139c <ResetMacParameters+0x1a8>)
 801127e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 8011282:	4b46      	ldr	r3, [pc, #280]	; (801139c <ResetMacParameters+0x1a8>)
 8011284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011288:	4b44      	ldr	r3, [pc, #272]	; (801139c <ResetMacParameters+0x1a8>)
 801128a:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 801128e:	4b43      	ldr	r3, [pc, #268]	; (801139c <ResetMacParameters+0x1a8>)
 8011290:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011294:	4b41      	ldr	r3, [pc, #260]	; (801139c <ResetMacParameters+0x1a8>)
 8011296:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801129a:	4a40      	ldr	r2, [pc, #256]	; (801139c <ResetMacParameters+0x1a8>)
 801129c:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801129e:	4b3f      	ldr	r3, [pc, #252]	; (801139c <ResetMacParameters+0x1a8>)
 80112a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80112a4:	4a3d      	ldr	r2, [pc, #244]	; (801139c <ResetMacParameters+0x1a8>)
 80112a6:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80112a8:	4b3d      	ldr	r3, [pc, #244]	; (80113a0 <ResetMacParameters+0x1ac>)
 80112aa:	2200      	movs	r2, #0
 80112ac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80112b0:	4b3a      	ldr	r3, [pc, #232]	; (801139c <ResetMacParameters+0x1a8>)
 80112b2:	2200      	movs	r2, #0
 80112b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80112b8:	2301      	movs	r3, #1
 80112ba:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80112bc:	4b39      	ldr	r3, [pc, #228]	; (80113a4 <ResetMacParameters+0x1b0>)
 80112be:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80112c0:	4b39      	ldr	r3, [pc, #228]	; (80113a8 <ResetMacParameters+0x1b4>)
 80112c2:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80112c4:	4b35      	ldr	r3, [pc, #212]	; (801139c <ResetMacParameters+0x1a8>)
 80112c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112ca:	1d3a      	adds	r2, r7, #4
 80112cc:	4611      	mov	r1, r2
 80112ce:	4618      	mov	r0, r3
 80112d0:	f004 f837 	bl	8015342 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80112d4:	4b32      	ldr	r3, [pc, #200]	; (80113a0 <ResetMacParameters+0x1ac>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80112dc:	4b30      	ldr	r3, [pc, #192]	; (80113a0 <ResetMacParameters+0x1ac>)
 80112de:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80112e2:	4b2f      	ldr	r3, [pc, #188]	; (80113a0 <ResetMacParameters+0x1ac>)
 80112e4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80112e8:	4b2c      	ldr	r3, [pc, #176]	; (801139c <ResetMacParameters+0x1a8>)
 80112ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112ec:	4a2c      	ldr	r2, [pc, #176]	; (80113a0 <ResetMacParameters+0x1ac>)
 80112ee:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80112f2:	4b2a      	ldr	r3, [pc, #168]	; (801139c <ResetMacParameters+0x1a8>)
 80112f4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80112f8:	4b29      	ldr	r3, [pc, #164]	; (80113a0 <ResetMacParameters+0x1ac>)
 80112fa:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80112fe:	4b27      	ldr	r3, [pc, #156]	; (801139c <ResetMacParameters+0x1a8>)
 8011300:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011304:	4b26      	ldr	r3, [pc, #152]	; (80113a0 <ResetMacParameters+0x1ac>)
 8011306:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801130a:	4b25      	ldr	r3, [pc, #148]	; (80113a0 <ResetMacParameters+0x1ac>)
 801130c:	2200      	movs	r2, #0
 801130e:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011312:	4b23      	ldr	r3, [pc, #140]	; (80113a0 <ResetMacParameters+0x1ac>)
 8011314:	2201      	movs	r2, #1
 8011316:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801131a:	4a21      	ldr	r2, [pc, #132]	; (80113a0 <ResetMacParameters+0x1ac>)
 801131c:	4b20      	ldr	r3, [pc, #128]	; (80113a0 <ResetMacParameters+0x1ac>)
 801131e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011322:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8011326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801132a:	682b      	ldr	r3, [r5, #0]
 801132c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801132e:	4b1c      	ldr	r3, [pc, #112]	; (80113a0 <ResetMacParameters+0x1ac>)
 8011330:	2201      	movs	r2, #1
 8011332:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011336:	4b1a      	ldr	r3, [pc, #104]	; (80113a0 <ResetMacParameters+0x1ac>)
 8011338:	2202      	movs	r2, #2
 801133a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801133e:	2300      	movs	r3, #0
 8011340:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8011342:	2300      	movs	r3, #0
 8011344:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8011346:	4b16      	ldr	r3, [pc, #88]	; (80113a0 <ResetMacParameters+0x1ac>)
 8011348:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801134c:	2b00      	cmp	r3, #0
 801134e:	d009      	beq.n	8011364 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011350:	4b13      	ldr	r3, [pc, #76]	; (80113a0 <ResetMacParameters+0x1ac>)
 8011352:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801135a:	4b11      	ldr	r3, [pc, #68]	; (80113a0 <ResetMacParameters+0x1ac>)
 801135c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011360:	691b      	ldr	r3, [r3, #16]
 8011362:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011364:	4b11      	ldr	r3, [pc, #68]	; (80113ac <ResetMacParameters+0x1b8>)
 8011366:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011368:	4b11      	ldr	r3, [pc, #68]	; (80113b0 <ResetMacParameters+0x1bc>)
 801136a:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801136c:	4b11      	ldr	r3, [pc, #68]	; (80113b4 <ResetMacParameters+0x1c0>)
 801136e:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011370:	4b11      	ldr	r3, [pc, #68]	; (80113b8 <ResetMacParameters+0x1c4>)
 8011372:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011374:	4b11      	ldr	r3, [pc, #68]	; (80113bc <ResetMacParameters+0x1c8>)
 8011376:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011378:	4b11      	ldr	r3, [pc, #68]	; (80113c0 <ResetMacParameters+0x1cc>)
 801137a:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801137c:	4b11      	ldr	r3, [pc, #68]	; (80113c4 <ResetMacParameters+0x1d0>)
 801137e:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011380:	4b11      	ldr	r3, [pc, #68]	; (80113c8 <ResetMacParameters+0x1d4>)
 8011382:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011384:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011388:	f107 0310 	add.w	r3, r7, #16
 801138c:	4a0f      	ldr	r2, [pc, #60]	; (80113cc <ResetMacParameters+0x1d8>)
 801138e:	4618      	mov	r0, r3
 8011390:	f001 ffec 	bl	801336c <LoRaMacClassBInit>
}
 8011394:	bf00      	nop
 8011396:	3738      	adds	r7, #56	; 0x38
 8011398:	46bd      	mov	sp, r7
 801139a:	bdb0      	pop	{r4, r5, r7, pc}
 801139c:	20003594 	.word	0x20003594
 80113a0:	2000308c 	.word	0x2000308c
 80113a4:	2000376c 	.word	0x2000376c
 80113a8:	20003810 	.word	0x20003810
 80113ac:	200034ec 	.word	0x200034ec
 80113b0:	200034a8 	.word	0x200034a8
 80113b4:	200034d8 	.word	0x200034d8
 80113b8:	2000350d 	.word	0x2000350d
 80113bc:	20003660 	.word	0x20003660
 80113c0:	200035d4 	.word	0x200035d4
 80113c4:	200035d8 	.word	0x200035d8
 80113c8:	20003664 	.word	0x20003664
 80113cc:	20003b8c 	.word	0x20003b8c

080113d0 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f00b fe46 	bl	801d06c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80113e0:	4b0e      	ldr	r3, [pc, #56]	; (801141c <RxWindowSetup+0x4c>)
 80113e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113e4:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80113e6:	4b0e      	ldr	r3, [pc, #56]	; (8011420 <RxWindowSetup+0x50>)
 80113e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113ec:	4a0d      	ldr	r2, [pc, #52]	; (8011424 <RxWindowSetup+0x54>)
 80113ee:	6839      	ldr	r1, [r7, #0]
 80113f0:	4618      	mov	r0, r3
 80113f2:	f004 f836 	bl	8015462 <RegionRxConfig>
 80113f6:	4603      	mov	r3, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d00a      	beq.n	8011412 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80113fc:	4b07      	ldr	r3, [pc, #28]	; (801141c <RxWindowSetup+0x4c>)
 80113fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011400:	4a07      	ldr	r2, [pc, #28]	; (8011420 <RxWindowSetup+0x50>)
 8011402:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8011404:	4610      	mov	r0, r2
 8011406:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	7cda      	ldrb	r2, [r3, #19]
 801140c:	4b06      	ldr	r3, [pc, #24]	; (8011428 <RxWindowSetup+0x58>)
 801140e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8011412:	bf00      	nop
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	0801e73c 	.word	0x0801e73c
 8011420:	20003594 	.word	0x20003594
 8011424:	200034ac 	.word	0x200034ac
 8011428:	2000308c 	.word	0x2000308c

0801142c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801142c:	b590      	push	{r4, r7, lr}
 801142e:	b083      	sub	sp, #12
 8011430:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011432:	4b18      	ldr	r3, [pc, #96]	; (8011494 <OpenContinuousRxCWindow+0x68>)
 8011434:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011438:	4b16      	ldr	r3, [pc, #88]	; (8011494 <OpenContinuousRxCWindow+0x68>)
 801143a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801143e:	b259      	sxtb	r1, r3
 8011440:	4b14      	ldr	r3, [pc, #80]	; (8011494 <OpenContinuousRxCWindow+0x68>)
 8011442:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011446:	4b13      	ldr	r3, [pc, #76]	; (8011494 <OpenContinuousRxCWindow+0x68>)
 8011448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801144a:	4c13      	ldr	r4, [pc, #76]	; (8011498 <OpenContinuousRxCWindow+0x6c>)
 801144c:	9400      	str	r4, [sp, #0]
 801144e:	f003 ffe4 	bl	801541a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011452:	4b12      	ldr	r3, [pc, #72]	; (801149c <OpenContinuousRxCWindow+0x70>)
 8011454:	2202      	movs	r2, #2
 8011456:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801145a:	4b10      	ldr	r3, [pc, #64]	; (801149c <OpenContinuousRxCWindow+0x70>)
 801145c:	2201      	movs	r2, #1
 801145e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011462:	4b0c      	ldr	r3, [pc, #48]	; (8011494 <OpenContinuousRxCWindow+0x68>)
 8011464:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011468:	4a0d      	ldr	r2, [pc, #52]	; (80114a0 <OpenContinuousRxCWindow+0x74>)
 801146a:	490b      	ldr	r1, [pc, #44]	; (8011498 <OpenContinuousRxCWindow+0x6c>)
 801146c:	4618      	mov	r0, r3
 801146e:	f003 fff8 	bl	8015462 <RegionRxConfig>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d009      	beq.n	801148c <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 8011478:	4b0a      	ldr	r3, [pc, #40]	; (80114a4 <OpenContinuousRxCWindow+0x78>)
 801147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801147c:	2000      	movs	r0, #0
 801147e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011480:	4b06      	ldr	r3, [pc, #24]	; (801149c <OpenContinuousRxCWindow+0x70>)
 8011482:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8011486:	4b05      	ldr	r3, [pc, #20]	; (801149c <OpenContinuousRxCWindow+0x70>)
 8011488:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801148c:	bf00      	nop
 801148e:	3704      	adds	r7, #4
 8011490:	46bd      	mov	sp, r7
 8011492:	bd90      	pop	{r4, r7, pc}
 8011494:	20003594 	.word	0x20003594
 8011498:	2000346c 	.word	0x2000346c
 801149c:	2000308c 	.word	0x2000308c
 80114a0:	200034ac 	.word	0x200034ac
 80114a4:	0801e73c 	.word	0x0801e73c

080114a8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b088      	sub	sp, #32
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	60f8      	str	r0, [r7, #12]
 80114b0:	60b9      	str	r1, [r7, #8]
 80114b2:	603b      	str	r3, [r7, #0]
 80114b4:	4613      	mov	r3, r2
 80114b6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80114b8:	4b82      	ldr	r3, [pc, #520]	; (80116c4 <PrepareFrame+0x21c>)
 80114ba:	2200      	movs	r2, #0
 80114bc:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80114be:	4b81      	ldr	r3, [pc, #516]	; (80116c4 <PrepareFrame+0x21c>)
 80114c0:	2200      	movs	r2, #0
 80114c2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80114c6:	2300      	movs	r3, #0
 80114c8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80114ca:	2300      	movs	r3, #0
 80114cc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d101      	bne.n	80114dc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80114d8:	2300      	movs	r3, #0
 80114da:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80114dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80114de:	461a      	mov	r2, r3
 80114e0:	6839      	ldr	r1, [r7, #0]
 80114e2:	4879      	ldr	r0, [pc, #484]	; (80116c8 <PrepareFrame+0x220>)
 80114e4:	f007 fdc5 	bl	8019072 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80114e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	4b75      	ldr	r3, [pc, #468]	; (80116c4 <PrepareFrame+0x21c>)
 80114ee:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	781a      	ldrb	r2, [r3, #0]
 80114f6:	4b73      	ldr	r3, [pc, #460]	; (80116c4 <PrepareFrame+0x21c>)
 80114f8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011502:	b2db      	uxtb	r3, r3
 8011504:	2b07      	cmp	r3, #7
 8011506:	f000 80b9 	beq.w	801167c <PrepareFrame+0x1d4>
 801150a:	2b07      	cmp	r3, #7
 801150c:	f300 80d0 	bgt.w	80116b0 <PrepareFrame+0x208>
 8011510:	2b02      	cmp	r3, #2
 8011512:	d006      	beq.n	8011522 <PrepareFrame+0x7a>
 8011514:	2b04      	cmp	r3, #4
 8011516:	f040 80cb 	bne.w	80116b0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801151a:	4b6a      	ldr	r3, [pc, #424]	; (80116c4 <PrepareFrame+0x21c>)
 801151c:	2201      	movs	r2, #1
 801151e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011522:	4b68      	ldr	r3, [pc, #416]	; (80116c4 <PrepareFrame+0x21c>)
 8011524:	2204      	movs	r2, #4
 8011526:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801152a:	4b66      	ldr	r3, [pc, #408]	; (80116c4 <PrepareFrame+0x21c>)
 801152c:	4a67      	ldr	r2, [pc, #412]	; (80116cc <PrepareFrame+0x224>)
 801152e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011532:	4b64      	ldr	r3, [pc, #400]	; (80116c4 <PrepareFrame+0x21c>)
 8011534:	22ff      	movs	r2, #255	; 0xff
 8011536:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	781a      	ldrb	r2, [r3, #0]
 801153e:	4b61      	ldr	r3, [pc, #388]	; (80116c4 <PrepareFrame+0x21c>)
 8011540:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011544:	4a5f      	ldr	r2, [pc, #380]	; (80116c4 <PrepareFrame+0x21c>)
 8011546:	79fb      	ldrb	r3, [r7, #7]
 8011548:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801154c:	4b60      	ldr	r3, [pc, #384]	; (80116d0 <PrepareFrame+0x228>)
 801154e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011552:	4a5c      	ldr	r2, [pc, #368]	; (80116c4 <PrepareFrame+0x21c>)
 8011554:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	781a      	ldrb	r2, [r3, #0]
 801155c:	4b59      	ldr	r3, [pc, #356]	; (80116c4 <PrepareFrame+0x21c>)
 801155e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011562:	4b58      	ldr	r3, [pc, #352]	; (80116c4 <PrepareFrame+0x21c>)
 8011564:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8011568:	4b56      	ldr	r3, [pc, #344]	; (80116c4 <PrepareFrame+0x21c>)
 801156a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801156e:	4b55      	ldr	r3, [pc, #340]	; (80116c4 <PrepareFrame+0x21c>)
 8011570:	4a55      	ldr	r2, [pc, #340]	; (80116c8 <PrepareFrame+0x220>)
 8011572:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011576:	f107 0318 	add.w	r3, r7, #24
 801157a:	4618      	mov	r0, r3
 801157c:	f002 fffe 	bl	801457c <LoRaMacCryptoGetFCntUp>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d001      	beq.n	801158a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011586:	2312      	movs	r3, #18
 8011588:	e098      	b.n	80116bc <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	b29a      	uxth	r2, r3
 801158e:	4b4d      	ldr	r3, [pc, #308]	; (80116c4 <PrepareFrame+0x21c>)
 8011590:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8011594:	4b4b      	ldr	r3, [pc, #300]	; (80116c4 <PrepareFrame+0x21c>)
 8011596:	2200      	movs	r2, #0
 8011598:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 801159c:	4b49      	ldr	r3, [pc, #292]	; (80116c4 <PrepareFrame+0x21c>)
 801159e:	2200      	movs	r2, #0
 80115a0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80115a4:	69bb      	ldr	r3, [r7, #24]
 80115a6:	4a47      	ldr	r2, [pc, #284]	; (80116c4 <PrepareFrame+0x21c>)
 80115a8:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80115ac:	f107 0314 	add.w	r3, r7, #20
 80115b0:	4618      	mov	r0, r3
 80115b2:	f002 f99b 	bl	80138ec <LoRaMacCommandsGetSizeSerializedCmds>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80115bc:	2313      	movs	r3, #19
 80115be:	e07d      	b.n	80116bc <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d076      	beq.n	80116b4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80115c6:	4b42      	ldr	r3, [pc, #264]	; (80116d0 <PrepareFrame+0x228>)
 80115c8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fe fdab 	bl	8010128 <GetMaxAppPayloadWithoutFOptsLength>
 80115d2:	4603      	mov	r3, r0
 80115d4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80115d6:	4b3b      	ldr	r3, [pc, #236]	; (80116c4 <PrepareFrame+0x21c>)
 80115d8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d01d      	beq.n	801161c <PrepareFrame+0x174>
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	2b0f      	cmp	r3, #15
 80115e4:	d81a      	bhi.n	801161c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80115e6:	f107 0314 	add.w	r3, r7, #20
 80115ea:	4a3a      	ldr	r2, [pc, #232]	; (80116d4 <PrepareFrame+0x22c>)
 80115ec:	4619      	mov	r1, r3
 80115ee:	200f      	movs	r0, #15
 80115f0:	f002 f992 	bl	8013918 <LoRaMacCommandsSerializeCmds>
 80115f4:	4603      	mov	r3, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d001      	beq.n	80115fe <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80115fa:	2313      	movs	r3, #19
 80115fc:	e05e      	b.n	80116bc <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	f003 030f 	and.w	r3, r3, #15
 8011604:	b2d9      	uxtb	r1, r3
 8011606:	68ba      	ldr	r2, [r7, #8]
 8011608:	7813      	ldrb	r3, [r2, #0]
 801160a:	f361 0303 	bfi	r3, r1, #0, #4
 801160e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	781a      	ldrb	r2, [r3, #0]
 8011614:	4b2b      	ldr	r3, [pc, #172]	; (80116c4 <PrepareFrame+0x21c>)
 8011616:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801161a:	e04b      	b.n	80116b4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801161c:	4b29      	ldr	r3, [pc, #164]	; (80116c4 <PrepareFrame+0x21c>)
 801161e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011622:	2b00      	cmp	r3, #0
 8011624:	d010      	beq.n	8011648 <PrepareFrame+0x1a0>
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	2b0f      	cmp	r3, #15
 801162a:	d90d      	bls.n	8011648 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801162c:	7ffb      	ldrb	r3, [r7, #31]
 801162e:	f107 0114 	add.w	r1, r7, #20
 8011632:	4a29      	ldr	r2, [pc, #164]	; (80116d8 <PrepareFrame+0x230>)
 8011634:	4618      	mov	r0, r3
 8011636:	f002 f96f 	bl	8013918 <LoRaMacCommandsSerializeCmds>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d001      	beq.n	8011644 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011640:	2313      	movs	r3, #19
 8011642:	e03b      	b.n	80116bc <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011644:	230a      	movs	r3, #10
 8011646:	e039      	b.n	80116bc <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011648:	7ffb      	ldrb	r3, [r7, #31]
 801164a:	f107 0114 	add.w	r1, r7, #20
 801164e:	4a22      	ldr	r2, [pc, #136]	; (80116d8 <PrepareFrame+0x230>)
 8011650:	4618      	mov	r0, r3
 8011652:	f002 f961 	bl	8013918 <LoRaMacCommandsSerializeCmds>
 8011656:	4603      	mov	r3, r0
 8011658:	2b00      	cmp	r3, #0
 801165a:	d001      	beq.n	8011660 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801165c:	2313      	movs	r3, #19
 801165e:	e02d      	b.n	80116bc <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011660:	4b18      	ldr	r3, [pc, #96]	; (80116c4 <PrepareFrame+0x21c>)
 8011662:	2200      	movs	r2, #0
 8011664:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011668:	4b16      	ldr	r3, [pc, #88]	; (80116c4 <PrepareFrame+0x21c>)
 801166a:	4a1b      	ldr	r2, [pc, #108]	; (80116d8 <PrepareFrame+0x230>)
 801166c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	b2da      	uxtb	r2, r3
 8011674:	4b13      	ldr	r3, [pc, #76]	; (80116c4 <PrepareFrame+0x21c>)
 8011676:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801167a:	e01b      	b.n	80116b4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d01a      	beq.n	80116b8 <PrepareFrame+0x210>
 8011682:	4b10      	ldr	r3, [pc, #64]	; (80116c4 <PrepareFrame+0x21c>)
 8011684:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011688:	2b00      	cmp	r3, #0
 801168a:	d015      	beq.n	80116b8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801168c:	4813      	ldr	r0, [pc, #76]	; (80116dc <PrepareFrame+0x234>)
 801168e:	4b0d      	ldr	r3, [pc, #52]	; (80116c4 <PrepareFrame+0x21c>)
 8011690:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011694:	b29b      	uxth	r3, r3
 8011696:	461a      	mov	r2, r3
 8011698:	6839      	ldr	r1, [r7, #0]
 801169a:	f007 fcea 	bl	8019072 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801169e:	4b09      	ldr	r3, [pc, #36]	; (80116c4 <PrepareFrame+0x21c>)
 80116a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	3301      	adds	r3, #1
 80116a8:	b29a      	uxth	r2, r3
 80116aa:	4b06      	ldr	r3, [pc, #24]	; (80116c4 <PrepareFrame+0x21c>)
 80116ac:	801a      	strh	r2, [r3, #0]
            }
            break;
 80116ae:	e003      	b.n	80116b8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80116b0:	2302      	movs	r3, #2
 80116b2:	e003      	b.n	80116bc <PrepareFrame+0x214>
            break;
 80116b4:	bf00      	nop
 80116b6:	e000      	b.n	80116ba <PrepareFrame+0x212>
            break;
 80116b8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3720      	adds	r7, #32
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	2000308c 	.word	0x2000308c
 80116c8:	200031c4 	.word	0x200031c4
 80116cc:	2000308e 	.word	0x2000308e
 80116d0:	20003594 	.word	0x20003594
 80116d4:	200031a4 	.word	0x200031a4
 80116d8:	20003514 	.word	0x20003514
 80116dc:	2000308f 	.word	0x2000308f

080116e0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b08a      	sub	sp, #40	; 0x28
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	4603      	mov	r3, r0
 80116e8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116ea:	2303      	movs	r3, #3
 80116ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80116f4:	79fb      	ldrb	r3, [r7, #7]
 80116f6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80116f8:	4b47      	ldr	r3, [pc, #284]	; (8011818 <SendFrameOnChannel+0x138>)
 80116fa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80116fe:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011700:	4b45      	ldr	r3, [pc, #276]	; (8011818 <SendFrameOnChannel+0x138>)
 8011702:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011706:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011708:	4b43      	ldr	r3, [pc, #268]	; (8011818 <SendFrameOnChannel+0x138>)
 801170a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801170c:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801170e:	4b42      	ldr	r3, [pc, #264]	; (8011818 <SendFrameOnChannel+0x138>)
 8011710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011712:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011714:	4b41      	ldr	r3, [pc, #260]	; (801181c <SendFrameOnChannel+0x13c>)
 8011716:	881b      	ldrh	r3, [r3, #0]
 8011718:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801171a:	4b3f      	ldr	r3, [pc, #252]	; (8011818 <SendFrameOnChannel+0x138>)
 801171c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011720:	f107 020f 	add.w	r2, r7, #15
 8011724:	f107 0110 	add.w	r1, r7, #16
 8011728:	4b3d      	ldr	r3, [pc, #244]	; (8011820 <SendFrameOnChannel+0x140>)
 801172a:	f003 feb8 	bl	801549e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801172e:	4b3b      	ldr	r3, [pc, #236]	; (801181c <SendFrameOnChannel+0x13c>)
 8011730:	2201      	movs	r2, #1
 8011732:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011736:	4b38      	ldr	r3, [pc, #224]	; (8011818 <SendFrameOnChannel+0x138>)
 8011738:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801173c:	b2da      	uxtb	r2, r3
 801173e:	4b37      	ldr	r3, [pc, #220]	; (801181c <SendFrameOnChannel+0x13c>)
 8011740:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8011744:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011748:	4b34      	ldr	r3, [pc, #208]	; (801181c <SendFrameOnChannel+0x13c>)
 801174a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 801174e:	79fb      	ldrb	r3, [r7, #7]
 8011750:	4a32      	ldr	r2, [pc, #200]	; (801181c <SendFrameOnChannel+0x13c>)
 8011752:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011756:	4b31      	ldr	r3, [pc, #196]	; (801181c <SendFrameOnChannel+0x13c>)
 8011758:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801175c:	4a2f      	ldr	r2, [pc, #188]	; (801181c <SendFrameOnChannel+0x13c>)
 801175e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011762:	4b2e      	ldr	r3, [pc, #184]	; (801181c <SendFrameOnChannel+0x13c>)
 8011764:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8011768:	4a2c      	ldr	r2, [pc, #176]	; (801181c <SendFrameOnChannel+0x13c>)
 801176a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801176e:	f001 fe69 	bl	8013444 <LoRaMacClassBIsBeaconModeActive>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d00b      	beq.n	8011790 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011778:	4b28      	ldr	r3, [pc, #160]	; (801181c <SendFrameOnChannel+0x13c>)
 801177a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801177e:	4618      	mov	r0, r3
 8011780:	f001 fecb 	bl	801351a <LoRaMacClassBIsUplinkCollision>
 8011784:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011786:	6a3b      	ldr	r3, [r7, #32]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d001      	beq.n	8011790 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 801178c:	2310      	movs	r3, #16
 801178e:	e03e      	b.n	801180e <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011790:	4b21      	ldr	r3, [pc, #132]	; (8011818 <SendFrameOnChannel+0x138>)
 8011792:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011796:	2b01      	cmp	r3, #1
 8011798:	d101      	bne.n	801179e <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801179a:	f001 fec8 	bl	801352e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801179e:	f001 fe62 	bl	8013466 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80117a2:	4b1d      	ldr	r3, [pc, #116]	; (8011818 <SendFrameOnChannel+0x138>)
 80117a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	4a1c      	ldr	r2, [pc, #112]	; (801181c <SendFrameOnChannel+0x13c>)
 80117ac:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80117b0:	4611      	mov	r1, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7ff fc88 	bl	80110c8 <SecureFrame>
 80117b8:	4603      	mov	r3, r0
 80117ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80117be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d002      	beq.n	80117cc <SendFrameOnChannel+0xec>
    {
        return status;
 80117c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117ca:	e020      	b.n	801180e <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80117cc:	4b13      	ldr	r3, [pc, #76]	; (801181c <SendFrameOnChannel+0x13c>)
 80117ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80117d2:	f043 0302 	orr.w	r3, r3, #2
 80117d6:	4a11      	ldr	r2, [pc, #68]	; (801181c <SendFrameOnChannel+0x13c>)
 80117d8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 80117dc:	4b0f      	ldr	r3, [pc, #60]	; (801181c <SendFrameOnChannel+0x13c>)
 80117de:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80117e2:	f083 0301 	eor.w	r3, r3, #1
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d007      	beq.n	80117fc <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80117ec:	4b0b      	ldr	r3, [pc, #44]	; (801181c <SendFrameOnChannel+0x13c>)
 80117ee:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80117f2:	3301      	adds	r3, #1
 80117f4:	b2da      	uxtb	r2, r3
 80117f6:	4b09      	ldr	r3, [pc, #36]	; (801181c <SendFrameOnChannel+0x13c>)
 80117f8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80117fc:	4b09      	ldr	r3, [pc, #36]	; (8011824 <SendFrameOnChannel+0x144>)
 80117fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011800:	4a06      	ldr	r2, [pc, #24]	; (801181c <SendFrameOnChannel+0x13c>)
 8011802:	8812      	ldrh	r2, [r2, #0]
 8011804:	b2d2      	uxtb	r2, r2
 8011806:	4611      	mov	r1, r2
 8011808:	4807      	ldr	r0, [pc, #28]	; (8011828 <SendFrameOnChannel+0x148>)
 801180a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	3728      	adds	r7, #40	; 0x28
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	20003594 	.word	0x20003594
 801181c:	2000308c 	.word	0x2000308c
 8011820:	200034a4 	.word	0x200034a4
 8011824:	0801e73c 	.word	0x0801e73c
 8011828:	2000308e 	.word	0x2000308e

0801182c <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b086      	sub	sp, #24
 8011830:	af00      	add	r7, sp, #0
 8011832:	4603      	mov	r3, r0
 8011834:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8011836:	4b15      	ldr	r3, [pc, #84]	; (801188c <SetTxContinuousWave+0x60>)
 8011838:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 801183c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801183e:	4b14      	ldr	r3, [pc, #80]	; (8011890 <SetTxContinuousWave+0x64>)
 8011840:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011844:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011846:	4b12      	ldr	r3, [pc, #72]	; (8011890 <SetTxContinuousWave+0x64>)
 8011848:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801184c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801184e:	4b10      	ldr	r3, [pc, #64]	; (8011890 <SetTxContinuousWave+0x64>)
 8011850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011852:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011854:	4b0e      	ldr	r3, [pc, #56]	; (8011890 <SetTxContinuousWave+0x64>)
 8011856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011858:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801185a:	88fb      	ldrh	r3, [r7, #6]
 801185c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801185e:	4b0c      	ldr	r3, [pc, #48]	; (8011890 <SetTxContinuousWave+0x64>)
 8011860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011864:	f107 0208 	add.w	r2, r7, #8
 8011868:	4611      	mov	r1, r2
 801186a:	4618      	mov	r0, r3
 801186c:	f003 ff14 	bl	8015698 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011870:	4b06      	ldr	r3, [pc, #24]	; (801188c <SetTxContinuousWave+0x60>)
 8011872:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011876:	f043 0302 	orr.w	r3, r3, #2
 801187a:	4a04      	ldr	r2, [pc, #16]	; (801188c <SetTxContinuousWave+0x60>)
 801187c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	3718      	adds	r7, #24
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	2000308c 	.word	0x2000308c
 8011890:	20003594 	.word	0x20003594

08011894 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	4603      	mov	r3, r0
 801189c:	6039      	str	r1, [r7, #0]
 801189e:	80fb      	strh	r3, [r7, #6]
 80118a0:	4613      	mov	r3, r2
 80118a2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80118a4:	4b09      	ldr	r3, [pc, #36]	; (80118cc <SetTxContinuousWave1+0x38>)
 80118a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118a8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80118ac:	88fa      	ldrh	r2, [r7, #6]
 80118ae:	6838      	ldr	r0, [r7, #0]
 80118b0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80118b2:	4b07      	ldr	r3, [pc, #28]	; (80118d0 <SetTxContinuousWave1+0x3c>)
 80118b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118b8:	f043 0302 	orr.w	r3, r3, #2
 80118bc:	4a04      	ldr	r2, [pc, #16]	; (80118d0 <SetTxContinuousWave1+0x3c>)
 80118be:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80118c2:	2300      	movs	r3, #0
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3708      	adds	r7, #8
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	0801e73c 	.word	0x0801e73c
 80118d0:	2000308c 	.word	0x2000308c

080118d4 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 80118d4:	b480      	push	{r7}
 80118d6:	af00      	add	r7, sp, #0
    return &Nvm;
 80118d8:	4b02      	ldr	r3, [pc, #8]	; (80118e4 <GetNvmData+0x10>)
}
 80118da:	4618      	mov	r0, r3
 80118dc:	46bd      	mov	sp, r7
 80118de:	bc80      	pop	{r7}
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop
 80118e4:	20003594 	.word	0x20003594

080118e8 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80118f0:	2300      	movs	r3, #0
 80118f2:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d101      	bne.n	80118fe <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118fa:	2303      	movs	r3, #3
 80118fc:	e09a      	b.n	8011a34 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80118fe:	4b4f      	ldr	r3, [pc, #316]	; (8011a3c <RestoreNvmData+0x154>)
 8011900:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011904:	2b01      	cmp	r3, #1
 8011906:	d001      	beq.n	801190c <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8011908:	2301      	movs	r3, #1
 801190a:	e093      	b.n	8011a34 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2124      	movs	r1, #36	; 0x24
 8011910:	4618      	mov	r0, r3
 8011912:	f007 fc03 	bl	801911c <Crc32>
 8011916:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	429a      	cmp	r2, r3
 8011920:	d105      	bne.n	801192e <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2228      	movs	r2, #40	; 0x28
 8011926:	4619      	mov	r1, r3
 8011928:	4845      	ldr	r0, [pc, #276]	; (8011a40 <RestoreNvmData+0x158>)
 801192a:	f007 fba2 	bl	8019072 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	3328      	adds	r3, #40	; 0x28
 8011932:	2114      	movs	r1, #20
 8011934:	4618      	mov	r0, r3
 8011936:	f007 fbf1 	bl	801911c <Crc32>
 801193a:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011940:	68fa      	ldr	r2, [r7, #12]
 8011942:	429a      	cmp	r2, r3
 8011944:	d106      	bne.n	8011954 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	3328      	adds	r3, #40	; 0x28
 801194a:	2218      	movs	r2, #24
 801194c:	4619      	mov	r1, r3
 801194e:	483d      	ldr	r0, [pc, #244]	; (8011a44 <RestoreNvmData+0x15c>)
 8011950:	f007 fb8f 	bl	8019072 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3340      	adds	r3, #64	; 0x40
 8011958:	21d4      	movs	r1, #212	; 0xd4
 801195a:	4618      	mov	r0, r3
 801195c:	f007 fbde 	bl	801911c <Crc32>
 8011960:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	429a      	cmp	r2, r3
 801196c:	d11f      	bne.n	80119ae <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	3340      	adds	r3, #64	; 0x40
 8011972:	22d8      	movs	r2, #216	; 0xd8
 8011974:	4619      	mov	r1, r3
 8011976:	4834      	ldr	r0, [pc, #208]	; (8011a48 <RestoreNvmData+0x160>)
 8011978:	f007 fb7b 	bl	8019072 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801197c:	4b2f      	ldr	r3, [pc, #188]	; (8011a3c <RestoreNvmData+0x154>)
 801197e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011982:	4b2e      	ldr	r3, [pc, #184]	; (8011a3c <RestoreNvmData+0x154>)
 8011984:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011988:	4b2d      	ldr	r3, [pc, #180]	; (8011a40 <RestoreNvmData+0x158>)
 801198a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801198c:	4a2b      	ldr	r2, [pc, #172]	; (8011a3c <RestoreNvmData+0x154>)
 801198e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011992:	4b2b      	ldr	r3, [pc, #172]	; (8011a40 <RestoreNvmData+0x158>)
 8011994:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011998:	4b28      	ldr	r3, [pc, #160]	; (8011a3c <RestoreNvmData+0x154>)
 801199a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 801199e:	4b27      	ldr	r3, [pc, #156]	; (8011a3c <RestoreNvmData+0x154>)
 80119a0:	2201      	movs	r2, #1
 80119a2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80119a6:	4b25      	ldr	r3, [pc, #148]	; (8011a3c <RestoreNvmData+0x154>)
 80119a8:	2202      	movs	r2, #2
 80119aa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80119b4:	21bc      	movs	r1, #188	; 0xbc
 80119b6:	4618      	mov	r0, r3
 80119b8:	f007 fbb0 	bl	801911c <Crc32>
 80119bc:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80119c4:	68fa      	ldr	r2, [r7, #12]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d107      	bne.n	80119da <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80119d0:	22c0      	movs	r2, #192	; 0xc0
 80119d2:	4619      	mov	r1, r3
 80119d4:	481d      	ldr	r0, [pc, #116]	; (8011a4c <RestoreNvmData+0x164>)
 80119d6:	f007 fb4c 	bl	8019072 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80119e0:	21a0      	movs	r1, #160	; 0xa0
 80119e2:	4618      	mov	r0, r3
 80119e4:	f007 fb9a 	bl	801911c <Crc32>
 80119e8:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80119f0:	68fa      	ldr	r2, [r7, #12]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d107      	bne.n	8011a06 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80119fc:	22a4      	movs	r2, #164	; 0xa4
 80119fe:	4619      	mov	r1, r3
 8011a00:	4813      	ldr	r0, [pc, #76]	; (8011a50 <RestoreNvmData+0x168>)
 8011a02:	f007 fb36 	bl	8019072 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8011a0c:	2114      	movs	r1, #20
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f007 fb84 	bl	801911c <Crc32>
 8011a14:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8011a1c:	68fa      	ldr	r2, [r7, #12]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d107      	bne.n	8011a32 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8011a28:	2218      	movs	r2, #24
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	4809      	ldr	r0, [pc, #36]	; (8011a54 <RestoreNvmData+0x16c>)
 8011a2e:	f007 fb20 	bl	8019072 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 8011a32:	2300      	movs	r3, #0
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3710      	adds	r7, #16
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	2000308c 	.word	0x2000308c
 8011a40:	20003594 	.word	0x20003594
 8011a44:	200035bc 	.word	0x200035bc
 8011a48:	200035d4 	.word	0x200035d4
 8011a4c:	200036ac 	.word	0x200036ac
 8011a50:	2000376c 	.word	0x2000376c
 8011a54:	20003b8c 	.word	0x20003b8c

08011a58 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b083      	sub	sp, #12
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d002      	beq.n	8011a6e <DetermineFrameType+0x16>
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d101      	bne.n	8011a72 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a6e:	2303      	movs	r3, #3
 8011a70:	e03b      	b.n	8011aea <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	7b1b      	ldrb	r3, [r3, #12]
 8011a76:	f003 030f 	and.w	r3, r3, #15
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d008      	beq.n	8011a92 <DetermineFrameType+0x3a>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d003      	beq.n	8011a92 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	701a      	strb	r2, [r3, #0]
 8011a90:	e02a      	b.n	8011ae8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d103      	bne.n	8011aa4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	701a      	strb	r2, [r3, #0]
 8011aa2:	e021      	b.n	8011ae8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	7b1b      	ldrb	r3, [r3, #12]
 8011aa8:	f003 030f 	and.w	r3, r3, #15
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d108      	bne.n	8011ac4 <DetermineFrameType+0x6c>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d103      	bne.n	8011ac4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	2202      	movs	r2, #2
 8011ac0:	701a      	strb	r2, [r3, #0]
 8011ac2:	e011      	b.n	8011ae8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	7b1b      	ldrb	r3, [r3, #12]
 8011ac8:	f003 030f 	and.w	r3, r3, #15
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d108      	bne.n	8011ae4 <DetermineFrameType+0x8c>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d003      	beq.n	8011ae4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2203      	movs	r2, #3
 8011ae0:	701a      	strb	r2, [r3, #0]
 8011ae2:	e001      	b.n	8011ae8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011ae4:	2317      	movs	r3, #23
 8011ae6:	e000      	b.n	8011aea <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011ae8:	2300      	movs	r3, #0
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	370c      	adds	r7, #12
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bc80      	pop	{r7}
 8011af2:	4770      	bx	lr

08011af4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011af4:	b480      	push	{r7}
 8011af6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8011af8:	4b12      	ldr	r3, [pc, #72]	; (8011b44 <CheckRetransUnconfirmedUplink+0x50>)
 8011afa:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8011afe:	4b12      	ldr	r3, [pc, #72]	; (8011b48 <CheckRetransUnconfirmedUplink+0x54>)
 8011b00:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d301      	bcc.n	8011b0c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e016      	b.n	8011b3a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011b0c:	4b0d      	ldr	r3, [pc, #52]	; (8011b44 <CheckRetransUnconfirmedUplink+0x50>)
 8011b0e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b12:	f003 0302 	and.w	r3, r3, #2
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d00d      	beq.n	8011b38 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011b1c:	4b0a      	ldr	r3, [pc, #40]	; (8011b48 <CheckRetransUnconfirmedUplink+0x54>)
 8011b1e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d101      	bne.n	8011b2a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8011b26:	2301      	movs	r3, #1
 8011b28:	e007      	b.n	8011b3a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8011b2a:	4b06      	ldr	r3, [pc, #24]	; (8011b44 <CheckRetransUnconfirmedUplink+0x50>)
 8011b2c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d101      	bne.n	8011b38 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8011b34:	2301      	movs	r3, #1
 8011b36:	e000      	b.n	8011b3a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8011b38:	2300      	movs	r3, #0
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bc80      	pop	{r7}
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop
 8011b44:	2000308c 	.word	0x2000308c
 8011b48:	20003594 	.word	0x20003594

08011b4c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011b50:	4b0e      	ldr	r3, [pc, #56]	; (8011b8c <CheckRetransConfirmedUplink+0x40>)
 8011b52:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8011b56:	4b0d      	ldr	r3, [pc, #52]	; (8011b8c <CheckRetransConfirmedUplink+0x40>)
 8011b58:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d301      	bcc.n	8011b64 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011b60:	2301      	movs	r3, #1
 8011b62:	e00f      	b.n	8011b84 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011b64:	4b09      	ldr	r3, [pc, #36]	; (8011b8c <CheckRetransConfirmedUplink+0x40>)
 8011b66:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b6a:	f003 0302 	and.w	r3, r3, #2
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d006      	beq.n	8011b82 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011b74:	4b05      	ldr	r3, [pc, #20]	; (8011b8c <CheckRetransConfirmedUplink+0x40>)
 8011b76:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d001      	beq.n	8011b82 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	e000      	b.n	8011b84 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8011b82:	2300      	movs	r3, #0
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bc80      	pop	{r7}
 8011b8a:	4770      	bx	lr
 8011b8c:	2000308c 	.word	0x2000308c

08011b90 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8011b90:	b480      	push	{r7}
 8011b92:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011b94:	4b1a      	ldr	r3, [pc, #104]	; (8011c00 <StopRetransmission+0x70>)
 8011b96:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b9a:	f003 0302 	and.w	r3, r3, #2
 8011b9e:	b2db      	uxtb	r3, r3
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d009      	beq.n	8011bb8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011ba4:	4b16      	ldr	r3, [pc, #88]	; (8011c00 <StopRetransmission+0x70>)
 8011ba6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00e      	beq.n	8011bcc <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011bae:	4b14      	ldr	r3, [pc, #80]	; (8011c00 <StopRetransmission+0x70>)
 8011bb0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011bb4:	2b01      	cmp	r3, #1
 8011bb6:	d009      	beq.n	8011bcc <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011bb8:	4b12      	ldr	r3, [pc, #72]	; (8011c04 <StopRetransmission+0x74>)
 8011bba:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d004      	beq.n	8011bcc <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8011bc2:	4b10      	ldr	r3, [pc, #64]	; (8011c04 <StopRetransmission+0x74>)
 8011bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	4a0e      	ldr	r2, [pc, #56]	; (8011c04 <StopRetransmission+0x74>)
 8011bca:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011bcc:	4b0c      	ldr	r3, [pc, #48]	; (8011c00 <StopRetransmission+0x70>)
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8011bd4:	4b0a      	ldr	r3, [pc, #40]	; (8011c00 <StopRetransmission+0x70>)
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8011bdc:	4b08      	ldr	r3, [pc, #32]	; (8011c00 <StopRetransmission+0x70>)
 8011bde:	2200      	movs	r2, #0
 8011be0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011be4:	4b06      	ldr	r3, [pc, #24]	; (8011c00 <StopRetransmission+0x70>)
 8011be6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bea:	f023 0302 	bic.w	r3, r3, #2
 8011bee:	4a04      	ldr	r2, [pc, #16]	; (8011c00 <StopRetransmission+0x70>)
 8011bf0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8011bf4:	2301      	movs	r3, #1
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bc80      	pop	{r7}
 8011bfc:	4770      	bx	lr
 8011bfe:	bf00      	nop
 8011c00:	2000308c 	.word	0x2000308c
 8011c04:	20003594 	.word	0x20003594

08011c08 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	4603      	mov	r3, r0
 8011c10:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011c12:	4b0b      	ldr	r3, [pc, #44]	; (8011c40 <CallNvmDataChangeCallback+0x38>)
 8011c14:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d00c      	beq.n	8011c36 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011c1c:	4b08      	ldr	r3, [pc, #32]	; (8011c40 <CallNvmDataChangeCallback+0x38>)
 8011c1e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011c22:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d006      	beq.n	8011c36 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011c28:	4b05      	ldr	r3, [pc, #20]	; (8011c40 <CallNvmDataChangeCallback+0x38>)
 8011c2a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011c2e:	68db      	ldr	r3, [r3, #12]
 8011c30:	88fa      	ldrh	r2, [r7, #6]
 8011c32:	4610      	mov	r0, r2
 8011c34:	4798      	blx	r3
    }
}
 8011c36:	bf00      	nop
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	2000308c 	.word	0x2000308c

08011c44 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b084      	sub	sp, #16
 8011c48:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8011c4a:	4b1b      	ldr	r3, [pc, #108]	; (8011cb8 <AckTimeoutRetriesProcess+0x74>)
 8011c4c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011c50:	4b19      	ldr	r3, [pc, #100]	; (8011cb8 <AckTimeoutRetriesProcess+0x74>)
 8011c52:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d229      	bcs.n	8011cae <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8011c5a:	4b17      	ldr	r3, [pc, #92]	; (8011cb8 <AckTimeoutRetriesProcess+0x74>)
 8011c5c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011c60:	3301      	adds	r3, #1
 8011c62:	b2da      	uxtb	r2, r3
 8011c64:	4b14      	ldr	r3, [pc, #80]	; (8011cb8 <AckTimeoutRetriesProcess+0x74>)
 8011c66:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8011c6a:	4b13      	ldr	r3, [pc, #76]	; (8011cb8 <AckTimeoutRetriesProcess+0x74>)
 8011c6c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011c70:	f003 0301 	and.w	r3, r3, #1
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d019      	beq.n	8011cae <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011c7a:	2322      	movs	r3, #34	; 0x22
 8011c7c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011c7e:	4b0f      	ldr	r3, [pc, #60]	; (8011cbc <AckTimeoutRetriesProcess+0x78>)
 8011c80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011c84:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011c86:	4b0d      	ldr	r3, [pc, #52]	; (8011cbc <AckTimeoutRetriesProcess+0x78>)
 8011c88:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011c8c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c8e:	4b0b      	ldr	r3, [pc, #44]	; (8011cbc <AckTimeoutRetriesProcess+0x78>)
 8011c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c94:	f107 0208 	add.w	r2, r7, #8
 8011c98:	4611      	mov	r1, r2
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f003 fb19 	bl	80152d2 <RegionGetPhyParam>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	b25a      	sxtb	r2, r3
 8011ca8:	4b04      	ldr	r3, [pc, #16]	; (8011cbc <AckTimeoutRetriesProcess+0x78>)
 8011caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8011cae:	bf00      	nop
 8011cb0:	3710      	adds	r7, #16
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	2000308c 	.word	0x2000308c
 8011cbc:	20003594 	.word	0x20003594

08011cc0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8011cc6:	4b14      	ldr	r3, [pc, #80]	; (8011d18 <AckTimeoutRetriesFinalize+0x58>)
 8011cc8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011ccc:	f083 0301 	eor.w	r3, r3, #1
 8011cd0:	b2db      	uxtb	r3, r3
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d015      	beq.n	8011d02 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8011cda:	4b10      	ldr	r3, [pc, #64]	; (8011d1c <AckTimeoutRetriesFinalize+0x5c>)
 8011cdc:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8011cde:	4b10      	ldr	r3, [pc, #64]	; (8011d20 <AckTimeoutRetriesFinalize+0x60>)
 8011ce0:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011ce2:	4b10      	ldr	r3, [pc, #64]	; (8011d24 <AckTimeoutRetriesFinalize+0x64>)
 8011ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ce8:	1d3a      	adds	r2, r7, #4
 8011cea:	4611      	mov	r1, r2
 8011cec:	4618      	mov	r0, r3
 8011cee:	f003 fb28 	bl	8015342 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8011cf2:	4b09      	ldr	r3, [pc, #36]	; (8011d18 <AckTimeoutRetriesFinalize+0x58>)
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8011cfa:	4b07      	ldr	r3, [pc, #28]	; (8011d18 <AckTimeoutRetriesFinalize+0x58>)
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011d02:	4b05      	ldr	r3, [pc, #20]	; (8011d18 <AckTimeoutRetriesFinalize+0x58>)
 8011d04:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011d08:	4b03      	ldr	r3, [pc, #12]	; (8011d18 <AckTimeoutRetriesFinalize+0x58>)
 8011d0a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8011d0e:	bf00      	nop
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	bf00      	nop
 8011d18:	2000308c 	.word	0x2000308c
 8011d1c:	2000376c 	.word	0x2000376c
 8011d20:	20003810 	.word	0x20003810
 8011d24:	20003594 	.word	0x20003594

08011d28 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8011d28:	b480      	push	{r7}
 8011d2a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011d2c:	4b0b      	ldr	r3, [pc, #44]	; (8011d5c <IsRequestPending+0x34>)
 8011d2e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d32:	f003 0304 	and.w	r3, r3, #4
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d107      	bne.n	8011d4c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011d3c:	4b07      	ldr	r3, [pc, #28]	; (8011d5c <IsRequestPending+0x34>)
 8011d3e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d42:	f003 0301 	and.w	r3, r3, #1
 8011d46:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d001      	beq.n	8011d50 <IsRequestPending+0x28>
    {
        return 1;
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	e000      	b.n	8011d52 <IsRequestPending+0x2a>
    }
    return 0;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bc80      	pop	{r7}
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop
 8011d5c:	2000308c 	.word	0x2000308c

08011d60 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011d60:	b590      	push	{r4, r7, lr}
 8011d62:	b08f      	sub	sp, #60	; 0x3c
 8011d64:	af02      	add	r7, sp, #8
 8011d66:	6178      	str	r0, [r7, #20]
 8011d68:	6139      	str	r1, [r7, #16]
 8011d6a:	4613      	mov	r3, r2
 8011d6c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d002      	beq.n	8011d7a <LoRaMacInitialization+0x1a>
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d101      	bne.n	8011d7e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d7a:	2303      	movs	r3, #3
 8011d7c:	e275      	b.n	801226a <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00b      	beq.n	8011d9e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d007      	beq.n	8011d9e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d003      	beq.n	8011d9e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d101      	bne.n	8011da2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d9e:	2303      	movs	r3, #3
 8011da0:	e263      	b.n	801226a <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011da2:	7bfb      	ldrb	r3, [r7, #15]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f003 fa7f 	bl	80152a8 <RegionIsActive>
 8011daa:	4603      	mov	r3, r0
 8011dac:	f083 0301 	eor.w	r3, r3, #1
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d001      	beq.n	8011dba <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011db6:	2309      	movs	r3, #9
 8011db8:	e257      	b.n	801226a <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011dba:	6978      	ldr	r0, [r7, #20]
 8011dbc:	f001 fef6 	bl	8013bac <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011dc0:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	48c7      	ldr	r0, [pc, #796]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011dc8:	f007 f98e 	bl	80190e8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011dcc:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	48c5      	ldr	r0, [pc, #788]	; (80120e8 <LoRaMacInitialization+0x388>)
 8011dd4:	f007 f988 	bl	80190e8 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011dd8:	4bc3      	ldr	r3, [pc, #780]	; (80120e8 <LoRaMacInitialization+0x388>)
 8011dda:	2201      	movs	r2, #1
 8011ddc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8011de0:	4bc1      	ldr	r3, [pc, #772]	; (80120e8 <LoRaMacInitialization+0x388>)
 8011de2:	2201      	movs	r2, #1
 8011de4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8011de8:	4abe      	ldr	r2, [pc, #760]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
 8011dec:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011df0:	4bbc      	ldr	r3, [pc, #752]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011df2:	2200      	movs	r2, #0
 8011df4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011df8:	4bba      	ldr	r3, [pc, #744]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011e00:	4bb8      	ldr	r3, [pc, #736]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011e02:	4aba      	ldr	r2, [pc, #744]	; (80120ec <LoRaMacInitialization+0x38c>)
 8011e04:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011e08:	230f      	movs	r3, #15
 8011e0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e0e:	4bb5      	ldr	r3, [pc, #724]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e18:	4611      	mov	r1, r2
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f003 fa59 	bl	80152d2 <RegionGetPhyParam>
 8011e20:	4603      	mov	r3, r0
 8011e22:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	bf14      	ite	ne
 8011e2a:	2301      	movne	r3, #1
 8011e2c:	2300      	moveq	r3, #0
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	4bac      	ldr	r3, [pc, #688]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011e32:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011e36:	230a      	movs	r3, #10
 8011e38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e3c:	4ba9      	ldr	r3, [pc, #676]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e46:	4611      	mov	r1, r2
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f003 fa42 	bl	80152d2 <RegionGetPhyParam>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e54:	b25a      	sxtb	r2, r3
 8011e56:	4ba3      	ldr	r3, [pc, #652]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011e58:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011e5c:	2306      	movs	r3, #6
 8011e5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e62:	4ba0      	ldr	r3, [pc, #640]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e6c:	4611      	mov	r1, r2
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f003 fa2f 	bl	80152d2 <RegionGetPhyParam>
 8011e74:	4603      	mov	r3, r0
 8011e76:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7a:	b25a      	sxtb	r2, r3
 8011e7c:	4b99      	ldr	r3, [pc, #612]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011e7e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011e82:	2310      	movs	r3, #16
 8011e84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e88:	4b96      	ldr	r3, [pc, #600]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e92:	4611      	mov	r1, r2
 8011e94:	4618      	mov	r0, r3
 8011e96:	f003 fa1c 	bl	80152d2 <RegionGetPhyParam>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea0:	4a90      	ldr	r2, [pc, #576]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011ea2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011ea6:	2311      	movs	r3, #17
 8011ea8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011eac:	4b8d      	ldr	r3, [pc, #564]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011eb6:	4611      	mov	r1, r2
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f003 fa0a 	bl	80152d2 <RegionGetPhyParam>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec4:	4a87      	ldr	r2, [pc, #540]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011eca:	2312      	movs	r3, #18
 8011ecc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ed0:	4b84      	ldr	r3, [pc, #528]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ed6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011eda:	4611      	mov	r1, r2
 8011edc:	4618      	mov	r0, r3
 8011ede:	f003 f9f8 	bl	80152d2 <RegionGetPhyParam>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee8:	4a7e      	ldr	r2, [pc, #504]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011eea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011eee:	2313      	movs	r3, #19
 8011ef0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ef4:	4b7b      	ldr	r3, [pc, #492]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011efa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011efe:	4611      	mov	r1, r2
 8011f00:	4618      	mov	r0, r3
 8011f02:	f003 f9e6 	bl	80152d2 <RegionGetPhyParam>
 8011f06:	4603      	mov	r3, r0
 8011f08:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0c:	4a75      	ldr	r2, [pc, #468]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011f12:	2314      	movs	r3, #20
 8011f14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f18:	4b72      	ldr	r3, [pc, #456]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011f22:	4611      	mov	r1, r2
 8011f24:	4618      	mov	r0, r3
 8011f26:	f003 f9d4 	bl	80152d2 <RegionGetPhyParam>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f30:	4a6c      	ldr	r2, [pc, #432]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011f36:	2317      	movs	r3, #23
 8011f38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f3c:	4b69      	ldr	r3, [pc, #420]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011f46:	4611      	mov	r1, r2
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f003 f9c2 	bl	80152d2 <RegionGetPhyParam>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f54:	b2da      	uxtb	r2, r3
 8011f56:	4b63      	ldr	r3, [pc, #396]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011f5c:	2318      	movs	r3, #24
 8011f5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f62:	4b60      	ldr	r3, [pc, #384]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011f6c:	4611      	mov	r1, r2
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f003 f9af 	bl	80152d2 <RegionGetPhyParam>
 8011f74:	4603      	mov	r3, r0
 8011f76:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7a:	4a5a      	ldr	r2, [pc, #360]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f7c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f82:	4a58      	ldr	r2, [pc, #352]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f84:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011f88:	2319      	movs	r3, #25
 8011f8a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f8e:	4b55      	ldr	r3, [pc, #340]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011f98:	4611      	mov	r1, r2
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f003 f999 	bl	80152d2 <RegionGetPhyParam>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa6:	b2da      	uxtb	r2, r3
 8011fa8:	4b4e      	ldr	r3, [pc, #312]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011faa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb0:	b2da      	uxtb	r2, r3
 8011fb2:	4b4c      	ldr	r3, [pc, #304]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011fb4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011fb8:	231e      	movs	r3, #30
 8011fba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011fbe:	4b49      	ldr	r3, [pc, #292]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011fc8:	4611      	mov	r1, r2
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f003 f981 	bl	80152d2 <RegionGetPhyParam>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd6:	b2da      	uxtb	r2, r3
 8011fd8:	4b42      	ldr	r3, [pc, #264]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011fda:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011fde:	231f      	movs	r3, #31
 8011fe0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011fe4:	4b3f      	ldr	r3, [pc, #252]	; (80120e4 <LoRaMacInitialization+0x384>)
 8011fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011fee:	4611      	mov	r1, r2
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f003 f96e 	bl	80152d2 <RegionGetPhyParam>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffc:	b2da      	uxtb	r2, r3
 8011ffe:	4b39      	ldr	r3, [pc, #228]	; (80120e4 <LoRaMacInitialization+0x384>)
 8012000:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012004:	2320      	movs	r3, #32
 8012006:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801200a:	4b36      	ldr	r3, [pc, #216]	; (80120e4 <LoRaMacInitialization+0x384>)
 801200c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012010:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012014:	4611      	mov	r1, r2
 8012016:	4618      	mov	r0, r3
 8012018:	f003 f95b 	bl	80152d2 <RegionGetPhyParam>
 801201c:	4603      	mov	r3, r0
 801201e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012022:	4a30      	ldr	r2, [pc, #192]	; (80120e4 <LoRaMacInitialization+0x384>)
 8012024:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012028:	2321      	movs	r3, #33	; 0x21
 801202a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801202e:	4b2d      	ldr	r3, [pc, #180]	; (80120e4 <LoRaMacInitialization+0x384>)
 8012030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012034:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012038:	4611      	mov	r1, r2
 801203a:	4618      	mov	r0, r3
 801203c:	f003 f949 	bl	80152d2 <RegionGetPhyParam>
 8012040:	4603      	mov	r3, r0
 8012042:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012046:	4a27      	ldr	r2, [pc, #156]	; (80120e4 <LoRaMacInitialization+0x384>)
 8012048:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801204c:	230b      	movs	r3, #11
 801204e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012052:	4b24      	ldr	r3, [pc, #144]	; (80120e4 <LoRaMacInitialization+0x384>)
 8012054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012058:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801205c:	4611      	mov	r1, r2
 801205e:	4618      	mov	r0, r3
 8012060:	f003 f937 	bl	80152d2 <RegionGetPhyParam>
 8012064:	4603      	mov	r3, r0
 8012066:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8012068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206a:	b29a      	uxth	r2, r3
 801206c:	4b1e      	ldr	r3, [pc, #120]	; (80120e8 <LoRaMacInitialization+0x388>)
 801206e:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012072:	230c      	movs	r3, #12
 8012074:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012078:	4b1a      	ldr	r3, [pc, #104]	; (80120e4 <LoRaMacInitialization+0x384>)
 801207a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801207e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012082:	4611      	mov	r1, r2
 8012084:	4618      	mov	r0, r3
 8012086:	f003 f924 	bl	80152d2 <RegionGetPhyParam>
 801208a:	4603      	mov	r3, r0
 801208c:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 801208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012090:	b29a      	uxth	r2, r3
 8012092:	4b15      	ldr	r3, [pc, #84]	; (80120e8 <LoRaMacInitialization+0x388>)
 8012094:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012098:	4b12      	ldr	r3, [pc, #72]	; (80120e4 <LoRaMacInitialization+0x384>)
 801209a:	2201      	movs	r2, #1
 801209c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80120a0:	4b10      	ldr	r3, [pc, #64]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120a2:	220a      	movs	r2, #10
 80120a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80120a8:	4b0e      	ldr	r3, [pc, #56]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120aa:	2206      	movs	r2, #6
 80120ac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80120b0:	4b0c      	ldr	r3, [pc, #48]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120b6:	4a0b      	ldr	r2, [pc, #44]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120b8:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80120ba:	4b0a      	ldr	r3, [pc, #40]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120bc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80120c0:	4b08      	ldr	r3, [pc, #32]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80120c6:	4b07      	ldr	r3, [pc, #28]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120cc:	4a05      	ldr	r2, [pc, #20]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120ce:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80120d0:	4b04      	ldr	r3, [pc, #16]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120d6:	4a03      	ldr	r2, [pc, #12]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120d8:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80120da:	4b02      	ldr	r3, [pc, #8]	; (80120e4 <LoRaMacInitialization+0x384>)
 80120dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80120e0:	e006      	b.n	80120f0 <LoRaMacInitialization+0x390>
 80120e2:	bf00      	nop
 80120e4:	20003594 	.word	0x20003594
 80120e8:	2000308c 	.word	0x2000308c
 80120ec:	01000300 	.word	0x01000300
 80120f0:	4a60      	ldr	r2, [pc, #384]	; (8012274 <LoRaMacInitialization+0x514>)
 80120f2:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80120f4:	4b5f      	ldr	r3, [pc, #380]	; (8012274 <LoRaMacInitialization+0x514>)
 80120f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80120fa:	4a5e      	ldr	r2, [pc, #376]	; (8012274 <LoRaMacInitialization+0x514>)
 80120fc:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80120fe:	4b5d      	ldr	r3, [pc, #372]	; (8012274 <LoRaMacInitialization+0x514>)
 8012100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012104:	4a5b      	ldr	r2, [pc, #364]	; (8012274 <LoRaMacInitialization+0x514>)
 8012106:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012108:	4b5a      	ldr	r3, [pc, #360]	; (8012274 <LoRaMacInitialization+0x514>)
 801210a:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 801210e:	4b59      	ldr	r3, [pc, #356]	; (8012274 <LoRaMacInitialization+0x514>)
 8012110:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012114:	2300      	movs	r3, #0
 8012116:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801211a:	4b57      	ldr	r3, [pc, #348]	; (8012278 <LoRaMacInitialization+0x518>)
 801211c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801211e:	4b57      	ldr	r3, [pc, #348]	; (801227c <LoRaMacInitialization+0x51c>)
 8012120:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012122:	4b54      	ldr	r3, [pc, #336]	; (8012274 <LoRaMacInitialization+0x514>)
 8012124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012128:	f107 0218 	add.w	r2, r7, #24
 801212c:	4611      	mov	r1, r2
 801212e:	4618      	mov	r0, r3
 8012130:	f003 f907 	bl	8015342 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8012134:	4a52      	ldr	r2, [pc, #328]	; (8012280 <LoRaMacInitialization+0x520>)
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 801213c:	f7ff f85a 	bl	80111f4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012140:	4b4c      	ldr	r3, [pc, #304]	; (8012274 <LoRaMacInitialization+0x514>)
 8012142:	2201      	movs	r2, #1
 8012144:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8012148:	4a4d      	ldr	r2, [pc, #308]	; (8012280 <LoRaMacInitialization+0x520>)
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012150:	4b4b      	ldr	r3, [pc, #300]	; (8012280 <LoRaMacInitialization+0x520>)
 8012152:	2200      	movs	r2, #0
 8012154:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8012158:	4b49      	ldr	r3, [pc, #292]	; (8012280 <LoRaMacInitialization+0x520>)
 801215a:	2201      	movs	r2, #1
 801215c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012160:	4b44      	ldr	r3, [pc, #272]	; (8012274 <LoRaMacInitialization+0x514>)
 8012162:	2200      	movs	r2, #0
 8012164:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012166:	4b43      	ldr	r3, [pc, #268]	; (8012274 <LoRaMacInitialization+0x514>)
 8012168:	2200      	movs	r2, #0
 801216a:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801216c:	2300      	movs	r3, #0
 801216e:	9300      	str	r3, [sp, #0]
 8012170:	4b44      	ldr	r3, [pc, #272]	; (8012284 <LoRaMacInitialization+0x524>)
 8012172:	2200      	movs	r2, #0
 8012174:	f04f 31ff 	mov.w	r1, #4294967295
 8012178:	4843      	ldr	r0, [pc, #268]	; (8012288 <LoRaMacInitialization+0x528>)
 801217a:	f00a fed3 	bl	801cf24 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801217e:	2300      	movs	r3, #0
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	4b42      	ldr	r3, [pc, #264]	; (801228c <LoRaMacInitialization+0x52c>)
 8012184:	2200      	movs	r2, #0
 8012186:	f04f 31ff 	mov.w	r1, #4294967295
 801218a:	4841      	ldr	r0, [pc, #260]	; (8012290 <LoRaMacInitialization+0x530>)
 801218c:	f00a feca 	bl	801cf24 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012190:	2300      	movs	r3, #0
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	4b3f      	ldr	r3, [pc, #252]	; (8012294 <LoRaMacInitialization+0x534>)
 8012196:	2200      	movs	r2, #0
 8012198:	f04f 31ff 	mov.w	r1, #4294967295
 801219c:	483e      	ldr	r0, [pc, #248]	; (8012298 <LoRaMacInitialization+0x538>)
 801219e:	f00a fec1 	bl	801cf24 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80121a2:	2300      	movs	r3, #0
 80121a4:	9300      	str	r3, [sp, #0]
 80121a6:	4b3d      	ldr	r3, [pc, #244]	; (801229c <LoRaMacInitialization+0x53c>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	f04f 31ff 	mov.w	r1, #4294967295
 80121ae:	483c      	ldr	r0, [pc, #240]	; (80122a0 <LoRaMacInitialization+0x540>)
 80121b0:	f00a feb8 	bl	801cf24 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80121b4:	4c2f      	ldr	r4, [pc, #188]	; (8012274 <LoRaMacInitialization+0x514>)
 80121b6:	463b      	mov	r3, r7
 80121b8:	4618      	mov	r0, r3
 80121ba:	f00a fe1d 	bl	801cdf8 <SysTimeGetMcuTime>
 80121be:	f504 7382 	add.w	r3, r4, #260	; 0x104
 80121c2:	463a      	mov	r2, r7
 80121c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121c8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80121cc:	4b2c      	ldr	r3, [pc, #176]	; (8012280 <LoRaMacInitialization+0x520>)
 80121ce:	4a35      	ldr	r2, [pc, #212]	; (80122a4 <LoRaMacInitialization+0x544>)
 80121d0:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80121d4:	4b2a      	ldr	r3, [pc, #168]	; (8012280 <LoRaMacInitialization+0x520>)
 80121d6:	4a34      	ldr	r2, [pc, #208]	; (80122a8 <LoRaMacInitialization+0x548>)
 80121d8:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80121dc:	4b28      	ldr	r3, [pc, #160]	; (8012280 <LoRaMacInitialization+0x520>)
 80121de:	4a33      	ldr	r2, [pc, #204]	; (80122ac <LoRaMacInitialization+0x54c>)
 80121e0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80121e4:	4b26      	ldr	r3, [pc, #152]	; (8012280 <LoRaMacInitialization+0x520>)
 80121e6:	4a32      	ldr	r2, [pc, #200]	; (80122b0 <LoRaMacInitialization+0x550>)
 80121e8:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80121ec:	4b24      	ldr	r3, [pc, #144]	; (8012280 <LoRaMacInitialization+0x520>)
 80121ee:	4a31      	ldr	r2, [pc, #196]	; (80122b4 <LoRaMacInitialization+0x554>)
 80121f0:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80121f4:	4b30      	ldr	r3, [pc, #192]	; (80122b8 <LoRaMacInitialization+0x558>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	4830      	ldr	r0, [pc, #192]	; (80122bc <LoRaMacInitialization+0x55c>)
 80121fa:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	689b      	ldr	r3, [r3, #8]
 8012200:	4619      	mov	r1, r3
 8012202:	482f      	ldr	r0, [pc, #188]	; (80122c0 <LoRaMacInitialization+0x560>)
 8012204:	f7fa ff44 	bl	800d090 <SecureElementInit>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d001      	beq.n	8012212 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801220e:	2311      	movs	r3, #17
 8012210:	e02b      	b.n	801226a <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012212:	4818      	ldr	r0, [pc, #96]	; (8012274 <LoRaMacInitialization+0x514>)
 8012214:	f002 f976 	bl	8014504 <LoRaMacCryptoInit>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801221e:	2311      	movs	r3, #17
 8012220:	e023      	b.n	801226a <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012222:	f001 fa95 	bl	8013750 <LoRaMacCommandsInit>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801222c:	2313      	movs	r3, #19
 801222e:	e01c      	b.n	801226a <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012230:	4824      	ldr	r0, [pc, #144]	; (80122c4 <LoRaMacInitialization+0x564>)
 8012232:	f002 fa31 	bl	8014698 <LoRaMacCryptoSetMulticastReference>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d001      	beq.n	8012240 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801223c:	2311      	movs	r3, #17
 801223e:	e014      	b.n	801226a <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012240:	4b1d      	ldr	r3, [pc, #116]	; (80122b8 <LoRaMacInitialization+0x558>)
 8012242:	695b      	ldr	r3, [r3, #20]
 8012244:	4798      	blx	r3
 8012246:	4603      	mov	r3, r0
 8012248:	4618      	mov	r0, r3
 801224a:	f006 feed 	bl	8019028 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801224e:	4b1a      	ldr	r3, [pc, #104]	; (80122b8 <LoRaMacInitialization+0x558>)
 8012250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012252:	4a08      	ldr	r2, [pc, #32]	; (8012274 <LoRaMacInitialization+0x514>)
 8012254:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8012258:	4610      	mov	r0, r2
 801225a:	4798      	blx	r3
    Radio.Sleep( );
 801225c:	4b16      	ldr	r3, [pc, #88]	; (80122b8 <LoRaMacInitialization+0x558>)
 801225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012260:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012262:	2001      	movs	r0, #1
 8012264:	f7fd faaa 	bl	800f7bc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	3734      	adds	r7, #52	; 0x34
 801226e:	46bd      	mov	sp, r7
 8012270:	bd90      	pop	{r4, r7, pc}
 8012272:	bf00      	nop
 8012274:	20003594 	.word	0x20003594
 8012278:	2000376c 	.word	0x2000376c
 801227c:	20003810 	.word	0x20003810
 8012280:	2000308c 	.word	0x2000308c
 8012284:	0800fd45 	.word	0x0800fd45
 8012288:	200033f4 	.word	0x200033f4
 801228c:	0800fdb9 	.word	0x0800fdb9
 8012290:	2000340c 	.word	0x2000340c
 8012294:	0800fe25 	.word	0x0800fe25
 8012298:	20003424 	.word	0x20003424
 801229c:	0800fe99 	.word	0x0800fe99
 80122a0:	20003484 	.word	0x20003484
 80122a4:	0800e949 	.word	0x0800e949
 80122a8:	0800e9c1 	.word	0x0800e9c1
 80122ac:	0800ea99 	.word	0x0800ea99
 80122b0:	0800ea4d 	.word	0x0800ea4d
 80122b4:	0800ead5 	.word	0x0800ead5
 80122b8:	0801e73c 	.word	0x0801e73c
 80122bc:	200033d8 	.word	0x200033d8
 80122c0:	200036ac 	.word	0x200036ac
 80122c4:	20003664 	.word	0x20003664

080122c8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80122c8:	b480      	push	{r7}
 80122ca:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80122cc:	4b04      	ldr	r3, [pc, #16]	; (80122e0 <LoRaMacStart+0x18>)
 80122ce:	2200      	movs	r2, #0
 80122d0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80122d4:	2300      	movs	r3, #0
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	46bd      	mov	sp, r7
 80122da:	bc80      	pop	{r7}
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	2000308c 	.word	0x2000308c

080122e4 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b08a      	sub	sp, #40	; 0x28
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	4603      	mov	r3, r0
 80122ec:	6039      	str	r1, [r7, #0]
 80122ee:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80122f0:	4b3e      	ldr	r3, [pc, #248]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 80122f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122f4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80122f6:	4b3d      	ldr	r3, [pc, #244]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 80122f8:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 80122fc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80122fe:	4b3b      	ldr	r3, [pc, #236]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 8012300:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8012304:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8012306:	2300      	movs	r3, #0
 8012308:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d101      	bne.n	8012314 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012310:	2303      	movs	r3, #3
 8012312:	e066      	b.n	80123e2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8012314:	4b35      	ldr	r3, [pc, #212]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 8012316:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801231a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 801231c:	2300      	movs	r3, #0
 801231e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012320:	4b32      	ldr	r3, [pc, #200]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 8012322:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8012326:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012328:	4b30      	ldr	r3, [pc, #192]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 801232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801232c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801232e:	4b30      	ldr	r3, [pc, #192]	; (80123f0 <LoRaMacQueryTxPossible+0x10c>)
 8012330:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8012334:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012336:	4b2e      	ldr	r3, [pc, #184]	; (80123f0 <LoRaMacQueryTxPossible+0x10c>)
 8012338:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 801233c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801233e:	4b2b      	ldr	r3, [pc, #172]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 8012340:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012344:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012348:	4b28      	ldr	r3, [pc, #160]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 801234a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801234e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012352:	4b26      	ldr	r3, [pc, #152]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 8012354:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012358:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801235c:	4b23      	ldr	r3, [pc, #140]	; (80123ec <LoRaMacQueryTxPossible+0x108>)
 801235e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8012366:	f107 0310 	add.w	r3, r7, #16
 801236a:	f107 020e 	add.w	r2, r7, #14
 801236e:	f107 010f 	add.w	r1, r7, #15
 8012372:	f107 0014 	add.w	r0, r7, #20
 8012376:	f000 ffe1 	bl	801333c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801237e:	4618      	mov	r0, r3
 8012380:	f7fd fed2 	bl	8010128 <GetMaxAppPayloadWithoutFOptsLength>
 8012384:	4603      	mov	r3, r0
 8012386:	461a      	mov	r2, r3
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801238c:	f107 0308 	add.w	r3, r7, #8
 8012390:	4618      	mov	r0, r3
 8012392:	f001 faab 	bl	80138ec <LoRaMacCommandsGetSizeSerializedCmds>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d001      	beq.n	80123a0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801239c:	2313      	movs	r3, #19
 801239e:	e020      	b.n	80123e2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	2b0f      	cmp	r3, #15
 80123a4:	d819      	bhi.n	80123da <LoRaMacQueryTxPossible+0xf6>
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	785b      	ldrb	r3, [r3, #1]
 80123aa:	461a      	mov	r2, r3
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d313      	bcc.n	80123da <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	785a      	ldrb	r2, [r3, #1]
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	785b      	ldrb	r3, [r3, #1]
 80123c6:	4619      	mov	r1, r3
 80123c8:	79fa      	ldrb	r2, [r7, #7]
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	4413      	add	r3, r2
 80123ce:	4299      	cmp	r1, r3
 80123d0:	d301      	bcc.n	80123d6 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80123d2:	2300      	movs	r3, #0
 80123d4:	e005      	b.n	80123e2 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80123d6:	2308      	movs	r3, #8
 80123d8:	e003      	b.n	80123e2 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	2200      	movs	r2, #0
 80123de:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80123e0:	2308      	movs	r3, #8
    }
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3728      	adds	r7, #40	; 0x28
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	20003594 	.word	0x20003594
 80123f0:	2000308c 	.word	0x2000308c

080123f4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80123f4:	b590      	push	{r4, r7, lr}
 80123f6:	b087      	sub	sp, #28
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80123fc:	2300      	movs	r3, #0
 80123fe:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d101      	bne.n	801240a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012406:	2303      	movs	r3, #3
 8012408:	e14b      	b.n	80126a2 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	2b28      	cmp	r3, #40	; 0x28
 8012410:	f200 8140 	bhi.w	8012694 <LoRaMacMibGetRequestConfirm+0x2a0>
 8012414:	a201      	add	r2, pc, #4	; (adr r2, 801241c <LoRaMacMibGetRequestConfirm+0x28>)
 8012416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801241a:	bf00      	nop
 801241c:	080124c1 	.word	0x080124c1
 8012420:	080124cd 	.word	0x080124cd
 8012424:	080124d9 	.word	0x080124d9
 8012428:	080124e5 	.word	0x080124e5
 801242c:	080124f1 	.word	0x080124f1
 8012430:	080124fd 	.word	0x080124fd
 8012434:	08012509 	.word	0x08012509
 8012438:	08012695 	.word	0x08012695
 801243c:	08012695 	.word	0x08012695
 8012440:	08012695 	.word	0x08012695
 8012444:	08012695 	.word	0x08012695
 8012448:	08012695 	.word	0x08012695
 801244c:	08012695 	.word	0x08012695
 8012450:	08012695 	.word	0x08012695
 8012454:	08012695 	.word	0x08012695
 8012458:	08012515 	.word	0x08012515
 801245c:	08012521 	.word	0x08012521
 8012460:	0801252d 	.word	0x0801252d
 8012464:	0801254f 	.word	0x0801254f
 8012468:	08012561 	.word	0x08012561
 801246c:	08012573 	.word	0x08012573
 8012470:	08012585 	.word	0x08012585
 8012474:	080125b9 	.word	0x080125b9
 8012478:	08012597 	.word	0x08012597
 801247c:	080125db 	.word	0x080125db
 8012480:	080125e7 	.word	0x080125e7
 8012484:	080125f1 	.word	0x080125f1
 8012488:	080125fb 	.word	0x080125fb
 801248c:	08012605 	.word	0x08012605
 8012490:	0801260f 	.word	0x0801260f
 8012494:	08012619 	.word	0x08012619
 8012498:	08012625 	.word	0x08012625
 801249c:	0801263d 	.word	0x0801263d
 80124a0:	08012631 	.word	0x08012631
 80124a4:	08012649 	.word	0x08012649
 80124a8:	08012653 	.word	0x08012653
 80124ac:	0801265f 	.word	0x0801265f
 80124b0:	08012675 	.word	0x08012675
 80124b4:	08012669 	.word	0x08012669
 80124b8:	08012695 	.word	0x08012695
 80124bc:	08012681 	.word	0x08012681
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80124c0:	4b7a      	ldr	r3, [pc, #488]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80124c2:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	711a      	strb	r2, [r3, #4]
            break;
 80124ca:	e0e9      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80124cc:	4b77      	ldr	r3, [pc, #476]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80124ce:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	711a      	strb	r2, [r3, #4]
            break;
 80124d6:	e0e3      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80124d8:	f7fb f898 	bl	800d60c <SecureElementGetDevEui>
 80124dc:	4602      	mov	r2, r0
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	605a      	str	r2, [r3, #4]
            break;
 80124e2:	e0dd      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80124e4:	f7fb f8b4 	bl	800d650 <SecureElementGetJoinEui>
 80124e8:	4602      	mov	r2, r0
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	605a      	str	r2, [r3, #4]
            break;
 80124ee:	e0d7      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80124f0:	4b6e      	ldr	r3, [pc, #440]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80124f2:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	711a      	strb	r2, [r3, #4]
            break;
 80124fa:	e0d1      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80124fc:	4b6b      	ldr	r3, [pc, #428]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80124fe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	605a      	str	r2, [r3, #4]
            break;
 8012506:	e0cb      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8012508:	4b68      	ldr	r3, [pc, #416]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 801250a:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	605a      	str	r2, [r3, #4]
            break;
 8012512:	e0c5      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012514:	4b65      	ldr	r3, [pc, #404]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012516:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	711a      	strb	r2, [r3, #4]
            break;
 801251e:	e0bf      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012520:	4b62      	ldr	r3, [pc, #392]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012522:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	711a      	strb	r2, [r3, #4]
            break;
 801252a:	e0b9      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801252c:	231d      	movs	r3, #29
 801252e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012530:	4b5e      	ldr	r3, [pc, #376]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012536:	f107 0210 	add.w	r2, r7, #16
 801253a:	4611      	mov	r1, r2
 801253c:	4618      	mov	r0, r3
 801253e:	f002 fec8 	bl	80152d2 <RegionGetPhyParam>
 8012542:	4603      	mov	r3, r0
 8012544:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012546:	68fa      	ldr	r2, [r7, #12]
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	605a      	str	r2, [r3, #4]
            break;
 801254c:	e0a8      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	4a56      	ldr	r2, [pc, #344]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012552:	3304      	adds	r3, #4
 8012554:	3264      	adds	r2, #100	; 0x64
 8012556:	e892 0003 	ldmia.w	r2, {r0, r1}
 801255a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801255e:	e09f      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4a52      	ldr	r2, [pc, #328]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012564:	3304      	adds	r3, #4
 8012566:	32a4      	adds	r2, #164	; 0xa4
 8012568:	e892 0003 	ldmia.w	r2, {r0, r1}
 801256c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012570:	e096      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	4a4d      	ldr	r2, [pc, #308]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012576:	3304      	adds	r3, #4
 8012578:	326c      	adds	r2, #108	; 0x6c
 801257a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801257e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012582:	e08d      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4a49      	ldr	r2, [pc, #292]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012588:	3304      	adds	r3, #4
 801258a:	32ac      	adds	r2, #172	; 0xac
 801258c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012590:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012594:	e084      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012596:	231b      	movs	r3, #27
 8012598:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801259a:	4b44      	ldr	r3, [pc, #272]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 801259c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125a0:	f107 0210 	add.w	r2, r7, #16
 80125a4:	4611      	mov	r1, r2
 80125a6:	4618      	mov	r0, r3
 80125a8:	f002 fe93 	bl	80152d2 <RegionGetPhyParam>
 80125ac:	4603      	mov	r3, r0
 80125ae:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80125b0:	68fa      	ldr	r2, [r7, #12]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	605a      	str	r2, [r3, #4]
            break;
 80125b6:	e073      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80125b8:	231a      	movs	r3, #26
 80125ba:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125bc:	4b3b      	ldr	r3, [pc, #236]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80125be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125c2:	f107 0210 	add.w	r2, r7, #16
 80125c6:	4611      	mov	r1, r2
 80125c8:	4618      	mov	r0, r3
 80125ca:	f002 fe82 	bl	80152d2 <RegionGetPhyParam>
 80125ce:	4603      	mov	r3, r0
 80125d0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80125d2:	68fa      	ldr	r2, [r7, #12]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	605a      	str	r2, [r3, #4]
            break;
 80125d8:	e062      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80125da:	4b34      	ldr	r3, [pc, #208]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80125dc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	711a      	strb	r2, [r3, #4]
            break;
 80125e4:	e05c      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80125e6:	4b31      	ldr	r3, [pc, #196]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80125e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	605a      	str	r2, [r3, #4]
            break;
 80125ee:	e057      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80125f0:	4b2e      	ldr	r3, [pc, #184]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80125f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	605a      	str	r2, [r3, #4]
            break;
 80125f8:	e052      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80125fa:	4b2c      	ldr	r3, [pc, #176]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 80125fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	605a      	str	r2, [r3, #4]
            break;
 8012602:	e04d      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012604:	4b29      	ldr	r3, [pc, #164]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012606:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	605a      	str	r2, [r3, #4]
            break;
 801260c:	e048      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801260e:	4b27      	ldr	r3, [pc, #156]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	605a      	str	r2, [r3, #4]
            break;
 8012616:	e043      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012618:	4b24      	ldr	r3, [pc, #144]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 801261a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	711a      	strb	r2, [r3, #4]
            break;
 8012622:	e03d      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012624:	4b21      	ldr	r3, [pc, #132]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012626:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	711a      	strb	r2, [r3, #4]
            break;
 801262e:	e037      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012630:	4b1e      	ldr	r3, [pc, #120]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012632:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	711a      	strb	r2, [r3, #4]
            break;
 801263a:	e031      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801263c:	4b1b      	ldr	r3, [pc, #108]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 801263e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	711a      	strb	r2, [r3, #4]
            break;
 8012646:	e02b      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012648:	4b18      	ldr	r3, [pc, #96]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 801264a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	605a      	str	r2, [r3, #4]
            break;
 8012650:	e026      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012652:	4b16      	ldr	r3, [pc, #88]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012654:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	711a      	strb	r2, [r3, #4]
            break;
 801265c:	e020      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801265e:	4b13      	ldr	r3, [pc, #76]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012660:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	605a      	str	r2, [r3, #4]
            break;
 8012666:	e01b      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8012668:	f7ff f934 	bl	80118d4 <GetNvmData>
 801266c:	4602      	mov	r2, r0
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	605a      	str	r2, [r3, #4]
            break;
 8012672:	e015      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012674:	4b0d      	ldr	r3, [pc, #52]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012676:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	605a      	str	r2, [r3, #4]
            break;
 801267e:	e00f      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4a0a      	ldr	r2, [pc, #40]	; (80126ac <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012684:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8012688:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801268a:	687c      	ldr	r4, [r7, #4]
 801268c:	f003 f84a 	bl	8015724 <RegionGetVersion>
 8012690:	60a0      	str	r0, [r4, #8]
            break;
 8012692:	e005      	b.n	80126a0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 fefd 	bl	8013494 <LoRaMacClassBMibGetRequestConfirm>
 801269a:	4603      	mov	r3, r0
 801269c:	75fb      	strb	r3, [r7, #23]
            break;
 801269e:	bf00      	nop
        }
    }
    return status;
 80126a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	371c      	adds	r7, #28
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd90      	pop	{r4, r7, pc}
 80126aa:	bf00      	nop
 80126ac:	20003594 	.word	0x20003594

080126b0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b086      	sub	sp, #24
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80126b8:	2300      	movs	r3, #0
 80126ba:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d101      	bne.n	80126c6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80126c2:	2303      	movs	r3, #3
 80126c4:	e32b      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80126c6:	4bb4      	ldr	r3, [pc, #720]	; (8012998 <LoRaMacMibSetRequestConfirm+0x2e8>)
 80126c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126cc:	f003 0302 	and.w	r3, r3, #2
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d001      	beq.n	80126d8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80126d4:	2301      	movs	r3, #1
 80126d6:	e322      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	2b27      	cmp	r3, #39	; 0x27
 80126de:	f200 82fc 	bhi.w	8012cda <LoRaMacMibSetRequestConfirm+0x62a>
 80126e2:	a201      	add	r2, pc, #4	; (adr r2, 80126e8 <LoRaMacMibSetRequestConfirm+0x38>)
 80126e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126e8:	08012789 	.word	0x08012789
 80126ec:	08012799 	.word	0x08012799
 80126f0:	080127b3 	.word	0x080127b3
 80126f4:	080127cb 	.word	0x080127cb
 80126f8:	080127e3 	.word	0x080127e3
 80126fc:	080127ef 	.word	0x080127ef
 8012700:	080127fb 	.word	0x080127fb
 8012704:	08012807 	.word	0x08012807
 8012708:	0801282d 	.word	0x0801282d
 801270c:	08012853 	.word	0x08012853
 8012710:	08012879 	.word	0x08012879
 8012714:	0801289f 	.word	0x0801289f
 8012718:	080128c5 	.word	0x080128c5
 801271c:	080128eb 	.word	0x080128eb
 8012720:	08012911 	.word	0x08012911
 8012724:	08012937 	.word	0x08012937
 8012728:	08012957 	.word	0x08012957
 801272c:	08012cdb 	.word	0x08012cdb
 8012730:	08012963 	.word	0x08012963
 8012734:	080129e1 	.word	0x080129e1
 8012738:	08012a21 	.word	0x08012a21
 801273c:	08012a83 	.word	0x08012a83
 8012740:	08012af3 	.word	0x08012af3
 8012744:	08012ac3 	.word	0x08012ac3
 8012748:	08012b23 	.word	0x08012b23
 801274c:	08012b45 	.word	0x08012b45
 8012750:	08012b4f 	.word	0x08012b4f
 8012754:	08012b59 	.word	0x08012b59
 8012758:	08012b63 	.word	0x08012b63
 801275c:	08012b6d 	.word	0x08012b6d
 8012760:	08012b77 	.word	0x08012b77
 8012764:	08012ba9 	.word	0x08012ba9
 8012768:	08012c15 	.word	0x08012c15
 801276c:	08012be3 	.word	0x08012be3
 8012770:	08012c47 	.word	0x08012c47
 8012774:	08012c5d 	.word	0x08012c5d
 8012778:	08012c7d 	.word	0x08012c7d
 801277c:	08012c87 	.word	0x08012c87
 8012780:	08012c93 	.word	0x08012c93
 8012784:	08012cb1 	.word	0x08012cb1
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	791b      	ldrb	r3, [r3, #4]
 801278c:	4618      	mov	r0, r3
 801278e:	f7fd fbfb 	bl	800ff88 <SwitchClass>
 8012792:	4603      	mov	r3, r0
 8012794:	75fb      	strb	r3, [r7, #23]
            break;
 8012796:	e2c1      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	791b      	ldrb	r3, [r3, #4]
 801279c:	2b02      	cmp	r3, #2
 801279e:	d005      	beq.n	80127ac <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	791a      	ldrb	r2, [r3, #4]
 80127a4:	4b7d      	ldr	r3, [pc, #500]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 80127a6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80127aa:	e2b7      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127ac:	2303      	movs	r3, #3
 80127ae:	75fb      	strb	r3, [r7, #23]
            break;
 80127b0:	e2b4      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7fa ff10 	bl	800d5dc <SecureElementSetDevEui>
 80127bc:	4603      	mov	r3, r0
 80127be:	2b00      	cmp	r3, #0
 80127c0:	f000 8291 	beq.w	8012ce6 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127c4:	2303      	movs	r3, #3
 80127c6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127c8:	e28d      	b.n	8012ce6 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	685b      	ldr	r3, [r3, #4]
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7fa ff26 	bl	800d620 <SecureElementSetJoinEui>
 80127d4:	4603      	mov	r3, r0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	f000 8287 	beq.w	8012cea <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127dc:	2303      	movs	r3, #3
 80127de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127e0:	e283      	b.n	8012cea <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	791a      	ldrb	r2, [r3, #4]
 80127e6:	4b6d      	ldr	r3, [pc, #436]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 80127e8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 80127ec:	e296      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	4a6a      	ldr	r2, [pc, #424]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 80127f4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 80127f8:	e290      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	685b      	ldr	r3, [r3, #4]
 80127fe:	4a67      	ldr	r2, [pc, #412]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012800:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8012804:	e28a      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d00b      	beq.n	8012826 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	4619      	mov	r1, r3
 8012814:	2000      	movs	r0, #0
 8012816:	f001 ff67 	bl	80146e8 <LoRaMacCryptoSetKey>
 801281a:	4603      	mov	r3, r0
 801281c:	2b00      	cmp	r3, #0
 801281e:	f000 8266 	beq.w	8012cee <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012822:	2311      	movs	r3, #17
 8012824:	e27b      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012826:	2303      	movs	r3, #3
 8012828:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801282a:	e260      	b.n	8012cee <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00b      	beq.n	801284c <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	4619      	mov	r1, r3
 801283a:	2001      	movs	r0, #1
 801283c:	f001 ff54 	bl	80146e8 <LoRaMacCryptoSetKey>
 8012840:	4603      	mov	r3, r0
 8012842:	2b00      	cmp	r3, #0
 8012844:	f000 8255 	beq.w	8012cf2 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012848:	2311      	movs	r3, #17
 801284a:	e268      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801284c:	2303      	movs	r3, #3
 801284e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012850:	e24f      	b.n	8012cf2 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d00b      	beq.n	8012872 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	4619      	mov	r1, r3
 8012860:	2002      	movs	r0, #2
 8012862:	f001 ff41 	bl	80146e8 <LoRaMacCryptoSetKey>
 8012866:	4603      	mov	r3, r0
 8012868:	2b00      	cmp	r3, #0
 801286a:	f000 8244 	beq.w	8012cf6 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801286e:	2311      	movs	r3, #17
 8012870:	e255      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012872:	2303      	movs	r3, #3
 8012874:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012876:	e23e      	b.n	8012cf6 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d00b      	beq.n	8012898 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	4619      	mov	r1, r3
 8012886:	2003      	movs	r0, #3
 8012888:	f001 ff2e 	bl	80146e8 <LoRaMacCryptoSetKey>
 801288c:	4603      	mov	r3, r0
 801288e:	2b00      	cmp	r3, #0
 8012890:	f000 8233 	beq.w	8012cfa <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012894:	2311      	movs	r3, #17
 8012896:	e242      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012898:	2303      	movs	r3, #3
 801289a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801289c:	e22d      	b.n	8012cfa <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d00b      	beq.n	80128be <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	4619      	mov	r1, r3
 80128ac:	207f      	movs	r0, #127	; 0x7f
 80128ae:	f001 ff1b 	bl	80146e8 <LoRaMacCryptoSetKey>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	f000 8222 	beq.w	8012cfe <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128ba:	2311      	movs	r3, #17
 80128bc:	e22f      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128be:	2303      	movs	r3, #3
 80128c0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128c2:	e21c      	b.n	8012cfe <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d00b      	beq.n	80128e4 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	4619      	mov	r1, r3
 80128d2:	2080      	movs	r0, #128	; 0x80
 80128d4:	f001 ff08 	bl	80146e8 <LoRaMacCryptoSetKey>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	f000 8211 	beq.w	8012d02 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128e0:	2311      	movs	r3, #17
 80128e2:	e21c      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128e4:	2303      	movs	r3, #3
 80128e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128e8:	e20b      	b.n	8012d02 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00b      	beq.n	801290a <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	4619      	mov	r1, r3
 80128f8:	2081      	movs	r0, #129	; 0x81
 80128fa:	f001 fef5 	bl	80146e8 <LoRaMacCryptoSetKey>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	f000 8200 	beq.w	8012d06 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012906:	2311      	movs	r3, #17
 8012908:	e209      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801290a:	2303      	movs	r3, #3
 801290c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801290e:	e1fa      	b.n	8012d06 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d00b      	beq.n	8012930 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	4619      	mov	r1, r3
 801291e:	2082      	movs	r0, #130	; 0x82
 8012920:	f001 fee2 	bl	80146e8 <LoRaMacCryptoSetKey>
 8012924:	4603      	mov	r3, r0
 8012926:	2b00      	cmp	r3, #0
 8012928:	f000 81ef 	beq.w	8012d0a <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801292c:	2311      	movs	r3, #17
 801292e:	e1f6      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012930:	2303      	movs	r3, #3
 8012932:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012934:	e1e9      	b.n	8012d0a <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	791a      	ldrb	r2, [r3, #4]
 801293a:	4b18      	ldr	r3, [pc, #96]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 801293c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012940:	4b17      	ldr	r3, [pc, #92]	; (80129a0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8012942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012944:	4a15      	ldr	r2, [pc, #84]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012946:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 801294a:	4610      	mov	r0, r2
 801294c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801294e:	4b14      	ldr	r3, [pc, #80]	; (80129a0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8012950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012952:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012954:	e1e2      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	791a      	ldrb	r2, [r3, #4]
 801295a:	4b10      	ldr	r3, [pc, #64]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 801295c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8012960:	e1dc      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	7a1b      	ldrb	r3, [r3, #8]
 8012966:	b25b      	sxtb	r3, r3
 8012968:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801296a:	4b0c      	ldr	r3, [pc, #48]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 801296c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012970:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012972:	4b0a      	ldr	r3, [pc, #40]	; (801299c <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012978:	f107 0108 	add.w	r1, r7, #8
 801297c:	2207      	movs	r2, #7
 801297e:	4618      	mov	r0, r3
 8012980:	f002 fcf7 	bl	8015372 <RegionVerify>
 8012984:	4603      	mov	r3, r0
 8012986:	f083 0301 	eor.w	r3, r3, #1
 801298a:	b2db      	uxtb	r3, r3
 801298c:	2b00      	cmp	r3, #0
 801298e:	d009      	beq.n	80129a4 <LoRaMacMibSetRequestConfirm+0x2f4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012990:	2303      	movs	r3, #3
 8012992:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8012994:	e1c2      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
 8012996:	bf00      	nop
 8012998:	2000308c 	.word	0x2000308c
 801299c:	20003594 	.word	0x20003594
 80129a0:	0801e73c 	.word	0x0801e73c
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80129aa:	4bb2      	ldr	r3, [pc, #712]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129b0:	f107 0108 	add.w	r1, r7, #8
 80129b4:	2200      	movs	r2, #0
 80129b6:	4618      	mov	r0, r3
 80129b8:	f002 fcdb 	bl	8015372 <RegionVerify>
 80129bc:	4603      	mov	r3, r0
 80129be:	f083 0301 	eor.w	r3, r3, #1
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d002      	beq.n	80129ce <LoRaMacMibSetRequestConfirm+0x31e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129c8:	2303      	movs	r3, #3
 80129ca:	75fb      	strb	r3, [r7, #23]
            break;
 80129cc:	e1a6      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80129ce:	4ba9      	ldr	r3, [pc, #676]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	3364      	adds	r3, #100	; 0x64
 80129d4:	3204      	adds	r2, #4
 80129d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80129da:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80129de:	e19d      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	7a1b      	ldrb	r3, [r3, #8]
 80129e4:	b25b      	sxtb	r3, r3
 80129e6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80129e8:	4ba2      	ldr	r3, [pc, #648]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129ea:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80129ee:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80129f0:	4ba0      	ldr	r3, [pc, #640]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129f6:	f107 0108 	add.w	r1, r7, #8
 80129fa:	2207      	movs	r2, #7
 80129fc:	4618      	mov	r0, r3
 80129fe:	f002 fcb8 	bl	8015372 <RegionVerify>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d008      	beq.n	8012a1a <LoRaMacMibSetRequestConfirm+0x36a>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012a08:	4b9a      	ldr	r3, [pc, #616]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	33a4      	adds	r3, #164	; 0xa4
 8012a0e:	3204      	adds	r2, #4
 8012a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a14:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a18:	e180      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a1a:	2303      	movs	r3, #3
 8012a1c:	75fb      	strb	r3, [r7, #23]
            break;
 8012a1e:	e17d      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	7a1b      	ldrb	r3, [r3, #8]
 8012a24:	b25b      	sxtb	r3, r3
 8012a26:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a28:	4b92      	ldr	r3, [pc, #584]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a2a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012a2e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012a30:	4b90      	ldr	r3, [pc, #576]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a36:	f107 0108 	add.w	r1, r7, #8
 8012a3a:	2207      	movs	r2, #7
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f002 fc98 	bl	8015372 <RegionVerify>
 8012a42:	4603      	mov	r3, r0
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d019      	beq.n	8012a7c <LoRaMacMibSetRequestConfirm+0x3cc>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012a48:	4b8a      	ldr	r3, [pc, #552]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	336c      	adds	r3, #108	; 0x6c
 8012a4e:	3204      	adds	r2, #4
 8012a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a54:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012a58:	4b86      	ldr	r3, [pc, #536]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a5a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8012a5e:	2b02      	cmp	r3, #2
 8012a60:	f040 8155 	bne.w	8012d0e <LoRaMacMibSetRequestConfirm+0x65e>
 8012a64:	4b83      	ldr	r3, [pc, #524]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a66:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 814f 	beq.w	8012d0e <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012a70:	4b81      	ldr	r3, [pc, #516]	; (8012c78 <LoRaMacMibSetRequestConfirm+0x5c8>)
 8012a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a74:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012a76:	f7fe fcd9 	bl	801142c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a7a:	e148      	b.n	8012d0e <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a7c:	2303      	movs	r3, #3
 8012a7e:	75fb      	strb	r3, [r7, #23]
            break;
 8012a80:	e145      	b.n	8012d0e <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	7a1b      	ldrb	r3, [r3, #8]
 8012a86:	b25b      	sxtb	r3, r3
 8012a88:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a8a:	4b7a      	ldr	r3, [pc, #488]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a8c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012a90:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012a92:	4b78      	ldr	r3, [pc, #480]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a98:	f107 0108 	add.w	r1, r7, #8
 8012a9c:	2207      	movs	r2, #7
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f002 fc67 	bl	8015372 <RegionVerify>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d008      	beq.n	8012abc <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012aaa:	4b72      	ldr	r3, [pc, #456]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	33ac      	adds	r3, #172	; 0xac
 8012ab0:	3204      	adds	r2, #4
 8012ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ab6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012aba:	e12f      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012abc:	2303      	movs	r3, #3
 8012abe:	75fb      	strb	r3, [r7, #23]
            break;
 8012ac0:	e12c      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012acc:	4b69      	ldr	r3, [pc, #420]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ad2:	f107 020c 	add.w	r2, r7, #12
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f002 fc83 	bl	80153e4 <RegionChanMaskSet>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	f083 0301 	eor.w	r3, r3, #1
 8012ae4:	b2db      	uxtb	r3, r3
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	f000 8113 	beq.w	8012d12 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012aec:	2303      	movs	r3, #3
 8012aee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012af0:	e10f      	b.n	8012d12 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012af8:	2300      	movs	r3, #0
 8012afa:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012afc:	4b5d      	ldr	r3, [pc, #372]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b02:	f107 020c 	add.w	r2, r7, #12
 8012b06:	4611      	mov	r1, r2
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f002 fc6b 	bl	80153e4 <RegionChanMaskSet>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	f083 0301 	eor.w	r3, r3, #1
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	f000 80fd 	beq.w	8012d16 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b1c:	2303      	movs	r3, #3
 8012b1e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b20:	e0f9      	b.n	8012d16 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	791b      	ldrb	r3, [r3, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d009      	beq.n	8012b3e <LoRaMacMibSetRequestConfirm+0x48e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012b2e:	2b0f      	cmp	r3, #15
 8012b30:	d805      	bhi.n	8012b3e <LoRaMacMibSetRequestConfirm+0x48e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	791a      	ldrb	r2, [r3, #4]
 8012b36:	4b4f      	ldr	r3, [pc, #316]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012b38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012b3c:	e0ee      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b3e:	2303      	movs	r3, #3
 8012b40:	75fb      	strb	r3, [r7, #23]
            break;
 8012b42:	e0eb      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	4a4a      	ldr	r2, [pc, #296]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8012b4c:	e0e6      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	4a48      	ldr	r2, [pc, #288]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012b54:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8012b56:	e0e1      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	4a45      	ldr	r2, [pc, #276]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012b5e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8012b60:	e0dc      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	4a43      	ldr	r2, [pc, #268]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012b68:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8012b6a:	e0d7      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	4a40      	ldr	r2, [pc, #256]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012b72:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8012b74:	e0d2      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012b7c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012b7e:	4b3d      	ldr	r3, [pc, #244]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b84:	f107 0108 	add.w	r1, r7, #8
 8012b88:	2206      	movs	r2, #6
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f002 fbf1 	bl	8015372 <RegionVerify>
 8012b90:	4603      	mov	r3, r0
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d005      	beq.n	8012ba2 <LoRaMacMibSetRequestConfirm+0x4f2>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012b96:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012b9a:	4b36      	ldr	r3, [pc, #216]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012b9c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012ba0:	e0bc      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ba2:	2303      	movs	r3, #3
 8012ba4:	75fb      	strb	r3, [r7, #23]
            break;
 8012ba6:	e0b9      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012bae:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012bb0:	4b30      	ldr	r3, [pc, #192]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012bb2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012bb6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012bb8:	4b2e      	ldr	r3, [pc, #184]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bbe:	f107 0108 	add.w	r1, r7, #8
 8012bc2:	2205      	movs	r2, #5
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f002 fbd4 	bl	8015372 <RegionVerify>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d005      	beq.n	8012bdc <LoRaMacMibSetRequestConfirm+0x52c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012bd0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012bd4:	4b27      	ldr	r3, [pc, #156]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012bda:	e09f      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012bdc:	2303      	movs	r3, #3
 8012bde:	75fb      	strb	r3, [r7, #23]
            break;
 8012be0:	e09c      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012be8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012bea:	4b22      	ldr	r3, [pc, #136]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bf0:	f107 0108 	add.w	r1, r7, #8
 8012bf4:	220a      	movs	r2, #10
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f002 fbbb 	bl	8015372 <RegionVerify>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d005      	beq.n	8012c0e <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012c02:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c06:	4b1b      	ldr	r3, [pc, #108]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c08:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c0c:	e086      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c0e:	2303      	movs	r3, #3
 8012c10:	75fb      	strb	r3, [r7, #23]
            break;
 8012c12:	e083      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012c1a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012c1c:	4b15      	ldr	r3, [pc, #84]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c22:	f107 0108 	add.w	r1, r7, #8
 8012c26:	2209      	movs	r2, #9
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f002 fba2 	bl	8015372 <RegionVerify>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d005      	beq.n	8012c40 <LoRaMacMibSetRequestConfirm+0x590>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012c34:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c38:	4b0e      	ldr	r3, [pc, #56]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c3e:	e06d      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c40:	2303      	movs	r3, #3
 8012c42:	75fb      	strb	r3, [r7, #23]
            break;
 8012c44:	e06a      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	4a0a      	ldr	r2, [pc, #40]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8012c50:	4b08      	ldr	r3, [pc, #32]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c56:	4a07      	ldr	r2, [pc, #28]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c58:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8012c5a:	e05f      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	791a      	ldrb	r2, [r3, #4]
 8012c60:	4b04      	ldr	r3, [pc, #16]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c62:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8012c66:	4b03      	ldr	r3, [pc, #12]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c68:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8012c6c:	4b01      	ldr	r3, [pc, #4]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012c6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8012c72:	e053      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
 8012c74:	20003594 	.word	0x20003594
 8012c78:	0801e73c 	.word	0x0801e73c
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	4a29      	ldr	r2, [pc, #164]	; (8012d28 <LoRaMacMibSetRequestConfirm+0x678>)
 8012c82:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8012c84:	e04a      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	4a27      	ldr	r2, [pc, #156]	; (8012d28 <LoRaMacMibSetRequestConfirm+0x678>)
 8012c8c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8012c90:	e044      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d007      	beq.n	8012caa <LoRaMacMibSetRequestConfirm+0x5fa>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7fe fe22 	bl	80118e8 <RestoreNvmData>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012ca8:	e038      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012caa:	2303      	movs	r3, #3
 8012cac:	75fb      	strb	r3, [r7, #23]
            break;
 8012cae:	e035      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	799b      	ldrb	r3, [r3, #6]
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d80d      	bhi.n	8012cd4 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012cb8:	4a1b      	ldr	r2, [pc, #108]	; (8012d28 <LoRaMacMibSetRequestConfirm+0x678>)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	685b      	ldr	r3, [r3, #4]
 8012cbe:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6858      	ldr	r0, [r3, #4]
 8012cc6:	f001 fc49 	bl	801455c <LoRaMacCryptoSetLrWanVersion>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d024      	beq.n	8012d1a <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012cd0:	2311      	movs	r3, #17
 8012cd2:	e024      	b.n	8012d1e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012cd4:	2303      	movs	r3, #3
 8012cd6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012cd8:	e01f      	b.n	8012d1a <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 fbe4 	bl	80134a8 <LoRaMacMibClassBSetRequestConfirm>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	75fb      	strb	r3, [r7, #23]
            break;
 8012ce4:	e01a      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012ce6:	bf00      	nop
 8012ce8:	e018      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012cea:	bf00      	nop
 8012cec:	e016      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012cee:	bf00      	nop
 8012cf0:	e014      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012cf2:	bf00      	nop
 8012cf4:	e012      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012cf6:	bf00      	nop
 8012cf8:	e010      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012cfa:	bf00      	nop
 8012cfc:	e00e      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012cfe:	bf00      	nop
 8012d00:	e00c      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012d02:	bf00      	nop
 8012d04:	e00a      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012d06:	bf00      	nop
 8012d08:	e008      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012d0a:	bf00      	nop
 8012d0c:	e006      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012d0e:	bf00      	nop
 8012d10:	e004      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012d12:	bf00      	nop
 8012d14:	e002      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012d16:	bf00      	nop
 8012d18:	e000      	b.n	8012d1c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012d1a:	bf00      	nop
        }
    }
    return status;
 8012d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3718      	adds	r7, #24
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	20003594 	.word	0x20003594

08012d2c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b086      	sub	sp, #24
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d34:	2302      	movs	r3, #2
 8012d36:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012d38:	2300      	movs	r3, #0
 8012d3a:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d101      	bne.n	8012d46 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012d42:	2303      	movs	r3, #3
 8012d44:	e127      	b.n	8012f96 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8012d46:	f7fc fd23 	bl	800f790 <LoRaMacIsBusy>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d001      	beq.n	8012d54 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012d50:	2301      	movs	r3, #1
 8012d52:	e120      	b.n	8012f96 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012d54:	f001 f8a6 	bl	8013ea4 <LoRaMacConfirmQueueIsFull>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d001      	beq.n	8012d62 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e119      	b.n	8012f96 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012d62:	f001 f893 	bl	8013e8c <LoRaMacConfirmQueueGetCnt>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d104      	bne.n	8012d76 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012d6c:	2214      	movs	r2, #20
 8012d6e:	2100      	movs	r1, #0
 8012d70:	488b      	ldr	r0, [pc, #556]	; (8012fa0 <LoRaMacMlmeRequest+0x274>)
 8012d72:	f006 f9b9 	bl	80190e8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012d76:	4b8b      	ldr	r3, [pc, #556]	; (8012fa4 <LoRaMacMlmeRequest+0x278>)
 8012d78:	2201      	movs	r2, #1
 8012d7a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012d7e:	4a89      	ldr	r2, [pc, #548]	; (8012fa4 <LoRaMacMlmeRequest+0x278>)
 8012d80:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012d84:	f043 0304 	orr.w	r3, r3, #4
 8012d88:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012d92:	2301      	movs	r3, #1
 8012d94:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8012d96:	2300      	movs	r3, #0
 8012d98:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	2b0d      	cmp	r3, #13
 8012da2:	f200 80ce 	bhi.w	8012f42 <LoRaMacMlmeRequest+0x216>
 8012da6:	a201      	add	r2, pc, #4	; (adr r2, 8012dac <LoRaMacMlmeRequest+0x80>)
 8012da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dac:	08012de5 	.word	0x08012de5
 8012db0:	08012f43 	.word	0x08012f43
 8012db4:	08012f43 	.word	0x08012f43
 8012db8:	08012e4f 	.word	0x08012e4f
 8012dbc:	08012e6d 	.word	0x08012e6d
 8012dc0:	08012e7d 	.word	0x08012e7d
 8012dc4:	08012f43 	.word	0x08012f43
 8012dc8:	08012f43 	.word	0x08012f43
 8012dcc:	08012f43 	.word	0x08012f43
 8012dd0:	08012e99 	.word	0x08012e99
 8012dd4:	08012f43 	.word	0x08012f43
 8012dd8:	08012f17 	.word	0x08012f17
 8012ddc:	08012eb7 	.word	0x08012eb7
 8012de0:	08012ef9 	.word	0x08012ef9
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012de4:	4b6f      	ldr	r3, [pc, #444]	; (8012fa4 <LoRaMacMlmeRequest+0x278>)
 8012de6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012dea:	f003 0320 	and.w	r3, r3, #32
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d001      	beq.n	8012df6 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8012df2:	2301      	movs	r3, #1
 8012df4:	e0cf      	b.n	8012f96 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8012df6:	f7fe f9fd 	bl	80111f4 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012dfa:	4b6b      	ldr	r3, [pc, #428]	; (8012fa8 <LoRaMacMlmeRequest+0x27c>)
 8012dfc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	791b      	ldrb	r3, [r3, #4]
 8012e04:	b25b      	sxtb	r3, r3
 8012e06:	2200      	movs	r2, #0
 8012e08:	4619      	mov	r1, r3
 8012e0a:	f002 fbfc 	bl	8015606 <RegionAlternateDr>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	461a      	mov	r2, r3
 8012e12:	4b65      	ldr	r3, [pc, #404]	; (8012fa8 <LoRaMacMlmeRequest+0x27c>)
 8012e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012e18:	2307      	movs	r3, #7
 8012e1a:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8012e1c:	20ff      	movs	r0, #255	; 0xff
 8012e1e:	f7fd ff61 	bl	8010ce4 <SendReJoinReq>
 8012e22:	4603      	mov	r3, r0
 8012e24:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8012e26:	7dfb      	ldrb	r3, [r7, #23]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	f000 808c 	beq.w	8012f46 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012e2e:	4b5e      	ldr	r3, [pc, #376]	; (8012fa8 <LoRaMacMlmeRequest+0x27c>)
 8012e30:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	791b      	ldrb	r3, [r3, #4]
 8012e38:	b25b      	sxtb	r3, r3
 8012e3a:	2201      	movs	r2, #1
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f002 fbe2 	bl	8015606 <RegionAlternateDr>
 8012e42:	4603      	mov	r3, r0
 8012e44:	461a      	mov	r2, r3
 8012e46:	4b58      	ldr	r3, [pc, #352]	; (8012fa8 <LoRaMacMlmeRequest+0x27c>)
 8012e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8012e4c:	e07b      	b.n	8012f46 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012e52:	f107 030c 	add.w	r3, r7, #12
 8012e56:	2200      	movs	r2, #0
 8012e58:	4619      	mov	r1, r3
 8012e5a:	2002      	movs	r0, #2
 8012e5c:	f000 fc88 	bl	8013770 <LoRaMacCommandsAddCmd>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d071      	beq.n	8012f4a <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e66:	2313      	movs	r3, #19
 8012e68:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012e6a:	e06e      	b.n	8012f4a <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	889b      	ldrh	r3, [r3, #4]
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe fcdb 	bl	801182c <SetTxContinuousWave>
 8012e76:	4603      	mov	r3, r0
 8012e78:	75fb      	strb	r3, [r7, #23]
            break;
 8012e7a:	e06d      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	8898      	ldrh	r0, [r3, #4]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6899      	ldr	r1, [r3, #8]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	f7fe fd01 	bl	8011894 <SetTxContinuousWave1>
 8012e92:	4603      	mov	r3, r0
 8012e94:	75fb      	strb	r3, [r7, #23]
            break;
 8012e96:	e05f      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012e9c:	f107 030c 	add.w	r3, r7, #12
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	200d      	movs	r0, #13
 8012ea6:	f000 fc63 	bl	8013770 <LoRaMacCommandsAddCmd>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d04e      	beq.n	8012f4e <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012eb0:	2313      	movs	r3, #19
 8012eb2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012eb4:	e04b      	b.n	8012f4e <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012eb6:	4b3c      	ldr	r3, [pc, #240]	; (8012fa8 <LoRaMacMlmeRequest+0x27c>)
 8012eb8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d148      	bne.n	8012f52 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	791b      	ldrb	r3, [r3, #4]
 8012ec4:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	791b      	ldrb	r3, [r3, #4]
 8012eca:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f000 fabe 	bl	8013452 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012ed6:	7dbb      	ldrb	r3, [r7, #22]
 8012ed8:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8012eda:	2300      	movs	r3, #0
 8012edc:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ede:	f107 030c 	add.w	r3, r7, #12
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	2010      	movs	r0, #16
 8012ee8:	f000 fc42 	bl	8013770 <LoRaMacCommandsAddCmd>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d02f      	beq.n	8012f52 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012ef2:	2313      	movs	r3, #19
 8012ef4:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8012ef6:	e02c      	b.n	8012f52 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012efc:	f107 030c 	add.w	r3, r7, #12
 8012f00:	2200      	movs	r2, #0
 8012f02:	4619      	mov	r1, r3
 8012f04:	2012      	movs	r0, #18
 8012f06:	f000 fc33 	bl	8013770 <LoRaMacCommandsAddCmd>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d022      	beq.n	8012f56 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012f10:	2313      	movs	r3, #19
 8012f12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012f14:	e01f      	b.n	8012f56 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012f16:	2301      	movs	r3, #1
 8012f18:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012f1a:	f000 fa50 	bl	80133be <LoRaMacClassBIsAcquisitionInProgress>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	f083 0301 	eor.w	r3, r3, #1
 8012f24:	b2db      	uxtb	r3, r3
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d008      	beq.n	8012f3c <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	f000 fa29 	bl	8013382 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012f30:	2000      	movs	r0, #0
 8012f32:	f000 fa4b 	bl	80133cc <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012f36:	2300      	movs	r3, #0
 8012f38:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012f3a:	e00d      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	75fb      	strb	r3, [r7, #23]
            break;
 8012f40:	e00a      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8012f42:	bf00      	nop
 8012f44:	e008      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f46:	bf00      	nop
 8012f48:	e006      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f4a:	bf00      	nop
 8012f4c:	e004      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f4e:	bf00      	nop
 8012f50:	e002      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f52:	bf00      	nop
 8012f54:	e000      	b.n	8012f58 <LoRaMacMlmeRequest+0x22c>
            break;
 8012f56:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012f58:	4b12      	ldr	r3, [pc, #72]	; (8012fa4 <LoRaMacMlmeRequest+0x278>)
 8012f5a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012f62:	7dfb      	ldrb	r3, [r7, #23]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d010      	beq.n	8012f8a <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012f68:	f000 ff90 	bl	8013e8c <LoRaMacConfirmQueueGetCnt>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d110      	bne.n	8012f94 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8012f72:	4b0c      	ldr	r3, [pc, #48]	; (8012fa4 <LoRaMacMlmeRequest+0x278>)
 8012f74:	2200      	movs	r2, #0
 8012f76:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012f7a:	4a0a      	ldr	r2, [pc, #40]	; (8012fa4 <LoRaMacMlmeRequest+0x278>)
 8012f7c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012f80:	f36f 0382 	bfc	r3, #2, #1
 8012f84:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8012f88:	e004      	b.n	8012f94 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012f8a:	f107 0310 	add.w	r3, r7, #16
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f000 fe2e 	bl	8013bf0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3718      	adds	r7, #24
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
 8012f9e:	bf00      	nop
 8012fa0:	200034d8 	.word	0x200034d8
 8012fa4:	2000308c 	.word	0x2000308c
 8012fa8:	20003594 	.word	0x20003594

08012fac <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b08c      	sub	sp, #48	; 0x30
 8012fb0:	af02      	add	r7, sp, #8
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012fb8:	2302      	movs	r3, #2
 8012fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d101      	bne.n	8012fda <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012fd6:	2303      	movs	r3, #3
 8012fd8:	e0d4      	b.n	8013184 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8012fda:	f7fc fbd9 	bl	800f790 <LoRaMacIsBusy>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d001      	beq.n	8012fe8 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	e0cd      	b.n	8013184 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012fec:	2214      	movs	r2, #20
 8012fee:	2100      	movs	r1, #0
 8012ff0:	4866      	ldr	r0, [pc, #408]	; (801318c <LoRaMacMcpsRequest+0x1e0>)
 8012ff2:	f006 f879 	bl	80190e8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ff6:	4b66      	ldr	r3, [pc, #408]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012ffe:	4b64      	ldr	r3, [pc, #400]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 8013000:	2201      	movs	r2, #1
 8013002:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	2b03      	cmp	r3, #3
 801300c:	d03d      	beq.n	801308a <LoRaMacMcpsRequest+0xde>
 801300e:	2b03      	cmp	r3, #3
 8013010:	dc4f      	bgt.n	80130b2 <LoRaMacMcpsRequest+0x106>
 8013012:	2b00      	cmp	r3, #0
 8013014:	d002      	beq.n	801301c <LoRaMacMcpsRequest+0x70>
 8013016:	2b01      	cmp	r3, #1
 8013018:	d019      	beq.n	801304e <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801301a:	e04a      	b.n	80130b2 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 801301c:	2301      	movs	r3, #1
 801301e:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013020:	4b5b      	ldr	r3, [pc, #364]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 8013022:	2201      	movs	r2, #1
 8013024:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013028:	7b3b      	ldrb	r3, [r7, #12]
 801302a:	2202      	movs	r2, #2
 801302c:	f362 1347 	bfi	r3, r2, #5, #3
 8013030:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	791b      	ldrb	r3, [r3, #4]
 8013036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	689b      	ldr	r3, [r3, #8]
 801303e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	899b      	ldrh	r3, [r3, #12]
 8013044:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	7b9b      	ldrb	r3, [r3, #14]
 801304a:	777b      	strb	r3, [r7, #29]
            break;
 801304c:	e032      	b.n	80130b4 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801304e:	2301      	movs	r3, #1
 8013050:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	7bdb      	ldrb	r3, [r3, #15]
 8013056:	2b08      	cmp	r3, #8
 8013058:	bf28      	it	cs
 801305a:	2308      	movcs	r3, #8
 801305c:	b2da      	uxtb	r2, r3
 801305e:	4b4c      	ldr	r3, [pc, #304]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 8013060:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013064:	7b3b      	ldrb	r3, [r7, #12]
 8013066:	2204      	movs	r2, #4
 8013068:	f362 1347 	bfi	r3, r2, #5, #3
 801306c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	791b      	ldrb	r3, [r3, #4]
 8013072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	689b      	ldr	r3, [r3, #8]
 801307a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	899b      	ldrh	r3, [r3, #12]
 8013080:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	7b9b      	ldrb	r3, [r3, #14]
 8013086:	777b      	strb	r3, [r7, #29]
            break;
 8013088:	e014      	b.n	80130b4 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801308a:	2301      	movs	r3, #1
 801308c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801308e:	4b40      	ldr	r3, [pc, #256]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 8013090:	2201      	movs	r2, #1
 8013092:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013096:	7b3b      	ldrb	r3, [r7, #12]
 8013098:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801309c:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	891b      	ldrh	r3, [r3, #8]
 80130a8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	7a9b      	ldrb	r3, [r3, #10]
 80130ae:	777b      	strb	r3, [r7, #29]
            break;
 80130b0:	e000      	b.n	80130b4 <LoRaMacMcpsRequest+0x108>
            break;
 80130b2:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80130b4:	2302      	movs	r3, #2
 80130b6:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80130b8:	4b36      	ldr	r3, [pc, #216]	; (8013194 <LoRaMacMcpsRequest+0x1e8>)
 80130ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80130be:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80130c0:	4b34      	ldr	r3, [pc, #208]	; (8013194 <LoRaMacMcpsRequest+0x1e8>)
 80130c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80130c6:	f107 0214 	add.w	r2, r7, #20
 80130ca:	4611      	mov	r1, r2
 80130cc:	4618      	mov	r0, r3
 80130ce:	f002 f900 	bl	80152d2 <RegionGetPhyParam>
 80130d2:	4603      	mov	r3, r0
 80130d4:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	b25b      	sxtb	r3, r3
 80130da:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80130de:	4293      	cmp	r3, r2
 80130e0:	bfb8      	it	lt
 80130e2:	4613      	movlt	r3, r2
 80130e4:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80130e6:	7f3b      	ldrb	r3, [r7, #28]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d044      	beq.n	8013176 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80130ec:	4b29      	ldr	r3, [pc, #164]	; (8013194 <LoRaMacMcpsRequest+0x1e8>)
 80130ee:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80130f2:	f083 0301 	eor.w	r3, r3, #1
 80130f6:	b2db      	uxtb	r3, r3
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d019      	beq.n	8013130 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80130fc:	7f7b      	ldrb	r3, [r7, #29]
 80130fe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013100:	4b24      	ldr	r3, [pc, #144]	; (8013194 <LoRaMacMcpsRequest+0x1e8>)
 8013102:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013106:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013108:	4b22      	ldr	r3, [pc, #136]	; (8013194 <LoRaMacMcpsRequest+0x1e8>)
 801310a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801310e:	f107 0108 	add.w	r1, r7, #8
 8013112:	2205      	movs	r2, #5
 8013114:	4618      	mov	r0, r3
 8013116:	f002 f92c 	bl	8015372 <RegionVerify>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d005      	beq.n	801312c <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013120:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013124:	4b1b      	ldr	r3, [pc, #108]	; (8013194 <LoRaMacMcpsRequest+0x1e8>)
 8013126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801312a:	e001      	b.n	8013130 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801312c:	2303      	movs	r3, #3
 801312e:	e029      	b.n	8013184 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013130:	8bfa      	ldrh	r2, [r7, #30]
 8013132:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8013136:	f107 000c 	add.w	r0, r7, #12
 801313a:	78fb      	ldrb	r3, [r7, #3]
 801313c:	9300      	str	r3, [sp, #0]
 801313e:	4613      	mov	r3, r2
 8013140:	6a3a      	ldr	r2, [r7, #32]
 8013142:	f7fd fcef 	bl	8010b24 <Send>
 8013146:	4603      	mov	r3, r0
 8013148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 801314c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013150:	2b00      	cmp	r3, #0
 8013152:	d10c      	bne.n	801316e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	781a      	ldrb	r2, [r3, #0]
 8013158:	4b0d      	ldr	r3, [pc, #52]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 801315a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801315e:	4a0c      	ldr	r2, [pc, #48]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 8013160:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8013164:	f043 0301 	orr.w	r3, r3, #1
 8013168:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 801316c:	e003      	b.n	8013176 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801316e:	4b08      	ldr	r3, [pc, #32]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 8013170:	2200      	movs	r2, #0
 8013172:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013176:	4b06      	ldr	r3, [pc, #24]	; (8013190 <LoRaMacMcpsRequest+0x1e4>)
 8013178:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	611a      	str	r2, [r3, #16]

    return status;
 8013180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013184:	4618      	mov	r0, r3
 8013186:	3728      	adds	r7, #40	; 0x28
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	200034c4 	.word	0x200034c4
 8013190:	2000308c 	.word	0x2000308c
 8013194:	20003594 	.word	0x20003594

08013198 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	4603      	mov	r3, r0
 80131a0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80131a2:	79fb      	ldrb	r3, [r7, #7]
 80131a4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80131a6:	4b0a      	ldr	r3, [pc, #40]	; (80131d0 <LoRaMacTestSetDutyCycleOn+0x38>)
 80131a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131ac:	f107 010c 	add.w	r1, r7, #12
 80131b0:	220f      	movs	r2, #15
 80131b2:	4618      	mov	r0, r3
 80131b4:	f002 f8dd 	bl	8015372 <RegionVerify>
 80131b8:	4603      	mov	r3, r0
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d003      	beq.n	80131c6 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80131be:	4a04      	ldr	r2, [pc, #16]	; (80131d0 <LoRaMacTestSetDutyCycleOn+0x38>)
 80131c0:	79fb      	ldrb	r3, [r7, #7]
 80131c2:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 80131c6:	bf00      	nop
 80131c8:	3710      	adds	r7, #16
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	20003594 	.word	0x20003594

080131d4 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b08c      	sub	sp, #48	; 0x30
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	607a      	str	r2, [r7, #4]
 80131e0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80131e2:	2300      	movs	r3, #0
 80131e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	7c1b      	ldrb	r3, [r3, #16]
 80131ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	7c5b      	ldrb	r3, [r3, #17]
 80131f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	689a      	ldr	r2, [r3, #8]
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	795b      	ldrb	r3, [r3, #5]
 8013204:	2b00      	cmp	r3, #0
 8013206:	f000 808b 	beq.w	8013320 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801320a:	2302      	movs	r3, #2
 801320c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	7c9b      	ldrb	r3, [r3, #18]
 8013214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	7cdb      	ldrb	r3, [r3, #19]
 801321c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013220:	4611      	mov	r1, r2
 8013222:	4618      	mov	r0, r3
 8013224:	f002 f855 	bl	80152d2 <RegionGetPhyParam>
 8013228:	4603      	mov	r3, r0
 801322a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 801322c:	6a3b      	ldr	r3, [r7, #32]
 801322e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8013232:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8013236:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801323a:	4293      	cmp	r3, r2
 801323c:	bfb8      	it	lt
 801323e:	4613      	movlt	r3, r2
 8013240:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8013244:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8013248:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801324c:	429a      	cmp	r2, r3
 801324e:	d106      	bne.n	801325e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	2200      	movs	r2, #0
 8013254:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8013256:	2300      	movs	r3, #0
 8013258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801325c:	e060      	b.n	8013320 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	689b      	ldr	r3, [r3, #8]
 8013262:	68fa      	ldr	r2, [r7, #12]
 8013264:	8992      	ldrh	r2, [r2, #12]
 8013266:	4293      	cmp	r3, r2
 8013268:	d303      	bcc.n	8013272 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801326a:	2301      	movs	r3, #1
 801326c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013270:	e002      	b.n	8013278 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8013272:	2300      	movs	r3, #0
 8013274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	689b      	ldr	r3, [r3, #8]
 801327c:	68fa      	ldr	r2, [r7, #12]
 801327e:	8992      	ldrh	r2, [r2, #12]
 8013280:	4611      	mov	r1, r2
 8013282:	68fa      	ldr	r2, [r7, #12]
 8013284:	89d2      	ldrh	r2, [r2, #14]
 8013286:	440a      	add	r2, r1
 8013288:	4293      	cmp	r3, r2
 801328a:	d349      	bcc.n	8013320 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 801328c:	2308      	movs	r3, #8
 801328e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	7cdb      	ldrb	r3, [r3, #19]
 8013296:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801329a:	4611      	mov	r1, r2
 801329c:	4618      	mov	r0, r3
 801329e:	f002 f818 	bl	80152d2 <RegionGetPhyParam>
 80132a2:	4603      	mov	r3, r0
 80132a4:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80132a6:	6a3b      	ldr	r3, [r7, #32]
 80132a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	689b      	ldr	r3, [r3, #8]
 80132b0:	68fa      	ldr	r2, [r7, #12]
 80132b2:	89d2      	ldrh	r2, [r2, #14]
 80132b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80132b8:	fb01 f202 	mul.w	r2, r1, r2
 80132bc:	1a9b      	subs	r3, r3, r2
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d12e      	bne.n	8013320 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80132c2:	2322      	movs	r3, #34	; 0x22
 80132c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80132c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80132cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	7c9b      	ldrb	r3, [r3, #18]
 80132d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	7cdb      	ldrb	r3, [r3, #19]
 80132dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132e0:	4611      	mov	r1, r2
 80132e2:	4618      	mov	r0, r3
 80132e4:	f001 fff5 	bl	80152d2 <RegionGetPhyParam>
 80132e8:	4603      	mov	r3, r0
 80132ea:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80132ec:	6a3b      	ldr	r3, [r7, #32]
 80132ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80132f2:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80132f6:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d110      	bne.n	8013320 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80132fe:	2300      	movs	r3, #0
 8013300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	791b      	ldrb	r3, [r3, #4]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d009      	beq.n	8013320 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801330c:	2302      	movs	r3, #2
 801330e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	7cdb      	ldrb	r3, [r3, #19]
 8013314:	f107 0214 	add.w	r2, r7, #20
 8013318:	4611      	mov	r1, r2
 801331a:	4618      	mov	r0, r3
 801331c:	f002 f811 	bl	8015342 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013326:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801332e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013334:	4618      	mov	r0, r3
 8013336:	3730      	adds	r7, #48	; 0x30
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
 8013348:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	789b      	ldrb	r3, [r3, #2]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d107      	bne.n	8013362 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	68b9      	ldr	r1, [r7, #8]
 8013358:	68f8      	ldr	r0, [r7, #12]
 801335a:	f7ff ff3b 	bl	80131d4 <CalcNextV10X>
 801335e:	4603      	mov	r3, r0
 8013360:	e000      	b.n	8013364 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8013362:	2300      	movs	r3, #0
}
 8013364:	4618      	mov	r0, r3
 8013366:	3710      	adds	r7, #16
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}

0801336c <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 801336c:	b480      	push	{r7}
 801336e:	b085      	sub	sp, #20
 8013370:	af00      	add	r7, sp, #0
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013378:	bf00      	nop
 801337a:	3714      	adds	r7, #20
 801337c:	46bd      	mov	sp, r7
 801337e:	bc80      	pop	{r7}
 8013380:	4770      	bx	lr

08013382 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013382:	b480      	push	{r7}
 8013384:	b083      	sub	sp, #12
 8013386:	af00      	add	r7, sp, #0
 8013388:	4603      	mov	r3, r0
 801338a:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801338c:	bf00      	nop
 801338e:	370c      	adds	r7, #12
 8013390:	46bd      	mov	sp, r7
 8013392:	bc80      	pop	{r7}
 8013394:	4770      	bx	lr

08013396 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013396:	b480      	push	{r7}
 8013398:	b083      	sub	sp, #12
 801339a:	af00      	add	r7, sp, #0
 801339c:	4603      	mov	r3, r0
 801339e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133a0:	bf00      	nop
 80133a2:	370c      	adds	r7, #12
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bc80      	pop	{r7}
 80133a8:	4770      	bx	lr

080133aa <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80133aa:	b480      	push	{r7}
 80133ac:	b083      	sub	sp, #12
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	4603      	mov	r3, r0
 80133b2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133b4:	bf00      	nop
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bc80      	pop	{r7}
 80133bc:	4770      	bx	lr

080133be <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80133be:	b480      	push	{r7}
 80133c0:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80133c2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bc80      	pop	{r7}
 80133ca:	4770      	bx	lr

080133cc <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133d4:	bf00      	nop
 80133d6:	370c      	adds	r7, #12
 80133d8:	46bd      	mov	sp, r7
 80133da:	bc80      	pop	{r7}
 80133dc:	4770      	bx	lr

080133de <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80133de:	b480      	push	{r7}
 80133e0:	b083      	sub	sp, #12
 80133e2:	af00      	add	r7, sp, #0
 80133e4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133e6:	bf00      	nop
 80133e8:	370c      	adds	r7, #12
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bc80      	pop	{r7}
 80133ee:	4770      	bx	lr

080133f0 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133f8:	bf00      	nop
 80133fa:	370c      	adds	r7, #12
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bc80      	pop	{r7}
 8013400:	4770      	bx	lr

08013402 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013402:	b480      	push	{r7}
 8013404:	b083      	sub	sp, #12
 8013406:	af00      	add	r7, sp, #0
 8013408:	6078      	str	r0, [r7, #4]
 801340a:	460b      	mov	r3, r1
 801340c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801340e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013410:	4618      	mov	r0, r3
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	bc80      	pop	{r7}
 8013418:	4770      	bx	lr

0801341a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801341a:	b480      	push	{r7}
 801341c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801341e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013420:	4618      	mov	r0, r3
 8013422:	46bd      	mov	sp, r7
 8013424:	bc80      	pop	{r7}
 8013426:	4770      	bx	lr

08013428 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013428:	b480      	push	{r7}
 801342a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801342c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801342e:	4618      	mov	r0, r3
 8013430:	46bd      	mov	sp, r7
 8013432:	bc80      	pop	{r7}
 8013434:	4770      	bx	lr

08013436 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013436:	b480      	push	{r7}
 8013438:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801343a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801343c:	4618      	mov	r0, r3
 801343e:	46bd      	mov	sp, r7
 8013440:	bc80      	pop	{r7}
 8013442:	4770      	bx	lr

08013444 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013444:	b480      	push	{r7}
 8013446:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013448:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801344a:	4618      	mov	r0, r3
 801344c:	46bd      	mov	sp, r7
 801344e:	bc80      	pop	{r7}
 8013450:	4770      	bx	lr

08013452 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013452:	b480      	push	{r7}
 8013454:	b083      	sub	sp, #12
 8013456:	af00      	add	r7, sp, #0
 8013458:	4603      	mov	r3, r0
 801345a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801345c:	bf00      	nop
 801345e:	370c      	adds	r7, #12
 8013460:	46bd      	mov	sp, r7
 8013462:	bc80      	pop	{r7}
 8013464:	4770      	bx	lr

08013466 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013466:	b480      	push	{r7}
 8013468:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801346a:	bf00      	nop
 801346c:	46bd      	mov	sp, r7
 801346e:	bc80      	pop	{r7}
 8013470:	4770      	bx	lr

08013472 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013472:	b480      	push	{r7}
 8013474:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013476:	bf00      	nop
 8013478:	46bd      	mov	sp, r7
 801347a:	bc80      	pop	{r7}
 801347c:	4770      	bx	lr

0801347e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801347e:	b480      	push	{r7}
 8013480:	b083      	sub	sp, #12
 8013482:	af00      	add	r7, sp, #0
 8013484:	4603      	mov	r3, r0
 8013486:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013488:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801348a:	4618      	mov	r0, r3
 801348c:	370c      	adds	r7, #12
 801348e:	46bd      	mov	sp, r7
 8013490:	bc80      	pop	{r7}
 8013492:	4770      	bx	lr

08013494 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013494:	b480      	push	{r7}
 8013496:	b083      	sub	sp, #12
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801349c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801349e:	4618      	mov	r0, r3
 80134a0:	370c      	adds	r7, #12
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bc80      	pop	{r7}
 80134a6:	4770      	bx	lr

080134a8 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134b0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	370c      	adds	r7, #12
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bc80      	pop	{r7}
 80134ba:	4770      	bx	lr

080134bc <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80134bc:	b480      	push	{r7}
 80134be:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134c0:	bf00      	nop
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bc80      	pop	{r7}
 80134c6:	4770      	bx	lr

080134c8 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80134c8:	b480      	push	{r7}
 80134ca:	b083      	sub	sp, #12
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	4603      	mov	r3, r0
 80134d0:	6039      	str	r1, [r7, #0]
 80134d2:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80134d4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	370c      	adds	r7, #12
 80134da:	46bd      	mov	sp, r7
 80134dc:	bc80      	pop	{r7}
 80134de:	4770      	bx	lr

080134e0 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80134e0:	b480      	push	{r7}
 80134e2:	b083      	sub	sp, #12
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	4603      	mov	r3, r0
 80134e8:	603a      	str	r2, [r7, #0]
 80134ea:	80fb      	strh	r3, [r7, #6]
 80134ec:	460b      	mov	r3, r1
 80134ee:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134f0:	bf00      	nop
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bc80      	pop	{r7}
 80134f8:	4770      	bx	lr

080134fa <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80134fa:	b480      	push	{r7}
 80134fc:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134fe:	bf00      	nop
 8013500:	46bd      	mov	sp, r7
 8013502:	bc80      	pop	{r7}
 8013504:	4770      	bx	lr

08013506 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013506:	b480      	push	{r7}
 8013508:	b083      	sub	sp, #12
 801350a:	af00      	add	r7, sp, #0
 801350c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801350e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013510:	4618      	mov	r0, r3
 8013512:	370c      	adds	r7, #12
 8013514:	46bd      	mov	sp, r7
 8013516:	bc80      	pop	{r7}
 8013518:	4770      	bx	lr

0801351a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801351a:	b480      	push	{r7}
 801351c:	b083      	sub	sp, #12
 801351e:	af00      	add	r7, sp, #0
 8013520:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013522:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013524:	4618      	mov	r0, r3
 8013526:	370c      	adds	r7, #12
 8013528:	46bd      	mov	sp, r7
 801352a:	bc80      	pop	{r7}
 801352c:	4770      	bx	lr

0801352e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801352e:	b480      	push	{r7}
 8013530:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013532:	bf00      	nop
 8013534:	46bd      	mov	sp, r7
 8013536:	bc80      	pop	{r7}
 8013538:	4770      	bx	lr

0801353a <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 801353a:	b480      	push	{r7}
 801353c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801353e:	bf00      	nop
 8013540:	46bd      	mov	sp, r7
 8013542:	bc80      	pop	{r7}
 8013544:	4770      	bx	lr

08013546 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013546:	b480      	push	{r7}
 8013548:	b085      	sub	sp, #20
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013552:	2300      	movs	r3, #0
 8013554:	81fb      	strh	r3, [r7, #14]
 8013556:	e00a      	b.n	801356e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013558:	89fb      	ldrh	r3, [r7, #14]
 801355a:	68ba      	ldr	r2, [r7, #8]
 801355c:	4413      	add	r3, r2
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d001      	beq.n	8013568 <IsSlotFree+0x22>
        {
            return false;
 8013564:	2300      	movs	r3, #0
 8013566:	e006      	b.n	8013576 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013568:	89fb      	ldrh	r3, [r7, #14]
 801356a:	3301      	adds	r3, #1
 801356c:	81fb      	strh	r3, [r7, #14]
 801356e:	89fb      	ldrh	r3, [r7, #14]
 8013570:	2b0f      	cmp	r3, #15
 8013572:	d9f1      	bls.n	8013558 <IsSlotFree+0x12>
        }
    }
    return true;
 8013574:	2301      	movs	r3, #1
}
 8013576:	4618      	mov	r0, r3
 8013578:	3714      	adds	r7, #20
 801357a:	46bd      	mov	sp, r7
 801357c:	bc80      	pop	{r7}
 801357e:	4770      	bx	lr

08013580 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013586:	2300      	movs	r3, #0
 8013588:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801358a:	e007      	b.n	801359c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801358c:	79fb      	ldrb	r3, [r7, #7]
 801358e:	3301      	adds	r3, #1
 8013590:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013592:	79fb      	ldrb	r3, [r7, #7]
 8013594:	2b0f      	cmp	r3, #15
 8013596:	d101      	bne.n	801359c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013598:	2300      	movs	r3, #0
 801359a:	e012      	b.n	80135c2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801359c:	79fb      	ldrb	r3, [r7, #7]
 801359e:	011b      	lsls	r3, r3, #4
 80135a0:	3308      	adds	r3, #8
 80135a2:	4a0a      	ldr	r2, [pc, #40]	; (80135cc <MallocNewMacCommandSlot+0x4c>)
 80135a4:	4413      	add	r3, r2
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7ff ffcd 	bl	8013546 <IsSlotFree>
 80135ac:	4603      	mov	r3, r0
 80135ae:	f083 0301 	eor.w	r3, r3, #1
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d1e9      	bne.n	801358c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80135b8:	79fb      	ldrb	r3, [r7, #7]
 80135ba:	011b      	lsls	r3, r3, #4
 80135bc:	3308      	adds	r3, #8
 80135be:	4a03      	ldr	r2, [pc, #12]	; (80135cc <MallocNewMacCommandSlot+0x4c>)
 80135c0:	4413      	add	r3, r2
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3708      	adds	r7, #8
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	20003bbc 	.word	0x20003bbc

080135d0 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b082      	sub	sp, #8
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d101      	bne.n	80135e2 <FreeMacCommandSlot+0x12>
    {
        return false;
 80135de:	2300      	movs	r3, #0
 80135e0:	e005      	b.n	80135ee <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80135e2:	2210      	movs	r2, #16
 80135e4:	2100      	movs	r1, #0
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f005 fd7e 	bl	80190e8 <memset1>

    return true;
 80135ec:	2301      	movs	r3, #1
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3708      	adds	r7, #8
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}

080135f6 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80135f6:	b480      	push	{r7}
 80135f8:	b083      	sub	sp, #12
 80135fa:	af00      	add	r7, sp, #0
 80135fc:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d101      	bne.n	8013608 <LinkedListInit+0x12>
    {
        return false;
 8013604:	2300      	movs	r3, #0
 8013606:	e006      	b.n	8013616 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2200      	movs	r2, #0
 801360c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2200      	movs	r2, #0
 8013612:	605a      	str	r2, [r3, #4]

    return true;
 8013614:	2301      	movs	r3, #1
}
 8013616:	4618      	mov	r0, r3
 8013618:	370c      	adds	r7, #12
 801361a:	46bd      	mov	sp, r7
 801361c:	bc80      	pop	{r7}
 801361e:	4770      	bx	lr

08013620 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013620:	b480      	push	{r7}
 8013622:	b083      	sub	sp, #12
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d002      	beq.n	8013636 <LinkedListAdd+0x16>
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <LinkedListAdd+0x1a>
    {
        return false;
 8013636:	2300      	movs	r3, #0
 8013638:	e015      	b.n	8013666 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d102      	bne.n	8013648 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	683a      	ldr	r2, [r7, #0]
 8013646:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d003      	beq.n	8013658 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	683a      	ldr	r2, [r7, #0]
 8013656:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	2200      	movs	r2, #0
 801365c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	683a      	ldr	r2, [r7, #0]
 8013662:	605a      	str	r2, [r3, #4]

    return true;
 8013664:	2301      	movs	r3, #1
}
 8013666:	4618      	mov	r0, r3
 8013668:	370c      	adds	r7, #12
 801366a:	46bd      	mov	sp, r7
 801366c:	bc80      	pop	{r7}
 801366e:	4770      	bx	lr

08013670 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013670:	b480      	push	{r7}
 8013672:	b085      	sub	sp, #20
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d002      	beq.n	8013686 <LinkedListGetPrevious+0x16>
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d101      	bne.n	801368a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013686:	2300      	movs	r3, #0
 8013688:	e016      	b.n	80136b8 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013690:	683a      	ldr	r2, [r7, #0]
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	429a      	cmp	r2, r3
 8013696:	d00c      	beq.n	80136b2 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013698:	e002      	b.n	80136a0 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d007      	beq.n	80136b6 <LinkedListGetPrevious+0x46>
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	683a      	ldr	r2, [r7, #0]
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d1f4      	bne.n	801369a <LinkedListGetPrevious+0x2a>
 80136b0:	e001      	b.n	80136b6 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80136b2:	2300      	movs	r3, #0
 80136b4:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80136b6:	68fb      	ldr	r3, [r7, #12]
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3714      	adds	r7, #20
 80136bc:	46bd      	mov	sp, r7
 80136be:	bc80      	pop	{r7}
 80136c0:	4770      	bx	lr

080136c2 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80136c2:	b580      	push	{r7, lr}
 80136c4:	b084      	sub	sp, #16
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
 80136ca:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d002      	beq.n	80136d8 <LinkedListRemove+0x16>
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d101      	bne.n	80136dc <LinkedListRemove+0x1a>
    {
        return false;
 80136d8:	2300      	movs	r3, #0
 80136da:	e020      	b.n	801371e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80136dc:	6839      	ldr	r1, [r7, #0]
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f7ff ffc6 	bl	8013670 <LinkedListGetPrevious>
 80136e4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	683a      	ldr	r2, [r7, #0]
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d103      	bne.n	80136f8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	681a      	ldr	r2, [r3, #0]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	683a      	ldr	r2, [r7, #0]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d102      	bne.n	8013708 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d003      	beq.n	8013716 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	2200      	movs	r2, #0
 801371a:	601a      	str	r2, [r3, #0]

    return true;
 801371c:	2301      	movs	r3, #1
}
 801371e:	4618      	mov	r0, r3
 8013720:	3710      	adds	r7, #16
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013726:	b480      	push	{r7}
 8013728:	b083      	sub	sp, #12
 801372a:	af00      	add	r7, sp, #0
 801372c:	4603      	mov	r3, r0
 801372e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013730:	79fb      	ldrb	r3, [r7, #7]
 8013732:	2b05      	cmp	r3, #5
 8013734:	d004      	beq.n	8013740 <IsSticky+0x1a>
 8013736:	2b05      	cmp	r3, #5
 8013738:	db04      	blt.n	8013744 <IsSticky+0x1e>
 801373a:	3b08      	subs	r3, #8
 801373c:	2b02      	cmp	r3, #2
 801373e:	d801      	bhi.n	8013744 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8013740:	2301      	movs	r3, #1
 8013742:	e000      	b.n	8013746 <IsSticky+0x20>
        default:
            return false;
 8013744:	2300      	movs	r3, #0
    }
}
 8013746:	4618      	mov	r0, r3
 8013748:	370c      	adds	r7, #12
 801374a:	46bd      	mov	sp, r7
 801374c:	bc80      	pop	{r7}
 801374e:	4770      	bx	lr

08013750 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013750:	b580      	push	{r7, lr}
 8013752:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013754:	22fc      	movs	r2, #252	; 0xfc
 8013756:	2100      	movs	r1, #0
 8013758:	4804      	ldr	r0, [pc, #16]	; (801376c <LoRaMacCommandsInit+0x1c>)
 801375a:	f005 fcc5 	bl	80190e8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801375e:	4803      	ldr	r0, [pc, #12]	; (801376c <LoRaMacCommandsInit+0x1c>)
 8013760:	f7ff ff49 	bl	80135f6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013764:	2300      	movs	r3, #0
}
 8013766:	4618      	mov	r0, r3
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	20003bbc 	.word	0x20003bbc

08013770 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b086      	sub	sp, #24
 8013774:	af00      	add	r7, sp, #0
 8013776:	4603      	mov	r3, r0
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	607a      	str	r2, [r7, #4]
 801377c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d101      	bne.n	8013788 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013784:	2301      	movs	r3, #1
 8013786:	e033      	b.n	80137f0 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013788:	f7ff fefa 	bl	8013580 <MallocNewMacCommandSlot>
 801378c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d101      	bne.n	8013798 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013794:	2302      	movs	r3, #2
 8013796:	e02b      	b.n	80137f0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013798:	6979      	ldr	r1, [r7, #20]
 801379a:	4817      	ldr	r0, [pc, #92]	; (80137f8 <LoRaMacCommandsAddCmd+0x88>)
 801379c:	f7ff ff40 	bl	8013620 <LinkedListAdd>
 80137a0:	4603      	mov	r3, r0
 80137a2:	f083 0301 	eor.w	r3, r3, #1
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d001      	beq.n	80137b0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80137ac:	2305      	movs	r3, #5
 80137ae:	e01f      	b.n	80137f0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	7bfa      	ldrb	r2, [r7, #15]
 80137b4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	3305      	adds	r3, #5
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	b292      	uxth	r2, r2
 80137c4:	68b9      	ldr	r1, [r7, #8]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f005 fc53 	bl	8019072 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80137cc:	7bfb      	ldrb	r3, [r7, #15]
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7ff ffa9 	bl	8013726 <IsSticky>
 80137d4:	4603      	mov	r3, r0
 80137d6:	461a      	mov	r2, r3
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80137dc:	4b06      	ldr	r3, [pc, #24]	; (80137f8 <LoRaMacCommandsAddCmd+0x88>)
 80137de:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4413      	add	r3, r2
 80137e6:	3301      	adds	r3, #1
 80137e8:	4a03      	ldr	r2, [pc, #12]	; (80137f8 <LoRaMacCommandsAddCmd+0x88>)
 80137ea:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80137ee:	2300      	movs	r3, #0
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3718      	adds	r7, #24
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	20003bbc 	.word	0x20003bbc

080137fc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d101      	bne.n	801380e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801380a:	2301      	movs	r3, #1
 801380c:	e021      	b.n	8013852 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801380e:	6879      	ldr	r1, [r7, #4]
 8013810:	4812      	ldr	r0, [pc, #72]	; (801385c <LoRaMacCommandsRemoveCmd+0x60>)
 8013812:	f7ff ff56 	bl	80136c2 <LinkedListRemove>
 8013816:	4603      	mov	r3, r0
 8013818:	f083 0301 	eor.w	r3, r3, #1
 801381c:	b2db      	uxtb	r3, r3
 801381e:	2b00      	cmp	r3, #0
 8013820:	d001      	beq.n	8013826 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013822:	2303      	movs	r3, #3
 8013824:	e015      	b.n	8013852 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8013826:	4b0d      	ldr	r3, [pc, #52]	; (801385c <LoRaMacCommandsRemoveCmd+0x60>)
 8013828:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	689b      	ldr	r3, [r3, #8]
 8013830:	1ad3      	subs	r3, r2, r3
 8013832:	3b01      	subs	r3, #1
 8013834:	4a09      	ldr	r2, [pc, #36]	; (801385c <LoRaMacCommandsRemoveCmd+0x60>)
 8013836:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f7ff fec8 	bl	80135d0 <FreeMacCommandSlot>
 8013840:	4603      	mov	r3, r0
 8013842:	f083 0301 	eor.w	r3, r3, #1
 8013846:	b2db      	uxtb	r3, r3
 8013848:	2b00      	cmp	r3, #0
 801384a:	d001      	beq.n	8013850 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801384c:	2305      	movs	r3, #5
 801384e:	e000      	b.n	8013852 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013850:	2300      	movs	r3, #0
}
 8013852:	4618      	mov	r0, r3
 8013854:	3708      	adds	r7, #8
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
 801385a:	bf00      	nop
 801385c:	20003bbc 	.word	0x20003bbc

08013860 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b082      	sub	sp, #8
 8013864:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013866:	4b0f      	ldr	r3, [pc, #60]	; (80138a4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801386c:	e012      	b.n	8013894 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	7b1b      	ldrb	r3, [r3, #12]
 8013872:	f083 0301 	eor.w	r3, r3, #1
 8013876:	b2db      	uxtb	r3, r3
 8013878:	2b00      	cmp	r3, #0
 801387a:	d008      	beq.n	801388e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7ff ffba 	bl	80137fc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	607b      	str	r3, [r7, #4]
 801388c:	e002      	b.n	8013894 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d1e9      	bne.n	801386e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801389a:	2300      	movs	r3, #0
}
 801389c:	4618      	mov	r0, r3
 801389e:	3708      	adds	r7, #8
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	20003bbc 	.word	0x20003bbc

080138a8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b082      	sub	sp, #8
 80138ac:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80138ae:	4b0e      	ldr	r3, [pc, #56]	; (80138e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80138b4:	e00f      	b.n	80138d6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	791b      	ldrb	r3, [r3, #4]
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff ff30 	bl	8013726 <IsSticky>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d002      	beq.n	80138d2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f7ff ff95 	bl	80137fc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d1ec      	bne.n	80138b6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138dc:	2300      	movs	r3, #0
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	20003bbc 	.word	0x20003bbc

080138ec <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80138ec:	b480      	push	{r7}
 80138ee:	b083      	sub	sp, #12
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d101      	bne.n	80138fe <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80138fa:	2301      	movs	r3, #1
 80138fc:	e005      	b.n	801390a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80138fe:	4b05      	ldr	r3, [pc, #20]	; (8013914 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013900:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013908:	2300      	movs	r3, #0
}
 801390a:	4618      	mov	r0, r3
 801390c:	370c      	adds	r7, #12
 801390e:	46bd      	mov	sp, r7
 8013910:	bc80      	pop	{r7}
 8013912:	4770      	bx	lr
 8013914:	20003bbc 	.word	0x20003bbc

08013918 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b088      	sub	sp, #32
 801391c:	af00      	add	r7, sp, #0
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013924:	4b25      	ldr	r3, [pc, #148]	; (80139bc <LoRaMacCommandsSerializeCmds+0xa4>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801392a:	2300      	movs	r3, #0
 801392c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d002      	beq.n	801393a <LoRaMacCommandsSerializeCmds+0x22>
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d126      	bne.n	8013988 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801393a:	2301      	movs	r3, #1
 801393c:	e039      	b.n	80139b2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801393e:	7efb      	ldrb	r3, [r7, #27]
 8013940:	68fa      	ldr	r2, [r7, #12]
 8013942:	1ad2      	subs	r2, r2, r3
 8013944:	69fb      	ldr	r3, [r7, #28]
 8013946:	689b      	ldr	r3, [r3, #8]
 8013948:	3301      	adds	r3, #1
 801394a:	429a      	cmp	r2, r3
 801394c:	d320      	bcc.n	8013990 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801394e:	7efb      	ldrb	r3, [r7, #27]
 8013950:	1c5a      	adds	r2, r3, #1
 8013952:	76fa      	strb	r2, [r7, #27]
 8013954:	461a      	mov	r2, r3
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4413      	add	r3, r2
 801395a:	69fa      	ldr	r2, [r7, #28]
 801395c:	7912      	ldrb	r2, [r2, #4]
 801395e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013960:	7efb      	ldrb	r3, [r7, #27]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	18d0      	adds	r0, r2, r3
 8013966:	69fb      	ldr	r3, [r7, #28]
 8013968:	1d59      	adds	r1, r3, #5
 801396a:	69fb      	ldr	r3, [r7, #28]
 801396c:	689b      	ldr	r3, [r3, #8]
 801396e:	b29b      	uxth	r3, r3
 8013970:	461a      	mov	r2, r3
 8013972:	f005 fb7e 	bl	8019072 <memcpy1>
            itr += curElement->PayloadSize;
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	689b      	ldr	r3, [r3, #8]
 801397a:	b2da      	uxtb	r2, r3
 801397c:	7efb      	ldrb	r3, [r7, #27]
 801397e:	4413      	add	r3, r2
 8013980:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d1d7      	bne.n	801393e <LoRaMacCommandsSerializeCmds+0x26>
 801398e:	e009      	b.n	80139a4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013990:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013992:	e007      	b.n	80139a4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801399a:	69f8      	ldr	r0, [r7, #28]
 801399c:	f7ff ff2e 	bl	80137fc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80139a4:	69fb      	ldr	r3, [r7, #28]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d1f4      	bne.n	8013994 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80139aa:	68b8      	ldr	r0, [r7, #8]
 80139ac:	f7ff ff9e 	bl	80138ec <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80139b0:	2300      	movs	r3, #0
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	3720      	adds	r7, #32
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	20003bbc 	.word	0x20003bbc

080139c0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80139c0:	b480      	push	{r7}
 80139c2:	b085      	sub	sp, #20
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d101      	bne.n	80139d2 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80139ce:	2301      	movs	r3, #1
 80139d0:	e016      	b.n	8013a00 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80139d2:	4b0e      	ldr	r3, [pc, #56]	; (8013a0c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2200      	movs	r2, #0
 80139dc:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80139de:	e00b      	b.n	80139f8 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	7b1b      	ldrb	r3, [r3, #12]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d004      	beq.n	80139f2 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2201      	movs	r2, #1
 80139ec:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80139ee:	2300      	movs	r3, #0
 80139f0:	e006      	b.n	8013a00 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d1f0      	bne.n	80139e0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80139fe:	2300      	movs	r3, #0
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3714      	adds	r7, #20
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bc80      	pop	{r7}
 8013a08:	4770      	bx	lr
 8013a0a:	bf00      	nop
 8013a0c:	20003bbc 	.word	0x20003bbc

08013a10 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013a10:	b480      	push	{r7}
 8013a12:	b085      	sub	sp, #20
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	4603      	mov	r3, r0
 8013a18:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013a1e:	79fb      	ldrb	r3, [r7, #7]
 8013a20:	3b02      	subs	r3, #2
 8013a22:	2b11      	cmp	r3, #17
 8013a24:	d850      	bhi.n	8013ac8 <LoRaMacCommandsGetCmdSize+0xb8>
 8013a26:	a201      	add	r2, pc, #4	; (adr r2, 8013a2c <LoRaMacCommandsGetCmdSize+0x1c>)
 8013a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a2c:	08013a75 	.word	0x08013a75
 8013a30:	08013a7b 	.word	0x08013a7b
 8013a34:	08013a81 	.word	0x08013a81
 8013a38:	08013a87 	.word	0x08013a87
 8013a3c:	08013a8d 	.word	0x08013a8d
 8013a40:	08013a93 	.word	0x08013a93
 8013a44:	08013a99 	.word	0x08013a99
 8013a48:	08013a9f 	.word	0x08013a9f
 8013a4c:	08013aa5 	.word	0x08013aa5
 8013a50:	08013ac9 	.word	0x08013ac9
 8013a54:	08013ac9 	.word	0x08013ac9
 8013a58:	08013aab 	.word	0x08013aab
 8013a5c:	08013ac9 	.word	0x08013ac9
 8013a60:	08013ac9 	.word	0x08013ac9
 8013a64:	08013ab1 	.word	0x08013ab1
 8013a68:	08013ab7 	.word	0x08013ab7
 8013a6c:	08013abd 	.word	0x08013abd
 8013a70:	08013ac3 	.word	0x08013ac3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013a74:	2303      	movs	r3, #3
 8013a76:	73fb      	strb	r3, [r7, #15]
            break;
 8013a78:	e027      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013a7a:	2305      	movs	r3, #5
 8013a7c:	73fb      	strb	r3, [r7, #15]
            break;
 8013a7e:	e024      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013a80:	2302      	movs	r3, #2
 8013a82:	73fb      	strb	r3, [r7, #15]
            break;
 8013a84:	e021      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013a86:	2305      	movs	r3, #5
 8013a88:	73fb      	strb	r3, [r7, #15]
            break;
 8013a8a:	e01e      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	73fb      	strb	r3, [r7, #15]
            break;
 8013a90:	e01b      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013a92:	2306      	movs	r3, #6
 8013a94:	73fb      	strb	r3, [r7, #15]
            break;
 8013a96:	e018      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013a98:	2302      	movs	r3, #2
 8013a9a:	73fb      	strb	r3, [r7, #15]
            break;
 8013a9c:	e015      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013a9e:	2302      	movs	r3, #2
 8013aa0:	73fb      	strb	r3, [r7, #15]
            break;
 8013aa2:	e012      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013aa4:	2305      	movs	r3, #5
 8013aa6:	73fb      	strb	r3, [r7, #15]
            break;
 8013aa8:	e00f      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013aaa:	2306      	movs	r3, #6
 8013aac:	73fb      	strb	r3, [r7, #15]
            break;
 8013aae:	e00c      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	73fb      	strb	r3, [r7, #15]
            break;
 8013ab4:	e009      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013ab6:	2305      	movs	r3, #5
 8013ab8:	73fb      	strb	r3, [r7, #15]
            break;
 8013aba:	e006      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013abc:	2304      	movs	r3, #4
 8013abe:	73fb      	strb	r3, [r7, #15]
            break;
 8013ac0:	e003      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013ac2:	2304      	movs	r3, #4
 8013ac4:	73fb      	strb	r3, [r7, #15]
            break;
 8013ac6:	e000      	b.n	8013aca <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013ac8:	bf00      	nop
        }
    }
    return cidSize;
 8013aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3714      	adds	r7, #20
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bc80      	pop	{r7}
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop

08013ad8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	4a07      	ldr	r2, [pc, #28]	; (8013b00 <IncreaseBufferPointer+0x28>)
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d102      	bne.n	8013aee <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ae8:	4b06      	ldr	r3, [pc, #24]	; (8013b04 <IncreaseBufferPointer+0x2c>)
 8013aea:	607b      	str	r3, [r7, #4]
 8013aec:	e002      	b.n	8013af4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	3304      	adds	r3, #4
 8013af2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013af4:	687b      	ldr	r3, [r7, #4]
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	370c      	adds	r7, #12
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bc80      	pop	{r7}
 8013afe:	4770      	bx	lr
 8013b00:	20003cd4 	.word	0x20003cd4
 8013b04:	20003cc4 	.word	0x20003cc4

08013b08 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	4603      	mov	r3, r0
 8013b10:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013b12:	79fb      	ldrb	r3, [r7, #7]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d101      	bne.n	8013b1c <IsListEmpty+0x14>
    {
        return true;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	e000      	b.n	8013b1e <IsListEmpty+0x16>
    }
    return false;
 8013b1c:	2300      	movs	r3, #0
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	370c      	adds	r7, #12
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bc80      	pop	{r7}
 8013b26:	4770      	bx	lr

08013b28 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	4603      	mov	r3, r0
 8013b30:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013b32:	79fb      	ldrb	r3, [r7, #7]
 8013b34:	2b04      	cmp	r3, #4
 8013b36:	d901      	bls.n	8013b3c <IsListFull+0x14>
    {
        return true;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e000      	b.n	8013b3e <IsListFull+0x16>
    }
    return false;
 8013b3c:	2300      	movs	r3, #0
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	370c      	adds	r7, #12
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bc80      	pop	{r7}
 8013b46:	4770      	bx	lr

08013b48 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b086      	sub	sp, #24
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	4603      	mov	r3, r0
 8013b50:	60b9      	str	r1, [r7, #8]
 8013b52:	607a      	str	r2, [r7, #4]
 8013b54:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013b5a:	4b13      	ldr	r3, [pc, #76]	; (8013ba8 <GetElement+0x60>)
 8013b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7ff ffd1 	bl	8013b08 <IsListEmpty>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d001      	beq.n	8013b70 <GetElement+0x28>
    {
        return NULL;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	e017      	b.n	8013ba0 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013b70:	2300      	movs	r3, #0
 8013b72:	74fb      	strb	r3, [r7, #19]
 8013b74:	e00d      	b.n	8013b92 <GetElement+0x4a>
    {
        if( element->Request == request )
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	7bfa      	ldrb	r2, [r7, #15]
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d101      	bne.n	8013b84 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	e00d      	b.n	8013ba0 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013b84:	6978      	ldr	r0, [r7, #20]
 8013b86:	f7ff ffa7 	bl	8013ad8 <IncreaseBufferPointer>
 8013b8a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013b8c:	7cfb      	ldrb	r3, [r7, #19]
 8013b8e:	3301      	adds	r3, #1
 8013b90:	74fb      	strb	r3, [r7, #19]
 8013b92:	4b05      	ldr	r3, [pc, #20]	; (8013ba8 <GetElement+0x60>)
 8013b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b98:	7cfa      	ldrb	r2, [r7, #19]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d3eb      	bcc.n	8013b76 <GetElement+0x2e>
    }

    return NULL;
 8013b9e:	2300      	movs	r3, #0
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3718      	adds	r7, #24
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	20003cb8 	.word	0x20003cb8

08013bac <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013bb4:	4a0c      	ldr	r2, [pc, #48]	; (8013be8 <LoRaMacConfirmQueueInit+0x3c>)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013bba:	4b0b      	ldr	r3, [pc, #44]	; (8013be8 <LoRaMacConfirmQueueInit+0x3c>)
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013bc2:	4b09      	ldr	r3, [pc, #36]	; (8013be8 <LoRaMacConfirmQueueInit+0x3c>)
 8013bc4:	4a09      	ldr	r2, [pc, #36]	; (8013bec <LoRaMacConfirmQueueInit+0x40>)
 8013bc6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013bc8:	4b07      	ldr	r3, [pc, #28]	; (8013be8 <LoRaMacConfirmQueueInit+0x3c>)
 8013bca:	4a08      	ldr	r2, [pc, #32]	; (8013bec <LoRaMacConfirmQueueInit+0x40>)
 8013bcc:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013bce:	2214      	movs	r2, #20
 8013bd0:	21ff      	movs	r1, #255	; 0xff
 8013bd2:	4806      	ldr	r0, [pc, #24]	; (8013bec <LoRaMacConfirmQueueInit+0x40>)
 8013bd4:	f005 fa88 	bl	80190e8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013bd8:	4b03      	ldr	r3, [pc, #12]	; (8013be8 <LoRaMacConfirmQueueInit+0x3c>)
 8013bda:	2201      	movs	r2, #1
 8013bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013be0:	bf00      	nop
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	20003cb8 	.word	0x20003cb8
 8013bec:	20003cc4 	.word	0x20003cc4

08013bf0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b082      	sub	sp, #8
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013bf8:	4b19      	ldr	r3, [pc, #100]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7ff ff92 	bl	8013b28 <IsListFull>
 8013c04:	4603      	mov	r3, r0
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d001      	beq.n	8013c0e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	e023      	b.n	8013c56 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013c0e:	4b14      	ldr	r3, [pc, #80]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013c10:	689b      	ldr	r3, [r3, #8]
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	7812      	ldrb	r2, [r2, #0]
 8013c16:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013c18:	4b11      	ldr	r3, [pc, #68]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013c1a:	689b      	ldr	r3, [r3, #8]
 8013c1c:	687a      	ldr	r2, [r7, #4]
 8013c1e:	7852      	ldrb	r2, [r2, #1]
 8013c20:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013c22:	4b0f      	ldr	r3, [pc, #60]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013c24:	689b      	ldr	r3, [r3, #8]
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	78d2      	ldrb	r2, [r2, #3]
 8013c2a:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8013c2c:	4b0c      	ldr	r3, [pc, #48]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013c2e:	689b      	ldr	r3, [r3, #8]
 8013c30:	2200      	movs	r2, #0
 8013c32:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013c34:	4b0a      	ldr	r3, [pc, #40]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	b2da      	uxtb	r2, r3
 8013c3e:	4b08      	ldr	r3, [pc, #32]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013c40:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013c44:	4b06      	ldr	r3, [pc, #24]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013c46:	689b      	ldr	r3, [r3, #8]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7ff ff45 	bl	8013ad8 <IncreaseBufferPointer>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	4a03      	ldr	r2, [pc, #12]	; (8013c60 <LoRaMacConfirmQueueAdd+0x70>)
 8013c52:	6093      	str	r3, [r2, #8]

    return true;
 8013c54:	2301      	movs	r3, #1
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3708      	adds	r7, #8
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	20003cb8 	.word	0x20003cb8

08013c64 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013c68:	4b0e      	ldr	r3, [pc, #56]	; (8013ca4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7ff ff4a 	bl	8013b08 <IsListEmpty>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d001      	beq.n	8013c7e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	e010      	b.n	8013ca0 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013c7e:	4b09      	ldr	r3, [pc, #36]	; (8013ca4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c84:	3b01      	subs	r3, #1
 8013c86:	b2da      	uxtb	r2, r3
 8013c88:	4b06      	ldr	r3, [pc, #24]	; (8013ca4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c8a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013c8e:	4b05      	ldr	r3, [pc, #20]	; (8013ca4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7ff ff20 	bl	8013ad8 <IncreaseBufferPointer>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	4a02      	ldr	r2, [pc, #8]	; (8013ca4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c9c:	6053      	str	r3, [r2, #4]

    return true;
 8013c9e:	2301      	movs	r3, #1
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	20003cb8 	.word	0x20003cb8

08013ca8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b084      	sub	sp, #16
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	4603      	mov	r3, r0
 8013cb0:	460a      	mov	r2, r1
 8013cb2:	71fb      	strb	r3, [r7, #7]
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013cbc:	4b10      	ldr	r3, [pc, #64]	; (8013d00 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7ff ff20 	bl	8013b08 <IsListEmpty>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	f083 0301 	eor.w	r3, r3, #1
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d011      	beq.n	8013cf8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013cd4:	4b0a      	ldr	r3, [pc, #40]	; (8013d00 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013cd6:	6859      	ldr	r1, [r3, #4]
 8013cd8:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013cda:	689a      	ldr	r2, [r3, #8]
 8013cdc:	79bb      	ldrb	r3, [r7, #6]
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7ff ff32 	bl	8013b48 <GetElement>
 8013ce4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d005      	beq.n	8013cf8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	79fa      	ldrb	r2, [r7, #7]
 8013cf0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013cf8:	bf00      	nop
 8013cfa:	3710      	adds	r7, #16
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	20003cb8 	.word	0x20003cb8

08013d04 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013d12:	4b10      	ldr	r3, [pc, #64]	; (8013d54 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7ff fef5 	bl	8013b08 <IsListEmpty>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	f083 0301 	eor.w	r3, r3, #1
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d00e      	beq.n	8013d48 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013d2a:	4b0a      	ldr	r3, [pc, #40]	; (8013d54 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013d2c:	6859      	ldr	r1, [r3, #4]
 8013d2e:	4b09      	ldr	r3, [pc, #36]	; (8013d54 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013d30:	689a      	ldr	r2, [r3, #8]
 8013d32:	79fb      	ldrb	r3, [r7, #7]
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7ff ff07 	bl	8013b48 <GetElement>
 8013d3a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d002      	beq.n	8013d48 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	785b      	ldrb	r3, [r3, #1]
 8013d46:	e000      	b.n	8013d4a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d48:	2301      	movs	r3, #1
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3710      	adds	r7, #16
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop
 8013d54:	20003cb8 	.word	0x20003cb8

08013d58 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b084      	sub	sp, #16
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	4603      	mov	r3, r0
 8013d60:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013d62:	4b16      	ldr	r3, [pc, #88]	; (8013dbc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d64:	685b      	ldr	r3, [r3, #4]
 8013d66:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013d68:	4a14      	ldr	r2, [pc, #80]	; (8013dbc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d6a:	79fb      	ldrb	r3, [r7, #7]
 8013d6c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013d70:	4b12      	ldr	r3, [pc, #72]	; (8013dbc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7ff fec6 	bl	8013b08 <IsListEmpty>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	f083 0301 	eor.w	r3, r3, #1
 8013d82:	b2db      	uxtb	r3, r3
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d015      	beq.n	8013db4 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	79fa      	ldrb	r2, [r7, #7]
 8013d8c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	78db      	ldrb	r3, [r3, #3]
 8013d92:	f083 0301 	eor.w	r3, r3, #1
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d002      	beq.n	8013da2 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2201      	movs	r2, #1
 8013da0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f7ff fe98 	bl	8013ad8 <IncreaseBufferPointer>
 8013da8:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013daa:	4b04      	ldr	r3, [pc, #16]	; (8013dbc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013dac:	689b      	ldr	r3, [r3, #8]
 8013dae:	68fa      	ldr	r2, [r7, #12]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d1e9      	bne.n	8013d88 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013db4:	bf00      	nop
 8013db6:	3710      	adds	r7, #16
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}
 8013dbc:	20003cb8 	.word	0x20003cb8

08013dc0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013dca:	4b09      	ldr	r3, [pc, #36]	; (8013df0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013dcc:	6859      	ldr	r1, [r3, #4]
 8013dce:	4b08      	ldr	r3, [pc, #32]	; (8013df0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013dd0:	689a      	ldr	r2, [r3, #8]
 8013dd2:	79fb      	ldrb	r3, [r7, #7]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7ff feb7 	bl	8013b48 <GetElement>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d001      	beq.n	8013de4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013de0:	2301      	movs	r3, #1
 8013de2:	e000      	b.n	8013de6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013de4:	2300      	movs	r3, #0
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3708      	adds	r7, #8
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	20003cb8 	.word	0x20003cb8

08013df4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b084      	sub	sp, #16
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013dfc:	4b22      	ldr	r3, [pc, #136]	; (8013e88 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e02:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013e04:	2300      	movs	r3, #0
 8013e06:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013e08:	2300      	movs	r3, #0
 8013e0a:	73fb      	strb	r3, [r7, #15]
 8013e0c:	e032      	b.n	8013e74 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013e0e:	4b1e      	ldr	r3, [pc, #120]	; (8013e88 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	781a      	ldrb	r2, [r3, #0]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013e18:	4b1b      	ldr	r3, [pc, #108]	; (8013e88 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	785a      	ldrb	r2, [r3, #1]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013e22:	4b19      	ldr	r3, [pc, #100]	; (8013e88 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	789b      	ldrb	r3, [r3, #2]
 8013e28:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013e2a:	7b7b      	ldrb	r3, [r7, #13]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d005      	beq.n	8013e3c <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013e30:	4b15      	ldr	r3, [pc, #84]	; (8013e88 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	689b      	ldr	r3, [r3, #8]
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	4798      	blx	r3
 8013e3a:	e00b      	b.n	8013e54 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013e3c:	4b12      	ldr	r3, [pc, #72]	; (8013e88 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e3e:	685b      	ldr	r3, [r3, #4]
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013e44:	4b10      	ldr	r3, [pc, #64]	; (8013e88 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	785b      	ldrb	r3, [r3, #1]
 8013e4a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013e4c:	4b0e      	ldr	r3, [pc, #56]	; (8013e88 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013e4e:	685b      	ldr	r3, [r3, #4]
 8013e50:	78db      	ldrb	r3, [r3, #3]
 8013e52:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013e54:	f7ff ff06 	bl	8013c64 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013e58:	7b7b      	ldrb	r3, [r7, #13]
 8013e5a:	f083 0301 	eor.w	r3, r3, #1
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d004      	beq.n	8013e6e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013e64:	f107 0308 	add.w	r3, r7, #8
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7ff fec1 	bl	8013bf0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013e6e:	7bfb      	ldrb	r3, [r7, #15]
 8013e70:	3301      	adds	r3, #1
 8013e72:	73fb      	strb	r3, [r7, #15]
 8013e74:	7bfa      	ldrb	r2, [r7, #15]
 8013e76:	7bbb      	ldrb	r3, [r7, #14]
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d3c8      	bcc.n	8013e0e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013e7c:	bf00      	nop
 8013e7e:	bf00      	nop
 8013e80:	3710      	adds	r7, #16
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	20003cb8 	.word	0x20003cb8

08013e8c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013e90:	4b03      	ldr	r3, [pc, #12]	; (8013ea0 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013e92:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bc80      	pop	{r7}
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop
 8013ea0:	20003cb8 	.word	0x20003cb8

08013ea4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013ea8:	4b06      	ldr	r3, [pc, #24]	; (8013ec4 <LoRaMacConfirmQueueIsFull+0x20>)
 8013eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7ff fe3a 	bl	8013b28 <IsListFull>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d001      	beq.n	8013ebe <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013eba:	2301      	movs	r3, #1
 8013ebc:	e000      	b.n	8013ec0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013ebe:	2300      	movs	r3, #0
    }
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	20003cb8 	.word	0x20003cb8

08013ec8 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b08e      	sub	sp, #56	; 0x38
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	607b      	str	r3, [r7, #4]
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	817b      	strh	r3, [r7, #10]
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d101      	bne.n	8013ee4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ee0:	230a      	movs	r3, #10
 8013ee2:	e086      	b.n	8013ff2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013eea:	2301      	movs	r3, #1
 8013eec:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013eee:	2300      	movs	r3, #0
 8013ef0:	623b      	str	r3, [r7, #32]
 8013ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	601a      	str	r2, [r3, #0]
 8013efa:	605a      	str	r2, [r3, #4]
 8013efc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013efe:	2300      	movs	r3, #0
 8013f00:	613b      	str	r3, [r7, #16]
 8013f02:	f107 0314 	add.w	r3, r7, #20
 8013f06:	2200      	movs	r2, #0
 8013f08:	601a      	str	r2, [r3, #0]
 8013f0a:	605a      	str	r2, [r3, #4]
 8013f0c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013f0e:	2301      	movs	r3, #1
 8013f10:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013f12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8013f16:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	b2db      	uxtb	r3, r3
 8013f1c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	0a1b      	lsrs	r3, r3, #8
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	0c1b      	lsrs	r3, r3, #16
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	0e1b      	lsrs	r3, r3, #24
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f38:	b2db      	uxtb	r3, r3
 8013f3a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f3e:	0a1b      	lsrs	r3, r3, #8
 8013f40:	b2db      	uxtb	r3, r3
 8013f42:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f46:	0c1b      	lsrs	r3, r3, #16
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f4e:	0e1b      	lsrs	r3, r3, #24
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013f54:	e048      	b.n	8013fe8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013f56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013f5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f5e:	3301      	adds	r3, #1
 8013f60:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013f62:	f107 0320 	add.w	r3, r7, #32
 8013f66:	7a7a      	ldrb	r2, [r7, #9]
 8013f68:	f107 0010 	add.w	r0, r7, #16
 8013f6c:	2110      	movs	r1, #16
 8013f6e:	f7f9 f9fa 	bl	800d366 <SecureElementAesEncrypt>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d001      	beq.n	8013f7c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f78:	230f      	movs	r3, #15
 8013f7a:	e03a      	b.n	8013ff2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013f82:	e01e      	b.n	8013fc2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013f84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f8c:	4413      	add	r3, r2
 8013f8e:	461a      	mov	r2, r3
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	4413      	add	r3, r2
 8013f94:	7819      	ldrb	r1, [r3, #0]
 8013f96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f9a:	3338      	adds	r3, #56	; 0x38
 8013f9c:	443b      	add	r3, r7
 8013f9e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013fa2:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8013fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013faa:	4403      	add	r3, r0
 8013fac:	4618      	mov	r0, r3
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	4403      	add	r3, r0
 8013fb2:	404a      	eors	r2, r1
 8013fb4:	b2d2      	uxtb	r2, r2
 8013fb6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013fc6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013fca:	2a10      	cmp	r2, #16
 8013fcc:	bfa8      	it	ge
 8013fce:	2210      	movge	r2, #16
 8013fd0:	b212      	sxth	r2, r2
 8013fd2:	4293      	cmp	r3, r2
 8013fd4:	dbd6      	blt.n	8013f84 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013fd6:	897b      	ldrh	r3, [r7, #10]
 8013fd8:	3b10      	subs	r3, #16
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013fde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013fe2:	3310      	adds	r3, #16
 8013fe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8013fe8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	dcb2      	bgt.n	8013f56 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013ff0:	2300      	movs	r3, #0
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3738      	adds	r7, #56	; 0x38
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}

08013ffa <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013ffa:	b490      	push	{r4, r7}
 8013ffc:	b082      	sub	sp, #8
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	4604      	mov	r4, r0
 8014002:	4608      	mov	r0, r1
 8014004:	4611      	mov	r1, r2
 8014006:	461a      	mov	r2, r3
 8014008:	4623      	mov	r3, r4
 801400a:	80fb      	strh	r3, [r7, #6]
 801400c:	4603      	mov	r3, r0
 801400e:	717b      	strb	r3, [r7, #5]
 8014010:	460b      	mov	r3, r1
 8014012:	713b      	strb	r3, [r7, #4]
 8014014:	4613      	mov	r3, r2
 8014016:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d101      	bne.n	8014022 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801401e:	230a      	movs	r3, #10
 8014020:	e04e      	b.n	80140c0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014022:	69bb      	ldr	r3, [r7, #24]
 8014024:	2249      	movs	r2, #73	; 0x49
 8014026:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	3301      	adds	r3, #1
 801402c:	2200      	movs	r2, #0
 801402e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014030:	69bb      	ldr	r3, [r7, #24]
 8014032:	3302      	adds	r3, #2
 8014034:	2200      	movs	r2, #0
 8014036:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014038:	69bb      	ldr	r3, [r7, #24]
 801403a:	3303      	adds	r3, #3
 801403c:	2200      	movs	r2, #0
 801403e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014040:	69bb      	ldr	r3, [r7, #24]
 8014042:	3304      	adds	r3, #4
 8014044:	2200      	movs	r2, #0
 8014046:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	3305      	adds	r3, #5
 801404c:	78fa      	ldrb	r2, [r7, #3]
 801404e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014050:	69bb      	ldr	r3, [r7, #24]
 8014052:	3306      	adds	r3, #6
 8014054:	693a      	ldr	r2, [r7, #16]
 8014056:	b2d2      	uxtb	r2, r2
 8014058:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	0a1a      	lsrs	r2, r3, #8
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	3307      	adds	r3, #7
 8014062:	b2d2      	uxtb	r2, r2
 8014064:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	0c1a      	lsrs	r2, r3, #16
 801406a:	69bb      	ldr	r3, [r7, #24]
 801406c:	3308      	adds	r3, #8
 801406e:	b2d2      	uxtb	r2, r2
 8014070:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	0e1a      	lsrs	r2, r3, #24
 8014076:	69bb      	ldr	r3, [r7, #24]
 8014078:	3309      	adds	r3, #9
 801407a:	b2d2      	uxtb	r2, r2
 801407c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801407e:	69bb      	ldr	r3, [r7, #24]
 8014080:	330a      	adds	r3, #10
 8014082:	697a      	ldr	r2, [r7, #20]
 8014084:	b2d2      	uxtb	r2, r2
 8014086:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	0a1a      	lsrs	r2, r3, #8
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	330b      	adds	r3, #11
 8014090:	b2d2      	uxtb	r2, r2
 8014092:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	0c1a      	lsrs	r2, r3, #16
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	330c      	adds	r3, #12
 801409c:	b2d2      	uxtb	r2, r2
 801409e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	0e1a      	lsrs	r2, r3, #24
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	330d      	adds	r3, #13
 80140a8:	b2d2      	uxtb	r2, r2
 80140aa:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80140ac:	69bb      	ldr	r3, [r7, #24]
 80140ae:	330e      	adds	r3, #14
 80140b0:	2200      	movs	r2, #0
 80140b2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	330f      	adds	r3, #15
 80140b8:	88fa      	ldrh	r2, [r7, #6]
 80140ba:	b2d2      	uxtb	r2, r2
 80140bc:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80140be:	2300      	movs	r3, #0
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3708      	adds	r7, #8
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bc90      	pop	{r4, r7}
 80140c8:	4770      	bx	lr

080140ca <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80140ca:	b590      	push	{r4, r7, lr}
 80140cc:	b08b      	sub	sp, #44	; 0x2c
 80140ce:	af04      	add	r7, sp, #16
 80140d0:	6078      	str	r0, [r7, #4]
 80140d2:	4608      	mov	r0, r1
 80140d4:	4611      	mov	r1, r2
 80140d6:	461a      	mov	r2, r3
 80140d8:	4603      	mov	r3, r0
 80140da:	807b      	strh	r3, [r7, #2]
 80140dc:	460b      	mov	r3, r1
 80140de:	707b      	strb	r3, [r7, #1]
 80140e0:	4613      	mov	r3, r2
 80140e2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d002      	beq.n	80140f0 <ComputeCmacB0+0x26>
 80140ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140f0:	230a      	movs	r3, #10
 80140f2:	e024      	b.n	801413e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80140f4:	887b      	ldrh	r3, [r7, #2]
 80140f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80140fa:	d901      	bls.n	8014100 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80140fc:	230e      	movs	r3, #14
 80140fe:	e01e      	b.n	801413e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014100:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8014104:	783a      	ldrb	r2, [r7, #0]
 8014106:	7879      	ldrb	r1, [r7, #1]
 8014108:	8878      	ldrh	r0, [r7, #2]
 801410a:	f107 0308 	add.w	r3, r7, #8
 801410e:	9302      	str	r3, [sp, #8]
 8014110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014112:	9301      	str	r3, [sp, #4]
 8014114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	4623      	mov	r3, r4
 801411a:	f7ff ff6e 	bl	8013ffa <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801411e:	7879      	ldrb	r1, [r7, #1]
 8014120:	887a      	ldrh	r2, [r7, #2]
 8014122:	f107 0008 	add.w	r0, r7, #8
 8014126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	460b      	mov	r3, r1
 801412c:	6879      	ldr	r1, [r7, #4]
 801412e:	f7f9 f8cd 	bl	800d2cc <SecureElementComputeAesCmac>
 8014132:	4603      	mov	r3, r0
 8014134:	2b00      	cmp	r3, #0
 8014136:	d001      	beq.n	801413c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014138:	230f      	movs	r3, #15
 801413a:	e000      	b.n	801413e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801413c:	2300      	movs	r3, #0
}
 801413e:	4618      	mov	r0, r3
 8014140:	371c      	adds	r7, #28
 8014142:	46bd      	mov	sp, r7
 8014144:	bd90      	pop	{r4, r7, pc}

08014146 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014146:	b590      	push	{r4, r7, lr}
 8014148:	b0cd      	sub	sp, #308	; 0x134
 801414a:	af04      	add	r7, sp, #16
 801414c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014150:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8014154:	6020      	str	r0, [r4, #0]
 8014156:	460c      	mov	r4, r1
 8014158:	4610      	mov	r0, r2
 801415a:	4619      	mov	r1, r3
 801415c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014160:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014164:	4622      	mov	r2, r4
 8014166:	801a      	strh	r2, [r3, #0]
 8014168:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801416c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014170:	4602      	mov	r2, r0
 8014172:	701a      	strb	r2, [r3, #0]
 8014174:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014178:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801417c:	460a      	mov	r2, r1
 801417e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014180:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014184:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d101      	bne.n	8014192 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801418e:	230a      	movs	r3, #10
 8014190:	e063      	b.n	801425a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014192:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014196:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801419a:	881b      	ldrh	r3, [r3, #0]
 801419c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80141a0:	d901      	bls.n	80141a6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80141a2:	230e      	movs	r3, #14
 80141a4:	e059      	b.n	801425a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80141a6:	f107 030c 	add.w	r3, r7, #12
 80141aa:	f44f 7288 	mov.w	r2, #272	; 0x110
 80141ae:	2100      	movs	r1, #0
 80141b0:	4618      	mov	r0, r3
 80141b2:	f004 ff99 	bl	80190e8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80141b6:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80141ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80141c2:	781a      	ldrb	r2, [r3, #0]
 80141c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141c8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80141cc:	7819      	ldrb	r1, [r3, #0]
 80141ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141d2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80141d6:	8818      	ldrh	r0, [r3, #0]
 80141d8:	f107 030c 	add.w	r3, r7, #12
 80141dc:	9302      	str	r3, [sp, #8]
 80141de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80141e2:	9301      	str	r3, [sp, #4]
 80141e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	4623      	mov	r3, r4
 80141ec:	f7ff ff05 	bl	8013ffa <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80141f0:	f107 030c 	add.w	r3, r7, #12
 80141f4:	3310      	adds	r3, #16
 80141f6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80141fa:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80141fe:	8812      	ldrh	r2, [r2, #0]
 8014200:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014204:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014208:	6809      	ldr	r1, [r1, #0]
 801420a:	4618      	mov	r0, r3
 801420c:	f004 ff31 	bl	8019072 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014210:	2306      	movs	r3, #6
 8014212:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014216:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801421a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801421e:	881b      	ldrh	r3, [r3, #0]
 8014220:	3310      	adds	r3, #16
 8014222:	b299      	uxth	r1, r3
 8014224:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014228:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	f107 000c 	add.w	r0, r7, #12
 8014232:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8014236:	f7f9 f867 	bl	800d308 <SecureElementVerifyAesCmac>
 801423a:	4603      	mov	r3, r0
 801423c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014240:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014244:	2b00      	cmp	r3, #0
 8014246:	d101      	bne.n	801424c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014248:	2300      	movs	r3, #0
 801424a:	e006      	b.n	801425a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801424c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014250:	2b01      	cmp	r3, #1
 8014252:	d101      	bne.n	8014258 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014254:	2301      	movs	r3, #1
 8014256:	e000      	b.n	801425a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014258:	230f      	movs	r3, #15
}
 801425a:	4618      	mov	r0, r3
 801425c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014260:	46bd      	mov	sp, r7
 8014262:	bd90      	pop	{r4, r7, pc}

08014264 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014264:	b480      	push	{r7}
 8014266:	b085      	sub	sp, #20
 8014268:	af00      	add	r7, sp, #0
 801426a:	4603      	mov	r3, r0
 801426c:	6039      	str	r1, [r7, #0]
 801426e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014270:	2300      	movs	r3, #0
 8014272:	73fb      	strb	r3, [r7, #15]
 8014274:	e011      	b.n	801429a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014276:	7bfb      	ldrb	r3, [r7, #15]
 8014278:	4a0c      	ldr	r2, [pc, #48]	; (80142ac <GetKeyAddrItem+0x48>)
 801427a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801427e:	79fa      	ldrb	r2, [r7, #7]
 8014280:	429a      	cmp	r2, r3
 8014282:	d107      	bne.n	8014294 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014284:	7bfb      	ldrb	r3, [r7, #15]
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	4a08      	ldr	r2, [pc, #32]	; (80142ac <GetKeyAddrItem+0x48>)
 801428a:	441a      	add	r2, r3
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014290:	2300      	movs	r3, #0
 8014292:	e006      	b.n	80142a2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014294:	7bfb      	ldrb	r3, [r7, #15]
 8014296:	3301      	adds	r3, #1
 8014298:	73fb      	strb	r3, [r7, #15]
 801429a:	7bfb      	ldrb	r3, [r7, #15]
 801429c:	2b01      	cmp	r3, #1
 801429e:	d9ea      	bls.n	8014276 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80142a0:	230c      	movs	r3, #12
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3714      	adds	r7, #20
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bc80      	pop	{r7}
 80142aa:	4770      	bx	lr
 80142ac:	200000f8 	.word	0x200000f8

080142b0 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b088      	sub	sp, #32
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	60b9      	str	r1, [r7, #8]
 80142b8:	607a      	str	r2, [r7, #4]
 80142ba:	461a      	mov	r2, r3
 80142bc:	4603      	mov	r3, r0
 80142be:	73fb      	strb	r3, [r7, #15]
 80142c0:	4613      	mov	r3, r2
 80142c2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80142c4:	2300      	movs	r3, #0
 80142c6:	613b      	str	r3, [r7, #16]
 80142c8:	f107 0314 	add.w	r3, r7, #20
 80142cc:	2200      	movs	r2, #0
 80142ce:	601a      	str	r2, [r3, #0]
 80142d0:	605a      	str	r2, [r3, #4]
 80142d2:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80142d4:	7bfb      	ldrb	r3, [r7, #15]
 80142d6:	2b02      	cmp	r3, #2
 80142d8:	d002      	beq.n	80142e0 <DeriveSessionKey10x+0x30>
 80142da:	2b03      	cmp	r3, #3
 80142dc:	d003      	beq.n	80142e6 <DeriveSessionKey10x+0x36>
 80142de:	e005      	b.n	80142ec <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80142e0:	2301      	movs	r3, #1
 80142e2:	743b      	strb	r3, [r7, #16]
            break;
 80142e4:	e004      	b.n	80142f0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80142e6:	2302      	movs	r3, #2
 80142e8:	743b      	strb	r3, [r7, #16]
            break;
 80142ea:	e001      	b.n	80142f0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80142ec:	230b      	movs	r3, #11
 80142ee:	e02a      	b.n	8014346 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	0a1b      	lsrs	r3, r3, #8
 80142fa:	b2db      	uxtb	r3, r3
 80142fc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	0c1b      	lsrs	r3, r3, #16
 8014302:	b2db      	uxtb	r3, r3
 8014304:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	b2db      	uxtb	r3, r3
 801430a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	0a1b      	lsrs	r3, r3, #8
 8014310:	b2db      	uxtb	r3, r3
 8014312:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	0c1b      	lsrs	r3, r3, #16
 8014318:	b2db      	uxtb	r3, r3
 801431a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801431c:	89bb      	ldrh	r3, [r7, #12]
 801431e:	b2db      	uxtb	r3, r3
 8014320:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014322:	89bb      	ldrh	r3, [r7, #12]
 8014324:	0a1b      	lsrs	r3, r3, #8
 8014326:	b29b      	uxth	r3, r3
 8014328:	b2db      	uxtb	r3, r3
 801432a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801432c:	7bfa      	ldrb	r2, [r7, #15]
 801432e:	f107 0310 	add.w	r3, r7, #16
 8014332:	2101      	movs	r1, #1
 8014334:	4618      	mov	r0, r3
 8014336:	f7f9 f87d 	bl	800d434 <SecureElementDeriveAndStoreKey>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d001      	beq.n	8014344 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014340:	230f      	movs	r3, #15
 8014342:	e000      	b.n	8014346 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014344:	2300      	movs	r3, #0
}
 8014346:	4618      	mov	r0, r3
 8014348:	3720      	adds	r7, #32
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
	...

08014350 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014350:	b480      	push	{r7}
 8014352:	b083      	sub	sp, #12
 8014354:	af00      	add	r7, sp, #0
 8014356:	4603      	mov	r3, r0
 8014358:	6039      	str	r1, [r7, #0]
 801435a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d101      	bne.n	8014366 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014362:	230a      	movs	r3, #10
 8014364:	e03b      	b.n	80143de <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8014366:	79fb      	ldrb	r3, [r7, #7]
 8014368:	3b01      	subs	r3, #1
 801436a:	2b03      	cmp	r3, #3
 801436c:	d834      	bhi.n	80143d8 <GetLastFcntDown+0x88>
 801436e:	a201      	add	r2, pc, #4	; (adr r2, 8014374 <GetLastFcntDown+0x24>)
 8014370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014374:	08014385 	.word	0x08014385
 8014378:	0801439d 	.word	0x0801439d
 801437c:	080143b5 	.word	0x080143b5
 8014380:	080143cd 	.word	0x080143cd
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014384:	4b18      	ldr	r3, [pc, #96]	; (80143e8 <GetLastFcntDown+0x98>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	691a      	ldr	r2, [r3, #16]
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801438e:	4b16      	ldr	r3, [pc, #88]	; (80143e8 <GetLastFcntDown+0x98>)
 8014390:	681a      	ldr	r2, [r3, #0]
 8014392:	4b15      	ldr	r3, [pc, #84]	; (80143e8 <GetLastFcntDown+0x98>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	6912      	ldr	r2, [r2, #16]
 8014398:	621a      	str	r2, [r3, #32]
            break;
 801439a:	e01f      	b.n	80143dc <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801439c:	4b12      	ldr	r3, [pc, #72]	; (80143e8 <GetLastFcntDown+0x98>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	695a      	ldr	r2, [r3, #20]
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80143a6:	4b10      	ldr	r3, [pc, #64]	; (80143e8 <GetLastFcntDown+0x98>)
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	4b0f      	ldr	r3, [pc, #60]	; (80143e8 <GetLastFcntDown+0x98>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	6952      	ldr	r2, [r2, #20]
 80143b0:	621a      	str	r2, [r3, #32]
            break;
 80143b2:	e013      	b.n	80143dc <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80143b4:	4b0c      	ldr	r3, [pc, #48]	; (80143e8 <GetLastFcntDown+0x98>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	699a      	ldr	r2, [r3, #24]
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80143be:	4b0a      	ldr	r3, [pc, #40]	; (80143e8 <GetLastFcntDown+0x98>)
 80143c0:	681a      	ldr	r2, [r3, #0]
 80143c2:	4b09      	ldr	r3, [pc, #36]	; (80143e8 <GetLastFcntDown+0x98>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	6992      	ldr	r2, [r2, #24]
 80143c8:	621a      	str	r2, [r3, #32]
            break;
 80143ca:	e007      	b.n	80143dc <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80143cc:	4b06      	ldr	r3, [pc, #24]	; (80143e8 <GetLastFcntDown+0x98>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	69da      	ldr	r2, [r3, #28]
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	601a      	str	r2, [r3, #0]
            break;
 80143d6:	e001      	b.n	80143dc <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80143d8:	2305      	movs	r3, #5
 80143da:	e000      	b.n	80143de <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80143dc:	2300      	movs	r3, #0
}
 80143de:	4618      	mov	r0, r3
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bc80      	pop	{r7}
 80143e6:	4770      	bx	lr
 80143e8:	20003cdc 	.word	0x20003cdc

080143ec <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b084      	sub	sp, #16
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	4603      	mov	r3, r0
 80143f4:	6039      	str	r1, [r7, #0]
 80143f6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80143f8:	2300      	movs	r3, #0
 80143fa:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80143fc:	f107 020c 	add.w	r2, r7, #12
 8014400:	79fb      	ldrb	r3, [r7, #7]
 8014402:	4611      	mov	r1, r2
 8014404:	4618      	mov	r0, r3
 8014406:	f7ff ffa3 	bl	8014350 <GetLastFcntDown>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	d001      	beq.n	8014414 <CheckFCntDown+0x28>
    {
        return false;
 8014410:	2300      	movs	r3, #0
 8014412:	e00a      	b.n	801442a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	429a      	cmp	r2, r3
 801441a:	d803      	bhi.n	8014424 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 801441c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014422:	d101      	bne.n	8014428 <CheckFCntDown+0x3c>
    {
        return true;
 8014424:	2301      	movs	r3, #1
 8014426:	e000      	b.n	801442a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014428:	2300      	movs	r3, #0
    }
}
 801442a:	4618      	mov	r0, r3
 801442c:	3710      	adds	r7, #16
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
	...

08014434 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014434:	b480      	push	{r7}
 8014436:	b083      	sub	sp, #12
 8014438:	af00      	add	r7, sp, #0
 801443a:	4603      	mov	r3, r0
 801443c:	6039      	str	r1, [r7, #0]
 801443e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014440:	79fb      	ldrb	r3, [r7, #7]
 8014442:	3b01      	subs	r3, #1
 8014444:	2b03      	cmp	r3, #3
 8014446:	d81f      	bhi.n	8014488 <UpdateFCntDown+0x54>
 8014448:	a201      	add	r2, pc, #4	; (adr r2, 8014450 <UpdateFCntDown+0x1c>)
 801444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801444e:	bf00      	nop
 8014450:	08014461 	.word	0x08014461
 8014454:	0801446b 	.word	0x0801446b
 8014458:	08014475 	.word	0x08014475
 801445c:	0801447f 	.word	0x0801447f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014460:	4b0c      	ldr	r3, [pc, #48]	; (8014494 <UpdateFCntDown+0x60>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	683a      	ldr	r2, [r7, #0]
 8014466:	611a      	str	r2, [r3, #16]
            break;
 8014468:	e00f      	b.n	801448a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801446a:	4b0a      	ldr	r3, [pc, #40]	; (8014494 <UpdateFCntDown+0x60>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	683a      	ldr	r2, [r7, #0]
 8014470:	615a      	str	r2, [r3, #20]
            break;
 8014472:	e00a      	b.n	801448a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014474:	4b07      	ldr	r3, [pc, #28]	; (8014494 <UpdateFCntDown+0x60>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	683a      	ldr	r2, [r7, #0]
 801447a:	619a      	str	r2, [r3, #24]
            break;
 801447c:	e005      	b.n	801448a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801447e:	4b05      	ldr	r3, [pc, #20]	; (8014494 <UpdateFCntDown+0x60>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	683a      	ldr	r2, [r7, #0]
 8014484:	61da      	str	r2, [r3, #28]
            break;
 8014486:	e000      	b.n	801448a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014488:	bf00      	nop
    }
}
 801448a:	bf00      	nop
 801448c:	370c      	adds	r7, #12
 801448e:	46bd      	mov	sp, r7
 8014490:	bc80      	pop	{r7}
 8014492:	4770      	bx	lr
 8014494:	20003cdc 	.word	0x20003cdc

08014498 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014498:	b480      	push	{r7}
 801449a:	b083      	sub	sp, #12
 801449c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801449e:	4b18      	ldr	r3, [pc, #96]	; (8014500 <ResetFCnts+0x68>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	2200      	movs	r2, #0
 80144a4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80144a6:	4b16      	ldr	r3, [pc, #88]	; (8014500 <ResetFCnts+0x68>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	f04f 32ff 	mov.w	r2, #4294967295
 80144ae:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80144b0:	4b13      	ldr	r3, [pc, #76]	; (8014500 <ResetFCnts+0x68>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	f04f 32ff 	mov.w	r2, #4294967295
 80144b8:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80144ba:	4b11      	ldr	r3, [pc, #68]	; (8014500 <ResetFCnts+0x68>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	f04f 32ff 	mov.w	r2, #4294967295
 80144c2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80144c4:	4b0e      	ldr	r3, [pc, #56]	; (8014500 <ResetFCnts+0x68>)
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	4b0d      	ldr	r3, [pc, #52]	; (8014500 <ResetFCnts+0x68>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	6992      	ldr	r2, [r2, #24]
 80144ce:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144d0:	2300      	movs	r3, #0
 80144d2:	607b      	str	r3, [r7, #4]
 80144d4:	e00b      	b.n	80144ee <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80144d6:	4b0a      	ldr	r3, [pc, #40]	; (8014500 <ResetFCnts+0x68>)
 80144d8:	681a      	ldr	r2, [r3, #0]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	3306      	adds	r3, #6
 80144de:	009b      	lsls	r3, r3, #2
 80144e0:	4413      	add	r3, r2
 80144e2:	f04f 32ff 	mov.w	r2, #4294967295
 80144e6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	3301      	adds	r3, #1
 80144ec:	607b      	str	r3, [r7, #4]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	ddf0      	ble.n	80144d6 <ResetFCnts+0x3e>
    }
}
 80144f4:	bf00      	nop
 80144f6:	bf00      	nop
 80144f8:	370c      	adds	r7, #12
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bc80      	pop	{r7}
 80144fe:	4770      	bx	lr
 8014500:	20003cdc 	.word	0x20003cdc

08014504 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b082      	sub	sp, #8
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d101      	bne.n	8014516 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014512:	2309      	movs	r3, #9
 8014514:	e01c      	b.n	8014550 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014516:	4a10      	ldr	r2, [pc, #64]	; (8014558 <LoRaMacCryptoInit+0x54>)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801451c:	4b0e      	ldr	r3, [pc, #56]	; (8014558 <LoRaMacCryptoInit+0x54>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	2228      	movs	r2, #40	; 0x28
 8014522:	2100      	movs	r1, #0
 8014524:	4618      	mov	r0, r3
 8014526:	f004 fddf 	bl	80190e8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801452a:	4b0b      	ldr	r3, [pc, #44]	; (8014558 <LoRaMacCryptoInit+0x54>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	2201      	movs	r2, #1
 8014530:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014532:	4b09      	ldr	r3, [pc, #36]	; (8014558 <LoRaMacCryptoInit+0x54>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2201      	movs	r2, #1
 8014538:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801453a:	4b07      	ldr	r3, [pc, #28]	; (8014558 <LoRaMacCryptoInit+0x54>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2201      	movs	r2, #1
 8014540:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014542:	4b05      	ldr	r3, [pc, #20]	; (8014558 <LoRaMacCryptoInit+0x54>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2200      	movs	r2, #0
 8014548:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801454a:	f7ff ffa5 	bl	8014498 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801454e:	2300      	movs	r3, #0
}
 8014550:	4618      	mov	r0, r3
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	20003cdc 	.word	0x20003cdc

0801455c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801455c:	b480      	push	{r7}
 801455e:	b083      	sub	sp, #12
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014564:	4b04      	ldr	r3, [pc, #16]	; (8014578 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801456c:	2300      	movs	r3, #0
}
 801456e:	4618      	mov	r0, r3
 8014570:	370c      	adds	r7, #12
 8014572:	46bd      	mov	sp, r7
 8014574:	bc80      	pop	{r7}
 8014576:	4770      	bx	lr
 8014578:	20003cdc 	.word	0x20003cdc

0801457c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801457c:	b480      	push	{r7}
 801457e:	b083      	sub	sp, #12
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d101      	bne.n	801458e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801458a:	230a      	movs	r3, #10
 801458c:	e006      	b.n	801459c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801458e:	4b06      	ldr	r3, [pc, #24]	; (80145a8 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	68db      	ldr	r3, [r3, #12]
 8014594:	1c5a      	adds	r2, r3, #1
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801459a:	2300      	movs	r3, #0
}
 801459c:	4618      	mov	r0, r3
 801459e:	370c      	adds	r7, #12
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bc80      	pop	{r7}
 80145a4:	4770      	bx	lr
 80145a6:	bf00      	nop
 80145a8:	20003cdc 	.word	0x20003cdc

080145ac <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80145ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80145b0:	b08a      	sub	sp, #40	; 0x28
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	613a      	str	r2, [r7, #16]
 80145b6:	60fb      	str	r3, [r7, #12]
 80145b8:	4603      	mov	r3, r0
 80145ba:	75fb      	strb	r3, [r7, #23]
 80145bc:	460b      	mov	r3, r1
 80145be:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80145c0:	2300      	movs	r3, #0
 80145c2:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80145c4:	2300      	movs	r3, #0
 80145c6:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80145c8:	2313      	movs	r3, #19
 80145ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d101      	bne.n	80145d8 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145d4:	230a      	movs	r3, #10
 80145d6:	e057      	b.n	8014688 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80145d8:	f107 021c 	add.w	r2, r7, #28
 80145dc:	7dfb      	ldrb	r3, [r7, #23]
 80145de:	4611      	mov	r1, r2
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7ff feb5 	bl	8014350 <GetLastFcntDown>
 80145e6:	4603      	mov	r3, r0
 80145e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80145ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d002      	beq.n	80145fa <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 80145f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80145f8:	e046      	b.n	8014688 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014600:	d103      	bne.n	801460a <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	693a      	ldr	r2, [r7, #16]
 8014606:	601a      	str	r2, [r3, #0]
 8014608:	e01e      	b.n	8014648 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	b29b      	uxth	r3, r3
 801460e:	693a      	ldr	r2, [r7, #16]
 8014610:	1ad3      	subs	r3, r2, r3
 8014612:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8014614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014616:	2b00      	cmp	r3, #0
 8014618:	dd05      	ble.n	8014626 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801461a:	69fa      	ldr	r2, [r7, #28]
 801461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801461e:	441a      	add	r2, r3
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	601a      	str	r2, [r3, #0]
 8014624:	e010      	b.n	8014648 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8014626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014628:	2b00      	cmp	r3, #0
 801462a:	d104      	bne.n	8014636 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801462c:	69fa      	ldr	r2, [r7, #28]
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014632:	2307      	movs	r3, #7
 8014634:	e028      	b.n	8014688 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	0c1b      	lsrs	r3, r3, #16
 801463a:	041b      	lsls	r3, r3, #16
 801463c:	693a      	ldr	r2, [r7, #16]
 801463e:	4413      	add	r3, r2
 8014640:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014648:	4b12      	ldr	r3, [pc, #72]	; (8014694 <LoRaMacCryptoGetFCntDown+0xe8>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	789b      	ldrb	r3, [r3, #2]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d119      	bne.n	8014686 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	2200      	movs	r2, #0
 8014658:	603b      	str	r3, [r7, #0]
 801465a:	607a      	str	r2, [r7, #4]
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	2200      	movs	r2, #0
 8014660:	469a      	mov	sl, r3
 8014662:	4693      	mov	fp, r2
 8014664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014668:	4611      	mov	r1, r2
 801466a:	ebb1 040a 	subs.w	r4, r1, sl
 801466e:	eb63 050b 	sbc.w	r5, r3, fp
 8014672:	8abb      	ldrh	r3, [r7, #20]
 8014674:	2200      	movs	r2, #0
 8014676:	4698      	mov	r8, r3
 8014678:	4691      	mov	r9, r2
 801467a:	4544      	cmp	r4, r8
 801467c:	eb75 0309 	sbcs.w	r3, r5, r9
 8014680:	db01      	blt.n	8014686 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8014682:	2308      	movs	r3, #8
 8014684:	e000      	b.n	8014688 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014686:	2300      	movs	r3, #0
}
 8014688:	4618      	mov	r0, r3
 801468a:	3728      	adds	r7, #40	; 0x28
 801468c:	46bd      	mov	sp, r7
 801468e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014692:	bf00      	nop
 8014694:	20003cdc 	.word	0x20003cdc

08014698 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014698:	b480      	push	{r7}
 801469a:	b085      	sub	sp, #20
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d101      	bne.n	80146aa <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80146a6:	230a      	movs	r3, #10
 80146a8:	e017      	b.n	80146da <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80146aa:	2300      	movs	r3, #0
 80146ac:	60fb      	str	r3, [r7, #12]
 80146ae:	e010      	b.n	80146d2 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80146b0:	4b0c      	ldr	r3, [pc, #48]	; (80146e4 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80146b2:	6819      	ldr	r1, [r3, #0]
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	222c      	movs	r2, #44	; 0x2c
 80146b8:	fb02 f303 	mul.w	r3, r2, r3
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	4413      	add	r3, r2
 80146c0:	68fa      	ldr	r2, [r7, #12]
 80146c2:	3206      	adds	r2, #6
 80146c4:	0092      	lsls	r2, r2, #2
 80146c6:	440a      	add	r2, r1
 80146c8:	3204      	adds	r2, #4
 80146ca:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	3301      	adds	r3, #1
 80146d0:	60fb      	str	r3, [r7, #12]
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	ddeb      	ble.n	80146b0 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3714      	adds	r7, #20
 80146de:	46bd      	mov	sp, r7
 80146e0:	bc80      	pop	{r7}
 80146e2:	4770      	bx	lr
 80146e4:	20003cdc 	.word	0x20003cdc

080146e8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	4603      	mov	r3, r0
 80146f0:	6039      	str	r1, [r7, #0]
 80146f2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80146f4:	79fb      	ldrb	r3, [r7, #7]
 80146f6:	6839      	ldr	r1, [r7, #0]
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f8 fd89 	bl	800d210 <SecureElementSetKey>
 80146fe:	4603      	mov	r3, r0
 8014700:	2b00      	cmp	r3, #0
 8014702:	d001      	beq.n	8014708 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014704:	230f      	movs	r3, #15
 8014706:	e018      	b.n	801473a <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8014708:	79fb      	ldrb	r3, [r7, #7]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d114      	bne.n	8014738 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801470e:	4b0d      	ldr	r3, [pc, #52]	; (8014744 <LoRaMacCryptoSetKey+0x5c>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	789b      	ldrb	r3, [r3, #2]
 8014714:	79fa      	ldrb	r2, [r7, #7]
 8014716:	4611      	mov	r1, r2
 8014718:	4618      	mov	r0, r3
 801471a:	f000 fa3f 	bl	8014b9c <LoRaMacCryptoDeriveMcRootKey>
 801471e:	4603      	mov	r3, r0
 8014720:	2b00      	cmp	r3, #0
 8014722:	d001      	beq.n	8014728 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014724:	230f      	movs	r3, #15
 8014726:	e008      	b.n	801473a <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014728:	2004      	movs	r0, #4
 801472a:	f000 fa62 	bl	8014bf2 <LoRaMacCryptoDeriveMcKEKey>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d001      	beq.n	8014738 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014734:	230f      	movs	r3, #15
 8014736:	e000      	b.n	801473a <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	20003cdc 	.word	0x20003cdc

08014748 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b086      	sub	sp, #24
 801474c:	af02      	add	r7, sp, #8
 801474e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d101      	bne.n	801475a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014756:	230a      	movs	r3, #10
 8014758:	e033      	b.n	80147c2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801475a:	2301      	movs	r3, #1
 801475c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801475e:	2300      	movs	r3, #0
 8014760:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8014762:	f107 0308 	add.w	r3, r7, #8
 8014766:	4618      	mov	r0, r3
 8014768:	f7f8 ff22 	bl	800d5b0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 801476c:	68ba      	ldr	r2, [r7, #8]
 801476e:	4b17      	ldr	r3, [pc, #92]	; (80147cc <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	b292      	uxth	r2, r2
 8014774:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014776:	4b15      	ldr	r3, [pc, #84]	; (80147cc <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	889a      	ldrh	r2, [r3, #4]
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f000 fc18 	bl	8014fb6 <LoRaMacSerializerJoinRequest>
 8014786:	4603      	mov	r3, r0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d001      	beq.n	8014790 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801478c:	2311      	movs	r3, #17
 801478e:	e018      	b.n	80147c2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6819      	ldr	r1, [r3, #0]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	3318      	adds	r3, #24
 8014798:	7bfa      	ldrb	r2, [r7, #15]
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	4613      	mov	r3, r2
 801479e:	2213      	movs	r2, #19
 80147a0:	2000      	movs	r0, #0
 80147a2:	f7f8 fd93 	bl	800d2cc <SecureElementComputeAesCmac>
 80147a6:	4603      	mov	r3, r0
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d001      	beq.n	80147b0 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147ac:	230f      	movs	r3, #15
 80147ae:	e008      	b.n	80147c2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f000 fc00 	bl	8014fb6 <LoRaMacSerializerJoinRequest>
 80147b6:	4603      	mov	r3, r0
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d001      	beq.n	80147c0 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80147bc:	2311      	movs	r3, #17
 80147be:	e000      	b.n	80147c2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80147c0:	2300      	movs	r3, #0
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3710      	adds	r7, #16
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	20003cdc 	.word	0x20003cdc

080147d0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80147d0:	b590      	push	{r4, r7, lr}
 80147d2:	b097      	sub	sp, #92	; 0x5c
 80147d4:	af04      	add	r7, sp, #16
 80147d6:	4603      	mov	r3, r0
 80147d8:	60b9      	str	r1, [r7, #8]
 80147da:	607a      	str	r2, [r7, #4]
 80147dc:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d002      	beq.n	80147ea <LoRaMacCryptoHandleJoinAccept+0x1a>
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d101      	bne.n	80147ee <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147ea:	230a      	movs	r3, #10
 80147ec:	e0bd      	b.n	801496a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80147ee:	2313      	movs	r3, #19
 80147f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80147f4:	2300      	movs	r3, #0
 80147f6:	61bb      	str	r3, [r7, #24]
 80147f8:	f107 031c 	add.w	r3, r7, #28
 80147fc:	221d      	movs	r2, #29
 80147fe:	2100      	movs	r1, #0
 8014800:	4618      	mov	r0, r3
 8014802:	f009 f89d 	bl	801d940 <memset>
    uint8_t versionMinor         = 0;
 8014806:	2300      	movs	r3, #0
 8014808:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801480a:	4b5a      	ldr	r3, [pc, #360]	; (8014974 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	889b      	ldrh	r3, [r3, #4]
 8014810:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681c      	ldr	r4, [r3, #0]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	791b      	ldrb	r3, [r3, #4]
 801481c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8014820:	7bf8      	ldrb	r0, [r7, #15]
 8014822:	f107 0217 	add.w	r2, r7, #23
 8014826:	9202      	str	r2, [sp, #8]
 8014828:	f107 0218 	add.w	r2, r7, #24
 801482c:	9201      	str	r2, [sp, #4]
 801482e:	9300      	str	r3, [sp, #0]
 8014830:	4623      	mov	r3, r4
 8014832:	460a      	mov	r2, r1
 8014834:	68b9      	ldr	r1, [r7, #8]
 8014836:	f7f8 fe3d 	bl	800d4b4 <SecureElementProcessJoinAccept>
 801483a:	4603      	mov	r3, r0
 801483c:	2b00      	cmp	r3, #0
 801483e:	d001      	beq.n	8014844 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014840:	230f      	movs	r3, #15
 8014842:	e092      	b.n	801496a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6818      	ldr	r0, [r3, #0]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	791b      	ldrb	r3, [r3, #4]
 801484c:	b29a      	uxth	r2, r3
 801484e:	f107 0318 	add.w	r3, r7, #24
 8014852:	4619      	mov	r1, r3
 8014854:	f004 fc0d 	bl	8019072 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f000 f9ed 	bl	8014c38 <LoRaMacParserJoinAccept>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d001      	beq.n	8014868 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014864:	2310      	movs	r3, #16
 8014866:	e080      	b.n	801496a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	799b      	ldrb	r3, [r3, #6]
 801486c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	79db      	ldrb	r3, [r3, #7]
 8014872:	021b      	lsls	r3, r3, #8
 8014874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014876:	4313      	orrs	r3, r2
 8014878:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	7a1b      	ldrb	r3, [r3, #8]
 801487e:	041b      	lsls	r3, r3, #16
 8014880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014882:	4313      	orrs	r3, r2
 8014884:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8014886:	4b3b      	ldr	r3, [pc, #236]	; (8014974 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801488e:	429a      	cmp	r2, r3
 8014890:	d010      	beq.n	80148b4 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014892:	4b38      	ldr	r3, [pc, #224]	; (8014974 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014898:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801489a:	7dfb      	ldrb	r3, [r7, #23]
 801489c:	2100      	movs	r1, #0
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 f97c 	bl	8014b9c <LoRaMacCryptoDeriveMcRootKey>
 80148a4:	4603      	mov	r3, r0
 80148a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80148aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d005      	beq.n	80148be <LoRaMacCryptoHandleJoinAccept+0xee>
 80148b2:	e001      	b.n	80148b8 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80148b4:	2303      	movs	r3, #3
 80148b6:	e058      	b.n	801496a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80148b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148bc:	e055      	b.n	801496a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80148be:	2004      	movs	r0, #4
 80148c0:	f000 f997 	bl	8014bf2 <LoRaMacCryptoDeriveMcKEKey>
 80148c4:	4603      	mov	r3, r0
 80148c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80148ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d002      	beq.n	80148d8 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80148d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148d6:	e048      	b.n	801496a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	7a5b      	ldrb	r3, [r3, #9]
 80148dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	7a9b      	ldrb	r3, [r3, #10]
 80148e2:	021b      	lsls	r3, r3, #8
 80148e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148e6:	4313      	orrs	r3, r2
 80148e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	7adb      	ldrb	r3, [r3, #11]
 80148ee:	041b      	lsls	r3, r3, #16
 80148f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148f2:	4313      	orrs	r3, r2
 80148f4:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80148f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80148fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80148fe:	2003      	movs	r0, #3
 8014900:	f7ff fcd6 	bl	80142b0 <DeriveSessionKey10x>
 8014904:	4603      	mov	r3, r0
 8014906:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801490a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801490e:	2b00      	cmp	r3, #0
 8014910:	d002      	beq.n	8014918 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8014912:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014916:	e028      	b.n	801496a <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014918:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801491c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801491e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014920:	2002      	movs	r0, #2
 8014922:	f7ff fcc5 	bl	80142b0 <DeriveSessionKey10x>
 8014926:	4603      	mov	r3, r0
 8014928:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801492c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014930:	2b00      	cmp	r3, #0
 8014932:	d002      	beq.n	801493a <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8014934:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014938:	e017      	b.n	801496a <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801493a:	4b0e      	ldr	r3, [pc, #56]	; (8014974 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	7dfa      	ldrb	r2, [r7, #23]
 8014940:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8014942:	4b0c      	ldr	r3, [pc, #48]	; (8014974 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	2200      	movs	r2, #0
 8014948:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801494a:	4b0a      	ldr	r3, [pc, #40]	; (8014974 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	f04f 32ff 	mov.w	r2, #4294967295
 8014952:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014954:	4b07      	ldr	r3, [pc, #28]	; (8014974 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	f04f 32ff 	mov.w	r2, #4294967295
 801495c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801495e:	4b05      	ldr	r3, [pc, #20]	; (8014974 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	f04f 32ff 	mov.w	r2, #4294967295
 8014966:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014968:	2300      	movs	r3, #0
}
 801496a:	4618      	mov	r0, r3
 801496c:	374c      	adds	r7, #76	; 0x4c
 801496e:	46bd      	mov	sp, r7
 8014970:	bd90      	pop	{r4, r7, pc}
 8014972:	bf00      	nop
 8014974:	20003cdc 	.word	0x20003cdc

08014978 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014978:	b590      	push	{r4, r7, lr}
 801497a:	b08b      	sub	sp, #44	; 0x2c
 801497c:	af04      	add	r7, sp, #16
 801497e:	60f8      	str	r0, [r7, #12]
 8014980:	607b      	str	r3, [r7, #4]
 8014982:	460b      	mov	r3, r1
 8014984:	72fb      	strb	r3, [r7, #11]
 8014986:	4613      	mov	r3, r2
 8014988:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801498a:	2313      	movs	r3, #19
 801498c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801498e:	2303      	movs	r3, #3
 8014990:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d101      	bne.n	801499c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014998:	230a      	movs	r3, #10
 801499a:	e05f      	b.n	8014a5c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801499c:	4b31      	ldr	r3, [pc, #196]	; (8014a64 <LoRaMacCryptoSecureMessage+0xec>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	68db      	ldr	r3, [r3, #12]
 80149a2:	68fa      	ldr	r2, [r7, #12]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d201      	bcs.n	80149ac <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80149a8:	2306      	movs	r3, #6
 80149aa:	e057      	b.n	8014a5c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d101      	bne.n	80149ba <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80149b6:	2302      	movs	r3, #2
 80149b8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80149ba:	4b2a      	ldr	r3, [pc, #168]	; (8014a64 <LoRaMacCryptoSecureMessage+0xec>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	68db      	ldr	r3, [r3, #12]
 80149c0:	68fa      	ldr	r2, [r7, #12]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d916      	bls.n	80149f4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149d0:	b219      	sxth	r1, r3
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	689c      	ldr	r4, [r3, #8]
 80149d6:	7dfa      	ldrb	r2, [r7, #23]
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	9301      	str	r3, [sp, #4]
 80149dc:	2300      	movs	r3, #0
 80149de:	9300      	str	r3, [sp, #0]
 80149e0:	4623      	mov	r3, r4
 80149e2:	f7ff fa71 	bl	8013ec8 <PayloadEncrypt>
 80149e6:	4603      	mov	r3, r0
 80149e8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149ea:	7dbb      	ldrb	r3, [r7, #22]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d001      	beq.n	80149f4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80149f0:	7dbb      	ldrb	r3, [r7, #22]
 80149f2:	e033      	b.n	8014a5c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f000 fb60 	bl	80150ba <LoRaMacSerializerData>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d001      	beq.n	8014a04 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014a00:	2311      	movs	r3, #17
 8014a02:	e02b      	b.n	8014a5c <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014a04:	2302      	movs	r3, #2
 8014a06:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6818      	ldr	r0, [r3, #0]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	791b      	ldrb	r3, [r3, #4]
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	3b04      	subs	r3, #4
 8014a14:	b299      	uxth	r1, r3
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	689b      	ldr	r3, [r3, #8]
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	322c      	adds	r2, #44	; 0x2c
 8014a1e:	7dfc      	ldrb	r4, [r7, #23]
 8014a20:	9203      	str	r2, [sp, #12]
 8014a22:	68fa      	ldr	r2, [r7, #12]
 8014a24:	9202      	str	r2, [sp, #8]
 8014a26:	9301      	str	r3, [sp, #4]
 8014a28:	2300      	movs	r3, #0
 8014a2a:	9300      	str	r3, [sp, #0]
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	4622      	mov	r2, r4
 8014a30:	f7ff fb4b 	bl	80140ca <ComputeCmacB0>
 8014a34:	4603      	mov	r3, r0
 8014a36:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a38:	7dbb      	ldrb	r3, [r7, #22]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d001      	beq.n	8014a42 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014a3e:	7dbb      	ldrb	r3, [r7, #22]
 8014a40:	e00c      	b.n	8014a5c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 fb39 	bl	80150ba <LoRaMacSerializerData>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d001      	beq.n	8014a52 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014a4e:	2311      	movs	r3, #17
 8014a50:	e004      	b.n	8014a5c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014a52:	4b04      	ldr	r3, [pc, #16]	; (8014a64 <LoRaMacCryptoSecureMessage+0xec>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	68fa      	ldr	r2, [r7, #12]
 8014a58:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014a5a:	2300      	movs	r3, #0
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	371c      	adds	r7, #28
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd90      	pop	{r4, r7, pc}
 8014a64:	20003cdc 	.word	0x20003cdc

08014a68 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014a68:	b590      	push	{r4, r7, lr}
 8014a6a:	b08b      	sub	sp, #44	; 0x2c
 8014a6c:	af04      	add	r7, sp, #16
 8014a6e:	60b9      	str	r1, [r7, #8]
 8014a70:	607b      	str	r3, [r7, #4]
 8014a72:	4603      	mov	r3, r0
 8014a74:	73fb      	strb	r3, [r7, #15]
 8014a76:	4613      	mov	r3, r2
 8014a78:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d101      	bne.n	8014a84 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a80:	230a      	movs	r3, #10
 8014a82:	e084      	b.n	8014b8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014a84:	7bbb      	ldrb	r3, [r7, #14]
 8014a86:	6879      	ldr	r1, [r7, #4]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7ff fcaf 	bl	80143ec <CheckFCntDown>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	f083 0301 	eor.w	r3, r3, #1
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d001      	beq.n	8014a9e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014a9a:	2306      	movs	r3, #6
 8014a9c:	e077      	b.n	8014b8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014a9e:	2313      	movs	r3, #19
 8014aa0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014aa2:	2303      	movs	r3, #3
 8014aa4:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014aa6:	2302      	movs	r3, #2
 8014aa8:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014aac:	f000 f98f 	bl	8014dce <LoRaMacParserData>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d001      	beq.n	8014aba <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014ab6:	2310      	movs	r3, #16
 8014ab8:	e069      	b.n	8014b8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014aba:	f107 0210 	add.w	r2, r7, #16
 8014abe:	7bfb      	ldrb	r3, [r7, #15]
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7ff fbce 	bl	8014264 <GetKeyAddrItem>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014acc:	7d7b      	ldrb	r3, [r7, #21]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d001      	beq.n	8014ad6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014ad2:	7d7b      	ldrb	r3, [r7, #21]
 8014ad4:	e05b      	b.n	8014b8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	785b      	ldrb	r3, [r3, #1]
 8014ada:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	789b      	ldrb	r3, [r3, #2]
 8014ae0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae4:	689b      	ldr	r3, [r3, #8]
 8014ae6:	68ba      	ldr	r2, [r7, #8]
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d001      	beq.n	8014af0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014aec:	2302      	movs	r3, #2
 8014aee:	e04e      	b.n	8014b8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af2:	7b1b      	ldrb	r3, [r3, #12]
 8014af4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014af8:	b2db      	uxtb	r3, r3
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	bf14      	ite	ne
 8014afe:	2301      	movne	r3, #1
 8014b00:	2300      	moveq	r3, #0
 8014b02:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014b04:	4b24      	ldr	r3, [pc, #144]	; (8014b98 <LoRaMacCryptoUnsecureMessage+0x130>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	789b      	ldrb	r3, [r3, #2]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d101      	bne.n	8014b12 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b14:	6818      	ldr	r0, [r3, #0]
 8014b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b18:	791b      	ldrb	r3, [r3, #4]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	3b04      	subs	r3, #4
 8014b1e:	b299      	uxth	r1, r3
 8014b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b24:	7dbc      	ldrb	r4, [r7, #22]
 8014b26:	7d3a      	ldrb	r2, [r7, #20]
 8014b28:	9303      	str	r3, [sp, #12]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	9302      	str	r3, [sp, #8]
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	9301      	str	r3, [sp, #4]
 8014b32:	2301      	movs	r3, #1
 8014b34:	9300      	str	r3, [sp, #0]
 8014b36:	4623      	mov	r3, r4
 8014b38:	f7ff fb05 	bl	8014146 <VerifyCmacB0>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b40:	7d7b      	ldrb	r3, [r7, #21]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d001      	beq.n	8014b4a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8014b46:	7d7b      	ldrb	r3, [r7, #21]
 8014b48:	e021      	b.n	8014b8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d101      	bne.n	8014b58 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014b54:	2302      	movs	r3, #2
 8014b56:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b62:	b219      	sxth	r1, r3
 8014b64:	7dfa      	ldrb	r2, [r7, #23]
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	9301      	str	r3, [sp, #4]
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	9300      	str	r3, [sp, #0]
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	f7ff f9aa 	bl	8013ec8 <PayloadEncrypt>
 8014b74:	4603      	mov	r3, r0
 8014b76:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b78:	7d7b      	ldrb	r3, [r7, #21]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d001      	beq.n	8014b82 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014b7e:	7d7b      	ldrb	r3, [r7, #21]
 8014b80:	e005      	b.n	8014b8e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014b82:	7bbb      	ldrb	r3, [r7, #14]
 8014b84:	6879      	ldr	r1, [r7, #4]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7ff fc54 	bl	8014434 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014b8c:	2300      	movs	r3, #0
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	371c      	adds	r7, #28
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd90      	pop	{r4, r7, pc}
 8014b96:	bf00      	nop
 8014b98:	20003cdc 	.word	0x20003cdc

08014b9c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b086      	sub	sp, #24
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	460a      	mov	r2, r1
 8014ba6:	71fb      	strb	r3, [r7, #7]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014bac:	79bb      	ldrb	r3, [r7, #6]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d001      	beq.n	8014bb6 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014bb2:	230b      	movs	r3, #11
 8014bb4:	e019      	b.n	8014bea <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	60bb      	str	r3, [r7, #8]
 8014bba:	f107 030c 	add.w	r3, r7, #12
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	601a      	str	r2, [r3, #0]
 8014bc2:	605a      	str	r2, [r3, #4]
 8014bc4:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8014bc6:	79fb      	ldrb	r3, [r7, #7]
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d101      	bne.n	8014bd0 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8014bcc:	2320      	movs	r3, #32
 8014bce:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014bd0:	79b9      	ldrb	r1, [r7, #6]
 8014bd2:	f107 0308 	add.w	r3, r7, #8
 8014bd6:	2204      	movs	r2, #4
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7f8 fc2b 	bl	800d434 <SecureElementDeriveAndStoreKey>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d001      	beq.n	8014be8 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014be4:	230f      	movs	r3, #15
 8014be6:	e000      	b.n	8014bea <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014be8:	2300      	movs	r3, #0
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3718      	adds	r7, #24
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}

08014bf2 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014bf2:	b580      	push	{r7, lr}
 8014bf4:	b086      	sub	sp, #24
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014bfc:	79fb      	ldrb	r3, [r7, #7]
 8014bfe:	2b04      	cmp	r3, #4
 8014c00:	d001      	beq.n	8014c06 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014c02:	230b      	movs	r3, #11
 8014c04:	e014      	b.n	8014c30 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8014c06:	2300      	movs	r3, #0
 8014c08:	60bb      	str	r3, [r7, #8]
 8014c0a:	f107 030c 	add.w	r3, r7, #12
 8014c0e:	2200      	movs	r2, #0
 8014c10:	601a      	str	r2, [r3, #0]
 8014c12:	605a      	str	r2, [r3, #4]
 8014c14:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014c16:	79f9      	ldrb	r1, [r7, #7]
 8014c18:	f107 0308 	add.w	r3, r7, #8
 8014c1c:	227f      	movs	r2, #127	; 0x7f
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7f8 fc08 	bl	800d434 <SecureElementDeriveAndStoreKey>
 8014c24:	4603      	mov	r3, r0
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d001      	beq.n	8014c2e <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c2a:	230f      	movs	r3, #15
 8014c2c:	e000      	b.n	8014c30 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014c2e:	2300      	movs	r3, #0
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3718      	adds	r7, #24
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d003      	beq.n	8014c4e <LoRaMacParserJoinAccept+0x16>
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d101      	bne.n	8014c52 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014c4e:	2302      	movs	r3, #2
 8014c50:	e0b9      	b.n	8014dc6 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014c52:	2300      	movs	r3, #0
 8014c54:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	89fb      	ldrh	r3, [r7, #14]
 8014c5c:	1c59      	adds	r1, r3, #1
 8014c5e:	81f9      	strh	r1, [r7, #14]
 8014c60:	4413      	add	r3, r2
 8014c62:	781a      	ldrb	r2, [r3, #0]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	1d98      	adds	r0, r3, #6
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	681a      	ldr	r2, [r3, #0]
 8014c70:	89fb      	ldrh	r3, [r7, #14]
 8014c72:	4413      	add	r3, r2
 8014c74:	2203      	movs	r2, #3
 8014c76:	4619      	mov	r1, r3
 8014c78:	f004 f9fb 	bl	8019072 <memcpy1>
    bufItr = bufItr + 3;
 8014c7c:	89fb      	ldrh	r3, [r7, #14]
 8014c7e:	3303      	adds	r3, #3
 8014c80:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f103 0009 	add.w	r0, r3, #9
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681a      	ldr	r2, [r3, #0]
 8014c8c:	89fb      	ldrh	r3, [r7, #14]
 8014c8e:	4413      	add	r3, r2
 8014c90:	2203      	movs	r2, #3
 8014c92:	4619      	mov	r1, r3
 8014c94:	f004 f9ed 	bl	8019072 <memcpy1>
    bufItr = bufItr + 3;
 8014c98:	89fb      	ldrh	r3, [r7, #14]
 8014c9a:	3303      	adds	r3, #3
 8014c9c:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	89fb      	ldrh	r3, [r7, #14]
 8014ca4:	1c59      	adds	r1, r3, #1
 8014ca6:	81f9      	strh	r1, [r7, #14]
 8014ca8:	4413      	add	r3, r2
 8014caa:	781b      	ldrb	r3, [r3, #0]
 8014cac:	461a      	mov	r2, r3
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	89fb      	ldrh	r3, [r7, #14]
 8014cb8:	1c59      	adds	r1, r3, #1
 8014cba:	81f9      	strh	r1, [r7, #14]
 8014cbc:	4413      	add	r3, r2
 8014cbe:	781b      	ldrb	r3, [r3, #0]
 8014cc0:	021a      	lsls	r2, r3, #8
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	431a      	orrs	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	89fb      	ldrh	r3, [r7, #14]
 8014cd2:	1c59      	adds	r1, r3, #1
 8014cd4:	81f9      	strh	r1, [r7, #14]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	781b      	ldrb	r3, [r3, #0]
 8014cda:	041a      	lsls	r2, r3, #16
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	431a      	orrs	r2, r3
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681a      	ldr	r2, [r3, #0]
 8014cea:	89fb      	ldrh	r3, [r7, #14]
 8014cec:	1c59      	adds	r1, r3, #1
 8014cee:	81f9      	strh	r1, [r7, #14]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	061a      	lsls	r2, r3, #24
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	431a      	orrs	r2, r3
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	89fb      	ldrh	r3, [r7, #14]
 8014d06:	1c59      	adds	r1, r3, #1
 8014d08:	81f9      	strh	r1, [r7, #14]
 8014d0a:	4413      	add	r3, r2
 8014d0c:	781a      	ldrb	r2, [r3, #0]
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	89fb      	ldrh	r3, [r7, #14]
 8014d18:	1c59      	adds	r1, r3, #1
 8014d1a:	81f9      	strh	r1, [r7, #14]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	781a      	ldrb	r2, [r3, #0]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	791b      	ldrb	r3, [r3, #4]
 8014d28:	1f1a      	subs	r2, r3, #4
 8014d2a:	89fb      	ldrh	r3, [r7, #14]
 8014d2c:	1ad3      	subs	r3, r2, r3
 8014d2e:	2b10      	cmp	r3, #16
 8014d30:	d10e      	bne.n	8014d50 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f103 0012 	add.w	r0, r3, #18
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	89fb      	ldrh	r3, [r7, #14]
 8014d3e:	4413      	add	r3, r2
 8014d40:	2210      	movs	r2, #16
 8014d42:	4619      	mov	r1, r3
 8014d44:	f004 f995 	bl	8019072 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014d48:	89fb      	ldrh	r3, [r7, #14]
 8014d4a:	3310      	adds	r3, #16
 8014d4c:	81fb      	strh	r3, [r7, #14]
 8014d4e:	e008      	b.n	8014d62 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	791b      	ldrb	r3, [r3, #4]
 8014d54:	1f1a      	subs	r2, r3, #4
 8014d56:	89fb      	ldrh	r3, [r7, #14]
 8014d58:	1ad3      	subs	r3, r2, r3
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	dd01      	ble.n	8014d62 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014d5e:	2301      	movs	r3, #1
 8014d60:	e031      	b.n	8014dc6 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681a      	ldr	r2, [r3, #0]
 8014d66:	89fb      	ldrh	r3, [r7, #14]
 8014d68:	1c59      	adds	r1, r3, #1
 8014d6a:	81f9      	strh	r1, [r7, #14]
 8014d6c:	4413      	add	r3, r2
 8014d6e:	781b      	ldrb	r3, [r3, #0]
 8014d70:	461a      	mov	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	89fb      	ldrh	r3, [r7, #14]
 8014d7c:	1c59      	adds	r1, r3, #1
 8014d7e:	81f9      	strh	r1, [r7, #14]
 8014d80:	4413      	add	r3, r2
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	021a      	lsls	r2, r3, #8
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d8a:	431a      	orrs	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	89fb      	ldrh	r3, [r7, #14]
 8014d96:	1c59      	adds	r1, r3, #1
 8014d98:	81f9      	strh	r1, [r7, #14]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	041a      	lsls	r2, r3, #16
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014da4:	431a      	orrs	r2, r3
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681a      	ldr	r2, [r3, #0]
 8014dae:	89fb      	ldrh	r3, [r7, #14]
 8014db0:	1c59      	adds	r1, r3, #1
 8014db2:	81f9      	strh	r1, [r7, #14]
 8014db4:	4413      	add	r3, r2
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	061a      	lsls	r2, r3, #24
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dbe:	431a      	orrs	r2, r3
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014dc4:	2300      	movs	r3, #0
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3710      	adds	r7, #16
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}

08014dce <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014dce:	b580      	push	{r7, lr}
 8014dd0:	b084      	sub	sp, #16
 8014dd2:	af00      	add	r7, sp, #0
 8014dd4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d003      	beq.n	8014de4 <LoRaMacParserData+0x16>
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d101      	bne.n	8014de8 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014de4:	2302      	movs	r3, #2
 8014de6:	e0e2      	b.n	8014fae <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014de8:	2300      	movs	r3, #0
 8014dea:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	89fb      	ldrh	r3, [r7, #14]
 8014df2:	1c59      	adds	r1, r3, #1
 8014df4:	81f9      	strh	r1, [r7, #14]
 8014df6:	4413      	add	r3, r2
 8014df8:	781a      	ldrb	r2, [r3, #0]
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	89fb      	ldrh	r3, [r7, #14]
 8014e04:	1c59      	adds	r1, r3, #1
 8014e06:	81f9      	strh	r1, [r7, #14]
 8014e08:	4413      	add	r3, r2
 8014e0a:	781b      	ldrb	r3, [r3, #0]
 8014e0c:	461a      	mov	r2, r3
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	681a      	ldr	r2, [r3, #0]
 8014e16:	89fb      	ldrh	r3, [r7, #14]
 8014e18:	1c59      	adds	r1, r3, #1
 8014e1a:	81f9      	strh	r1, [r7, #14]
 8014e1c:	4413      	add	r3, r2
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	021a      	lsls	r2, r3, #8
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	689b      	ldr	r3, [r3, #8]
 8014e26:	431a      	orrs	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	89fb      	ldrh	r3, [r7, #14]
 8014e32:	1c59      	adds	r1, r3, #1
 8014e34:	81f9      	strh	r1, [r7, #14]
 8014e36:	4413      	add	r3, r2
 8014e38:	781b      	ldrb	r3, [r3, #0]
 8014e3a:	041a      	lsls	r2, r3, #16
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	689b      	ldr	r3, [r3, #8]
 8014e40:	431a      	orrs	r2, r3
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	89fb      	ldrh	r3, [r7, #14]
 8014e4c:	1c59      	adds	r1, r3, #1
 8014e4e:	81f9      	strh	r1, [r7, #14]
 8014e50:	4413      	add	r3, r2
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	061a      	lsls	r2, r3, #24
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	689b      	ldr	r3, [r3, #8]
 8014e5a:	431a      	orrs	r2, r3
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681a      	ldr	r2, [r3, #0]
 8014e64:	89fb      	ldrh	r3, [r7, #14]
 8014e66:	1c59      	adds	r1, r3, #1
 8014e68:	81f9      	strh	r1, [r7, #14]
 8014e6a:	4413      	add	r3, r2
 8014e6c:	781a      	ldrb	r2, [r3, #0]
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681a      	ldr	r2, [r3, #0]
 8014e76:	89fb      	ldrh	r3, [r7, #14]
 8014e78:	1c59      	adds	r1, r3, #1
 8014e7a:	81f9      	strh	r1, [r7, #14]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	b29a      	uxth	r2, r3
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681a      	ldr	r2, [r3, #0]
 8014e8a:	89fb      	ldrh	r3, [r7, #14]
 8014e8c:	1c59      	adds	r1, r3, #1
 8014e8e:	81f9      	strh	r1, [r7, #14]
 8014e90:	4413      	add	r3, r2
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	0219      	lsls	r1, r3, #8
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	89db      	ldrh	r3, [r3, #14]
 8014e9a:	b21a      	sxth	r2, r3
 8014e9c:	b20b      	sxth	r3, r1
 8014e9e:	4313      	orrs	r3, r2
 8014ea0:	b21b      	sxth	r3, r3
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f103 0010 	add.w	r0, r3, #16
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	681a      	ldr	r2, [r3, #0]
 8014eb2:	89fb      	ldrh	r3, [r7, #14]
 8014eb4:	18d1      	adds	r1, r2, r3
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	7b1b      	ldrb	r3, [r3, #12]
 8014eba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014ebe:	b2db      	uxtb	r3, r3
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	461a      	mov	r2, r3
 8014ec4:	f004 f8d5 	bl	8019072 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	7b1b      	ldrb	r3, [r3, #12]
 8014ecc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014ed0:	b2db      	uxtb	r3, r3
 8014ed2:	b29a      	uxth	r2, r3
 8014ed4:	89fb      	ldrh	r3, [r7, #14]
 8014ed6:	4413      	add	r3, r2
 8014ed8:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2200      	movs	r2, #0
 8014ede:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	791b      	ldrb	r3, [r3, #4]
 8014eee:	461a      	mov	r2, r3
 8014ef0:	89fb      	ldrh	r3, [r7, #14]
 8014ef2:	1ad3      	subs	r3, r2, r3
 8014ef4:	2b04      	cmp	r3, #4
 8014ef6:	dd28      	ble.n	8014f4a <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	89fb      	ldrh	r3, [r7, #14]
 8014efe:	1c59      	adds	r1, r3, #1
 8014f00:	81f9      	strh	r1, [r7, #14]
 8014f02:	4413      	add	r3, r2
 8014f04:	781a      	ldrb	r2, [r3, #0]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	791a      	ldrb	r2, [r3, #4]
 8014f10:	89fb      	ldrh	r3, [r7, #14]
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	1ad3      	subs	r3, r2, r3
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	3b04      	subs	r3, #4
 8014f1a:	b2da      	uxtb	r2, r3
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681a      	ldr	r2, [r3, #0]
 8014f2a:	89fb      	ldrh	r3, [r7, #14]
 8014f2c:	18d1      	adds	r1, r2, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	461a      	mov	r2, r3
 8014f38:	f004 f89b 	bl	8019072 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f42:	b29a      	uxth	r2, r3
 8014f44:	89fb      	ldrh	r3, [r7, #14]
 8014f46:	4413      	add	r3, r2
 8014f48:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681a      	ldr	r2, [r3, #0]
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	791b      	ldrb	r3, [r3, #4]
 8014f52:	3b04      	subs	r3, #4
 8014f54:	4413      	add	r3, r2
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	461a      	mov	r2, r3
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6819      	ldr	r1, [r3, #0]
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	791b      	ldrb	r3, [r3, #4]
 8014f6a:	3b03      	subs	r3, #3
 8014f6c:	440b      	add	r3, r1
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	021b      	lsls	r3, r3, #8
 8014f72:	431a      	orrs	r2, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6819      	ldr	r1, [r3, #0]
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	791b      	ldrb	r3, [r3, #4]
 8014f84:	3b02      	subs	r3, #2
 8014f86:	440b      	add	r3, r1
 8014f88:	781b      	ldrb	r3, [r3, #0]
 8014f8a:	041b      	lsls	r3, r3, #16
 8014f8c:	431a      	orrs	r2, r3
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6819      	ldr	r1, [r3, #0]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	791b      	ldrb	r3, [r3, #4]
 8014f9e:	3b01      	subs	r3, #1
 8014fa0:	440b      	add	r3, r1
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	061b      	lsls	r3, r3, #24
 8014fa6:	431a      	orrs	r2, r3
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014fac:	2300      	movs	r3, #0
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3710      	adds	r7, #16
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}

08014fb6 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014fb6:	b580      	push	{r7, lr}
 8014fb8:	b084      	sub	sp, #16
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d003      	beq.n	8014fcc <LoRaMacSerializerJoinRequest+0x16>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d101      	bne.n	8014fd0 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014fcc:	2301      	movs	r3, #1
 8014fce:	e070      	b.n	80150b2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	791b      	ldrb	r3, [r3, #4]
 8014fd8:	2b16      	cmp	r3, #22
 8014fda:	d801      	bhi.n	8014fe0 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014fdc:	2302      	movs	r3, #2
 8014fde:	e068      	b.n	80150b2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	89fb      	ldrh	r3, [r7, #14]
 8014fe6:	1c59      	adds	r1, r3, #1
 8014fe8:	81f9      	strh	r1, [r7, #14]
 8014fea:	4413      	add	r3, r2
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	7952      	ldrb	r2, [r2, #5]
 8014ff0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681a      	ldr	r2, [r3, #0]
 8014ff6:	89fb      	ldrh	r3, [r7, #14]
 8014ff8:	18d0      	adds	r0, r2, r3
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	3306      	adds	r3, #6
 8014ffe:	2208      	movs	r2, #8
 8015000:	4619      	mov	r1, r3
 8015002:	f004 f851 	bl	80190a8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015006:	89fb      	ldrh	r3, [r7, #14]
 8015008:	3308      	adds	r3, #8
 801500a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681a      	ldr	r2, [r3, #0]
 8015010:	89fb      	ldrh	r3, [r7, #14]
 8015012:	18d0      	adds	r0, r2, r3
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	330e      	adds	r3, #14
 8015018:	2208      	movs	r2, #8
 801501a:	4619      	mov	r1, r3
 801501c:	f004 f844 	bl	80190a8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015020:	89fb      	ldrh	r3, [r7, #14]
 8015022:	3308      	adds	r3, #8
 8015024:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	8ad9      	ldrh	r1, [r3, #22]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	89fb      	ldrh	r3, [r7, #14]
 8015030:	1c58      	adds	r0, r3, #1
 8015032:	81f8      	strh	r0, [r7, #14]
 8015034:	4413      	add	r3, r2
 8015036:	b2ca      	uxtb	r2, r1
 8015038:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	8adb      	ldrh	r3, [r3, #22]
 801503e:	0a1b      	lsrs	r3, r3, #8
 8015040:	b299      	uxth	r1, r3
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681a      	ldr	r2, [r3, #0]
 8015046:	89fb      	ldrh	r3, [r7, #14]
 8015048:	1c58      	adds	r0, r3, #1
 801504a:	81f8      	strh	r0, [r7, #14]
 801504c:	4413      	add	r3, r2
 801504e:	b2ca      	uxtb	r2, r1
 8015050:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	6999      	ldr	r1, [r3, #24]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681a      	ldr	r2, [r3, #0]
 801505a:	89fb      	ldrh	r3, [r7, #14]
 801505c:	1c58      	adds	r0, r3, #1
 801505e:	81f8      	strh	r0, [r7, #14]
 8015060:	4413      	add	r3, r2
 8015062:	b2ca      	uxtb	r2, r1
 8015064:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	699b      	ldr	r3, [r3, #24]
 801506a:	0a19      	lsrs	r1, r3, #8
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	89fb      	ldrh	r3, [r7, #14]
 8015072:	1c58      	adds	r0, r3, #1
 8015074:	81f8      	strh	r0, [r7, #14]
 8015076:	4413      	add	r3, r2
 8015078:	b2ca      	uxtb	r2, r1
 801507a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	699b      	ldr	r3, [r3, #24]
 8015080:	0c19      	lsrs	r1, r3, #16
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	89fb      	ldrh	r3, [r7, #14]
 8015088:	1c58      	adds	r0, r3, #1
 801508a:	81f8      	strh	r0, [r7, #14]
 801508c:	4413      	add	r3, r2
 801508e:	b2ca      	uxtb	r2, r1
 8015090:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	699b      	ldr	r3, [r3, #24]
 8015096:	0e19      	lsrs	r1, r3, #24
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	89fb      	ldrh	r3, [r7, #14]
 801509e:	1c58      	adds	r0, r3, #1
 80150a0:	81f8      	strh	r0, [r7, #14]
 80150a2:	4413      	add	r3, r2
 80150a4:	b2ca      	uxtb	r2, r1
 80150a6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80150a8:	89fb      	ldrh	r3, [r7, #14]
 80150aa:	b2da      	uxtb	r2, r3
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80150b0:	2300      	movs	r3, #0
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	3710      	adds	r7, #16
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}

080150ba <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b084      	sub	sp, #16
 80150be:	af00      	add	r7, sp, #0
 80150c0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d003      	beq.n	80150d0 <LoRaMacSerializerData+0x16>
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d101      	bne.n	80150d4 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80150d0:	2301      	movs	r3, #1
 80150d2:	e0e5      	b.n	80152a0 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80150d4:	2300      	movs	r3, #0
 80150d6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80150d8:	2308      	movs	r3, #8
 80150da:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	7b1b      	ldrb	r3, [r3, #12]
 80150e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80150e4:	b2db      	uxtb	r3, r3
 80150e6:	b29a      	uxth	r2, r3
 80150e8:	89bb      	ldrh	r3, [r7, #12]
 80150ea:	4413      	add	r3, r2
 80150ec:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d002      	beq.n	80150fe <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80150f8:	89bb      	ldrh	r3, [r7, #12]
 80150fa:	3301      	adds	r3, #1
 80150fc:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015104:	b29a      	uxth	r2, r3
 8015106:	89bb      	ldrh	r3, [r7, #12]
 8015108:	4413      	add	r3, r2
 801510a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801510c:	89bb      	ldrh	r3, [r7, #12]
 801510e:	3304      	adds	r3, #4
 8015110:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	791b      	ldrb	r3, [r3, #4]
 8015116:	b29b      	uxth	r3, r3
 8015118:	89ba      	ldrh	r2, [r7, #12]
 801511a:	429a      	cmp	r2, r3
 801511c:	d901      	bls.n	8015122 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801511e:	2302      	movs	r3, #2
 8015120:	e0be      	b.n	80152a0 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	681a      	ldr	r2, [r3, #0]
 8015126:	89fb      	ldrh	r3, [r7, #14]
 8015128:	1c59      	adds	r1, r3, #1
 801512a:	81f9      	strh	r1, [r7, #14]
 801512c:	4413      	add	r3, r2
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	7952      	ldrb	r2, [r2, #5]
 8015132:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6899      	ldr	r1, [r3, #8]
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681a      	ldr	r2, [r3, #0]
 801513c:	89fb      	ldrh	r3, [r7, #14]
 801513e:	1c58      	adds	r0, r3, #1
 8015140:	81f8      	strh	r0, [r7, #14]
 8015142:	4413      	add	r3, r2
 8015144:	b2ca      	uxtb	r2, r1
 8015146:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	689b      	ldr	r3, [r3, #8]
 801514c:	0a19      	lsrs	r1, r3, #8
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681a      	ldr	r2, [r3, #0]
 8015152:	89fb      	ldrh	r3, [r7, #14]
 8015154:	1c58      	adds	r0, r3, #1
 8015156:	81f8      	strh	r0, [r7, #14]
 8015158:	4413      	add	r3, r2
 801515a:	b2ca      	uxtb	r2, r1
 801515c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	689b      	ldr	r3, [r3, #8]
 8015162:	0c19      	lsrs	r1, r3, #16
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	681a      	ldr	r2, [r3, #0]
 8015168:	89fb      	ldrh	r3, [r7, #14]
 801516a:	1c58      	adds	r0, r3, #1
 801516c:	81f8      	strh	r0, [r7, #14]
 801516e:	4413      	add	r3, r2
 8015170:	b2ca      	uxtb	r2, r1
 8015172:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	689b      	ldr	r3, [r3, #8]
 8015178:	0e19      	lsrs	r1, r3, #24
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	681a      	ldr	r2, [r3, #0]
 801517e:	89fb      	ldrh	r3, [r7, #14]
 8015180:	1c58      	adds	r0, r3, #1
 8015182:	81f8      	strh	r0, [r7, #14]
 8015184:	4413      	add	r3, r2
 8015186:	b2ca      	uxtb	r2, r1
 8015188:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681a      	ldr	r2, [r3, #0]
 801518e:	89fb      	ldrh	r3, [r7, #14]
 8015190:	1c59      	adds	r1, r3, #1
 8015192:	81f9      	strh	r1, [r7, #14]
 8015194:	4413      	add	r3, r2
 8015196:	687a      	ldr	r2, [r7, #4]
 8015198:	7b12      	ldrb	r2, [r2, #12]
 801519a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	89d9      	ldrh	r1, [r3, #14]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	681a      	ldr	r2, [r3, #0]
 80151a4:	89fb      	ldrh	r3, [r7, #14]
 80151a6:	1c58      	adds	r0, r3, #1
 80151a8:	81f8      	strh	r0, [r7, #14]
 80151aa:	4413      	add	r3, r2
 80151ac:	b2ca      	uxtb	r2, r1
 80151ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	89db      	ldrh	r3, [r3, #14]
 80151b4:	0a1b      	lsrs	r3, r3, #8
 80151b6:	b299      	uxth	r1, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	89fb      	ldrh	r3, [r7, #14]
 80151be:	1c58      	adds	r0, r3, #1
 80151c0:	81f8      	strh	r0, [r7, #14]
 80151c2:	4413      	add	r3, r2
 80151c4:	b2ca      	uxtb	r2, r1
 80151c6:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	89fb      	ldrh	r3, [r7, #14]
 80151ce:	18d0      	adds	r0, r2, r3
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f103 0110 	add.w	r1, r3, #16
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	7b1b      	ldrb	r3, [r3, #12]
 80151da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80151de:	b2db      	uxtb	r3, r3
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	461a      	mov	r2, r3
 80151e4:	f003 ff45 	bl	8019072 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	7b1b      	ldrb	r3, [r3, #12]
 80151ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80151f0:	b2db      	uxtb	r3, r3
 80151f2:	b29a      	uxth	r2, r3
 80151f4:	89fb      	ldrh	r3, [r7, #14]
 80151f6:	4413      	add	r3, r2
 80151f8:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015200:	2b00      	cmp	r3, #0
 8015202:	d009      	beq.n	8015218 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	89fb      	ldrh	r3, [r7, #14]
 801520a:	1c59      	adds	r1, r3, #1
 801520c:	81f9      	strh	r1, [r7, #14]
 801520e:	4413      	add	r3, r2
 8015210:	687a      	ldr	r2, [r7, #4]
 8015212:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015216:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681a      	ldr	r2, [r3, #0]
 801521c:	89fb      	ldrh	r3, [r7, #14]
 801521e:	18d0      	adds	r0, r2, r3
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801522a:	b29b      	uxth	r3, r3
 801522c:	461a      	mov	r2, r3
 801522e:	f003 ff20 	bl	8019072 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015238:	b29a      	uxth	r2, r3
 801523a:	89fb      	ldrh	r3, [r7, #14]
 801523c:	4413      	add	r3, r2
 801523e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	89fb      	ldrh	r3, [r7, #14]
 801524a:	1c58      	adds	r0, r3, #1
 801524c:	81f8      	strh	r0, [r7, #14]
 801524e:	4413      	add	r3, r2
 8015250:	b2ca      	uxtb	r2, r1
 8015252:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015258:	0a19      	lsrs	r1, r3, #8
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681a      	ldr	r2, [r3, #0]
 801525e:	89fb      	ldrh	r3, [r7, #14]
 8015260:	1c58      	adds	r0, r3, #1
 8015262:	81f8      	strh	r0, [r7, #14]
 8015264:	4413      	add	r3, r2
 8015266:	b2ca      	uxtb	r2, r1
 8015268:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801526e:	0c19      	lsrs	r1, r3, #16
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	681a      	ldr	r2, [r3, #0]
 8015274:	89fb      	ldrh	r3, [r7, #14]
 8015276:	1c58      	adds	r0, r3, #1
 8015278:	81f8      	strh	r0, [r7, #14]
 801527a:	4413      	add	r3, r2
 801527c:	b2ca      	uxtb	r2, r1
 801527e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015284:	0e19      	lsrs	r1, r3, #24
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681a      	ldr	r2, [r3, #0]
 801528a:	89fb      	ldrh	r3, [r7, #14]
 801528c:	1c58      	adds	r0, r3, #1
 801528e:	81f8      	strh	r0, [r7, #14]
 8015290:	4413      	add	r3, r2
 8015292:	b2ca      	uxtb	r2, r1
 8015294:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015296:	89fb      	ldrh	r3, [r7, #14]
 8015298:	b2da      	uxtb	r2, r3
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801529e:	2300      	movs	r3, #0
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	3710      	adds	r7, #16
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80152a8:	b480      	push	{r7}
 80152aa:	b083      	sub	sp, #12
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	4603      	mov	r3, r0
 80152b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80152b2:	79fb      	ldrb	r3, [r7, #7]
 80152b4:	2b05      	cmp	r3, #5
 80152b6:	d002      	beq.n	80152be <RegionIsActive+0x16>
 80152b8:	2b08      	cmp	r3, #8
 80152ba:	d002      	beq.n	80152c2 <RegionIsActive+0x1a>
 80152bc:	e003      	b.n	80152c6 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80152be:	2301      	movs	r3, #1
 80152c0:	e002      	b.n	80152c8 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80152c2:	2301      	movs	r3, #1
 80152c4:	e000      	b.n	80152c8 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80152c6:	2300      	movs	r3, #0
        }
    }
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	370c      	adds	r7, #12
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bc80      	pop	{r7}
 80152d0:	4770      	bx	lr

080152d2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b084      	sub	sp, #16
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	4603      	mov	r3, r0
 80152da:	6039      	str	r1, [r7, #0]
 80152dc:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80152de:	2300      	movs	r3, #0
 80152e0:	60bb      	str	r3, [r7, #8]
    switch( region )
 80152e2:	79fb      	ldrb	r3, [r7, #7]
 80152e4:	2b05      	cmp	r3, #5
 80152e6:	d002      	beq.n	80152ee <RegionGetPhyParam+0x1c>
 80152e8:	2b08      	cmp	r3, #8
 80152ea:	d006      	beq.n	80152fa <RegionGetPhyParam+0x28>
 80152ec:	e00b      	b.n	8015306 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80152ee:	6838      	ldr	r0, [r7, #0]
 80152f0:	f001 fae8 	bl	80168c4 <RegionEU868GetPhyParam>
 80152f4:	4603      	mov	r3, r0
 80152f6:	60fb      	str	r3, [r7, #12]
 80152f8:	e007      	b.n	801530a <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80152fa:	6838      	ldr	r0, [r7, #0]
 80152fc:	f002 fcb6 	bl	8017c6c <RegionUS915GetPhyParam>
 8015300:	4603      	mov	r3, r0
 8015302:	60fb      	str	r3, [r7, #12]
 8015304:	e001      	b.n	801530a <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015306:	68bb      	ldr	r3, [r7, #8]
 8015308:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	4618      	mov	r0, r3
 801530e:	3710      	adds	r7, #16
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	4603      	mov	r3, r0
 801531c:	6039      	str	r1, [r7, #0]
 801531e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015320:	79fb      	ldrb	r3, [r7, #7]
 8015322:	2b05      	cmp	r3, #5
 8015324:	d002      	beq.n	801532c <RegionSetBandTxDone+0x18>
 8015326:	2b08      	cmp	r3, #8
 8015328:	d004      	beq.n	8015334 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801532a:	e007      	b.n	801533c <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 801532c:	6838      	ldr	r0, [r7, #0]
 801532e:	f001 fc15 	bl	8016b5c <RegionEU868SetBandTxDone>
 8015332:	e003      	b.n	801533c <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8015334:	6838      	ldr	r0, [r7, #0]
 8015336:	f002 fdfb 	bl	8017f30 <RegionUS915SetBandTxDone>
 801533a:	bf00      	nop
        }
    }
}
 801533c:	3708      	adds	r7, #8
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}

08015342 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015342:	b580      	push	{r7, lr}
 8015344:	b082      	sub	sp, #8
 8015346:	af00      	add	r7, sp, #0
 8015348:	4603      	mov	r3, r0
 801534a:	6039      	str	r1, [r7, #0]
 801534c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801534e:	79fb      	ldrb	r3, [r7, #7]
 8015350:	2b05      	cmp	r3, #5
 8015352:	d002      	beq.n	801535a <RegionInitDefaults+0x18>
 8015354:	2b08      	cmp	r3, #8
 8015356:	d004      	beq.n	8015362 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015358:	e007      	b.n	801536a <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 801535a:	6838      	ldr	r0, [r7, #0]
 801535c:	f001 fc2a 	bl	8016bb4 <RegionEU868InitDefaults>
 8015360:	e003      	b.n	801536a <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 8015362:	6838      	ldr	r0, [r7, #0]
 8015364:	f002 fe10 	bl	8017f88 <RegionUS915InitDefaults>
 8015368:	bf00      	nop
        }
    }
}
 801536a:	bf00      	nop
 801536c:	3708      	adds	r7, #8
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}

08015372 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b082      	sub	sp, #8
 8015376:	af00      	add	r7, sp, #0
 8015378:	4603      	mov	r3, r0
 801537a:	6039      	str	r1, [r7, #0]
 801537c:	71fb      	strb	r3, [r7, #7]
 801537e:	4613      	mov	r3, r2
 8015380:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015382:	79fb      	ldrb	r3, [r7, #7]
 8015384:	2b05      	cmp	r3, #5
 8015386:	d002      	beq.n	801538e <RegionVerify+0x1c>
 8015388:	2b08      	cmp	r3, #8
 801538a:	d007      	beq.n	801539c <RegionVerify+0x2a>
 801538c:	e00d      	b.n	80153aa <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801538e:	79bb      	ldrb	r3, [r7, #6]
 8015390:	4619      	mov	r1, r3
 8015392:	6838      	ldr	r0, [r7, #0]
 8015394:	f001 fcac 	bl	8016cf0 <RegionEU868Verify>
 8015398:	4603      	mov	r3, r0
 801539a:	e007      	b.n	80153ac <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801539c:	79bb      	ldrb	r3, [r7, #6]
 801539e:	4619      	mov	r1, r3
 80153a0:	6838      	ldr	r0, [r7, #0]
 80153a2:	f002 ff23 	bl	80181ec <RegionUS915Verify>
 80153a6:	4603      	mov	r3, r0
 80153a8:	e000      	b.n	80153ac <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80153aa:	2300      	movs	r3, #0
        }
    }
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3708      	adds	r7, #8
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	4603      	mov	r3, r0
 80153bc:	6039      	str	r1, [r7, #0]
 80153be:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153c0:	79fb      	ldrb	r3, [r7, #7]
 80153c2:	2b05      	cmp	r3, #5
 80153c4:	d002      	beq.n	80153cc <RegionApplyCFList+0x18>
 80153c6:	2b08      	cmp	r3, #8
 80153c8:	d004      	beq.n	80153d4 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80153ca:	e007      	b.n	80153dc <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 80153cc:	6838      	ldr	r0, [r7, #0]
 80153ce:	f001 fd0b 	bl	8016de8 <RegionEU868ApplyCFList>
 80153d2:	e003      	b.n	80153dc <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 80153d4:	6838      	ldr	r0, [r7, #0]
 80153d6:	f002 ff71 	bl	80182bc <RegionUS915ApplyCFList>
 80153da:	bf00      	nop
        }
    }
}
 80153dc:	bf00      	nop
 80153de:	3708      	adds	r7, #8
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	4603      	mov	r3, r0
 80153ec:	6039      	str	r1, [r7, #0]
 80153ee:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153f0:	79fb      	ldrb	r3, [r7, #7]
 80153f2:	2b05      	cmp	r3, #5
 80153f4:	d002      	beq.n	80153fc <RegionChanMaskSet+0x18>
 80153f6:	2b08      	cmp	r3, #8
 80153f8:	d005      	beq.n	8015406 <RegionChanMaskSet+0x22>
 80153fa:	e009      	b.n	8015410 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80153fc:	6838      	ldr	r0, [r7, #0]
 80153fe:	f001 fd67 	bl	8016ed0 <RegionEU868ChanMaskSet>
 8015402:	4603      	mov	r3, r0
 8015404:	e005      	b.n	8015412 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8015406:	6838      	ldr	r0, [r7, #0]
 8015408:	f002 ffce 	bl	80183a8 <RegionUS915ChanMaskSet>
 801540c:	4603      	mov	r3, r0
 801540e:	e000      	b.n	8015412 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015410:	2300      	movs	r3, #0
        }
    }
}
 8015412:	4618      	mov	r0, r3
 8015414:	3708      	adds	r7, #8
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}

0801541a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801541a:	b580      	push	{r7, lr}
 801541c:	b082      	sub	sp, #8
 801541e:	af00      	add	r7, sp, #0
 8015420:	603b      	str	r3, [r7, #0]
 8015422:	4603      	mov	r3, r0
 8015424:	71fb      	strb	r3, [r7, #7]
 8015426:	460b      	mov	r3, r1
 8015428:	71bb      	strb	r3, [r7, #6]
 801542a:	4613      	mov	r3, r2
 801542c:	717b      	strb	r3, [r7, #5]
    switch( region )
 801542e:	79fb      	ldrb	r3, [r7, #7]
 8015430:	2b05      	cmp	r3, #5
 8015432:	d002      	beq.n	801543a <RegionComputeRxWindowParameters+0x20>
 8015434:	2b08      	cmp	r3, #8
 8015436:	d008      	beq.n	801544a <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015438:	e00f      	b.n	801545a <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801543a:	7979      	ldrb	r1, [r7, #5]
 801543c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	683a      	ldr	r2, [r7, #0]
 8015444:	f001 fd6e 	bl	8016f24 <RegionEU868ComputeRxWindowParameters>
 8015448:	e007      	b.n	801545a <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801544a:	7979      	ldrb	r1, [r7, #5]
 801544c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	683a      	ldr	r2, [r7, #0]
 8015454:	f003 f812 	bl	801847c <RegionUS915ComputeRxWindowParameters>
 8015458:	bf00      	nop
        }
    }
}
 801545a:	bf00      	nop
 801545c:	3708      	adds	r7, #8
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015462:	b580      	push	{r7, lr}
 8015464:	b084      	sub	sp, #16
 8015466:	af00      	add	r7, sp, #0
 8015468:	4603      	mov	r3, r0
 801546a:	60b9      	str	r1, [r7, #8]
 801546c:	607a      	str	r2, [r7, #4]
 801546e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015470:	7bfb      	ldrb	r3, [r7, #15]
 8015472:	2b05      	cmp	r3, #5
 8015474:	d002      	beq.n	801547c <RegionRxConfig+0x1a>
 8015476:	2b08      	cmp	r3, #8
 8015478:	d006      	beq.n	8015488 <RegionRxConfig+0x26>
 801547a:	e00b      	b.n	8015494 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801547c:	6879      	ldr	r1, [r7, #4]
 801547e:	68b8      	ldr	r0, [r7, #8]
 8015480:	f001 fdaa 	bl	8016fd8 <RegionEU868RxConfig>
 8015484:	4603      	mov	r3, r0
 8015486:	e006      	b.n	8015496 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8015488:	6879      	ldr	r1, [r7, #4]
 801548a:	68b8      	ldr	r0, [r7, #8]
 801548c:	f003 f840 	bl	8018510 <RegionUS915RxConfig>
 8015490:	4603      	mov	r3, r0
 8015492:	e000      	b.n	8015496 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015494:	2300      	movs	r3, #0
        }
    }
}
 8015496:	4618      	mov	r0, r3
 8015498:	3710      	adds	r7, #16
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}

0801549e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801549e:	b580      	push	{r7, lr}
 80154a0:	b084      	sub	sp, #16
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	60b9      	str	r1, [r7, #8]
 80154a6:	607a      	str	r2, [r7, #4]
 80154a8:	603b      	str	r3, [r7, #0]
 80154aa:	4603      	mov	r3, r0
 80154ac:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80154ae:	7bfb      	ldrb	r3, [r7, #15]
 80154b0:	2b05      	cmp	r3, #5
 80154b2:	d002      	beq.n	80154ba <RegionTxConfig+0x1c>
 80154b4:	2b08      	cmp	r3, #8
 80154b6:	d007      	beq.n	80154c8 <RegionTxConfig+0x2a>
 80154b8:	e00d      	b.n	80154d6 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80154ba:	683a      	ldr	r2, [r7, #0]
 80154bc:	6879      	ldr	r1, [r7, #4]
 80154be:	68b8      	ldr	r0, [r7, #8]
 80154c0:	f001 fe5a 	bl	8017178 <RegionEU868TxConfig>
 80154c4:	4603      	mov	r3, r0
 80154c6:	e007      	b.n	80154d8 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 80154c8:	683a      	ldr	r2, [r7, #0]
 80154ca:	6879      	ldr	r1, [r7, #4]
 80154cc:	68b8      	ldr	r0, [r7, #8]
 80154ce:	f003 f8a3 	bl	8018618 <RegionUS915TxConfig>
 80154d2:	4603      	mov	r3, r0
 80154d4:	e000      	b.n	80154d8 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80154d6:	2300      	movs	r3, #0
        }
    }
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3710      	adds	r7, #16
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}

080154e0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b086      	sub	sp, #24
 80154e4:	af02      	add	r7, sp, #8
 80154e6:	60b9      	str	r1, [r7, #8]
 80154e8:	607a      	str	r2, [r7, #4]
 80154ea:	603b      	str	r3, [r7, #0]
 80154ec:	4603      	mov	r3, r0
 80154ee:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80154f0:	7bfb      	ldrb	r3, [r7, #15]
 80154f2:	2b05      	cmp	r3, #5
 80154f4:	d002      	beq.n	80154fc <RegionLinkAdrReq+0x1c>
 80154f6:	2b08      	cmp	r3, #8
 80154f8:	d00a      	beq.n	8015510 <RegionLinkAdrReq+0x30>
 80154fa:	e013      	b.n	8015524 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	9300      	str	r3, [sp, #0]
 8015500:	69bb      	ldr	r3, [r7, #24]
 8015502:	683a      	ldr	r2, [r7, #0]
 8015504:	6879      	ldr	r1, [r7, #4]
 8015506:	68b8      	ldr	r0, [r7, #8]
 8015508:	f001 ff06 	bl	8017318 <RegionEU868LinkAdrReq>
 801550c:	4603      	mov	r3, r0
 801550e:	e00a      	b.n	8015526 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8015510:	69fb      	ldr	r3, [r7, #28]
 8015512:	9300      	str	r3, [sp, #0]
 8015514:	69bb      	ldr	r3, [r7, #24]
 8015516:	683a      	ldr	r2, [r7, #0]
 8015518:	6879      	ldr	r1, [r7, #4]
 801551a:	68b8      	ldr	r0, [r7, #8]
 801551c:	f003 f928 	bl	8018770 <RegionUS915LinkAdrReq>
 8015520:	4603      	mov	r3, r0
 8015522:	e000      	b.n	8015526 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015524:	2300      	movs	r3, #0
        }
    }
}
 8015526:	4618      	mov	r0, r3
 8015528:	3710      	adds	r7, #16
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}

0801552e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801552e:	b580      	push	{r7, lr}
 8015530:	b082      	sub	sp, #8
 8015532:	af00      	add	r7, sp, #0
 8015534:	4603      	mov	r3, r0
 8015536:	6039      	str	r1, [r7, #0]
 8015538:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801553a:	79fb      	ldrb	r3, [r7, #7]
 801553c:	2b05      	cmp	r3, #5
 801553e:	d002      	beq.n	8015546 <RegionRxParamSetupReq+0x18>
 8015540:	2b08      	cmp	r3, #8
 8015542:	d005      	beq.n	8015550 <RegionRxParamSetupReq+0x22>
 8015544:	e009      	b.n	801555a <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8015546:	6838      	ldr	r0, [r7, #0]
 8015548:	f002 f808 	bl	801755c <RegionEU868RxParamSetupReq>
 801554c:	4603      	mov	r3, r0
 801554e:	e005      	b.n	801555c <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8015550:	6838      	ldr	r0, [r7, #0]
 8015552:	f003 fb31 	bl	8018bb8 <RegionUS915RxParamSetupReq>
 8015556:	4603      	mov	r3, r0
 8015558:	e000      	b.n	801555c <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801555a:	2300      	movs	r3, #0
        }
    }
}
 801555c:	4618      	mov	r0, r3
 801555e:	3708      	adds	r7, #8
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}

08015564 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b082      	sub	sp, #8
 8015568:	af00      	add	r7, sp, #0
 801556a:	4603      	mov	r3, r0
 801556c:	6039      	str	r1, [r7, #0]
 801556e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015570:	79fb      	ldrb	r3, [r7, #7]
 8015572:	2b05      	cmp	r3, #5
 8015574:	d002      	beq.n	801557c <RegionNewChannelReq+0x18>
 8015576:	2b08      	cmp	r3, #8
 8015578:	d005      	beq.n	8015586 <RegionNewChannelReq+0x22>
 801557a:	e009      	b.n	8015590 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801557c:	6838      	ldr	r0, [r7, #0]
 801557e:	f002 f82b 	bl	80175d8 <RegionEU868NewChannelReq>
 8015582:	4603      	mov	r3, r0
 8015584:	e005      	b.n	8015592 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8015586:	6838      	ldr	r0, [r7, #0]
 8015588:	f003 fb62 	bl	8018c50 <RegionUS915NewChannelReq>
 801558c:	4603      	mov	r3, r0
 801558e:	e000      	b.n	8015592 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015590:	2300      	movs	r3, #0
        }
    }
}
 8015592:	4618      	mov	r0, r3
 8015594:	3708      	adds	r7, #8
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}

0801559a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b082      	sub	sp, #8
 801559e:	af00      	add	r7, sp, #0
 80155a0:	4603      	mov	r3, r0
 80155a2:	6039      	str	r1, [r7, #0]
 80155a4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80155a6:	79fb      	ldrb	r3, [r7, #7]
 80155a8:	2b05      	cmp	r3, #5
 80155aa:	d002      	beq.n	80155b2 <RegionTxParamSetupReq+0x18>
 80155ac:	2b08      	cmp	r3, #8
 80155ae:	d005      	beq.n	80155bc <RegionTxParamSetupReq+0x22>
 80155b0:	e009      	b.n	80155c6 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80155b2:	6838      	ldr	r0, [r7, #0]
 80155b4:	f002 f86e 	bl	8017694 <RegionEU868TxParamSetupReq>
 80155b8:	4603      	mov	r3, r0
 80155ba:	e005      	b.n	80155c8 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80155bc:	6838      	ldr	r0, [r7, #0]
 80155be:	f003 fb52 	bl	8018c66 <RegionUS915TxParamSetupReq>
 80155c2:	4603      	mov	r3, r0
 80155c4:	e000      	b.n	80155c8 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80155c6:	2300      	movs	r3, #0
        }
    }
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3708      	adds	r7, #8
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	4603      	mov	r3, r0
 80155d8:	6039      	str	r1, [r7, #0]
 80155da:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80155dc:	79fb      	ldrb	r3, [r7, #7]
 80155de:	2b05      	cmp	r3, #5
 80155e0:	d002      	beq.n	80155e8 <RegionDlChannelReq+0x18>
 80155e2:	2b08      	cmp	r3, #8
 80155e4:	d005      	beq.n	80155f2 <RegionDlChannelReq+0x22>
 80155e6:	e009      	b.n	80155fc <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80155e8:	6838      	ldr	r0, [r7, #0]
 80155ea:	f002 f85f 	bl	80176ac <RegionEU868DlChannelReq>
 80155ee:	4603      	mov	r3, r0
 80155f0:	e005      	b.n	80155fe <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80155f2:	6838      	ldr	r0, [r7, #0]
 80155f4:	f003 fb42 	bl	8018c7c <RegionUS915DlChannelReq>
 80155f8:	4603      	mov	r3, r0
 80155fa:	e000      	b.n	80155fe <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80155fc:	2300      	movs	r3, #0
        }
    }
}
 80155fe:	4618      	mov	r0, r3
 8015600:	3708      	adds	r7, #8
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}

08015606 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015606:	b580      	push	{r7, lr}
 8015608:	b082      	sub	sp, #8
 801560a:	af00      	add	r7, sp, #0
 801560c:	4603      	mov	r3, r0
 801560e:	71fb      	strb	r3, [r7, #7]
 8015610:	460b      	mov	r3, r1
 8015612:	71bb      	strb	r3, [r7, #6]
 8015614:	4613      	mov	r3, r2
 8015616:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015618:	79fb      	ldrb	r3, [r7, #7]
 801561a:	2b05      	cmp	r3, #5
 801561c:	d002      	beq.n	8015624 <RegionAlternateDr+0x1e>
 801561e:	2b08      	cmp	r3, #8
 8015620:	d009      	beq.n	8015636 <RegionAlternateDr+0x30>
 8015622:	e011      	b.n	8015648 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8015624:	797a      	ldrb	r2, [r7, #5]
 8015626:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801562a:	4611      	mov	r1, r2
 801562c:	4618      	mov	r0, r3
 801562e:	f002 f881 	bl	8017734 <RegionEU868AlternateDr>
 8015632:	4603      	mov	r3, r0
 8015634:	e009      	b.n	801564a <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8015636:	797a      	ldrb	r2, [r7, #5]
 8015638:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801563c:	4611      	mov	r1, r2
 801563e:	4618      	mov	r0, r3
 8015640:	f003 fb28 	bl	8018c94 <RegionUS915AlternateDr>
 8015644:	4603      	mov	r3, r0
 8015646:	e000      	b.n	801564a <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015648:	2300      	movs	r3, #0
        }
    }
}
 801564a:	4618      	mov	r0, r3
 801564c:	3708      	adds	r7, #8
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}

08015652 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015652:	b580      	push	{r7, lr}
 8015654:	b084      	sub	sp, #16
 8015656:	af00      	add	r7, sp, #0
 8015658:	60b9      	str	r1, [r7, #8]
 801565a:	607a      	str	r2, [r7, #4]
 801565c:	603b      	str	r3, [r7, #0]
 801565e:	4603      	mov	r3, r0
 8015660:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015662:	7bfb      	ldrb	r3, [r7, #15]
 8015664:	2b05      	cmp	r3, #5
 8015666:	d002      	beq.n	801566e <RegionNextChannel+0x1c>
 8015668:	2b08      	cmp	r3, #8
 801566a:	d008      	beq.n	801567e <RegionNextChannel+0x2c>
 801566c:	e00f      	b.n	801568e <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801566e:	69bb      	ldr	r3, [r7, #24]
 8015670:	683a      	ldr	r2, [r7, #0]
 8015672:	6879      	ldr	r1, [r7, #4]
 8015674:	68b8      	ldr	r0, [r7, #8]
 8015676:	f002 f86d 	bl	8017754 <RegionEU868NextChannel>
 801567a:	4603      	mov	r3, r0
 801567c:	e008      	b.n	8015690 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	683a      	ldr	r2, [r7, #0]
 8015682:	6879      	ldr	r1, [r7, #4]
 8015684:	68b8      	ldr	r0, [r7, #8]
 8015686:	f003 fb41 	bl	8018d0c <RegionUS915NextChannel>
 801568a:	4603      	mov	r3, r0
 801568c:	e000      	b.n	8015690 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801568e:	2309      	movs	r3, #9
        }
    }
}
 8015690:	4618      	mov	r0, r3
 8015692:	3710      	adds	r7, #16
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	4603      	mov	r3, r0
 80156a0:	6039      	str	r1, [r7, #0]
 80156a2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80156a4:	79fb      	ldrb	r3, [r7, #7]
 80156a6:	2b05      	cmp	r3, #5
 80156a8:	d002      	beq.n	80156b0 <RegionSetContinuousWave+0x18>
 80156aa:	2b08      	cmp	r3, #8
 80156ac:	d004      	beq.n	80156b8 <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80156ae:	e007      	b.n	80156c0 <RegionSetContinuousWave+0x28>
        EU868_SET_CONTINUOUS_WAVE( );
 80156b0:	6838      	ldr	r0, [r7, #0]
 80156b2:	f002 f9c9 	bl	8017a48 <RegionEU868SetContinuousWave>
 80156b6:	e003      	b.n	80156c0 <RegionSetContinuousWave+0x28>
        US915_SET_CONTINUOUS_WAVE( );
 80156b8:	6838      	ldr	r0, [r7, #0]
 80156ba:	f003 fc1b 	bl	8018ef4 <RegionUS915SetContinuousWave>
 80156be:	bf00      	nop
        }
    }
}
 80156c0:	bf00      	nop
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80156c8:	b590      	push	{r4, r7, lr}
 80156ca:	b083      	sub	sp, #12
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	4604      	mov	r4, r0
 80156d0:	4608      	mov	r0, r1
 80156d2:	4611      	mov	r1, r2
 80156d4:	461a      	mov	r2, r3
 80156d6:	4623      	mov	r3, r4
 80156d8:	71fb      	strb	r3, [r7, #7]
 80156da:	4603      	mov	r3, r0
 80156dc:	71bb      	strb	r3, [r7, #6]
 80156de:	460b      	mov	r3, r1
 80156e0:	717b      	strb	r3, [r7, #5]
 80156e2:	4613      	mov	r3, r2
 80156e4:	713b      	strb	r3, [r7, #4]
    switch( region )
 80156e6:	79fb      	ldrb	r3, [r7, #7]
 80156e8:	2b05      	cmp	r3, #5
 80156ea:	d002      	beq.n	80156f2 <RegionApplyDrOffset+0x2a>
 80156ec:	2b08      	cmp	r3, #8
 80156ee:	d00a      	beq.n	8015706 <RegionApplyDrOffset+0x3e>
 80156f0:	e013      	b.n	801571a <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80156f2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80156f6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80156fa:	79bb      	ldrb	r3, [r7, #6]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f002 f9f1 	bl	8017ae4 <RegionEU868ApplyDrOffset>
 8015702:	4603      	mov	r3, r0
 8015704:	e00a      	b.n	801571c <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8015706:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801570a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801570e:	79bb      	ldrb	r3, [r7, #6]
 8015710:	4618      	mov	r0, r3
 8015712:	f003 fc45 	bl	8018fa0 <RegionUS915ApplyDrOffset>
 8015716:	4603      	mov	r3, r0
 8015718:	e000      	b.n	801571c <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801571a:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801571c:	4618      	mov	r0, r3
 801571e:	370c      	adds	r7, #12
 8015720:	46bd      	mov	sp, r7
 8015722:	bd90      	pop	{r4, r7, pc}

08015724 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015724:	b480      	push	{r7}
 8015726:	b083      	sub	sp, #12
 8015728:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801572a:	4b04      	ldr	r3, [pc, #16]	; (801573c <RegionGetVersion+0x18>)
 801572c:	607b      	str	r3, [r7, #4]

    return version;
 801572e:	687b      	ldr	r3, [r7, #4]
}
 8015730:	4618      	mov	r0, r3
 8015732:	370c      	adds	r7, #12
 8015734:	46bd      	mov	sp, r7
 8015736:	bc80      	pop	{r7}
 8015738:	4770      	bx	lr
 801573a:	bf00      	nop
 801573c:	01000300 	.word	0x01000300

08015740 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8015740:	b480      	push	{r7}
 8015742:	b087      	sub	sp, #28
 8015744:	af00      	add	r7, sp, #0
 8015746:	4603      	mov	r3, r0
 8015748:	60b9      	str	r1, [r7, #8]
 801574a:	607a      	str	r2, [r7, #4]
 801574c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d002      	beq.n	801575a <FindAvailable125kHzChannels+0x1a>
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d101      	bne.n	801575e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801575a:	2303      	movs	r3, #3
 801575c:	e021      	b.n	80157a2 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2200      	movs	r2, #0
 8015762:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015764:	2300      	movs	r3, #0
 8015766:	75fb      	strb	r3, [r7, #23]
 8015768:	e017      	b.n	801579a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801576a:	89fa      	ldrh	r2, [r7, #14]
 801576c:	7dfb      	ldrb	r3, [r7, #23]
 801576e:	fa42 f303 	asr.w	r3, r2, r3
 8015772:	f003 0301 	and.w	r3, r3, #1
 8015776:	2b00      	cmp	r3, #0
 8015778:	d00c      	beq.n	8015794 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	461a      	mov	r2, r3
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	4413      	add	r3, r2
 8015784:	7dfa      	ldrb	r2, [r7, #23]
 8015786:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	3301      	adds	r3, #1
 801578e:	b2da      	uxtb	r2, r3
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015794:	7dfb      	ldrb	r3, [r7, #23]
 8015796:	3301      	adds	r3, #1
 8015798:	75fb      	strb	r3, [r7, #23]
 801579a:	7dfb      	ldrb	r3, [r7, #23]
 801579c:	2b07      	cmp	r3, #7
 801579e:	d9e4      	bls.n	801576a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80157a0:	2300      	movs	r3, #0
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	371c      	adds	r7, #28
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bc80      	pop	{r7}
 80157aa:	4770      	bx	lr

080157ac <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80157ac:	b590      	push	{r4, r7, lr}
 80157ae:	b089      	sub	sp, #36	; 0x24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 80157b8:	2300      	movs	r3, #0
 80157ba:	617b      	str	r3, [r7, #20]
 80157bc:	2300      	movs	r3, #0
 80157be:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 80157c0:	2300      	movs	r3, #0
 80157c2:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d005      	beq.n	80157d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d002      	beq.n	80157d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d101      	bne.n	80157da <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80157d6:	2303      	movs	r3, #3
 80157d8:	e055      	b.n	8015886 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 80157e0:	7f7b      	ldrb	r3, [r7, #29]
 80157e2:	085b      	lsrs	r3, r3, #1
 80157e4:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 80157e6:	7f7b      	ldrb	r3, [r7, #29]
 80157e8:	f003 0301 	and.w	r3, r3, #1
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d107      	bne.n	8015802 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80157f2:	7f3b      	ldrb	r3, [r7, #28]
 80157f4:	005b      	lsls	r3, r3, #1
 80157f6:	68fa      	ldr	r2, [r7, #12]
 80157f8:	4413      	add	r3, r2
 80157fa:	881b      	ldrh	r3, [r3, #0]
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	83fb      	strh	r3, [r7, #30]
 8015800:	e006      	b.n	8015810 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8015802:	7f3b      	ldrb	r3, [r7, #28]
 8015804:	005b      	lsls	r3, r3, #1
 8015806:	68fa      	ldr	r2, [r7, #12]
 8015808:	4413      	add	r3, r2
 801580a:	881b      	ldrh	r3, [r3, #0]
 801580c:	0a1b      	lsrs	r3, r3, #8
 801580e:	83fb      	strh	r3, [r7, #30]
        }


        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8015810:	f107 0213 	add.w	r2, r7, #19
 8015814:	f107 0114 	add.w	r1, r7, #20
 8015818:	8bfb      	ldrh	r3, [r7, #30]
 801581a:	4618      	mov	r0, r3
 801581c:	f7ff ff90 	bl	8015740 <FindAvailable125kHzChannels>
 8015820:	4603      	mov	r3, r0
 8015822:	2b03      	cmp	r3, #3
 8015824:	d101      	bne.n	801582a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8015826:	2303      	movs	r3, #3
 8015828:	e02d      	b.n	8015886 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 801582a:	7cfb      	ldrb	r3, [r7, #19]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d011      	beq.n	8015854 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8015830:	7f7b      	ldrb	r3, [r7, #29]
 8015832:	00db      	lsls	r3, r3, #3
 8015834:	b2dc      	uxtb	r4, r3
 8015836:	7cfb      	ldrb	r3, [r7, #19]
 8015838:	3b01      	subs	r3, #1
 801583a:	4619      	mov	r1, r3
 801583c:	2000      	movs	r0, #0
 801583e:	f003 fc01 	bl	8019044 <randr>
 8015842:	4603      	mov	r3, r0
 8015844:	3320      	adds	r3, #32
 8015846:	443b      	add	r3, r7
 8015848:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801584c:	4423      	add	r3, r4
 801584e:	b2da      	uxtb	r2, r3
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8015854:	7f7b      	ldrb	r3, [r7, #29]
 8015856:	3301      	adds	r3, #1
 8015858:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 801585a:	7f7b      	ldrb	r3, [r7, #29]
 801585c:	2b07      	cmp	r3, #7
 801585e:	d901      	bls.n	8015864 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8015860:	2300      	movs	r3, #0
 8015862:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8015864:	7cfb      	ldrb	r3, [r7, #19]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d104      	bne.n	8015874 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	781b      	ldrb	r3, [r3, #0]
 801586e:	7f7a      	ldrb	r2, [r7, #29]
 8015870:	429a      	cmp	r2, r3
 8015872:	d1b5      	bne.n	80157e0 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8015874:	7cfb      	ldrb	r3, [r7, #19]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d004      	beq.n	8015884 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	7f7a      	ldrb	r2, [r7, #29]
 801587e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015880:	2300      	movs	r3, #0
 8015882:	e000      	b.n	8015886 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8015884:	2303      	movs	r3, #3
}
 8015886:	4618      	mov	r0, r3
 8015888:	3724      	adds	r7, #36	; 0x24
 801588a:	46bd      	mov	sp, r7
 801588c:	bd90      	pop	{r4, r7, pc}

0801588e <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801588e:	b480      	push	{r7}
 8015890:	b085      	sub	sp, #20
 8015892:	af00      	add	r7, sp, #0
 8015894:	4603      	mov	r3, r0
 8015896:	60b9      	str	r1, [r7, #8]
 8015898:	607a      	str	r2, [r7, #4]
 801589a:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801589c:	7bfb      	ldrb	r3, [r7, #15]
 801589e:	687a      	ldr	r2, [r7, #4]
 80158a0:	fb03 f202 	mul.w	r2, r3, r2
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	4413      	add	r3, r2
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3714      	adds	r7, #20
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bc80      	pop	{r7}
 80158b0:	4770      	bx	lr

080158b2 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80158b2:	b480      	push	{r7}
 80158b4:	b087      	sub	sp, #28
 80158b6:	af00      	add	r7, sp, #0
 80158b8:	60f8      	str	r0, [r7, #12]
 80158ba:	4608      	mov	r0, r1
 80158bc:	4639      	mov	r1, r7
 80158be:	e881 000c 	stmia.w	r1, {r2, r3}
 80158c2:	4603      	mov	r3, r0
 80158c4:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	881b      	ldrh	r3, [r3, #0]
 80158ca:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80158cc:	7afb      	ldrb	r3, [r7, #11]
 80158ce:	f083 0301 	eor.w	r3, r3, #1
 80158d2:	b2db      	uxtb	r3, r3
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d01b      	beq.n	8015910 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80158d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80158dc:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80158de:	683b      	ldr	r3, [r7, #0]
 80158e0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80158e4:	d202      	bcs.n	80158ec <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80158e6:	2364      	movs	r3, #100	; 0x64
 80158e8:	82bb      	strh	r3, [r7, #20]
 80158ea:	e00b      	b.n	8015904 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d803      	bhi.n	80158fe <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80158f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80158fa:	82bb      	strh	r3, [r7, #20]
 80158fc:	e002      	b.n	8015904 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80158fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8015902:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015904:	8aba      	ldrh	r2, [r7, #20]
 8015906:	8afb      	ldrh	r3, [r7, #22]
 8015908:	4293      	cmp	r3, r2
 801590a:	bf38      	it	cc
 801590c:	4613      	movcc	r3, r2
 801590e:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015910:	8afb      	ldrh	r3, [r7, #22]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d101      	bne.n	801591a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8015916:	2301      	movs	r3, #1
 8015918:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801591a:	8afb      	ldrh	r3, [r7, #22]
}
 801591c:	4618      	mov	r0, r3
 801591e:	371c      	adds	r7, #28
 8015920:	46bd      	mov	sp, r7
 8015922:	bc80      	pop	{r7}
 8015924:	4770      	bx	lr
	...

08015928 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b08e      	sub	sp, #56	; 0x38
 801592c:	af02      	add	r7, sp, #8
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	4608      	mov	r0, r1
 8015932:	4639      	mov	r1, r7
 8015934:	e881 000c 	stmia.w	r1, {r2, r3}
 8015938:	4603      	mov	r3, r0
 801593a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	881b      	ldrh	r3, [r3, #0]
 8015940:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015942:	4b4b      	ldr	r3, [pc, #300]	; (8015a70 <SetMaxTimeCredits+0x148>)
 8015944:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015946:	463b      	mov	r3, r7
 8015948:	e893 0003 	ldmia.w	r3, {r0, r1}
 801594c:	f007 fa74 	bl	801ce38 <SysTimeToMs>
 8015950:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8015952:	f107 0314 	add.w	r3, r7, #20
 8015956:	2200      	movs	r2, #0
 8015958:	601a      	str	r2, [r3, #0]
 801595a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801595c:	7af9      	ldrb	r1, [r7, #11]
 801595e:	463b      	mov	r3, r7
 8015960:	cb0c      	ldmia	r3, {r2, r3}
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f7ff ffa5 	bl	80158b2 <GetDutyCycle>
 8015968:	4603      	mov	r3, r0
 801596a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 801596c:	7afb      	ldrb	r3, [r7, #11]
 801596e:	f083 0301 	eor.w	r3, r3, #1
 8015972:	b2db      	uxtb	r3, r3
 8015974:	2b00      	cmp	r3, #0
 8015976:	d062      	beq.n	8015a3e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801597a:	2b64      	cmp	r3, #100	; 0x64
 801597c:	d105      	bne.n	801598a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801597e:	4b3c      	ldr	r3, [pc, #240]	; (8015a70 <SetMaxTimeCredits+0x148>)
 8015980:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015986:	609a      	str	r2, [r3, #8]
 8015988:	e00b      	b.n	80159a2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801598a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801598c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015990:	d105      	bne.n	801599e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8015992:	4b38      	ldr	r3, [pc, #224]	; (8015a74 <SetMaxTimeCredits+0x14c>)
 8015994:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801599a:	609a      	str	r2, [r3, #8]
 801599c:	e001      	b.n	80159a2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801599e:	4b36      	ldr	r3, [pc, #216]	; (8015a78 <SetMaxTimeCredits+0x150>)
 80159a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	689a      	ldr	r2, [r3, #8]
 80159a6:	f107 031c 	add.w	r3, r7, #28
 80159aa:	4611      	mov	r1, r2
 80159ac:	4618      	mov	r0, r3
 80159ae:	f007 fa6b 	bl	801ce88 <SysTimeFromMs>
 80159b2:	f107 0014 	add.w	r0, r7, #20
 80159b6:	6a3b      	ldr	r3, [r7, #32]
 80159b8:	9300      	str	r3, [sp, #0]
 80159ba:	69fb      	ldr	r3, [r7, #28]
 80159bc:	463a      	mov	r2, r7
 80159be:	ca06      	ldmia	r2, {r1, r2}
 80159c0:	f007 f97b 	bl	801ccba <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80159c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80159c8:	f083 0301 	eor.w	r3, r3, #1
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d006      	beq.n	80159e0 <SetMaxTimeCredits+0xb8>
 80159d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80159d6:	f083 0301 	eor.w	r3, r3, #1
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d108      	bne.n	80159f2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80159e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d103      	bne.n	80159f2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80159ea:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80159ec:	4a23      	ldr	r2, [pc, #140]	; (8015a7c <SetMaxTimeCredits+0x154>)
 80159ee:	4293      	cmp	r3, r2
 80159f0:	d92f      	bls.n	8015a52 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159f6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	4a21      	ldr	r2, [pc, #132]	; (8015a80 <SetMaxTimeCredits+0x158>)
 80159fc:	4293      	cmp	r3, r2
 80159fe:	d928      	bls.n	8015a52 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015a06:	3b30      	subs	r3, #48	; 0x30
 8015a08:	4a1e      	ldr	r2, [pc, #120]	; (8015a84 <SetMaxTimeCredits+0x15c>)
 8015a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8015a0e:	0c1b      	lsrs	r3, r3, #16
 8015a10:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	4a1c      	ldr	r2, [pc, #112]	; (8015a88 <SetMaxTimeCredits+0x160>)
 8015a16:	fb02 f303 	mul.w	r3, r2, r3
 8015a1a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015a1c:	697b      	ldr	r3, [r7, #20]
 8015a1e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8015a22:	3330      	adds	r3, #48	; 0x30
 8015a24:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015a26:	2300      	movs	r3, #0
 8015a28:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015a2a:	f107 0314 	add.w	r3, r7, #20
 8015a2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a32:	f007 fa01 	bl	801ce38 <SysTimeToMs>
 8015a36:	4602      	mov	r2, r0
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	609a      	str	r2, [r3, #8]
 8015a3c:	e009      	b.n	8015a52 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015a3e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015a42:	f083 0301 	eor.w	r3, r3, #1
 8015a46:	b2db      	uxtb	r3, r3
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d002      	beq.n	8015a52 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a50:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d102      	bne.n	8015a60 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a5e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a64:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015a66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3730      	adds	r7, #48	; 0x30
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bd80      	pop	{r7, pc}
 8015a70:	001b7740 	.word	0x001b7740
 8015a74:	0112a880 	.word	0x0112a880
 8015a78:	02932e00 	.word	0x02932e00
 8015a7c:	0001517f 	.word	0x0001517f
 8015a80:	0001ec2f 	.word	0x0001ec2f
 8015a84:	c22e4507 	.word	0xc22e4507
 8015a88:	00015180 	.word	0x00015180

08015a8c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b086      	sub	sp, #24
 8015a90:	af02      	add	r7, sp, #8
 8015a92:	6078      	str	r0, [r7, #4]
 8015a94:	4608      	mov	r0, r1
 8015a96:	4611      	mov	r1, r2
 8015a98:	461a      	mov	r2, r3
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	70fb      	strb	r3, [r7, #3]
 8015a9e:	460b      	mov	r3, r1
 8015aa0:	70bb      	strb	r3, [r7, #2]
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015aa6:	78f9      	ldrb	r1, [r7, #3]
 8015aa8:	787b      	ldrb	r3, [r7, #1]
 8015aaa:	9301      	str	r3, [sp, #4]
 8015aac:	78bb      	ldrb	r3, [r7, #2]
 8015aae:	9300      	str	r3, [sp, #0]
 8015ab0:	f107 0318 	add.w	r3, r7, #24
 8015ab4:	cb0c      	ldmia	r3, {r2, r3}
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f7ff ff36 	bl	8015928 <SetMaxTimeCredits>
 8015abc:	4603      	mov	r3, r0
 8015abe:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015ac0:	78fb      	ldrb	r3, [r7, #3]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d00a      	beq.n	8015adc <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	685b      	ldr	r3, [r3, #4]
 8015aca:	4618      	mov	r0, r3
 8015acc:	f007 fbfa 	bl	801d2c4 <UTIL_TIMER_GetElapsedTime>
 8015ad0:	4602      	mov	r2, r0
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	441a      	add	r2, r3
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	68da      	ldr	r2, [r3, #12]
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	691b      	ldr	r3, [r3, #16]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d903      	bls.n	8015af0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	691a      	ldr	r2, [r3, #16]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	6a3a      	ldr	r2, [r7, #32]
 8015af4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015af6:	89fb      	ldrh	r3, [r7, #14]
}
 8015af8:	4618      	mov	r0, r3
 8015afa:	3710      	adds	r7, #16
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}

08015b00 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015b00:	b480      	push	{r7}
 8015b02:	b085      	sub	sp, #20
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	4603      	mov	r3, r0
 8015b08:	460a      	mov	r2, r1
 8015b0a:	80fb      	strh	r3, [r7, #6]
 8015b0c:	4613      	mov	r3, r2
 8015b0e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015b10:	2300      	movs	r3, #0
 8015b12:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015b14:	2300      	movs	r3, #0
 8015b16:	73bb      	strb	r3, [r7, #14]
 8015b18:	e011      	b.n	8015b3e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015b1a:	88fa      	ldrh	r2, [r7, #6]
 8015b1c:	7bbb      	ldrb	r3, [r7, #14]
 8015b1e:	2101      	movs	r1, #1
 8015b20:	fa01 f303 	lsl.w	r3, r1, r3
 8015b24:	401a      	ands	r2, r3
 8015b26:	7bbb      	ldrb	r3, [r7, #14]
 8015b28:	2101      	movs	r1, #1
 8015b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d102      	bne.n	8015b38 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015b32:	7bfb      	ldrb	r3, [r7, #15]
 8015b34:	3301      	adds	r3, #1
 8015b36:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015b38:	7bbb      	ldrb	r3, [r7, #14]
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	73bb      	strb	r3, [r7, #14]
 8015b3e:	7bba      	ldrb	r2, [r7, #14]
 8015b40:	797b      	ldrb	r3, [r7, #5]
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d3e9      	bcc.n	8015b1a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3714      	adds	r7, #20
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bc80      	pop	{r7}
 8015b50:	4770      	bx	lr

08015b52 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015b52:	b580      	push	{r7, lr}
 8015b54:	b084      	sub	sp, #16
 8015b56:	af00      	add	r7, sp, #0
 8015b58:	6039      	str	r1, [r7, #0]
 8015b5a:	4611      	mov	r1, r2
 8015b5c:	461a      	mov	r2, r3
 8015b5e:	4603      	mov	r3, r0
 8015b60:	71fb      	strb	r3, [r7, #7]
 8015b62:	460b      	mov	r3, r1
 8015b64:	71bb      	strb	r3, [r7, #6]
 8015b66:	4613      	mov	r3, r2
 8015b68:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015b6a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015b6e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015b72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015b76:	4618      	mov	r0, r3
 8015b78:	f000 f85d 	bl	8015c36 <RegionCommonValueInRange>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d101      	bne.n	8015b86 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015b82:	2300      	movs	r3, #0
 8015b84:	e053      	b.n	8015c2e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015b86:	2300      	movs	r3, #0
 8015b88:	73fb      	strb	r3, [r7, #15]
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	73bb      	strb	r3, [r7, #14]
 8015b8e:	e049      	b.n	8015c24 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015b90:	2300      	movs	r3, #0
 8015b92:	737b      	strb	r3, [r7, #13]
 8015b94:	e03d      	b.n	8015c12 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015b96:	7bbb      	ldrb	r3, [r7, #14]
 8015b98:	005b      	lsls	r3, r3, #1
 8015b9a:	683a      	ldr	r2, [r7, #0]
 8015b9c:	4413      	add	r3, r2
 8015b9e:	881b      	ldrh	r3, [r3, #0]
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	7b7b      	ldrb	r3, [r7, #13]
 8015ba4:	fa42 f303 	asr.w	r3, r2, r3
 8015ba8:	f003 0301 	and.w	r3, r3, #1
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d02d      	beq.n	8015c0c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015bb0:	7bfa      	ldrb	r2, [r7, #15]
 8015bb2:	7b7b      	ldrb	r3, [r7, #13]
 8015bb4:	4413      	add	r3, r2
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	4613      	mov	r3, r2
 8015bba:	005b      	lsls	r3, r3, #1
 8015bbc:	4413      	add	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	461a      	mov	r2, r3
 8015bc2:	69fb      	ldr	r3, [r7, #28]
 8015bc4:	4413      	add	r3, r2
 8015bc6:	7a1b      	ldrb	r3, [r3, #8]
 8015bc8:	f343 0303 	sbfx	r3, r3, #0, #4
 8015bcc:	b25b      	sxtb	r3, r3
 8015bce:	f003 030f 	and.w	r3, r3, #15
 8015bd2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015bd4:	7bfa      	ldrb	r2, [r7, #15]
 8015bd6:	7b7b      	ldrb	r3, [r7, #13]
 8015bd8:	4413      	add	r3, r2
 8015bda:	461a      	mov	r2, r3
 8015bdc:	4613      	mov	r3, r2
 8015bde:	005b      	lsls	r3, r3, #1
 8015be0:	4413      	add	r3, r2
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	461a      	mov	r2, r3
 8015be6:	69fb      	ldr	r3, [r7, #28]
 8015be8:	4413      	add	r3, r2
 8015bea:	7a1b      	ldrb	r3, [r3, #8]
 8015bec:	f343 1303 	sbfx	r3, r3, #4, #4
 8015bf0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015bf2:	f003 030f 	and.w	r3, r3, #15
 8015bf6:	b25a      	sxtb	r2, r3
 8015bf8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f000 f81a 	bl	8015c36 <RegionCommonValueInRange>
 8015c02:	4603      	mov	r3, r0
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d101      	bne.n	8015c0c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	e010      	b.n	8015c2e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015c0c:	7b7b      	ldrb	r3, [r7, #13]
 8015c0e:	3301      	adds	r3, #1
 8015c10:	737b      	strb	r3, [r7, #13]
 8015c12:	7b7b      	ldrb	r3, [r7, #13]
 8015c14:	2b0f      	cmp	r3, #15
 8015c16:	d9be      	bls.n	8015b96 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015c18:	7bfb      	ldrb	r3, [r7, #15]
 8015c1a:	3310      	adds	r3, #16
 8015c1c:	73fb      	strb	r3, [r7, #15]
 8015c1e:	7bbb      	ldrb	r3, [r7, #14]
 8015c20:	3301      	adds	r3, #1
 8015c22:	73bb      	strb	r3, [r7, #14]
 8015c24:	7bfa      	ldrb	r2, [r7, #15]
 8015c26:	79fb      	ldrb	r3, [r7, #7]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d3b1      	bcc.n	8015b90 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015c2c:	2300      	movs	r3, #0
}
 8015c2e:	4618      	mov	r0, r3
 8015c30:	3710      	adds	r7, #16
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}

08015c36 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015c36:	b480      	push	{r7}
 8015c38:	b083      	sub	sp, #12
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	71fb      	strb	r3, [r7, #7]
 8015c40:	460b      	mov	r3, r1
 8015c42:	71bb      	strb	r3, [r7, #6]
 8015c44:	4613      	mov	r3, r2
 8015c46:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015c48:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015c4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015c50:	429a      	cmp	r2, r3
 8015c52:	db07      	blt.n	8015c64 <RegionCommonValueInRange+0x2e>
 8015c54:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015c58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	dc01      	bgt.n	8015c64 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015c60:	2301      	movs	r3, #1
 8015c62:	e000      	b.n	8015c66 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015c64:	2300      	movs	r3, #0
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	370c      	adds	r7, #12
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bc80      	pop	{r7}
 8015c6e:	4770      	bx	lr

08015c70 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015c70:	b480      	push	{r7}
 8015c72:	b085      	sub	sp, #20
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	460b      	mov	r3, r1
 8015c7a:	70fb      	strb	r3, [r7, #3]
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015c80:	78fb      	ldrb	r3, [r7, #3]
 8015c82:	091b      	lsrs	r3, r3, #4
 8015c84:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015c86:	78bb      	ldrb	r3, [r7, #2]
 8015c88:	091b      	lsrs	r3, r3, #4
 8015c8a:	b2db      	uxtb	r3, r3
 8015c8c:	7bfa      	ldrb	r2, [r7, #15]
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d803      	bhi.n	8015c9a <RegionCommonChanDisable+0x2a>
 8015c92:	78fa      	ldrb	r2, [r7, #3]
 8015c94:	78bb      	ldrb	r3, [r7, #2]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d301      	bcc.n	8015c9e <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	e017      	b.n	8015cce <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015c9e:	7bfb      	ldrb	r3, [r7, #15]
 8015ca0:	005b      	lsls	r3, r3, #1
 8015ca2:	687a      	ldr	r2, [r7, #4]
 8015ca4:	4413      	add	r3, r2
 8015ca6:	881b      	ldrh	r3, [r3, #0]
 8015ca8:	b21a      	sxth	r2, r3
 8015caa:	78fb      	ldrb	r3, [r7, #3]
 8015cac:	f003 030f 	and.w	r3, r3, #15
 8015cb0:	2101      	movs	r1, #1
 8015cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8015cb6:	b21b      	sxth	r3, r3
 8015cb8:	43db      	mvns	r3, r3
 8015cba:	b21b      	sxth	r3, r3
 8015cbc:	4013      	ands	r3, r2
 8015cbe:	b219      	sxth	r1, r3
 8015cc0:	7bfb      	ldrb	r3, [r7, #15]
 8015cc2:	005b      	lsls	r3, r3, #1
 8015cc4:	687a      	ldr	r2, [r7, #4]
 8015cc6:	4413      	add	r3, r2
 8015cc8:	b28a      	uxth	r2, r1
 8015cca:	801a      	strh	r2, [r3, #0]

    return true;
 8015ccc:	2301      	movs	r3, #1
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	3714      	adds	r7, #20
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bc80      	pop	{r7}
 8015cd6:	4770      	bx	lr

08015cd8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b084      	sub	sp, #16
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	70fb      	strb	r3, [r7, #3]
 8015ce4:	4613      	mov	r3, r2
 8015ce6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d101      	bne.n	8015cf6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	e018      	b.n	8015d28 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015cf6:	78fb      	ldrb	r3, [r7, #3]
 8015cf8:	73bb      	strb	r3, [r7, #14]
 8015cfa:	e010      	b.n	8015d1e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015cfc:	7bbb      	ldrb	r3, [r7, #14]
 8015cfe:	005b      	lsls	r3, r3, #1
 8015d00:	687a      	ldr	r2, [r7, #4]
 8015d02:	4413      	add	r3, r2
 8015d04:	881b      	ldrh	r3, [r3, #0]
 8015d06:	2110      	movs	r1, #16
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff fef9 	bl	8015b00 <CountChannels>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	461a      	mov	r2, r3
 8015d12:	7bfb      	ldrb	r3, [r7, #15]
 8015d14:	4413      	add	r3, r2
 8015d16:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015d18:	7bbb      	ldrb	r3, [r7, #14]
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	73bb      	strb	r3, [r7, #14]
 8015d1e:	7bba      	ldrb	r2, [r7, #14]
 8015d20:	78bb      	ldrb	r3, [r7, #2]
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d3ea      	bcc.n	8015cfc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3710      	adds	r7, #16
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bd80      	pop	{r7, pc}

08015d30 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015d30:	b480      	push	{r7}
 8015d32:	b087      	sub	sp, #28
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	60f8      	str	r0, [r7, #12]
 8015d38:	60b9      	str	r1, [r7, #8]
 8015d3a:	4613      	mov	r3, r2
 8015d3c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d016      	beq.n	8015d72 <RegionCommonChanMaskCopy+0x42>
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d013      	beq.n	8015d72 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	75fb      	strb	r3, [r7, #23]
 8015d4e:	e00c      	b.n	8015d6a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015d50:	7dfb      	ldrb	r3, [r7, #23]
 8015d52:	005b      	lsls	r3, r3, #1
 8015d54:	68ba      	ldr	r2, [r7, #8]
 8015d56:	441a      	add	r2, r3
 8015d58:	7dfb      	ldrb	r3, [r7, #23]
 8015d5a:	005b      	lsls	r3, r3, #1
 8015d5c:	68f9      	ldr	r1, [r7, #12]
 8015d5e:	440b      	add	r3, r1
 8015d60:	8812      	ldrh	r2, [r2, #0]
 8015d62:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015d64:	7dfb      	ldrb	r3, [r7, #23]
 8015d66:	3301      	adds	r3, #1
 8015d68:	75fb      	strb	r3, [r7, #23]
 8015d6a:	7dfa      	ldrb	r2, [r7, #23]
 8015d6c:	79fb      	ldrb	r3, [r7, #7]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d3ee      	bcc.n	8015d50 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015d72:	bf00      	nop
 8015d74:	371c      	adds	r7, #28
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bc80      	pop	{r7}
 8015d7a:	4770      	bx	lr

08015d7c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015d7c:	b082      	sub	sp, #8
 8015d7e:	b580      	push	{r7, lr}
 8015d80:	b086      	sub	sp, #24
 8015d82:	af00      	add	r7, sp, #0
 8015d84:	60f8      	str	r0, [r7, #12]
 8015d86:	60b9      	str	r1, [r7, #8]
 8015d88:	627b      	str	r3, [r7, #36]	; 0x24
 8015d8a:	4613      	mov	r3, r2
 8015d8c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015d8e:	79f9      	ldrb	r1, [r7, #7]
 8015d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015d94:	cb0c      	ldmia	r3, {r2, r3}
 8015d96:	68f8      	ldr	r0, [r7, #12]
 8015d98:	f7ff fd8b 	bl	80158b2 <GetDutyCycle>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	68da      	ldr	r2, [r3, #12]
 8015da4:	8afb      	ldrh	r3, [r7, #22]
 8015da6:	68b9      	ldr	r1, [r7, #8]
 8015da8:	fb01 f303 	mul.w	r3, r1, r3
 8015dac:	429a      	cmp	r2, r3
 8015dae:	d909      	bls.n	8015dc4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	68da      	ldr	r2, [r3, #12]
 8015db4:	8afb      	ldrh	r3, [r7, #22]
 8015db6:	68b9      	ldr	r1, [r7, #8]
 8015db8:	fb01 f303 	mul.w	r3, r1, r3
 8015dbc:	1ad2      	subs	r2, r2, r3
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015dc2:	e002      	b.n	8015dca <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	60da      	str	r2, [r3, #12]
}
 8015dca:	bf00      	nop
 8015dcc:	3718      	adds	r7, #24
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015dd4:	b002      	add	sp, #8
 8015dd6:	4770      	bx	lr

08015dd8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dda:	b08f      	sub	sp, #60	; 0x3c
 8015ddc:	af04      	add	r7, sp, #16
 8015dde:	6039      	str	r1, [r7, #0]
 8015de0:	4611      	mov	r1, r2
 8015de2:	461a      	mov	r2, r3
 8015de4:	4603      	mov	r3, r0
 8015de6:	71fb      	strb	r3, [r7, #7]
 8015de8:	460b      	mov	r3, r1
 8015dea:	71bb      	strb	r3, [r7, #6]
 8015dec:	4613      	mov	r3, r2
 8015dee:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015df0:	f04f 33ff 	mov.w	r3, #4294967295
 8015df4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015df6:	f007 fa53 	bl	801d2a0 <UTIL_TIMER_GetCurrentTime>
 8015dfa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015e00:	2301      	movs	r3, #1
 8015e02:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015e04:	2300      	movs	r3, #0
 8015e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015e10:	e0ba      	b.n	8015f88 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015e12:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e16:	4613      	mov	r3, r2
 8015e18:	005b      	lsls	r3, r3, #1
 8015e1a:	4413      	add	r3, r2
 8015e1c:	00db      	lsls	r3, r3, #3
 8015e1e:	461a      	mov	r2, r3
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	189c      	adds	r4, r3, r2
 8015e24:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015e28:	797a      	ldrb	r2, [r7, #5]
 8015e2a:	79fd      	ldrb	r5, [r7, #7]
 8015e2c:	69fb      	ldr	r3, [r7, #28]
 8015e2e:	9302      	str	r3, [sp, #8]
 8015e30:	46ec      	mov	ip, sp
 8015e32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015e36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e3a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e3e:	4633      	mov	r3, r6
 8015e40:	4629      	mov	r1, r5
 8015e42:	4620      	mov	r0, r4
 8015e44:	f7ff fe22 	bl	8015a8c <UpdateTimeCredits>
 8015e48:	4603      	mov	r3, r0
 8015e4a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015e4c:	8afa      	ldrh	r2, [r7, #22]
 8015e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e50:	fb02 f303 	mul.w	r3, r2, r3
 8015e54:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015e56:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e5a:	4613      	mov	r3, r2
 8015e5c:	005b      	lsls	r3, r3, #1
 8015e5e:	4413      	add	r3, r2
 8015e60:	00db      	lsls	r3, r3, #3
 8015e62:	461a      	mov	r2, r3
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	4413      	add	r3, r2
 8015e68:	68db      	ldr	r3, [r3, #12]
 8015e6a:	69ba      	ldr	r2, [r7, #24]
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d308      	bcc.n	8015e82 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015e70:	797b      	ldrb	r3, [r7, #5]
 8015e72:	f083 0301 	eor.w	r3, r3, #1
 8015e76:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d013      	beq.n	8015ea4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015e7c:	79fb      	ldrb	r3, [r7, #7]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d010      	beq.n	8015ea4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015e82:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e86:	4613      	mov	r3, r2
 8015e88:	005b      	lsls	r3, r3, #1
 8015e8a:	4413      	add	r3, r2
 8015e8c:	00db      	lsls	r3, r3, #3
 8015e8e:	461a      	mov	r2, r3
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	4413      	add	r3, r2
 8015e94:	2201      	movs	r2, #1
 8015e96:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015ea2:	e06c      	b.n	8015f7e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015ea4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ea8:	4613      	mov	r3, r2
 8015eaa:	005b      	lsls	r3, r3, #1
 8015eac:	4413      	add	r3, r2
 8015eae:	00db      	lsls	r3, r3, #3
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	4413      	add	r3, r2
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015eba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ebe:	4613      	mov	r3, r2
 8015ec0:	005b      	lsls	r3, r3, #1
 8015ec2:	4413      	add	r3, r2
 8015ec4:	00db      	lsls	r3, r3, #3
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	4413      	add	r3, r2
 8015ecc:	691b      	ldr	r3, [r3, #16]
 8015ece:	69ba      	ldr	r2, [r7, #24]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d215      	bcs.n	8015f00 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015ed4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ed8:	4613      	mov	r3, r2
 8015eda:	005b      	lsls	r3, r3, #1
 8015edc:	4413      	add	r3, r2
 8015ede:	00db      	lsls	r3, r3, #3
 8015ee0:	461a      	mov	r2, r3
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	4413      	add	r3, r2
 8015ee6:	68db      	ldr	r3, [r3, #12]
 8015ee8:	69ba      	ldr	r2, [r7, #24]
 8015eea:	1ad3      	subs	r3, r2, r3
 8015eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	bf28      	it	cs
 8015ef2:	4613      	movcs	r3, r2
 8015ef4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015efa:	3301      	adds	r3, #1
 8015efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015f00:	79fb      	ldrb	r3, [r7, #7]
 8015f02:	f083 0301 	eor.w	r3, r3, #1
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d038      	beq.n	8015f7e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	60fb      	str	r3, [r7, #12]
 8015f10:	2300      	movs	r3, #0
 8015f12:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015f14:	8afb      	ldrh	r3, [r7, #22]
 8015f16:	2b64      	cmp	r3, #100	; 0x64
 8015f18:	d103      	bne.n	8015f22 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015f1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015f1e:	60fb      	str	r3, [r7, #12]
 8015f20:	e009      	b.n	8015f36 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015f22:	8afb      	ldrh	r3, [r7, #22]
 8015f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015f28:	d103      	bne.n	8015f32 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015f2a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015f2e:	60fb      	str	r3, [r7, #12]
 8015f30:	e001      	b.n	8015f36 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015f32:	4b1e      	ldr	r3, [pc, #120]	; (8015fac <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015f34:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f38:	4a1c      	ldr	r2, [pc, #112]	; (8015fac <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	d90e      	bls.n	8015f5c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015f3e:	68fa      	ldr	r2, [r7, #12]
 8015f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f42:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015f46:	3b30      	subs	r3, #48	; 0x30
 8015f48:	4919      	ldr	r1, [pc, #100]	; (8015fb0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015f4a:	fba1 1303 	umull	r1, r3, r1, r3
 8015f4e:	0c1b      	lsrs	r3, r3, #16
 8015f50:	3301      	adds	r3, #1
 8015f52:	4918      	ldr	r1, [pc, #96]	; (8015fb4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015f54:	fb01 f303 	mul.w	r3, r1, r3
 8015f58:	4413      	add	r3, r2
 8015f5a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015f5c:	f107 000c 	add.w	r0, r7, #12
 8015f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f62:	9300      	str	r3, [sp, #0]
 8015f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f66:	f107 020c 	add.w	r2, r7, #12
 8015f6a:	ca06      	ldmia	r2, {r1, r2}
 8015f6c:	f006 fea5 	bl	801ccba <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015f70:	f107 030c 	add.w	r3, r7, #12
 8015f74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f78:	f006 ff5e 	bl	801ce38 <SysTimeToMs>
 8015f7c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015f7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015f82:	3301      	adds	r3, #1
 8015f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015f88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f8c:	79bb      	ldrb	r3, [r7, #6]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	f4ff af3f 	bcc.w	8015e12 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8015f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d102      	bne.n	8015fa2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015fa0:	e000      	b.n	8015fa4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	372c      	adds	r7, #44	; 0x2c
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fac:	0001ec30 	.word	0x0001ec30
 8015fb0:	c22e4507 	.word	0xc22e4507
 8015fb4:	00015180 	.word	0x00015180

08015fb8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015fb8:	b480      	push	{r7}
 8015fba:	b085      	sub	sp, #20
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	2b03      	cmp	r3, #3
 8015fcc:	d13f      	bne.n	801604e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	3301      	adds	r3, #1
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	b25a      	sxtb	r2, r3
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015fe0:	f003 030f 	and.w	r3, r3, #15
 8015fe4:	b25a      	sxtb	r2, r3
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ff0:	b2db      	uxtb	r3, r3
 8015ff2:	091b      	lsrs	r3, r3, #4
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	b25a      	sxtb	r2, r3
 8015ff8:	683b      	ldr	r3, [r7, #0]
 8015ffa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	3302      	adds	r3, #2
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	b29a      	uxth	r2, r3
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	889b      	ldrh	r3, [r3, #4]
 801600c:	b21a      	sxth	r2, r3
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	3303      	adds	r3, #3
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	021b      	lsls	r3, r3, #8
 8016016:	b21b      	sxth	r3, r3
 8016018:	4313      	orrs	r3, r2
 801601a:	b21b      	sxth	r3, r3
 801601c:	b29a      	uxth	r2, r3
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	791a      	ldrb	r2, [r3, #4]
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	781b      	ldrb	r3, [r3, #0]
 801602e:	091b      	lsrs	r3, r3, #4
 8016030:	b2db      	uxtb	r3, r3
 8016032:	f003 0307 	and.w	r3, r3, #7
 8016036:	b2da      	uxtb	r2, r3
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801603c:	683b      	ldr	r3, [r7, #0]
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	f003 030f 	and.w	r3, r3, #15
 8016044:	b2da      	uxtb	r2, r3
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801604a:	2305      	movs	r3, #5
 801604c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016050:	4618      	mov	r0, r3
 8016052:	3714      	adds	r7, #20
 8016054:	46bd      	mov	sp, r7
 8016056:	bc80      	pop	{r7}
 8016058:	4770      	bx	lr

0801605a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801605a:	b5b0      	push	{r4, r5, r7, lr}
 801605c:	b088      	sub	sp, #32
 801605e:	af02      	add	r7, sp, #8
 8016060:	60f8      	str	r0, [r7, #12]
 8016062:	60b9      	str	r1, [r7, #8]
 8016064:	607a      	str	r2, [r7, #4]
 8016066:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	791b      	ldrb	r3, [r3, #4]
 801606c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	799b      	ldrb	r3, [r3, #6]
 8016072:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	79db      	ldrb	r3, [r3, #7]
 8016078:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	7a1b      	ldrb	r3, [r3, #8]
 801607e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	795b      	ldrb	r3, [r3, #5]
 8016084:	f083 0301 	eor.w	r3, r3, #1
 8016088:	b2db      	uxtb	r3, r3
 801608a:	2b00      	cmp	r3, #0
 801608c:	d008      	beq.n	80160a0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	7adb      	ldrb	r3, [r3, #11]
 8016092:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	7a5b      	ldrb	r3, [r3, #9]
 8016098:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	7a9b      	ldrb	r3, [r3, #10]
 801609e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80160a0:	7dfb      	ldrb	r3, [r7, #23]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d03a      	beq.n	801611c <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	7b18      	ldrb	r0, [r3, #12]
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	6919      	ldr	r1, [r3, #16]
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80160ba:	68fa      	ldr	r2, [r7, #12]
 80160bc:	6992      	ldr	r2, [r2, #24]
 80160be:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80160c2:	9201      	str	r2, [sp, #4]
 80160c4:	9300      	str	r3, [sp, #0]
 80160c6:	462b      	mov	r3, r5
 80160c8:	4622      	mov	r2, r4
 80160ca:	f7ff fd42 	bl	8015b52 <RegionCommonChanVerifyDr>
 80160ce:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80160d0:	f083 0301 	eor.w	r3, r3, #1
 80160d4:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d003      	beq.n	80160e2 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 80160da:	7dfb      	ldrb	r3, [r7, #23]
 80160dc:	f023 0302 	bic.w	r3, r3, #2
 80160e0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80160ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7ff fd9f 	bl	8015c36 <RegionCommonValueInRange>
 80160f8:	4603      	mov	r3, r0
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d10e      	bne.n	801611c <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016104:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016108:	429a      	cmp	r2, r3
 801610a:	da03      	bge.n	8016114 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	7f5b      	ldrb	r3, [r3, #29]
 8016110:	757b      	strb	r3, [r7, #21]
 8016112:	e003      	b.n	801611c <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016114:	7dfb      	ldrb	r3, [r7, #23]
 8016116:	f023 0304 	bic.w	r3, r3, #4
 801611a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801611c:	7dfb      	ldrb	r3, [r7, #23]
 801611e:	2b07      	cmp	r3, #7
 8016120:	d105      	bne.n	801612e <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8016122:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d101      	bne.n	801612e <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801612a:	2301      	movs	r3, #1
 801612c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	7dba      	ldrb	r2, [r7, #22]
 8016132:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	7d7a      	ldrb	r2, [r7, #21]
 8016138:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801613a:	7d3a      	ldrb	r2, [r7, #20]
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	701a      	strb	r2, [r3, #0]

    return status;
 8016140:	7dfb      	ldrb	r3, [r7, #23]
}
 8016142:	4618      	mov	r0, r3
 8016144:	3718      	adds	r7, #24
 8016146:	46bd      	mov	sp, r7
 8016148:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801614c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801614c:	b480      	push	{r7}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
 8016152:	4603      	mov	r3, r0
 8016154:	6039      	str	r1, [r7, #0]
 8016156:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016158:	79fb      	ldrb	r3, [r7, #7]
 801615a:	4a06      	ldr	r2, [pc, #24]	; (8016174 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801615c:	fa02 f303 	lsl.w	r3, r2, r3
 8016160:	461a      	mov	r2, r3
 8016162:	683b      	ldr	r3, [r7, #0]
 8016164:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016168:	4618      	mov	r0, r3
 801616a:	370c      	adds	r7, #12
 801616c:	46bd      	mov	sp, r7
 801616e:	bc80      	pop	{r7}
 8016170:	4770      	bx	lr
 8016172:	bf00      	nop
 8016174:	000f4240 	.word	0x000f4240

08016178 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016178:	b480      	push	{r7}
 801617a:	b083      	sub	sp, #12
 801617c:	af00      	add	r7, sp, #0
 801617e:	4603      	mov	r3, r0
 8016180:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016182:	79fb      	ldrb	r3, [r7, #7]
 8016184:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016188:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801618c:	4618      	mov	r0, r3
 801618e:	370c      	adds	r7, #12
 8016190:	46bd      	mov	sp, r7
 8016192:	bc80      	pop	{r7}
 8016194:	4770      	bx	lr
	...

08016198 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016198:	b480      	push	{r7}
 801619a:	b085      	sub	sp, #20
 801619c:	af00      	add	r7, sp, #0
 801619e:	60f8      	str	r0, [r7, #12]
 80161a0:	607a      	str	r2, [r7, #4]
 80161a2:	603b      	str	r3, [r7, #0]
 80161a4:	460b      	mov	r3, r1
 80161a6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80161a8:	7afa      	ldrb	r2, [r7, #11]
 80161aa:	7afb      	ldrb	r3, [r7, #11]
 80161ac:	3b04      	subs	r3, #4
 80161ae:	4619      	mov	r1, r3
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	fb03 f101 	mul.w	r1, r3, r1
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80161bc:	fb00 f303 	mul.w	r3, r0, r3
 80161c0:	440b      	add	r3, r1
 80161c2:	005b      	lsls	r3, r3, #1
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d013      	beq.n	80161f0 <RegionCommonComputeRxWindowParameters+0x58>
 80161c8:	7afb      	ldrb	r3, [r7, #11]
 80161ca:	3b04      	subs	r3, #4
 80161cc:	4619      	mov	r1, r3
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	fb03 f101 	mul.w	r1, r3, r1
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80161da:	fb00 f303 	mul.w	r3, r0, r3
 80161de:	440b      	add	r3, r1
 80161e0:	0059      	lsls	r1, r3, #1
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	440b      	add	r3, r1
 80161e6:	1e59      	subs	r1, r3, #1
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80161ee:	e00f      	b.n	8016210 <RegionCommonComputeRxWindowParameters+0x78>
 80161f0:	7afb      	ldrb	r3, [r7, #11]
 80161f2:	3b04      	subs	r3, #4
 80161f4:	4619      	mov	r1, r3
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	fb03 f101 	mul.w	r1, r3, r1
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016202:	fb00 f303 	mul.w	r3, r0, r3
 8016206:	440b      	add	r3, r1
 8016208:	0059      	lsls	r1, r3, #1
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	fbb1 f3f3 	udiv	r3, r1, r3
 8016210:	429a      	cmp	r2, r3
 8016212:	bf38      	it	cc
 8016214:	461a      	movcc	r2, r3
 8016216:	69bb      	ldr	r3, [r7, #24]
 8016218:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	4619      	mov	r1, r3
 8016220:	69bb      	ldr	r3, [r7, #24]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	68fa      	ldr	r2, [r7, #12]
 8016226:	fb02 f303 	mul.w	r3, r2, r3
 801622a:	2b00      	cmp	r3, #0
 801622c:	d007      	beq.n	801623e <RegionCommonComputeRxWindowParameters+0xa6>
 801622e:	69bb      	ldr	r3, [r7, #24]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	68fa      	ldr	r2, [r7, #12]
 8016234:	fb02 f303 	mul.w	r3, r2, r3
 8016238:	3301      	adds	r3, #1
 801623a:	085b      	lsrs	r3, r3, #1
 801623c:	e005      	b.n	801624a <RegionCommonComputeRxWindowParameters+0xb2>
 801623e:	69bb      	ldr	r3, [r7, #24]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	68fa      	ldr	r2, [r7, #12]
 8016244:	fb02 f303 	mul.w	r3, r2, r3
 8016248:	085b      	lsrs	r3, r3, #1
 801624a:	1acb      	subs	r3, r1, r3
 801624c:	683a      	ldr	r2, [r7, #0]
 801624e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016252:	fb01 f202 	mul.w	r2, r1, r2
 8016256:	1a9b      	subs	r3, r3, r2
 8016258:	2b00      	cmp	r3, #0
 801625a:	dd27      	ble.n	80162ac <RegionCommonComputeRxWindowParameters+0x114>
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	009b      	lsls	r3, r3, #2
 8016260:	4619      	mov	r1, r3
 8016262:	69bb      	ldr	r3, [r7, #24]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	68fa      	ldr	r2, [r7, #12]
 8016268:	fb02 f303 	mul.w	r3, r2, r3
 801626c:	2b00      	cmp	r3, #0
 801626e:	d007      	beq.n	8016280 <RegionCommonComputeRxWindowParameters+0xe8>
 8016270:	69bb      	ldr	r3, [r7, #24]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	68fa      	ldr	r2, [r7, #12]
 8016276:	fb02 f303 	mul.w	r3, r2, r3
 801627a:	3301      	adds	r3, #1
 801627c:	085b      	lsrs	r3, r3, #1
 801627e:	e005      	b.n	801628c <RegionCommonComputeRxWindowParameters+0xf4>
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	68fa      	ldr	r2, [r7, #12]
 8016286:	fb02 f303 	mul.w	r3, r2, r3
 801628a:	085b      	lsrs	r3, r3, #1
 801628c:	1acb      	subs	r3, r1, r3
 801628e:	683a      	ldr	r2, [r7, #0]
 8016290:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016294:	fb01 f202 	mul.w	r2, r1, r2
 8016298:	1a9b      	subs	r3, r3, r2
 801629a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801629e:	4a19      	ldr	r2, [pc, #100]	; (8016304 <RegionCommonComputeRxWindowParameters+0x16c>)
 80162a0:	fb82 1203 	smull	r1, r2, r2, r3
 80162a4:	1192      	asrs	r2, r2, #6
 80162a6:	17db      	asrs	r3, r3, #31
 80162a8:	1ad3      	subs	r3, r2, r3
 80162aa:	e024      	b.n	80162f6 <RegionCommonComputeRxWindowParameters+0x15e>
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	4619      	mov	r1, r3
 80162b2:	69bb      	ldr	r3, [r7, #24]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	68fa      	ldr	r2, [r7, #12]
 80162b8:	fb02 f303 	mul.w	r3, r2, r3
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d007      	beq.n	80162d0 <RegionCommonComputeRxWindowParameters+0x138>
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	68fa      	ldr	r2, [r7, #12]
 80162c6:	fb02 f303 	mul.w	r3, r2, r3
 80162ca:	3301      	adds	r3, #1
 80162cc:	085b      	lsrs	r3, r3, #1
 80162ce:	e005      	b.n	80162dc <RegionCommonComputeRxWindowParameters+0x144>
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	68fa      	ldr	r2, [r7, #12]
 80162d6:	fb02 f303 	mul.w	r3, r2, r3
 80162da:	085b      	lsrs	r3, r3, #1
 80162dc:	1acb      	subs	r3, r1, r3
 80162de:	683a      	ldr	r2, [r7, #0]
 80162e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80162e4:	fb01 f202 	mul.w	r2, r1, r2
 80162e8:	1a9b      	subs	r3, r3, r2
 80162ea:	4a06      	ldr	r2, [pc, #24]	; (8016304 <RegionCommonComputeRxWindowParameters+0x16c>)
 80162ec:	fb82 1203 	smull	r1, r2, r2, r3
 80162f0:	1192      	asrs	r2, r2, #6
 80162f2:	17db      	asrs	r3, r3, #31
 80162f4:	1ad3      	subs	r3, r2, r3
 80162f6:	69fa      	ldr	r2, [r7, #28]
 80162f8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80162fa:	bf00      	nop
 80162fc:	3714      	adds	r7, #20
 80162fe:	46bd      	mov	sp, r7
 8016300:	bc80      	pop	{r7}
 8016302:	4770      	bx	lr
 8016304:	10624dd3 	.word	0x10624dd3

08016308 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b086      	sub	sp, #24
 801630c:	af00      	add	r7, sp, #0
 801630e:	4603      	mov	r3, r0
 8016310:	60b9      	str	r1, [r7, #8]
 8016312:	607a      	str	r2, [r7, #4]
 8016314:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016316:	2300      	movs	r3, #0
 8016318:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801631a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801631e:	005b      	lsls	r3, r3, #1
 8016320:	4618      	mov	r0, r3
 8016322:	f7ea fa57 	bl	80007d4 <__aeabi_ui2f>
 8016326:	4603      	mov	r3, r0
 8016328:	4619      	mov	r1, r3
 801632a:	68b8      	ldr	r0, [r7, #8]
 801632c:	f7ea f9a0 	bl	8000670 <__aeabi_fsub>
 8016330:	4603      	mov	r3, r0
 8016332:	6879      	ldr	r1, [r7, #4]
 8016334:	4618      	mov	r0, r3
 8016336:	f7ea f99b 	bl	8000670 <__aeabi_fsub>
 801633a:	4603      	mov	r3, r0
 801633c:	4618      	mov	r0, r3
 801633e:	f7ea f88b 	bl	8000458 <__aeabi_f2d>
 8016342:	4602      	mov	r2, r0
 8016344:	460b      	mov	r3, r1
 8016346:	4610      	mov	r0, r2
 8016348:	4619      	mov	r1, r3
 801634a:	f007 fb01 	bl	801d950 <floor>
 801634e:	4602      	mov	r2, r0
 8016350:	460b      	mov	r3, r1
 8016352:	4610      	mov	r0, r2
 8016354:	4619      	mov	r1, r3
 8016356:	f7ea f95f 	bl	8000618 <__aeabi_d2iz>
 801635a:	4603      	mov	r3, r0
 801635c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801635e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3718      	adds	r7, #24
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}

0801636a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801636a:	b590      	push	{r4, r7, lr}
 801636c:	b087      	sub	sp, #28
 801636e:	af00      	add	r7, sp, #0
 8016370:	60f8      	str	r0, [r7, #12]
 8016372:	60b9      	str	r1, [r7, #8]
 8016374:	607a      	str	r2, [r7, #4]
 8016376:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016378:	2300      	movs	r3, #0
 801637a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801637c:	2300      	movs	r3, #0
 801637e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016380:	2300      	movs	r3, #0
 8016382:	757b      	strb	r3, [r7, #21]
 8016384:	2300      	movs	r3, #0
 8016386:	753b      	strb	r3, [r7, #20]
 8016388:	e09c      	b.n	80164c4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801638a:	2300      	movs	r3, #0
 801638c:	74fb      	strb	r3, [r7, #19]
 801638e:	e08f      	b.n	80164b0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	685a      	ldr	r2, [r3, #4]
 8016394:	7d3b      	ldrb	r3, [r7, #20]
 8016396:	005b      	lsls	r3, r3, #1
 8016398:	4413      	add	r3, r2
 801639a:	881b      	ldrh	r3, [r3, #0]
 801639c:	461a      	mov	r2, r3
 801639e:	7cfb      	ldrb	r3, [r7, #19]
 80163a0:	fa42 f303 	asr.w	r3, r2, r3
 80163a4:	f003 0301 	and.w	r3, r3, #1
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d07e      	beq.n	80164aa <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	689a      	ldr	r2, [r3, #8]
 80163b0:	7d79      	ldrb	r1, [r7, #21]
 80163b2:	7cfb      	ldrb	r3, [r7, #19]
 80163b4:	440b      	add	r3, r1
 80163b6:	4619      	mov	r1, r3
 80163b8:	460b      	mov	r3, r1
 80163ba:	005b      	lsls	r3, r3, #1
 80163bc:	440b      	add	r3, r1
 80163be:	009b      	lsls	r3, r3, #2
 80163c0:	4413      	add	r3, r2
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d06b      	beq.n	80164a0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	f083 0301 	eor.w	r3, r3, #1
 80163d0:	b2db      	uxtb	r3, r3
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d011      	beq.n	80163fa <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d00d      	beq.n	80163fa <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	695a      	ldr	r2, [r3, #20]
 80163e2:	7d3b      	ldrb	r3, [r7, #20]
 80163e4:	005b      	lsls	r3, r3, #1
 80163e6:	4413      	add	r3, r2
 80163e8:	881b      	ldrh	r3, [r3, #0]
 80163ea:	461a      	mov	r2, r3
 80163ec:	7cfb      	ldrb	r3, [r7, #19]
 80163ee:	fa42 f303 	asr.w	r3, r2, r3
 80163f2:	f003 0301 	and.w	r3, r3, #1
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d054      	beq.n	80164a4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	785b      	ldrb	r3, [r3, #1]
 80163fe:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	689a      	ldr	r2, [r3, #8]
 8016404:	7d79      	ldrb	r1, [r7, #21]
 8016406:	7cfb      	ldrb	r3, [r7, #19]
 8016408:	440b      	add	r3, r1
 801640a:	4619      	mov	r1, r3
 801640c:	460b      	mov	r3, r1
 801640e:	005b      	lsls	r3, r3, #1
 8016410:	440b      	add	r3, r1
 8016412:	009b      	lsls	r3, r3, #2
 8016414:	4413      	add	r3, r2
 8016416:	7a1b      	ldrb	r3, [r3, #8]
 8016418:	f343 0303 	sbfx	r3, r3, #0, #4
 801641c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801641e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	689a      	ldr	r2, [r3, #8]
 8016424:	7d79      	ldrb	r1, [r7, #21]
 8016426:	7cfb      	ldrb	r3, [r7, #19]
 8016428:	440b      	add	r3, r1
 801642a:	4619      	mov	r1, r3
 801642c:	460b      	mov	r3, r1
 801642e:	005b      	lsls	r3, r3, #1
 8016430:	440b      	add	r3, r1
 8016432:	009b      	lsls	r3, r3, #2
 8016434:	4413      	add	r3, r2
 8016436:	7a1b      	ldrb	r3, [r3, #8]
 8016438:	f343 1303 	sbfx	r3, r3, #4, #4
 801643c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801643e:	461a      	mov	r2, r3
 8016440:	4621      	mov	r1, r4
 8016442:	f7ff fbf8 	bl	8015c36 <RegionCommonValueInRange>
 8016446:	4603      	mov	r3, r0
 8016448:	2b00      	cmp	r3, #0
 801644a:	d02d      	beq.n	80164a8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	68da      	ldr	r2, [r3, #12]
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	6899      	ldr	r1, [r3, #8]
 8016454:	7d78      	ldrb	r0, [r7, #21]
 8016456:	7cfb      	ldrb	r3, [r7, #19]
 8016458:	4403      	add	r3, r0
 801645a:	4618      	mov	r0, r3
 801645c:	4603      	mov	r3, r0
 801645e:	005b      	lsls	r3, r3, #1
 8016460:	4403      	add	r3, r0
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	440b      	add	r3, r1
 8016466:	7a5b      	ldrb	r3, [r3, #9]
 8016468:	4619      	mov	r1, r3
 801646a:	460b      	mov	r3, r1
 801646c:	005b      	lsls	r3, r3, #1
 801646e:	440b      	add	r3, r1
 8016470:	00db      	lsls	r3, r3, #3
 8016472:	4413      	add	r3, r2
 8016474:	7d1b      	ldrb	r3, [r3, #20]
 8016476:	f083 0301 	eor.w	r3, r3, #1
 801647a:	b2db      	uxtb	r3, r3
 801647c:	2b00      	cmp	r3, #0
 801647e:	d003      	beq.n	8016488 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016480:	7dbb      	ldrb	r3, [r7, #22]
 8016482:	3301      	adds	r3, #1
 8016484:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016486:	e010      	b.n	80164aa <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016488:	7dfb      	ldrb	r3, [r7, #23]
 801648a:	1c5a      	adds	r2, r3, #1
 801648c:	75fa      	strb	r2, [r7, #23]
 801648e:	461a      	mov	r2, r3
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	4413      	add	r3, r2
 8016494:	7d79      	ldrb	r1, [r7, #21]
 8016496:	7cfa      	ldrb	r2, [r7, #19]
 8016498:	440a      	add	r2, r1
 801649a:	b2d2      	uxtb	r2, r2
 801649c:	701a      	strb	r2, [r3, #0]
 801649e:	e004      	b.n	80164aa <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80164a0:	bf00      	nop
 80164a2:	e002      	b.n	80164aa <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80164a4:	bf00      	nop
 80164a6:	e000      	b.n	80164aa <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80164a8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80164aa:	7cfb      	ldrb	r3, [r7, #19]
 80164ac:	3301      	adds	r3, #1
 80164ae:	74fb      	strb	r3, [r7, #19]
 80164b0:	7cfb      	ldrb	r3, [r7, #19]
 80164b2:	2b0f      	cmp	r3, #15
 80164b4:	f67f af6c 	bls.w	8016390 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80164b8:	7d7b      	ldrb	r3, [r7, #21]
 80164ba:	3310      	adds	r3, #16
 80164bc:	757b      	strb	r3, [r7, #21]
 80164be:	7d3b      	ldrb	r3, [r7, #20]
 80164c0:	3301      	adds	r3, #1
 80164c2:	753b      	strb	r3, [r7, #20]
 80164c4:	7d7b      	ldrb	r3, [r7, #21]
 80164c6:	b29a      	uxth	r2, r3
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	8a1b      	ldrh	r3, [r3, #16]
 80164cc:	429a      	cmp	r2, r3
 80164ce:	f4ff af5c 	bcc.w	801638a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	7dfa      	ldrb	r2, [r7, #23]
 80164d6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	7dba      	ldrb	r2, [r7, #22]
 80164dc:	701a      	strb	r2, [r3, #0]
}
 80164de:	bf00      	nop
 80164e0:	371c      	adds	r7, #28
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd90      	pop	{r4, r7, pc}

080164e6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80164e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164e8:	b08b      	sub	sp, #44	; 0x2c
 80164ea:	af04      	add	r7, sp, #16
 80164ec:	60f8      	str	r0, [r7, #12]
 80164ee:	60b9      	str	r1, [r7, #8]
 80164f0:	607a      	str	r2, [r7, #4]
 80164f2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	685b      	ldr	r3, [r3, #4]
 80164f8:	4618      	mov	r0, r3
 80164fa:	f006 fee3 	bl	801d2c4 <UTIL_TIMER_GetElapsedTime>
 80164fe:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	697b      	ldr	r3, [r7, #20]
 8016506:	1ad2      	subs	r2, r2, r3
 8016508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801650a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801650e:	2201      	movs	r2, #1
 8016510:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	2200      	movs	r2, #0
 8016516:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d004      	beq.n	801652a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016524:	697a      	ldr	r2, [r7, #20]
 8016526:	429a      	cmp	r2, r3
 8016528:	d32b      	bcc.n	8016582 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801652a:	68bb      	ldr	r3, [r7, #8]
 801652c:	2200      	movs	r2, #0
 801652e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	69db      	ldr	r3, [r3, #28]
 8016534:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801653a:	68dd      	ldr	r5, [r3, #12]
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	7a5e      	ldrb	r6, [r3, #9]
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	7d1b      	ldrb	r3, [r3, #20]
 801654a:	68fa      	ldr	r2, [r7, #12]
 801654c:	6992      	ldr	r2, [r2, #24]
 801654e:	9203      	str	r2, [sp, #12]
 8016550:	68fa      	ldr	r2, [r7, #12]
 8016552:	f10d 0e04 	add.w	lr, sp, #4
 8016556:	320c      	adds	r2, #12
 8016558:	e892 0003 	ldmia.w	r2, {r0, r1}
 801655c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016560:	9300      	str	r3, [sp, #0]
 8016562:	4663      	mov	r3, ip
 8016564:	4632      	mov	r2, r6
 8016566:	4629      	mov	r1, r5
 8016568:	4620      	mov	r0, r4
 801656a:	f7ff fc35 	bl	8015dd8 <RegionCommonUpdateBandTimeOff>
 801656e:	4602      	mov	r2, r0
 8016570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016572:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	69d8      	ldr	r0, [r3, #28]
 8016578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801657a:	683a      	ldr	r2, [r7, #0]
 801657c:	6879      	ldr	r1, [r7, #4]
 801657e:	f7ff fef4 	bl	801636a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d004      	beq.n	8016594 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801658c:	2200      	movs	r2, #0
 801658e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016590:	2300      	movs	r3, #0
 8016592:	e006      	b.n	80165a2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016596:	781b      	ldrb	r3, [r3, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801659c:	230b      	movs	r3, #11
 801659e:	e000      	b.n	80165a2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80165a0:	230c      	movs	r3, #12
    }
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	371c      	adds	r7, #28
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165aa <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80165aa:	b5b0      	push	{r4, r5, r7, lr}
 80165ac:	b086      	sub	sp, #24
 80165ae:	af02      	add	r7, sp, #8
 80165b0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	781b      	ldrb	r3, [r3, #0]
 80165b6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f993 2000 	ldrsb.w	r2, [r3]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d103      	bne.n	80165d0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80165ce:	e026      	b.n	801661e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80165d0:	7bfb      	ldrb	r3, [r7, #15]
 80165d2:	3b01      	subs	r3, #1
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80165de:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d019      	beq.n	801661a <RegionCommonGetNextLowerTxDr+0x70>
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	78d8      	ldrb	r0, [r3, #3]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	6859      	ldr	r1, [r3, #4]
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80165fa:	687a      	ldr	r2, [r7, #4]
 80165fc:	6892      	ldr	r2, [r2, #8]
 80165fe:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016602:	9201      	str	r2, [sp, #4]
 8016604:	9300      	str	r3, [sp, #0]
 8016606:	462b      	mov	r3, r5
 8016608:	4622      	mov	r2, r4
 801660a:	f7ff faa2 	bl	8015b52 <RegionCommonChanVerifyDr>
 801660e:	4603      	mov	r3, r0
 8016610:	f083 0301 	eor.w	r3, r3, #1
 8016614:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1da      	bne.n	80165d0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801661a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801661e:	4618      	mov	r0, r3
 8016620:	3710      	adds	r7, #16
 8016622:	46bd      	mov	sp, r7
 8016624:	bdb0      	pop	{r4, r5, r7, pc}

08016626 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016626:	b480      	push	{r7}
 8016628:	b083      	sub	sp, #12
 801662a:	af00      	add	r7, sp, #0
 801662c:	4603      	mov	r3, r0
 801662e:	460a      	mov	r2, r1
 8016630:	71fb      	strb	r3, [r7, #7]
 8016632:	4613      	mov	r3, r2
 8016634:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016636:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801663a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801663e:	4293      	cmp	r3, r2
 8016640:	bfb8      	it	lt
 8016642:	4613      	movlt	r3, r2
 8016644:	b25b      	sxtb	r3, r3
}
 8016646:	4618      	mov	r0, r3
 8016648:	370c      	adds	r7, #12
 801664a:	46bd      	mov	sp, r7
 801664c:	bc80      	pop	{r7}
 801664e:	4770      	bx	lr

08016650 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016650:	b480      	push	{r7}
 8016652:	b083      	sub	sp, #12
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
 8016658:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	009b      	lsls	r3, r3, #2
 801665e:	683a      	ldr	r2, [r7, #0]
 8016660:	4413      	add	r3, r2
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	4a07      	ldr	r2, [pc, #28]	; (8016684 <RegionCommonGetBandwidth+0x34>)
 8016666:	4293      	cmp	r3, r2
 8016668:	d004      	beq.n	8016674 <RegionCommonGetBandwidth+0x24>
 801666a:	4a07      	ldr	r2, [pc, #28]	; (8016688 <RegionCommonGetBandwidth+0x38>)
 801666c:	4293      	cmp	r3, r2
 801666e:	d003      	beq.n	8016678 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016670:	2300      	movs	r3, #0
 8016672:	e002      	b.n	801667a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016674:	2301      	movs	r3, #1
 8016676:	e000      	b.n	801667a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016678:	2302      	movs	r3, #2
    }
}
 801667a:	4618      	mov	r0, r3
 801667c:	370c      	adds	r7, #12
 801667e:	46bd      	mov	sp, r7
 8016680:	bc80      	pop	{r7}
 8016682:	4770      	bx	lr
 8016684:	0003d090 	.word	0x0003d090
 8016688:	0007a120 	.word	0x0007a120

0801668c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801668c:	b5b0      	push	{r4, r5, r7, lr}
 801668e:	b08c      	sub	sp, #48	; 0x30
 8016690:	af04      	add	r7, sp, #16
 8016692:	4603      	mov	r3, r0
 8016694:	6039      	str	r1, [r7, #0]
 8016696:	71fb      	strb	r3, [r7, #7]
 8016698:	4613      	mov	r3, r2
 801669a:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 801669c:	4b17      	ldr	r3, [pc, #92]	; (80166fc <RegionCommonRxConfigPrint+0x70>)
 801669e:	f107 0408 	add.w	r4, r7, #8
 80166a2:	461d      	mov	r5, r3
 80166a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80166a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80166a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80166ac:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 80166b0:	79fb      	ldrb	r3, [r7, #7]
 80166b2:	2b05      	cmp	r3, #5
 80166b4:	d812      	bhi.n	80166dc <RegionCommonRxConfigPrint+0x50>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 80166b6:	79fb      	ldrb	r3, [r7, #7]
 80166b8:	009b      	lsls	r3, r3, #2
 80166ba:	3320      	adds	r3, #32
 80166bc:	443b      	add	r3, r7
 80166be:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80166c2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80166c6:	9202      	str	r2, [sp, #8]
 80166c8:	683a      	ldr	r2, [r7, #0]
 80166ca:	9201      	str	r2, [sp, #4]
 80166cc:	9300      	str	r3, [sp, #0]
 80166ce:	4b0c      	ldr	r3, [pc, #48]	; (8016700 <RegionCommonRxConfigPrint+0x74>)
 80166d0:	2201      	movs	r2, #1
 80166d2:	2100      	movs	r1, #0
 80166d4:	2002      	movs	r0, #2
 80166d6:	f005 fe1f 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80166da:	e00a      	b.n	80166f2 <RegionCommonRxConfigPrint+0x66>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80166dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80166e0:	9301      	str	r3, [sp, #4]
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	9300      	str	r3, [sp, #0]
 80166e6:	4b07      	ldr	r3, [pc, #28]	; (8016704 <RegionCommonRxConfigPrint+0x78>)
 80166e8:	2201      	movs	r2, #1
 80166ea:	2100      	movs	r1, #0
 80166ec:	2002      	movs	r0, #2
 80166ee:	f005 fe13 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 80166f2:	bf00      	nop
 80166f4:	3720      	adds	r7, #32
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bdb0      	pop	{r4, r5, r7, pc}
 80166fa:	bf00      	nop
 80166fc:	0801e114 	.word	0x0801e114
 8016700:	0801e0d8 	.word	0x0801e0d8
 8016704:	0801e0f8 	.word	0x0801e0f8

08016708 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af02      	add	r7, sp, #8
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	460b      	mov	r3, r1
 8016712:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016718:	9301      	str	r3, [sp, #4]
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	4b05      	ldr	r3, [pc, #20]	; (8016734 <RegionCommonTxConfigPrint+0x2c>)
 8016720:	2201      	movs	r2, #1
 8016722:	2100      	movs	r1, #0
 8016724:	2002      	movs	r0, #2
 8016726:	f005 fdf7 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
}
 801672a:	bf00      	nop
 801672c:	3708      	adds	r7, #8
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	0801e12c 	.word	0x0801e12c

08016738 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016742:	4b2d      	ldr	r3, [pc, #180]	; (80167f8 <VerifyRfFreq+0xc0>)
 8016744:	6a1b      	ldr	r3, [r3, #32]
 8016746:	6878      	ldr	r0, [r7, #4]
 8016748:	4798      	blx	r3
 801674a:	4603      	mov	r3, r0
 801674c:	f083 0301 	eor.w	r3, r3, #1
 8016750:	b2db      	uxtb	r3, r3
 8016752:	2b00      	cmp	r3, #0
 8016754:	d001      	beq.n	801675a <VerifyRfFreq+0x22>
    {
        return false;
 8016756:	2300      	movs	r3, #0
 8016758:	e04a      	b.n	80167f0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	4a27      	ldr	r2, [pc, #156]	; (80167fc <VerifyRfFreq+0xc4>)
 801675e:	4293      	cmp	r3, r2
 8016760:	d307      	bcc.n	8016772 <VerifyRfFreq+0x3a>
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	4a26      	ldr	r2, [pc, #152]	; (8016800 <VerifyRfFreq+0xc8>)
 8016766:	4293      	cmp	r3, r2
 8016768:	d803      	bhi.n	8016772 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	2202      	movs	r2, #2
 801676e:	701a      	strb	r2, [r3, #0]
 8016770:	e03d      	b.n	80167ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	4a22      	ldr	r2, [pc, #136]	; (8016800 <VerifyRfFreq+0xc8>)
 8016776:	4293      	cmp	r3, r2
 8016778:	d907      	bls.n	801678a <VerifyRfFreq+0x52>
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	4a21      	ldr	r2, [pc, #132]	; (8016804 <VerifyRfFreq+0xcc>)
 801677e:	4293      	cmp	r3, r2
 8016780:	d803      	bhi.n	801678a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	2200      	movs	r2, #0
 8016786:	701a      	strb	r2, [r3, #0]
 8016788:	e031      	b.n	80167ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	4a1d      	ldr	r2, [pc, #116]	; (8016804 <VerifyRfFreq+0xcc>)
 801678e:	4293      	cmp	r3, r2
 8016790:	d907      	bls.n	80167a2 <VerifyRfFreq+0x6a>
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	4a1c      	ldr	r2, [pc, #112]	; (8016808 <VerifyRfFreq+0xd0>)
 8016796:	4293      	cmp	r3, r2
 8016798:	d803      	bhi.n	80167a2 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	2201      	movs	r2, #1
 801679e:	701a      	strb	r2, [r3, #0]
 80167a0:	e025      	b.n	80167ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	4a19      	ldr	r2, [pc, #100]	; (801680c <VerifyRfFreq+0xd4>)
 80167a6:	4293      	cmp	r3, r2
 80167a8:	d907      	bls.n	80167ba <VerifyRfFreq+0x82>
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	4a18      	ldr	r2, [pc, #96]	; (8016810 <VerifyRfFreq+0xd8>)
 80167ae:	4293      	cmp	r3, r2
 80167b0:	d803      	bhi.n	80167ba <VerifyRfFreq+0x82>
    {
        *band = 5;
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	2205      	movs	r2, #5
 80167b6:	701a      	strb	r2, [r3, #0]
 80167b8:	e019      	b.n	80167ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	4a15      	ldr	r2, [pc, #84]	; (8016814 <VerifyRfFreq+0xdc>)
 80167be:	4293      	cmp	r3, r2
 80167c0:	d907      	bls.n	80167d2 <VerifyRfFreq+0x9a>
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	4a14      	ldr	r2, [pc, #80]	; (8016818 <VerifyRfFreq+0xe0>)
 80167c6:	4293      	cmp	r3, r2
 80167c8:	d803      	bhi.n	80167d2 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	2203      	movs	r2, #3
 80167ce:	701a      	strb	r2, [r3, #0]
 80167d0:	e00d      	b.n	80167ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	4a11      	ldr	r2, [pc, #68]	; (801681c <VerifyRfFreq+0xe4>)
 80167d6:	4293      	cmp	r3, r2
 80167d8:	d307      	bcc.n	80167ea <VerifyRfFreq+0xb2>
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	4a10      	ldr	r2, [pc, #64]	; (8016820 <VerifyRfFreq+0xe8>)
 80167de:	4293      	cmp	r3, r2
 80167e0:	d803      	bhi.n	80167ea <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	2204      	movs	r2, #4
 80167e6:	701a      	strb	r2, [r3, #0]
 80167e8:	e001      	b.n	80167ee <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80167ea:	2300      	movs	r3, #0
 80167ec:	e000      	b.n	80167f0 <VerifyRfFreq+0xb8>
    }
    return true;
 80167ee:	2301      	movs	r3, #1
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	0801e73c 	.word	0x0801e73c
 80167fc:	337055c0 	.word	0x337055c0
 8016800:	338eda3f 	.word	0x338eda3f
 8016804:	33bca100 	.word	0x33bca100
 8016808:	33c5c8c0 	.word	0x33c5c8c0
 801680c:	33c74f5f 	.word	0x33c74f5f
 8016810:	33cef080 	.word	0x33cef080
 8016814:	33d1fdbf 	.word	0x33d1fdbf
 8016818:	33d5ce50 	.word	0x33d5ce50
 801681c:	33d691a0 	.word	0x33d691a0
 8016820:	33db2580 	.word	0x33db2580

08016824 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016824:	b590      	push	{r4, r7, lr}
 8016826:	b08b      	sub	sp, #44	; 0x2c
 8016828:	af04      	add	r7, sp, #16
 801682a:	4603      	mov	r3, r0
 801682c:	460a      	mov	r2, r1
 801682e:	71fb      	strb	r3, [r7, #7]
 8016830:	4613      	mov	r3, r2
 8016832:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8016834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016838:	4a1f      	ldr	r2, [pc, #124]	; (80168b8 <GetTimeOnAir+0x94>)
 801683a:	5cd3      	ldrb	r3, [r2, r3]
 801683c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801683e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016842:	491e      	ldr	r1, [pc, #120]	; (80168bc <GetTimeOnAir+0x98>)
 8016844:	4618      	mov	r0, r3
 8016846:	f7ff ff03 	bl	8016650 <RegionCommonGetBandwidth>
 801684a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801684c:	2300      	movs	r3, #0
 801684e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8016850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016854:	2b07      	cmp	r3, #7
 8016856:	d118      	bne.n	801688a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8016858:	4b19      	ldr	r3, [pc, #100]	; (80168c0 <GetTimeOnAir+0x9c>)
 801685a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801685c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016864:	fb02 f303 	mul.w	r3, r2, r3
 8016868:	4619      	mov	r1, r3
 801686a:	88bb      	ldrh	r3, [r7, #4]
 801686c:	b2db      	uxtb	r3, r3
 801686e:	2201      	movs	r2, #1
 8016870:	9203      	str	r2, [sp, #12]
 8016872:	9302      	str	r3, [sp, #8]
 8016874:	2300      	movs	r3, #0
 8016876:	9301      	str	r3, [sp, #4]
 8016878:	2305      	movs	r3, #5
 801687a:	9300      	str	r3, [sp, #0]
 801687c:	2300      	movs	r3, #0
 801687e:	460a      	mov	r2, r1
 8016880:	68f9      	ldr	r1, [r7, #12]
 8016882:	2000      	movs	r0, #0
 8016884:	47a0      	blx	r4
 8016886:	6178      	str	r0, [r7, #20]
 8016888:	e011      	b.n	80168ae <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801688a:	4b0d      	ldr	r3, [pc, #52]	; (80168c0 <GetTimeOnAir+0x9c>)
 801688c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801688e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016892:	88bb      	ldrh	r3, [r7, #4]
 8016894:	b2db      	uxtb	r3, r3
 8016896:	2101      	movs	r1, #1
 8016898:	9103      	str	r1, [sp, #12]
 801689a:	9302      	str	r3, [sp, #8]
 801689c:	2300      	movs	r3, #0
 801689e:	9301      	str	r3, [sp, #4]
 80168a0:	2308      	movs	r3, #8
 80168a2:	9300      	str	r3, [sp, #0]
 80168a4:	2301      	movs	r3, #1
 80168a6:	68f9      	ldr	r1, [r7, #12]
 80168a8:	2001      	movs	r0, #1
 80168aa:	47a0      	blx	r4
 80168ac:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80168ae:	697b      	ldr	r3, [r7, #20]
}
 80168b0:	4618      	mov	r0, r3
 80168b2:	371c      	adds	r7, #28
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd90      	pop	{r4, r7, pc}
 80168b8:	0801e680 	.word	0x0801e680
 80168bc:	0801e688 	.word	0x0801e688
 80168c0:	0801e73c 	.word	0x0801e73c

080168c4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b088      	sub	sp, #32
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80168cc:	2300      	movs	r3, #0
 80168ce:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	3b01      	subs	r3, #1
 80168d6:	2b38      	cmp	r3, #56	; 0x38
 80168d8:	f200 8128 	bhi.w	8016b2c <RegionEU868GetPhyParam+0x268>
 80168dc:	a201      	add	r2, pc, #4	; (adr r2, 80168e4 <RegionEU868GetPhyParam+0x20>)
 80168de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168e2:	bf00      	nop
 80168e4:	080169c9 	.word	0x080169c9
 80168e8:	080169cf 	.word	0x080169cf
 80168ec:	08016b2d 	.word	0x08016b2d
 80168f0:	08016b2d 	.word	0x08016b2d
 80168f4:	08016b2d 	.word	0x08016b2d
 80168f8:	080169d5 	.word	0x080169d5
 80168fc:	08016b2d 	.word	0x08016b2d
 8016900:	08016a0f 	.word	0x08016a0f
 8016904:	08016b2d 	.word	0x08016b2d
 8016908:	08016a15 	.word	0x08016a15
 801690c:	08016a1b 	.word	0x08016a1b
 8016910:	08016a21 	.word	0x08016a21
 8016914:	08016a27 	.word	0x08016a27
 8016918:	08016a37 	.word	0x08016a37
 801691c:	08016a47 	.word	0x08016a47
 8016920:	08016a4d 	.word	0x08016a4d
 8016924:	08016a55 	.word	0x08016a55
 8016928:	08016a5d 	.word	0x08016a5d
 801692c:	08016a65 	.word	0x08016a65
 8016930:	08016a6d 	.word	0x08016a6d
 8016934:	08016a75 	.word	0x08016a75
 8016938:	08016a7d 	.word	0x08016a7d
 801693c:	08016a91 	.word	0x08016a91
 8016940:	08016a97 	.word	0x08016a97
 8016944:	08016a9d 	.word	0x08016a9d
 8016948:	08016aa3 	.word	0x08016aa3
 801694c:	08016aaf 	.word	0x08016aaf
 8016950:	08016abb 	.word	0x08016abb
 8016954:	08016ac1 	.word	0x08016ac1
 8016958:	08016ac9 	.word	0x08016ac9
 801695c:	08016acf 	.word	0x08016acf
 8016960:	08016ad5 	.word	0x08016ad5
 8016964:	08016add 	.word	0x08016add
 8016968:	080169db 	.word	0x080169db
 801696c:	08016b2d 	.word	0x08016b2d
 8016970:	08016b2d 	.word	0x08016b2d
 8016974:	08016b2d 	.word	0x08016b2d
 8016978:	08016b2d 	.word	0x08016b2d
 801697c:	08016b2d 	.word	0x08016b2d
 8016980:	08016b2d 	.word	0x08016b2d
 8016984:	08016b2d 	.word	0x08016b2d
 8016988:	08016b2d 	.word	0x08016b2d
 801698c:	08016b2d 	.word	0x08016b2d
 8016990:	08016b2d 	.word	0x08016b2d
 8016994:	08016b2d 	.word	0x08016b2d
 8016998:	08016b2d 	.word	0x08016b2d
 801699c:	08016b2d 	.word	0x08016b2d
 80169a0:	08016ae3 	.word	0x08016ae3
 80169a4:	08016ae9 	.word	0x08016ae9
 80169a8:	08016af7 	.word	0x08016af7
 80169ac:	08016b2d 	.word	0x08016b2d
 80169b0:	08016b2d 	.word	0x08016b2d
 80169b4:	08016afd 	.word	0x08016afd
 80169b8:	08016b03 	.word	0x08016b03
 80169bc:	08016b2d 	.word	0x08016b2d
 80169c0:	08016b09 	.word	0x08016b09
 80169c4:	08016b19 	.word	0x08016b19
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80169c8:	2300      	movs	r3, #0
 80169ca:	61bb      	str	r3, [r7, #24]
            break;
 80169cc:	e0af      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80169ce:	2300      	movs	r3, #0
 80169d0:	61bb      	str	r3, [r7, #24]
            break;
 80169d2:	e0ac      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80169d4:	2300      	movs	r3, #0
 80169d6:	61bb      	str	r3, [r7, #24]
            break;
 80169d8:	e0a9      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80169e0:	733b      	strb	r3, [r7, #12]
 80169e2:	2307      	movs	r3, #7
 80169e4:	737b      	strb	r3, [r7, #13]
 80169e6:	2300      	movs	r3, #0
 80169e8:	73bb      	strb	r3, [r7, #14]
 80169ea:	2310      	movs	r3, #16
 80169ec:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80169ee:	4b53      	ldr	r3, [pc, #332]	; (8016b3c <RegionEU868GetPhyParam+0x278>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80169f6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80169f8:	4b50      	ldr	r3, [pc, #320]	; (8016b3c <RegionEU868GetPhyParam+0x278>)
 80169fa:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80169fc:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80169fe:	f107 030c 	add.w	r3, r7, #12
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7ff fdd1 	bl	80165aa <RegionCommonGetNextLowerTxDr>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	61bb      	str	r3, [r7, #24]
            break;
 8016a0c:	e08f      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	61bb      	str	r3, [r7, #24]
            break;
 8016a12:	e08c      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016a14:	2300      	movs	r3, #0
 8016a16:	61bb      	str	r3, [r7, #24]
            break;
 8016a18:	e089      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016a1a:	2340      	movs	r3, #64	; 0x40
 8016a1c:	61bb      	str	r3, [r7, #24]
            break;
 8016a1e:	e086      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016a20:	2320      	movs	r3, #32
 8016a22:	61bb      	str	r3, [r7, #24]
            break;
 8016a24:	e083      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a2c:	461a      	mov	r2, r3
 8016a2e:	4b44      	ldr	r3, [pc, #272]	; (8016b40 <RegionEU868GetPhyParam+0x27c>)
 8016a30:	5c9b      	ldrb	r3, [r3, r2]
 8016a32:	61bb      	str	r3, [r7, #24]
            break;
 8016a34:	e07b      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a3c:	461a      	mov	r2, r3
 8016a3e:	4b41      	ldr	r3, [pc, #260]	; (8016b44 <RegionEU868GetPhyParam+0x280>)
 8016a40:	5c9b      	ldrb	r3, [r3, r2]
 8016a42:	61bb      	str	r3, [r7, #24]
            break;
 8016a44:	e073      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8016a46:	2301      	movs	r3, #1
 8016a48:	61bb      	str	r3, [r7, #24]
            break;
 8016a4a:	e070      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8016a4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016a50:	61bb      	str	r3, [r7, #24]
            break;
 8016a52:	e06c      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016a58:	61bb      	str	r3, [r7, #24]
            break;
 8016a5a:	e068      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016a5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016a60:	61bb      	str	r3, [r7, #24]
            break;
 8016a62:	e064      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016a64:	f241 3388 	movw	r3, #5000	; 0x1388
 8016a68:	61bb      	str	r3, [r7, #24]
            break;
 8016a6a:	e060      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016a6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8016a70:	61bb      	str	r3, [r7, #24]
            break;
 8016a72:	e05c      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8016a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016a78:	61bb      	str	r3, [r7, #24]
            break;
 8016a7a:	e058      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8016a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016a80:	4831      	ldr	r0, [pc, #196]	; (8016b48 <RegionEU868GetPhyParam+0x284>)
 8016a82:	f002 fadf 	bl	8019044 <randr>
 8016a86:	4603      	mov	r3, r0
 8016a88:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016a8c:	61bb      	str	r3, [r7, #24]
            break;
 8016a8e:	e04e      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016a90:	2300      	movs	r3, #0
 8016a92:	61bb      	str	r3, [r7, #24]
            break;
 8016a94:	e04b      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016a96:	4b2d      	ldr	r3, [pc, #180]	; (8016b4c <RegionEU868GetPhyParam+0x288>)
 8016a98:	61bb      	str	r3, [r7, #24]
            break;
 8016a9a:	e048      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	61bb      	str	r3, [r7, #24]
            break;
 8016aa0:	e045      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016aa2:	4b26      	ldr	r3, [pc, #152]	; (8016b3c <RegionEU868GetPhyParam+0x278>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016aaa:	61bb      	str	r3, [r7, #24]
            break;
 8016aac:	e03f      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016aae:	4b23      	ldr	r3, [pc, #140]	; (8016b3c <RegionEU868GetPhyParam+0x278>)
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016ab6:	61bb      	str	r3, [r7, #24]
            break;
 8016ab8:	e039      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016aba:	2310      	movs	r3, #16
 8016abc:	61bb      	str	r3, [r7, #24]
            break;
 8016abe:	e036      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016ac0:	4b1e      	ldr	r3, [pc, #120]	; (8016b3c <RegionEU868GetPhyParam+0x278>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	61bb      	str	r3, [r7, #24]
            break;
 8016ac6:	e032      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	61bb      	str	r3, [r7, #24]
            break;
 8016acc:	e02f      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016ace:	2300      	movs	r3, #0
 8016ad0:	61bb      	str	r3, [r7, #24]
            break;
 8016ad2:	e02c      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016ad4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8016ad8:	61bb      	str	r3, [r7, #24]
            break;
 8016ada:	e028      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016adc:	4b1c      	ldr	r3, [pc, #112]	; (8016b50 <RegionEU868GetPhyParam+0x28c>)
 8016ade:	61bb      	str	r3, [r7, #24]
            break;
 8016ae0:	e025      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016ae2:	4b1a      	ldr	r3, [pc, #104]	; (8016b4c <RegionEU868GetPhyParam+0x288>)
 8016ae4:	61bb      	str	r3, [r7, #24]
            break;
 8016ae6:	e022      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016ae8:	2311      	movs	r3, #17
 8016aea:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016aec:	2302      	movs	r3, #2
 8016aee:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016af0:	2300      	movs	r3, #0
 8016af2:	76bb      	strb	r3, [r7, #26]
            break;
 8016af4:	e01b      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8016af6:	2303      	movs	r3, #3
 8016af8:	61bb      	str	r3, [r7, #24]
            break;
 8016afa:	e018      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016afc:	4b13      	ldr	r3, [pc, #76]	; (8016b4c <RegionEU868GetPhyParam+0x288>)
 8016afe:	61bb      	str	r3, [r7, #24]
            break;
 8016b00:	e015      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8016b02:	2303      	movs	r3, #3
 8016b04:	61bb      	str	r3, [r7, #24]
            break;
 8016b06:	e012      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b0e:	461a      	mov	r2, r3
 8016b10:	4b10      	ldr	r3, [pc, #64]	; (8016b54 <RegionEU868GetPhyParam+0x290>)
 8016b12:	5c9b      	ldrb	r3, [r3, r2]
 8016b14:	61bb      	str	r3, [r7, #24]
            break;
 8016b16:	e00a      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b1e:	490e      	ldr	r1, [pc, #56]	; (8016b58 <RegionEU868GetPhyParam+0x294>)
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7ff fd95 	bl	8016650 <RegionCommonGetBandwidth>
 8016b26:	4603      	mov	r3, r0
 8016b28:	61bb      	str	r3, [r7, #24]
            break;
 8016b2a:	e000      	b.n	8016b2e <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8016b2c:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016b2e:	69bb      	ldr	r3, [r7, #24]
 8016b30:	61fb      	str	r3, [r7, #28]
 8016b32:	69fb      	ldr	r3, [r7, #28]
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3720      	adds	r7, #32
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}
 8016b3c:	20003ce4 	.word	0x20003ce4
 8016b40:	0801e6a8 	.word	0x0801e6a8
 8016b44:	0801e6b0 	.word	0x0801e6b0
 8016b48:	fffffc18 	.word	0xfffffc18
 8016b4c:	33d3e608 	.word	0x33d3e608
 8016b50:	4009999a 	.word	0x4009999a
 8016b54:	0801e680 	.word	0x0801e680
 8016b58:	0801e688 	.word	0x0801e688

08016b5c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016b5c:	b590      	push	{r4, r7, lr}
 8016b5e:	b085      	sub	sp, #20
 8016b60:	af02      	add	r7, sp, #8
 8016b62:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016b64:	4b11      	ldr	r3, [pc, #68]	; (8016bac <RegionEU868SetBandTxDone+0x50>)
 8016b66:	681a      	ldr	r2, [r3, #0]
 8016b68:	4b11      	ldr	r3, [pc, #68]	; (8016bb0 <RegionEU868SetBandTxDone+0x54>)
 8016b6a:	6819      	ldr	r1, [r3, #0]
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	781b      	ldrb	r3, [r3, #0]
 8016b70:	4618      	mov	r0, r3
 8016b72:	4603      	mov	r3, r0
 8016b74:	005b      	lsls	r3, r3, #1
 8016b76:	4403      	add	r3, r0
 8016b78:	009b      	lsls	r3, r3, #2
 8016b7a:	440b      	add	r3, r1
 8016b7c:	3309      	adds	r3, #9
 8016b7e:	781b      	ldrb	r3, [r3, #0]
 8016b80:	4619      	mov	r1, r3
 8016b82:	460b      	mov	r3, r1
 8016b84:	005b      	lsls	r3, r3, #1
 8016b86:	440b      	add	r3, r1
 8016b88:	00db      	lsls	r3, r3, #3
 8016b8a:	18d0      	adds	r0, r2, r3
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	6899      	ldr	r1, [r3, #8]
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	785c      	ldrb	r4, [r3, #1]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	691a      	ldr	r2, [r3, #16]
 8016b98:	9200      	str	r2, [sp, #0]
 8016b9a:	68db      	ldr	r3, [r3, #12]
 8016b9c:	4622      	mov	r2, r4
 8016b9e:	f7ff f8ed 	bl	8015d7c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8016ba2:	bf00      	nop
 8016ba4:	370c      	adds	r7, #12
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd90      	pop	{r4, r7, pc}
 8016baa:	bf00      	nop
 8016bac:	20003ce0 	.word	0x20003ce0
 8016bb0:	20003ce4 	.word	0x20003ce4

08016bb4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b0b0      	sub	sp, #192	; 0xc0
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016bbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016bc0:	2290      	movs	r2, #144	; 0x90
 8016bc2:	2100      	movs	r1, #0
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f006 febb 	bl	801d940 <memset>
 8016bca:	2364      	movs	r3, #100	; 0x64
 8016bcc:	863b      	strh	r3, [r7, #48]	; 0x30
 8016bce:	2364      	movs	r3, #100	; 0x64
 8016bd0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016bd8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8016bdc:	230a      	movs	r3, #10
 8016bde:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016be2:	2364      	movs	r3, #100	; 0x64
 8016be4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8016be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016bec:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	7a1b      	ldrb	r3, [r3, #8]
 8016bf4:	2b02      	cmp	r3, #2
 8016bf6:	d05e      	beq.n	8016cb6 <RegionEU868InitDefaults+0x102>
 8016bf8:	2b02      	cmp	r3, #2
 8016bfa:	dc6b      	bgt.n	8016cd4 <RegionEU868InitDefaults+0x120>
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d002      	beq.n	8016c06 <RegionEU868InitDefaults+0x52>
 8016c00:	2b01      	cmp	r3, #1
 8016c02:	d03f      	beq.n	8016c84 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016c04:	e066      	b.n	8016cd4 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d063      	beq.n	8016cd6 <RegionEU868InitDefaults+0x122>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	685b      	ldr	r3, [r3, #4]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d05f      	beq.n	8016cd6 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	4a30      	ldr	r2, [pc, #192]	; (8016cdc <RegionEU868InitDefaults+0x128>)
 8016c1c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	685b      	ldr	r3, [r3, #4]
 8016c22:	4a2f      	ldr	r2, [pc, #188]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c24:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016c26:	4b2d      	ldr	r3, [pc, #180]	; (8016cdc <RegionEU868InitDefaults+0x128>)
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c30:	2290      	movs	r2, #144	; 0x90
 8016c32:	4619      	mov	r1, r3
 8016c34:	f002 fa1d 	bl	8019072 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016c38:	4b29      	ldr	r3, [pc, #164]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	4a29      	ldr	r2, [pc, #164]	; (8016ce4 <RegionEU868InitDefaults+0x130>)
 8016c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016c44:	4b26      	ldr	r3, [pc, #152]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	4a27      	ldr	r2, [pc, #156]	; (8016ce8 <RegionEU868InitDefaults+0x134>)
 8016c4a:	330c      	adds	r3, #12
 8016c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016c52:	4b23      	ldr	r3, [pc, #140]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	4a25      	ldr	r2, [pc, #148]	; (8016cec <RegionEU868InitDefaults+0x138>)
 8016c58:	3318      	adds	r3, #24
 8016c5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016c60:	4b1f      	ldr	r3, [pc, #124]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	2207      	movs	r2, #7
 8016c66:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016c6a:	4b1d      	ldr	r3, [pc, #116]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016c72:	4b1b      	ldr	r3, [pc, #108]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016c7a:	2201      	movs	r2, #1
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	f7ff f857 	bl	8015d30 <RegionCommonChanMaskCopy>
 8016c82:	e028      	b.n	8016cd6 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016c84:	4b16      	ldr	r3, [pc, #88]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	2200      	movs	r2, #0
 8016c8a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016c8c:	4b14      	ldr	r3, [pc, #80]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	2200      	movs	r2, #0
 8016c92:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016c94:	4b12      	ldr	r3, [pc, #72]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016c9c:	4b10      	ldr	r3, [pc, #64]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016ca4:	4b0e      	ldr	r3, [pc, #56]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016cac:	2201      	movs	r2, #1
 8016cae:	4619      	mov	r1, r3
 8016cb0:	f7ff f83e 	bl	8015d30 <RegionCommonChanMaskCopy>
            break;
 8016cb4:	e00f      	b.n	8016cd6 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016cb6:	4b0a      	ldr	r3, [pc, #40]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016cbe:	4b08      	ldr	r3, [pc, #32]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016cc6:	4b06      	ldr	r3, [pc, #24]	; (8016ce0 <RegionEU868InitDefaults+0x12c>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	430a      	orrs	r2, r1
 8016ccc:	b292      	uxth	r2, r2
 8016cce:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016cd2:	e000      	b.n	8016cd6 <RegionEU868InitDefaults+0x122>
            break;
 8016cd4:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016cd6:	37c0      	adds	r7, #192	; 0xc0
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	20003ce0 	.word	0x20003ce0
 8016ce0:	20003ce4 	.word	0x20003ce4
 8016ce4:	0801e148 	.word	0x0801e148
 8016ce8:	0801e154 	.word	0x0801e154
 8016cec:	0801e160 	.word	0x0801e160

08016cf0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b084      	sub	sp, #16
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016cfc:	78fb      	ldrb	r3, [r7, #3]
 8016cfe:	2b0f      	cmp	r3, #15
 8016d00:	d86c      	bhi.n	8016ddc <RegionEU868Verify+0xec>
 8016d02:	a201      	add	r2, pc, #4	; (adr r2, 8016d08 <RegionEU868Verify+0x18>)
 8016d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d08:	08016d49 	.word	0x08016d49
 8016d0c:	08016ddd 	.word	0x08016ddd
 8016d10:	08016ddd 	.word	0x08016ddd
 8016d14:	08016ddd 	.word	0x08016ddd
 8016d18:	08016ddd 	.word	0x08016ddd
 8016d1c:	08016d61 	.word	0x08016d61
 8016d20:	08016d7f 	.word	0x08016d7f
 8016d24:	08016d9d 	.word	0x08016d9d
 8016d28:	08016ddd 	.word	0x08016ddd
 8016d2c:	08016dbb 	.word	0x08016dbb
 8016d30:	08016dbb 	.word	0x08016dbb
 8016d34:	08016ddd 	.word	0x08016ddd
 8016d38:	08016ddd 	.word	0x08016ddd
 8016d3c:	08016ddd 	.word	0x08016ddd
 8016d40:	08016ddd 	.word	0x08016ddd
 8016d44:	08016dd9 	.word	0x08016dd9
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016d48:	2300      	movs	r3, #0
 8016d4a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	f107 020f 	add.w	r2, r7, #15
 8016d54:	4611      	mov	r1, r2
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7ff fcee 	bl	8016738 <VerifyRfFreq>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	e03e      	b.n	8016dde <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f993 3000 	ldrsb.w	r3, [r3]
 8016d66:	2207      	movs	r2, #7
 8016d68:	2100      	movs	r1, #0
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7fe ff63 	bl	8015c36 <RegionCommonValueInRange>
 8016d70:	4603      	mov	r3, r0
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	bf14      	ite	ne
 8016d76:	2301      	movne	r3, #1
 8016d78:	2300      	moveq	r3, #0
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	e02f      	b.n	8016dde <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f993 3000 	ldrsb.w	r3, [r3]
 8016d84:	2205      	movs	r2, #5
 8016d86:	2100      	movs	r1, #0
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f7fe ff54 	bl	8015c36 <RegionCommonValueInRange>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	bf14      	ite	ne
 8016d94:	2301      	movne	r3, #1
 8016d96:	2300      	moveq	r3, #0
 8016d98:	b2db      	uxtb	r3, r3
 8016d9a:	e020      	b.n	8016dde <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8016da2:	2207      	movs	r2, #7
 8016da4:	2100      	movs	r1, #0
 8016da6:	4618      	mov	r0, r3
 8016da8:	f7fe ff45 	bl	8015c36 <RegionCommonValueInRange>
 8016dac:	4603      	mov	r3, r0
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	bf14      	ite	ne
 8016db2:	2301      	movne	r3, #1
 8016db4:	2300      	moveq	r3, #0
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	e011      	b.n	8016dde <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8016dc0:	2207      	movs	r2, #7
 8016dc2:	2100      	movs	r1, #0
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7fe ff36 	bl	8015c36 <RegionCommonValueInRange>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	bf14      	ite	ne
 8016dd0:	2301      	movne	r3, #1
 8016dd2:	2300      	moveq	r3, #0
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	e002      	b.n	8016dde <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016dd8:	2301      	movs	r3, #1
 8016dda:	e000      	b.n	8016dde <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016ddc:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3710      	adds	r7, #16
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
 8016de6:	bf00      	nop

08016de8 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b08a      	sub	sp, #40	; 0x28
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016df0:	2350      	movs	r3, #80	; 0x50
 8016df2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	791b      	ldrb	r3, [r3, #4]
 8016dfa:	2b10      	cmp	r3, #16
 8016dfc:	d162      	bne.n	8016ec4 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	330f      	adds	r3, #15
 8016e04:	781b      	ldrb	r3, [r3, #0]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d15e      	bne.n	8016ec8 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e10:	2303      	movs	r3, #3
 8016e12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016e16:	e050      	b.n	8016eba <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e1c:	2b07      	cmp	r3, #7
 8016e1e:	d824      	bhi.n	8016e6a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681a      	ldr	r2, [r3, #0]
 8016e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e28:	4413      	add	r3, r2
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016e2e:	69ba      	ldr	r2, [r7, #24]
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6819      	ldr	r1, [r3, #0]
 8016e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e38:	3301      	adds	r3, #1
 8016e3a:	440b      	add	r3, r1
 8016e3c:	781b      	ldrb	r3, [r3, #0]
 8016e3e:	021b      	lsls	r3, r3, #8
 8016e40:	4313      	orrs	r3, r2
 8016e42:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016e44:	69ba      	ldr	r2, [r7, #24]
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	6819      	ldr	r1, [r3, #0]
 8016e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e4e:	3302      	adds	r3, #2
 8016e50:	440b      	add	r3, r1
 8016e52:	781b      	ldrb	r3, [r3, #0]
 8016e54:	041b      	lsls	r3, r3, #16
 8016e56:	4313      	orrs	r3, r2
 8016e58:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016e5a:	69bb      	ldr	r3, [r7, #24]
 8016e5c:	2264      	movs	r2, #100	; 0x64
 8016e5e:	fb02 f303 	mul.w	r3, r2, r3
 8016e62:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016e64:	2300      	movs	r3, #0
 8016e66:	61fb      	str	r3, [r7, #28]
 8016e68:	e006      	b.n	8016e78 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016e6e:	2300      	movs	r3, #0
 8016e70:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016e74:	2300      	movs	r3, #0
 8016e76:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016e78:	69bb      	ldr	r3, [r7, #24]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d00b      	beq.n	8016e96 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016e7e:	f107 0318 	add.w	r3, r7, #24
 8016e82:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016e84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e88:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016e8a:	f107 0310 	add.w	r3, r7, #16
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f000 fd0e 	bl	80178b0 <RegionEU868ChannelAdd>
 8016e94:	e007      	b.n	8016ea6 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016e96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e9a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016e9c:	f107 030c 	add.w	r3, r7, #12
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f000 fda7 	bl	80179f4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016eaa:	3303      	adds	r3, #3
 8016eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016eb4:	3301      	adds	r3, #1
 8016eb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016eba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ebe:	2b0f      	cmp	r3, #15
 8016ec0:	d9aa      	bls.n	8016e18 <RegionEU868ApplyCFList+0x30>
 8016ec2:	e002      	b.n	8016eca <RegionEU868ApplyCFList+0xe2>
        return;
 8016ec4:	bf00      	nop
 8016ec6:	e000      	b.n	8016eca <RegionEU868ApplyCFList+0xe2>
        return;
 8016ec8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016eca:	3728      	adds	r7, #40	; 0x28
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	791b      	ldrb	r3, [r3, #4]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d002      	beq.n	8016ee6 <RegionEU868ChanMaskSet+0x16>
 8016ee0:	2b01      	cmp	r3, #1
 8016ee2:	d00b      	beq.n	8016efc <RegionEU868ChanMaskSet+0x2c>
 8016ee4:	e015      	b.n	8016f12 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016ee6:	4b0e      	ldr	r3, [pc, #56]	; (8016f20 <RegionEU868ChanMaskSet+0x50>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	2201      	movs	r2, #1
 8016ef4:	4619      	mov	r1, r3
 8016ef6:	f7fe ff1b 	bl	8015d30 <RegionCommonChanMaskCopy>
            break;
 8016efa:	e00c      	b.n	8016f16 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016efc:	4b08      	ldr	r3, [pc, #32]	; (8016f20 <RegionEU868ChanMaskSet+0x50>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	2201      	movs	r2, #1
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	f7fe ff10 	bl	8015d30 <RegionCommonChanMaskCopy>
            break;
 8016f10:	e001      	b.n	8016f16 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016f12:	2300      	movs	r3, #0
 8016f14:	e000      	b.n	8016f18 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016f16:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016f18:	4618      	mov	r0, r3
 8016f1a:	3708      	adds	r7, #8
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}
 8016f20:	20003ce4 	.word	0x20003ce4

08016f24 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b088      	sub	sp, #32
 8016f28:	af02      	add	r7, sp, #8
 8016f2a:	60ba      	str	r2, [r7, #8]
 8016f2c:	607b      	str	r3, [r7, #4]
 8016f2e:	4603      	mov	r3, r0
 8016f30:	73fb      	strb	r3, [r7, #15]
 8016f32:	460b      	mov	r3, r1
 8016f34:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016f36:	2300      	movs	r3, #0
 8016f38:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f3e:	2b07      	cmp	r3, #7
 8016f40:	bfa8      	it	ge
 8016f42:	2307      	movge	r3, #7
 8016f44:	b25a      	sxtb	r2, r3
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f50:	491e      	ldr	r1, [pc, #120]	; (8016fcc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7ff fb7c 	bl	8016650 <RegionCommonGetBandwidth>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	b2da      	uxtb	r2, r3
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f66:	2b07      	cmp	r3, #7
 8016f68:	d10a      	bne.n	8016f80 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f70:	461a      	mov	r2, r3
 8016f72:	4b17      	ldr	r3, [pc, #92]	; (8016fd0 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016f74:	5c9b      	ldrb	r3, [r3, r2]
 8016f76:	4618      	mov	r0, r3
 8016f78:	f7ff f8fe 	bl	8016178 <RegionCommonComputeSymbolTimeFsk>
 8016f7c:	6178      	str	r0, [r7, #20]
 8016f7e:	e011      	b.n	8016fa4 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f86:	461a      	mov	r2, r3
 8016f88:	4b11      	ldr	r3, [pc, #68]	; (8016fd0 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016f8a:	5c9a      	ldrb	r2, [r3, r2]
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f92:	4619      	mov	r1, r3
 8016f94:	4b0d      	ldr	r3, [pc, #52]	; (8016fcc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016f96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016f9a:	4619      	mov	r1, r3
 8016f9c:	4610      	mov	r0, r2
 8016f9e:	f7ff f8d5 	bl	801614c <RegionCommonComputeSymbolTimeLoRa>
 8016fa2:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016fa4:	4b0b      	ldr	r3, [pc, #44]	; (8016fd4 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fa8:	4798      	blx	r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	3308      	adds	r3, #8
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	320c      	adds	r2, #12
 8016fb2:	7bb9      	ldrb	r1, [r7, #14]
 8016fb4:	9201      	str	r2, [sp, #4]
 8016fb6:	9300      	str	r3, [sp, #0]
 8016fb8:	4603      	mov	r3, r0
 8016fba:	68ba      	ldr	r2, [r7, #8]
 8016fbc:	6978      	ldr	r0, [r7, #20]
 8016fbe:	f7ff f8eb 	bl	8016198 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016fc2:	bf00      	nop
 8016fc4:	3718      	adds	r7, #24
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	0801e688 	.word	0x0801e688
 8016fd0:	0801e680 	.word	0x0801e680
 8016fd4:	0801e73c 	.word	0x0801e73c

08016fd8 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016fd8:	b5b0      	push	{r4, r5, r7, lr}
 8016fda:	b090      	sub	sp, #64	; 0x40
 8016fdc:	af0a      	add	r7, sp, #40	; 0x28
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	785b      	ldrb	r3, [r3, #1]
 8016fe6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016fec:	2300      	movs	r3, #0
 8016fee:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	685b      	ldr	r3, [r3, #4]
 8016ff4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016ff6:	4b5a      	ldr	r3, [pc, #360]	; (8017160 <RegionEU868RxConfig+0x188>)
 8016ff8:	685b      	ldr	r3, [r3, #4]
 8016ffa:	4798      	blx	r3
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d001      	beq.n	8017006 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8017002:	2300      	movs	r3, #0
 8017004:	e0a8      	b.n	8017158 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	7cdb      	ldrb	r3, [r3, #19]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d126      	bne.n	801705c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801700e:	4b55      	ldr	r3, [pc, #340]	; (8017164 <RegionEU868RxConfig+0x18c>)
 8017010:	681a      	ldr	r2, [r3, #0]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	4619      	mov	r1, r3
 8017018:	460b      	mov	r3, r1
 801701a:	005b      	lsls	r3, r3, #1
 801701c:	440b      	add	r3, r1
 801701e:	009b      	lsls	r3, r3, #2
 8017020:	4413      	add	r3, r2
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017026:	4b4f      	ldr	r3, [pc, #316]	; (8017164 <RegionEU868RxConfig+0x18c>)
 8017028:	681a      	ldr	r2, [r3, #0]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	4619      	mov	r1, r3
 8017030:	460b      	mov	r3, r1
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	440b      	add	r3, r1
 8017036:	009b      	lsls	r3, r3, #2
 8017038:	4413      	add	r3, r2
 801703a:	3304      	adds	r3, #4
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d00c      	beq.n	801705c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8017042:	4b48      	ldr	r3, [pc, #288]	; (8017164 <RegionEU868RxConfig+0x18c>)
 8017044:	681a      	ldr	r2, [r3, #0]
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	781b      	ldrb	r3, [r3, #0]
 801704a:	4619      	mov	r1, r3
 801704c:	460b      	mov	r3, r1
 801704e:	005b      	lsls	r3, r3, #1
 8017050:	440b      	add	r3, r1
 8017052:	009b      	lsls	r3, r3, #2
 8017054:	4413      	add	r3, r2
 8017056:	3304      	adds	r3, #4
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801705c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017060:	4a41      	ldr	r2, [pc, #260]	; (8017168 <RegionEU868RxConfig+0x190>)
 8017062:	5cd3      	ldrb	r3, [r2, r3]
 8017064:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017066:	4b3e      	ldr	r3, [pc, #248]	; (8017160 <RegionEU868RxConfig+0x188>)
 8017068:	68db      	ldr	r3, [r3, #12]
 801706a:	6938      	ldr	r0, [r7, #16]
 801706c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801706e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017072:	2b07      	cmp	r3, #7
 8017074:	d128      	bne.n	80170c8 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8017076:	2300      	movs	r3, #0
 8017078:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801707a:	4b39      	ldr	r3, [pc, #228]	; (8017160 <RegionEU868RxConfig+0x188>)
 801707c:	699c      	ldr	r4, [r3, #24]
 801707e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017086:	fb02 f303 	mul.w	r3, r2, r3
 801708a:	4619      	mov	r1, r3
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	689b      	ldr	r3, [r3, #8]
 8017090:	b29b      	uxth	r3, r3
 8017092:	687a      	ldr	r2, [r7, #4]
 8017094:	7c92      	ldrb	r2, [r2, #18]
 8017096:	7df8      	ldrb	r0, [r7, #23]
 8017098:	9209      	str	r2, [sp, #36]	; 0x24
 801709a:	2200      	movs	r2, #0
 801709c:	9208      	str	r2, [sp, #32]
 801709e:	2200      	movs	r2, #0
 80170a0:	9207      	str	r2, [sp, #28]
 80170a2:	2200      	movs	r2, #0
 80170a4:	9206      	str	r2, [sp, #24]
 80170a6:	2201      	movs	r2, #1
 80170a8:	9205      	str	r2, [sp, #20]
 80170aa:	2200      	movs	r2, #0
 80170ac:	9204      	str	r2, [sp, #16]
 80170ae:	2200      	movs	r2, #0
 80170b0:	9203      	str	r2, [sp, #12]
 80170b2:	9302      	str	r3, [sp, #8]
 80170b4:	2305      	movs	r3, #5
 80170b6:	9301      	str	r3, [sp, #4]
 80170b8:	4b2c      	ldr	r3, [pc, #176]	; (801716c <RegionEU868RxConfig+0x194>)
 80170ba:	9300      	str	r3, [sp, #0]
 80170bc:	2300      	movs	r3, #0
 80170be:	460a      	mov	r2, r1
 80170c0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80170c4:	47a0      	blx	r4
 80170c6:	e024      	b.n	8017112 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80170c8:	2301      	movs	r3, #1
 80170ca:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80170cc:	4b24      	ldr	r3, [pc, #144]	; (8017160 <RegionEU868RxConfig+0x188>)
 80170ce:	699c      	ldr	r4, [r3, #24]
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	789b      	ldrb	r3, [r3, #2]
 80170d4:	461d      	mov	r5, r3
 80170d6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	689b      	ldr	r3, [r3, #8]
 80170de:	b29b      	uxth	r3, r3
 80170e0:	687a      	ldr	r2, [r7, #4]
 80170e2:	7c92      	ldrb	r2, [r2, #18]
 80170e4:	7df8      	ldrb	r0, [r7, #23]
 80170e6:	9209      	str	r2, [sp, #36]	; 0x24
 80170e8:	2201      	movs	r2, #1
 80170ea:	9208      	str	r2, [sp, #32]
 80170ec:	2200      	movs	r2, #0
 80170ee:	9207      	str	r2, [sp, #28]
 80170f0:	2200      	movs	r2, #0
 80170f2:	9206      	str	r2, [sp, #24]
 80170f4:	2200      	movs	r2, #0
 80170f6:	9205      	str	r2, [sp, #20]
 80170f8:	2200      	movs	r2, #0
 80170fa:	9204      	str	r2, [sp, #16]
 80170fc:	2200      	movs	r2, #0
 80170fe:	9203      	str	r2, [sp, #12]
 8017100:	9302      	str	r3, [sp, #8]
 8017102:	2308      	movs	r3, #8
 8017104:	9301      	str	r3, [sp, #4]
 8017106:	2300      	movs	r3, #0
 8017108:	9300      	str	r3, [sp, #0]
 801710a:	2301      	movs	r3, #1
 801710c:	460a      	mov	r2, r1
 801710e:	4629      	mov	r1, r5
 8017110:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	7c5b      	ldrb	r3, [r3, #17]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d005      	beq.n	8017126 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801711a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801711e:	4a14      	ldr	r2, [pc, #80]	; (8017170 <RegionEU868RxConfig+0x198>)
 8017120:	5cd3      	ldrb	r3, [r2, r3]
 8017122:	75bb      	strb	r3, [r7, #22]
 8017124:	e004      	b.n	8017130 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801712a:	4a12      	ldr	r2, [pc, #72]	; (8017174 <RegionEU868RxConfig+0x19c>)
 801712c:	5cd3      	ldrb	r3, [r2, r3]
 801712e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017130:	4b0b      	ldr	r3, [pc, #44]	; (8017160 <RegionEU868RxConfig+0x188>)
 8017132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017134:	7dba      	ldrb	r2, [r7, #22]
 8017136:	320d      	adds	r2, #13
 8017138:	b2d1      	uxtb	r1, r2
 801713a:	7dfa      	ldrb	r2, [r7, #23]
 801713c:	4610      	mov	r0, r2
 801713e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	7cdb      	ldrb	r3, [r3, #19]
 8017144:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017148:	6939      	ldr	r1, [r7, #16]
 801714a:	4618      	mov	r0, r3
 801714c:	f7ff fa9e 	bl	801668c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	7bfa      	ldrb	r2, [r7, #15]
 8017154:	701a      	strb	r2, [r3, #0]
    return true;
 8017156:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017158:	4618      	mov	r0, r3
 801715a:	3718      	adds	r7, #24
 801715c:	46bd      	mov	sp, r7
 801715e:	bdb0      	pop	{r4, r5, r7, pc}
 8017160:	0801e73c 	.word	0x0801e73c
 8017164:	20003ce4 	.word	0x20003ce4
 8017168:	0801e680 	.word	0x0801e680
 801716c:	00014585 	.word	0x00014585
 8017170:	0801e6b0 	.word	0x0801e6b0
 8017174:	0801e6a8 	.word	0x0801e6a8

08017178 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017178:	b590      	push	{r4, r7, lr}
 801717a:	b093      	sub	sp, #76	; 0x4c
 801717c:	af0a      	add	r7, sp, #40	; 0x28
 801717e:	60f8      	str	r0, [r7, #12]
 8017180:	60b9      	str	r1, [r7, #8]
 8017182:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801718a:	461a      	mov	r2, r3
 801718c:	4b5d      	ldr	r3, [pc, #372]	; (8017304 <RegionEU868TxConfig+0x18c>)
 801718e:	5c9b      	ldrb	r3, [r3, r2]
 8017190:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017198:	4b5b      	ldr	r3, [pc, #364]	; (8017308 <RegionEU868TxConfig+0x190>)
 801719a:	681a      	ldr	r2, [r3, #0]
 801719c:	4b5b      	ldr	r3, [pc, #364]	; (801730c <RegionEU868TxConfig+0x194>)
 801719e:	6819      	ldr	r1, [r3, #0]
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	461c      	mov	r4, r3
 80171a6:	4623      	mov	r3, r4
 80171a8:	005b      	lsls	r3, r3, #1
 80171aa:	4423      	add	r3, r4
 80171ac:	009b      	lsls	r3, r3, #2
 80171ae:	440b      	add	r3, r1
 80171b0:	3309      	adds	r3, #9
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	4619      	mov	r1, r3
 80171b6:	460b      	mov	r3, r1
 80171b8:	005b      	lsls	r3, r3, #1
 80171ba:	440b      	add	r3, r1
 80171bc:	00db      	lsls	r3, r3, #3
 80171be:	4413      	add	r3, r2
 80171c0:	3302      	adds	r3, #2
 80171c2:	f993 3000 	ldrsb.w	r3, [r3]
 80171c6:	4619      	mov	r1, r3
 80171c8:	f7ff fa2d 	bl	8016626 <RegionCommonLimitTxPower>
 80171cc:	4603      	mov	r3, r0
 80171ce:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80171d6:	494e      	ldr	r1, [pc, #312]	; (8017310 <RegionEU868TxConfig+0x198>)
 80171d8:	4618      	mov	r0, r3
 80171da:	f7ff fa39 	bl	8016650 <RegionCommonGetBandwidth>
 80171de:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80171e0:	2300      	movs	r3, #0
 80171e2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	6859      	ldr	r1, [r3, #4]
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	689a      	ldr	r2, [r3, #8]
 80171ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7ff f889 	bl	8016308 <RegionCommonComputeTxPower>
 80171f6:	4603      	mov	r3, r0
 80171f8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80171fa:	4b46      	ldr	r3, [pc, #280]	; (8017314 <RegionEU868TxConfig+0x19c>)
 80171fc:	68da      	ldr	r2, [r3, #12]
 80171fe:	4b43      	ldr	r3, [pc, #268]	; (801730c <RegionEU868TxConfig+0x194>)
 8017200:	6819      	ldr	r1, [r3, #0]
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	4618      	mov	r0, r3
 8017208:	4603      	mov	r3, r0
 801720a:	005b      	lsls	r3, r3, #1
 801720c:	4403      	add	r3, r0
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	440b      	add	r3, r1
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	4618      	mov	r0, r3
 8017216:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801721e:	2b07      	cmp	r3, #7
 8017220:	d124      	bne.n	801726c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017222:	2300      	movs	r3, #0
 8017224:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017226:	4b3b      	ldr	r3, [pc, #236]	; (8017314 <RegionEU868TxConfig+0x19c>)
 8017228:	69dc      	ldr	r4, [r3, #28]
 801722a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801722e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017232:	fb02 f303 	mul.w	r3, r2, r3
 8017236:	461a      	mov	r2, r3
 8017238:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801723c:	7ff8      	ldrb	r0, [r7, #31]
 801723e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017242:	9308      	str	r3, [sp, #32]
 8017244:	2300      	movs	r3, #0
 8017246:	9307      	str	r3, [sp, #28]
 8017248:	2300      	movs	r3, #0
 801724a:	9306      	str	r3, [sp, #24]
 801724c:	2300      	movs	r3, #0
 801724e:	9305      	str	r3, [sp, #20]
 8017250:	2301      	movs	r3, #1
 8017252:	9304      	str	r3, [sp, #16]
 8017254:	2300      	movs	r3, #0
 8017256:	9303      	str	r3, [sp, #12]
 8017258:	2305      	movs	r3, #5
 801725a:	9302      	str	r3, [sp, #8]
 801725c:	2300      	movs	r3, #0
 801725e:	9301      	str	r3, [sp, #4]
 8017260:	9200      	str	r2, [sp, #0]
 8017262:	69bb      	ldr	r3, [r7, #24]
 8017264:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017268:	47a0      	blx	r4
 801726a:	e01d      	b.n	80172a8 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 801726c:	2301      	movs	r3, #1
 801726e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017270:	4b28      	ldr	r3, [pc, #160]	; (8017314 <RegionEU868TxConfig+0x19c>)
 8017272:	69dc      	ldr	r4, [r3, #28]
 8017274:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017278:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801727c:	7ff8      	ldrb	r0, [r7, #31]
 801727e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017282:	9208      	str	r2, [sp, #32]
 8017284:	2200      	movs	r2, #0
 8017286:	9207      	str	r2, [sp, #28]
 8017288:	2200      	movs	r2, #0
 801728a:	9206      	str	r2, [sp, #24]
 801728c:	2200      	movs	r2, #0
 801728e:	9205      	str	r2, [sp, #20]
 8017290:	2201      	movs	r2, #1
 8017292:	9204      	str	r2, [sp, #16]
 8017294:	2200      	movs	r2, #0
 8017296:	9203      	str	r2, [sp, #12]
 8017298:	2208      	movs	r2, #8
 801729a:	9202      	str	r2, [sp, #8]
 801729c:	2201      	movs	r2, #1
 801729e:	9201      	str	r2, [sp, #4]
 80172a0:	9300      	str	r3, [sp, #0]
 80172a2:	69bb      	ldr	r3, [r7, #24]
 80172a4:	2200      	movs	r2, #0
 80172a6:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80172a8:	4b18      	ldr	r3, [pc, #96]	; (801730c <RegionEU868TxConfig+0x194>)
 80172aa:	681a      	ldr	r2, [r3, #0]
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	4619      	mov	r1, r3
 80172b2:	460b      	mov	r3, r1
 80172b4:	005b      	lsls	r3, r3, #1
 80172b6:	440b      	add	r3, r1
 80172b8:	009b      	lsls	r3, r3, #2
 80172ba:	4413      	add	r3, r2
 80172bc:	681a      	ldr	r2, [r3, #0]
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172c4:	4619      	mov	r1, r3
 80172c6:	4610      	mov	r0, r2
 80172c8:	f7ff fa1e 	bl	8016708 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	899b      	ldrh	r3, [r3, #12]
 80172d6:	4619      	mov	r1, r3
 80172d8:	4610      	mov	r0, r2
 80172da:	f7ff faa3 	bl	8016824 <GetTimeOnAir>
 80172de:	4602      	mov	r2, r0
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80172e4:	4b0b      	ldr	r3, [pc, #44]	; (8017314 <RegionEU868TxConfig+0x19c>)
 80172e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172e8:	68fa      	ldr	r2, [r7, #12]
 80172ea:	8992      	ldrh	r2, [r2, #12]
 80172ec:	b2d1      	uxtb	r1, r2
 80172ee:	7ffa      	ldrb	r2, [r7, #31]
 80172f0:	4610      	mov	r0, r2
 80172f2:	4798      	blx	r3

    *txPower = txPowerLimited;
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	7f7a      	ldrb	r2, [r7, #29]
 80172f8:	701a      	strb	r2, [r3, #0]
    return true;
 80172fa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3724      	adds	r7, #36	; 0x24
 8017300:	46bd      	mov	sp, r7
 8017302:	bd90      	pop	{r4, r7, pc}
 8017304:	0801e680 	.word	0x0801e680
 8017308:	20003ce0 	.word	0x20003ce0
 801730c:	20003ce4 	.word	0x20003ce4
 8017310:	0801e688 	.word	0x0801e688
 8017314:	0801e73c 	.word	0x0801e73c

08017318 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017318:	b590      	push	{r4, r7, lr}
 801731a:	b093      	sub	sp, #76	; 0x4c
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	60b9      	str	r1, [r7, #8]
 8017322:	607a      	str	r2, [r7, #4]
 8017324:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017326:	2307      	movs	r3, #7
 8017328:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801732c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017330:	2200      	movs	r2, #0
 8017332:	601a      	str	r2, [r3, #0]
 8017334:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017336:	2300      	movs	r3, #0
 8017338:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 801733c:	2300      	movs	r3, #0
 801733e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8017342:	2300      	movs	r3, #0
 8017344:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017346:	e085      	b.n	8017454 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	685a      	ldr	r2, [r3, #4]
 801734c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017350:	4413      	add	r3, r2
 8017352:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017356:	4611      	mov	r1, r2
 8017358:	4618      	mov	r0, r3
 801735a:	f7fe fe2d 	bl	8015fb8 <RegionCommonParseLinkAdrReq>
 801735e:	4603      	mov	r3, r0
 8017360:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8017364:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017368:	2b00      	cmp	r3, #0
 801736a:	d07b      	beq.n	8017464 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801736c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017370:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017374:	4413      	add	r3, r2
 8017376:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801737a:	2307      	movs	r3, #7
 801737c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017380:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017384:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017386:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801738a:	2b00      	cmp	r3, #0
 801738c:	d109      	bne.n	80173a2 <RegionEU868LinkAdrReq+0x8a>
 801738e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017390:	2b00      	cmp	r3, #0
 8017392:	d106      	bne.n	80173a2 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017398:	f023 0301 	bic.w	r3, r3, #1
 801739c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80173a0:	e058      	b.n	8017454 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80173a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d003      	beq.n	80173b2 <RegionEU868LinkAdrReq+0x9a>
 80173aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80173ae:	2b05      	cmp	r3, #5
 80173b0:	d903      	bls.n	80173ba <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80173b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80173b6:	2b06      	cmp	r3, #6
 80173b8:	d906      	bls.n	80173c8 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80173ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173be:	f023 0301 	bic.w	r3, r3, #1
 80173c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80173c6:	e045      	b.n	8017454 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80173c8:	2300      	movs	r3, #0
 80173ca:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80173ce:	e03d      	b.n	801744c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80173d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80173d4:	2b06      	cmp	r3, #6
 80173d6:	d118      	bne.n	801740a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80173d8:	4b5f      	ldr	r3, [pc, #380]	; (8017558 <RegionEU868LinkAdrReq+0x240>)
 80173da:	6819      	ldr	r1, [r3, #0]
 80173dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80173e0:	4613      	mov	r3, r2
 80173e2:	005b      	lsls	r3, r3, #1
 80173e4:	4413      	add	r3, r2
 80173e6:	009b      	lsls	r3, r3, #2
 80173e8:	440b      	add	r3, r1
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d028      	beq.n	8017442 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80173f0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80173f4:	2201      	movs	r2, #1
 80173f6:	fa02 f303 	lsl.w	r3, r2, r3
 80173fa:	b21a      	sxth	r2, r3
 80173fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173fe:	b21b      	sxth	r3, r3
 8017400:	4313      	orrs	r3, r2
 8017402:	b21b      	sxth	r3, r3
 8017404:	b29b      	uxth	r3, r3
 8017406:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017408:	e01b      	b.n	8017442 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801740a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801740c:	461a      	mov	r2, r3
 801740e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017412:	fa42 f303 	asr.w	r3, r2, r3
 8017416:	f003 0301 	and.w	r3, r3, #1
 801741a:	2b00      	cmp	r3, #0
 801741c:	d011      	beq.n	8017442 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801741e:	4b4e      	ldr	r3, [pc, #312]	; (8017558 <RegionEU868LinkAdrReq+0x240>)
 8017420:	6819      	ldr	r1, [r3, #0]
 8017422:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017426:	4613      	mov	r3, r2
 8017428:	005b      	lsls	r3, r3, #1
 801742a:	4413      	add	r3, r2
 801742c:	009b      	lsls	r3, r3, #2
 801742e:	440b      	add	r3, r1
 8017430:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017432:	2b00      	cmp	r3, #0
 8017434:	d105      	bne.n	8017442 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8017436:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801743a:	f023 0301 	bic.w	r3, r3, #1
 801743e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017442:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017446:	3301      	adds	r3, #1
 8017448:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801744c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017450:	2b0f      	cmp	r3, #15
 8017452:	d9bd      	bls.n	80173d0 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	7a1b      	ldrb	r3, [r3, #8]
 8017458:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801745c:	429a      	cmp	r2, r3
 801745e:	f4ff af73 	bcc.w	8017348 <RegionEU868LinkAdrReq+0x30>
 8017462:	e000      	b.n	8017466 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017464:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017466:	2302      	movs	r3, #2
 8017468:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	7a5b      	ldrb	r3, [r3, #9]
 8017470:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017474:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017478:	4618      	mov	r0, r3
 801747a:	f7ff fa23 	bl	80168c4 <RegionEU868GetPhyParam>
 801747e:	4603      	mov	r3, r0
 8017480:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8017482:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017486:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	7a9b      	ldrb	r3, [r3, #10]
 801748c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801748e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8017492:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017494:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8017498:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801749a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801749e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80174a6:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80174ae:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	7b5b      	ldrb	r3, [r3, #13]
 80174b4:	b25b      	sxtb	r3, r3
 80174b6:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80174b8:	2310      	movs	r3, #16
 80174ba:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80174bc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80174c0:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80174c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c4:	b25b      	sxtb	r3, r3
 80174c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80174ca:	2307      	movs	r3, #7
 80174cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80174d0:	4b21      	ldr	r3, [pc, #132]	; (8017558 <RegionEU868LinkAdrReq+0x240>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80174d6:	2307      	movs	r3, #7
 80174d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80174dc:	2300      	movs	r3, #0
 80174de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80174e8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80174ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80174f0:	1c9a      	adds	r2, r3, #2
 80174f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80174f6:	1c59      	adds	r1, r3, #1
 80174f8:	f107 0010 	add.w	r0, r7, #16
 80174fc:	4623      	mov	r3, r4
 80174fe:	f7fe fdac 	bl	801605a <RegionCommonLinkAdrReqVerifyParams>
 8017502:	4603      	mov	r3, r0
 8017504:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017508:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801750c:	2b07      	cmp	r3, #7
 801750e:	d10d      	bne.n	801752c <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017510:	4b11      	ldr	r3, [pc, #68]	; (8017558 <RegionEU868LinkAdrReq+0x240>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017518:	220c      	movs	r2, #12
 801751a:	2100      	movs	r1, #0
 801751c:	4618      	mov	r0, r3
 801751e:	f001 fde3 	bl	80190e8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8017522:	4b0d      	ldr	r3, [pc, #52]	; (8017558 <RegionEU868LinkAdrReq+0x240>)
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017528:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801752c:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017534:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801753c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017546:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801754a:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 801754c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8017550:	4618      	mov	r0, r3
 8017552:	374c      	adds	r7, #76	; 0x4c
 8017554:	46bd      	mov	sp, r7
 8017556:	bd90      	pop	{r4, r7, pc}
 8017558:	20003ce4 	.word	0x20003ce4

0801755c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b084      	sub	sp, #16
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017564:	2307      	movs	r3, #7
 8017566:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017568:	2300      	movs	r3, #0
 801756a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	685b      	ldr	r3, [r3, #4]
 8017570:	f107 020e 	add.w	r2, r7, #14
 8017574:	4611      	mov	r1, r2
 8017576:	4618      	mov	r0, r3
 8017578:	f7ff f8de 	bl	8016738 <VerifyRfFreq>
 801757c:	4603      	mov	r3, r0
 801757e:	f083 0301 	eor.w	r3, r3, #1
 8017582:	b2db      	uxtb	r3, r3
 8017584:	2b00      	cmp	r3, #0
 8017586:	d003      	beq.n	8017590 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017588:	7bfb      	ldrb	r3, [r7, #15]
 801758a:	f023 0301 	bic.w	r3, r3, #1
 801758e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f993 3000 	ldrsb.w	r3, [r3]
 8017596:	2207      	movs	r2, #7
 8017598:	2100      	movs	r1, #0
 801759a:	4618      	mov	r0, r3
 801759c:	f7fe fb4b 	bl	8015c36 <RegionCommonValueInRange>
 80175a0:	4603      	mov	r3, r0
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d103      	bne.n	80175ae <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80175a6:	7bfb      	ldrb	r3, [r7, #15]
 80175a8:	f023 0302 	bic.w	r3, r3, #2
 80175ac:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80175b4:	2205      	movs	r2, #5
 80175b6:	2100      	movs	r1, #0
 80175b8:	4618      	mov	r0, r3
 80175ba:	f7fe fb3c 	bl	8015c36 <RegionCommonValueInRange>
 80175be:	4603      	mov	r3, r0
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d103      	bne.n	80175cc <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80175c4:	7bfb      	ldrb	r3, [r7, #15]
 80175c6:	f023 0304 	bic.w	r3, r3, #4
 80175ca:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80175cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80175ce:	4618      	mov	r0, r3
 80175d0:	3710      	adds	r7, #16
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bd80      	pop	{r7, pc}
	...

080175d8 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b086      	sub	sp, #24
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80175e0:	2303      	movs	r3, #3
 80175e2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d114      	bne.n	8017618 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80175f4:	b2db      	uxtb	r3, r3
 80175f6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80175f8:	f107 0308 	add.w	r3, r7, #8
 80175fc:	4618      	mov	r0, r3
 80175fe:	f000 f9f9 	bl	80179f4 <RegionEU868ChannelsRemove>
 8017602:	4603      	mov	r3, r0
 8017604:	f083 0301 	eor.w	r3, r3, #1
 8017608:	b2db      	uxtb	r3, r3
 801760a:	2b00      	cmp	r3, #0
 801760c:	d03b      	beq.n	8017686 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801760e:	7dfb      	ldrb	r3, [r7, #23]
 8017610:	f023 0303 	bic.w	r3, r3, #3
 8017614:	75fb      	strb	r3, [r7, #23]
 8017616:	e036      	b.n	8017686 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017624:	b2db      	uxtb	r3, r3
 8017626:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8017628:	f107 030c 	add.w	r3, r7, #12
 801762c:	4618      	mov	r0, r3
 801762e:	f000 f93f 	bl	80178b0 <RegionEU868ChannelAdd>
 8017632:	4603      	mov	r3, r0
 8017634:	2b06      	cmp	r3, #6
 8017636:	d820      	bhi.n	801767a <RegionEU868NewChannelReq+0xa2>
 8017638:	a201      	add	r2, pc, #4	; (adr r2, 8017640 <RegionEU868NewChannelReq+0x68>)
 801763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801763e:	bf00      	nop
 8017640:	08017685 	.word	0x08017685
 8017644:	0801767b 	.word	0x0801767b
 8017648:	0801767b 	.word	0x0801767b
 801764c:	0801767b 	.word	0x0801767b
 8017650:	0801765d 	.word	0x0801765d
 8017654:	08017667 	.word	0x08017667
 8017658:	08017671 	.word	0x08017671
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801765c:	7dfb      	ldrb	r3, [r7, #23]
 801765e:	f023 0301 	bic.w	r3, r3, #1
 8017662:	75fb      	strb	r3, [r7, #23]
                break;
 8017664:	e00f      	b.n	8017686 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8017666:	7dfb      	ldrb	r3, [r7, #23]
 8017668:	f023 0302 	bic.w	r3, r3, #2
 801766c:	75fb      	strb	r3, [r7, #23]
                break;
 801766e:	e00a      	b.n	8017686 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8017670:	7dfb      	ldrb	r3, [r7, #23]
 8017672:	f023 0303 	bic.w	r3, r3, #3
 8017676:	75fb      	strb	r3, [r7, #23]
                break;
 8017678:	e005      	b.n	8017686 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801767a:	7dfb      	ldrb	r3, [r7, #23]
 801767c:	f023 0303 	bic.w	r3, r3, #3
 8017680:	75fb      	strb	r3, [r7, #23]
                break;
 8017682:	e000      	b.n	8017686 <RegionEU868NewChannelReq+0xae>
                break;
 8017684:	bf00      	nop
            }
        }
    }

    return status;
 8017686:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801768a:	4618      	mov	r0, r3
 801768c:	3718      	adds	r7, #24
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop

08017694 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017694:	b480      	push	{r7}
 8017696:	b083      	sub	sp, #12
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801769c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80176a0:	4618      	mov	r0, r3
 80176a2:	370c      	adds	r7, #12
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bc80      	pop	{r7}
 80176a8:	4770      	bx	lr
	...

080176ac <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80176b4:	2303      	movs	r3, #3
 80176b6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80176b8:	2300      	movs	r3, #0
 80176ba:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	f107 020e 	add.w	r2, r7, #14
 80176c4:	4611      	mov	r1, r2
 80176c6:	4618      	mov	r0, r3
 80176c8:	f7ff f836 	bl	8016738 <VerifyRfFreq>
 80176cc:	4603      	mov	r3, r0
 80176ce:	f083 0301 	eor.w	r3, r3, #1
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d003      	beq.n	80176e0 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 80176d8:	7bfb      	ldrb	r3, [r7, #15]
 80176da:	f023 0301 	bic.w	r3, r3, #1
 80176de:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80176e0:	4b13      	ldr	r3, [pc, #76]	; (8017730 <RegionEU868DlChannelReq+0x84>)
 80176e2:	681a      	ldr	r2, [r3, #0]
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	781b      	ldrb	r3, [r3, #0]
 80176e8:	4619      	mov	r1, r3
 80176ea:	460b      	mov	r3, r1
 80176ec:	005b      	lsls	r3, r3, #1
 80176ee:	440b      	add	r3, r1
 80176f0:	009b      	lsls	r3, r3, #2
 80176f2:	4413      	add	r3, r2
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d103      	bne.n	8017702 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 80176fa:	7bfb      	ldrb	r3, [r7, #15]
 80176fc:	f023 0302 	bic.w	r3, r3, #2
 8017700:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8017702:	7bfb      	ldrb	r3, [r7, #15]
 8017704:	2b03      	cmp	r3, #3
 8017706:	d10d      	bne.n	8017724 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017708:	4b09      	ldr	r3, [pc, #36]	; (8017730 <RegionEU868DlChannelReq+0x84>)
 801770a:	6819      	ldr	r1, [r3, #0]
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	781b      	ldrb	r3, [r3, #0]
 8017710:	4618      	mov	r0, r3
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	685a      	ldr	r2, [r3, #4]
 8017716:	4603      	mov	r3, r0
 8017718:	005b      	lsls	r3, r3, #1
 801771a:	4403      	add	r3, r0
 801771c:	009b      	lsls	r3, r3, #2
 801771e:	440b      	add	r3, r1
 8017720:	3304      	adds	r3, #4
 8017722:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8017724:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017728:	4618      	mov	r0, r3
 801772a:	3710      	adds	r7, #16
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	20003ce4 	.word	0x20003ce4

08017734 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017734:	b480      	push	{r7}
 8017736:	b083      	sub	sp, #12
 8017738:	af00      	add	r7, sp, #0
 801773a:	4603      	mov	r3, r0
 801773c:	460a      	mov	r2, r1
 801773e:	71fb      	strb	r3, [r7, #7]
 8017740:	4613      	mov	r3, r2
 8017742:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8017744:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8017748:	4618      	mov	r0, r3
 801774a:	370c      	adds	r7, #12
 801774c:	46bd      	mov	sp, r7
 801774e:	bc80      	pop	{r7}
 8017750:	4770      	bx	lr
	...

08017754 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b09a      	sub	sp, #104	; 0x68
 8017758:	af02      	add	r7, sp, #8
 801775a:	60f8      	str	r0, [r7, #12]
 801775c:	60b9      	str	r1, [r7, #8]
 801775e:	607a      	str	r2, [r7, #4]
 8017760:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8017762:	2300      	movs	r3, #0
 8017764:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8017768:	2300      	movs	r3, #0
 801776a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801776e:	2300      	movs	r3, #0
 8017770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017772:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017776:	2200      	movs	r2, #0
 8017778:	601a      	str	r2, [r3, #0]
 801777a:	605a      	str	r2, [r3, #4]
 801777c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801777e:	230c      	movs	r3, #12
 8017780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8017784:	2307      	movs	r3, #7
 8017786:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8017788:	4b47      	ldr	r3, [pc, #284]	; (80178a8 <RegionEU868NextChannel+0x154>)
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017790:	2201      	movs	r2, #1
 8017792:	2100      	movs	r1, #0
 8017794:	4618      	mov	r0, r3
 8017796:	f7fe fa9f 	bl	8015cd8 <RegionCommonCountChannels>
 801779a:	4603      	mov	r3, r0
 801779c:	2b00      	cmp	r3, #0
 801779e:	d10a      	bne.n	80177b6 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80177a0:	4b41      	ldr	r3, [pc, #260]	; (80178a8 <RegionEU868NextChannel+0x154>)
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80177a8:	4b3f      	ldr	r3, [pc, #252]	; (80178a8 <RegionEU868NextChannel+0x154>)
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f042 0207 	orr.w	r2, r2, #7
 80177b0:	b292      	uxth	r2, r2
 80177b2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	7a5b      	ldrb	r3, [r3, #9]
 80177ba:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80177c2:	b2db      	uxtb	r3, r3
 80177c4:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80177c6:	4b38      	ldr	r3, [pc, #224]	; (80178a8 <RegionEU868NextChannel+0x154>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80177ce:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80177d0:	4b35      	ldr	r3, [pc, #212]	; (80178a8 <RegionEU868NextChannel+0x154>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80177d6:	4b35      	ldr	r3, [pc, #212]	; (80178ac <RegionEU868NextChannel+0x158>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80177dc:	2310      	movs	r3, #16
 80177de:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80177e0:	f107 0312 	add.w	r3, r7, #18
 80177e4:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	685b      	ldr	r3, [r3, #4]
 80177f0:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	7a9b      	ldrb	r3, [r3, #10]
 80177f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80177fa:	2306      	movs	r3, #6
 80177fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017800:	68fa      	ldr	r2, [r7, #12]
 8017802:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017806:	320c      	adds	r2, #12
 8017808:	e892 0003 	ldmia.w	r2, {r0, r1}
 801780c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	7d1b      	ldrb	r3, [r3, #20]
 8017814:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	8adb      	ldrh	r3, [r3, #22]
 8017822:	4619      	mov	r1, r3
 8017824:	4610      	mov	r0, r2
 8017826:	f7fe fffd 	bl	8016824 <GetTimeOnAir>
 801782a:	4603      	mov	r3, r0
 801782c:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801782e:	f107 0314 	add.w	r3, r7, #20
 8017832:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8017834:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8017838:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801783c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	9301      	str	r3, [sp, #4]
 8017844:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8017848:	9300      	str	r3, [sp, #0]
 801784a:	460b      	mov	r3, r1
 801784c:	6839      	ldr	r1, [r7, #0]
 801784e:	f7fe fe4a 	bl	80164e6 <RegionCommonIdentifyChannels>
 8017852:	4603      	mov	r3, r0
 8017854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8017858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801785c:	2b00      	cmp	r3, #0
 801785e:	d10e      	bne.n	801787e <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017860:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8017864:	3b01      	subs	r3, #1
 8017866:	4619      	mov	r1, r3
 8017868:	2000      	movs	r0, #0
 801786a:	f001 fbeb 	bl	8019044 <randr>
 801786e:	4603      	mov	r3, r0
 8017870:	3360      	adds	r3, #96	; 0x60
 8017872:	443b      	add	r3, r7
 8017874:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8017878:	68bb      	ldr	r3, [r7, #8]
 801787a:	701a      	strb	r2, [r3, #0]
 801787c:	e00e      	b.n	801789c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801787e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017882:	2b0c      	cmp	r3, #12
 8017884:	d10a      	bne.n	801789c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017886:	4b08      	ldr	r3, [pc, #32]	; (80178a8 <RegionEU868NextChannel+0x154>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801788e:	4b06      	ldr	r3, [pc, #24]	; (80178a8 <RegionEU868NextChannel+0x154>)
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	f042 0207 	orr.w	r2, r2, #7
 8017896:	b292      	uxth	r2, r2
 8017898:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 801789c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	3760      	adds	r7, #96	; 0x60
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}
 80178a8:	20003ce4 	.word	0x20003ce4
 80178ac:	20003ce0 	.word	0x20003ce0

080178b0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80178b8:	2300      	movs	r3, #0
 80178ba:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80178bc:	2300      	movs	r3, #0
 80178be:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80178c0:	2300      	movs	r3, #0
 80178c2:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	791b      	ldrb	r3, [r3, #4]
 80178c8:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80178ca:	7b7b      	ldrb	r3, [r7, #13]
 80178cc:	2b02      	cmp	r3, #2
 80178ce:	d801      	bhi.n	80178d4 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80178d0:	2306      	movs	r3, #6
 80178d2:	e089      	b.n	80179e8 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80178d4:	7b7b      	ldrb	r3, [r7, #13]
 80178d6:	2b0f      	cmp	r3, #15
 80178d8:	d901      	bls.n	80178de <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80178da:	2303      	movs	r3, #3
 80178dc:	e084      	b.n	80179e8 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	7a1b      	ldrb	r3, [r3, #8]
 80178e4:	f343 0303 	sbfx	r3, r3, #0, #4
 80178e8:	b25b      	sxtb	r3, r3
 80178ea:	2207      	movs	r2, #7
 80178ec:	2100      	movs	r1, #0
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7fe f9a1 	bl	8015c36 <RegionCommonValueInRange>
 80178f4:	4603      	mov	r3, r0
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d101      	bne.n	80178fe <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80178fa:	2301      	movs	r3, #1
 80178fc:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	7a1b      	ldrb	r3, [r3, #8]
 8017904:	f343 1303 	sbfx	r3, r3, #4, #4
 8017908:	b25b      	sxtb	r3, r3
 801790a:	2207      	movs	r2, #7
 801790c:	2100      	movs	r1, #0
 801790e:	4618      	mov	r0, r3
 8017910:	f7fe f991 	bl	8015c36 <RegionCommonValueInRange>
 8017914:	4603      	mov	r3, r0
 8017916:	2b00      	cmp	r3, #0
 8017918:	d101      	bne.n	801791e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801791a:	2301      	movs	r3, #1
 801791c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	7a1b      	ldrb	r3, [r3, #8]
 8017924:	f343 0303 	sbfx	r3, r3, #0, #4
 8017928:	b25a      	sxtb	r2, r3
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	7a1b      	ldrb	r3, [r3, #8]
 8017930:	f343 1303 	sbfx	r3, r3, #4, #4
 8017934:	b25b      	sxtb	r3, r3
 8017936:	429a      	cmp	r2, r3
 8017938:	dd01      	ble.n	801793e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801793a:	2301      	movs	r3, #1
 801793c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801793e:	7bbb      	ldrb	r3, [r7, #14]
 8017940:	f083 0301 	eor.w	r3, r3, #1
 8017944:	b2db      	uxtb	r3, r3
 8017946:	2b00      	cmp	r3, #0
 8017948:	d010      	beq.n	801796c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	f107 020c 	add.w	r2, r7, #12
 8017954:	4611      	mov	r1, r2
 8017956:	4618      	mov	r0, r3
 8017958:	f7fe feee 	bl	8016738 <VerifyRfFreq>
 801795c:	4603      	mov	r3, r0
 801795e:	f083 0301 	eor.w	r3, r3, #1
 8017962:	b2db      	uxtb	r3, r3
 8017964:	2b00      	cmp	r3, #0
 8017966:	d001      	beq.n	801796c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8017968:	2301      	movs	r3, #1
 801796a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801796c:	7bfb      	ldrb	r3, [r7, #15]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d004      	beq.n	801797c <RegionEU868ChannelAdd+0xcc>
 8017972:	7bbb      	ldrb	r3, [r7, #14]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d001      	beq.n	801797c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017978:	2306      	movs	r3, #6
 801797a:	e035      	b.n	80179e8 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801797c:	7bfb      	ldrb	r3, [r7, #15]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d001      	beq.n	8017986 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017982:	2305      	movs	r3, #5
 8017984:	e030      	b.n	80179e8 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8017986:	7bbb      	ldrb	r3, [r7, #14]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d001      	beq.n	8017990 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801798c:	2304      	movs	r3, #4
 801798e:	e02b      	b.n	80179e8 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017990:	4b17      	ldr	r3, [pc, #92]	; (80179f0 <RegionEU868ChannelAdd+0x140>)
 8017992:	6819      	ldr	r1, [r3, #0]
 8017994:	7b7a      	ldrb	r2, [r7, #13]
 8017996:	4613      	mov	r3, r2
 8017998:	005b      	lsls	r3, r3, #1
 801799a:	4413      	add	r3, r2
 801799c:	009b      	lsls	r3, r3, #2
 801799e:	18c8      	adds	r0, r1, r3
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	220c      	movs	r2, #12
 80179a6:	4619      	mov	r1, r3
 80179a8:	f001 fb63 	bl	8019072 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80179ac:	4b10      	ldr	r3, [pc, #64]	; (80179f0 <RegionEU868ChannelAdd+0x140>)
 80179ae:	6819      	ldr	r1, [r3, #0]
 80179b0:	7b7a      	ldrb	r2, [r7, #13]
 80179b2:	7b38      	ldrb	r0, [r7, #12]
 80179b4:	4613      	mov	r3, r2
 80179b6:	005b      	lsls	r3, r3, #1
 80179b8:	4413      	add	r3, r2
 80179ba:	009b      	lsls	r3, r3, #2
 80179bc:	440b      	add	r3, r1
 80179be:	3309      	adds	r3, #9
 80179c0:	4602      	mov	r2, r0
 80179c2:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80179c4:	4b0a      	ldr	r3, [pc, #40]	; (80179f0 <RegionEU868ChannelAdd+0x140>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 80179cc:	b21a      	sxth	r2, r3
 80179ce:	7b7b      	ldrb	r3, [r7, #13]
 80179d0:	2101      	movs	r1, #1
 80179d2:	fa01 f303 	lsl.w	r3, r1, r3
 80179d6:	b21b      	sxth	r3, r3
 80179d8:	4313      	orrs	r3, r2
 80179da:	b21a      	sxth	r2, r3
 80179dc:	4b04      	ldr	r3, [pc, #16]	; (80179f0 <RegionEU868ChannelAdd+0x140>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	b292      	uxth	r2, r2
 80179e2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 80179e6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80179e8:	4618      	mov	r0, r3
 80179ea:	3710      	adds	r7, #16
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd80      	pop	{r7, pc}
 80179f0:	20003ce4 	.word	0x20003ce4

080179f4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b086      	sub	sp, #24
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	781b      	ldrb	r3, [r3, #0]
 8017a00:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017a02:	7dfb      	ldrb	r3, [r7, #23]
 8017a04:	2b02      	cmp	r3, #2
 8017a06:	d801      	bhi.n	8017a0c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8017a08:	2300      	movs	r3, #0
 8017a0a:	e016      	b.n	8017a3a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017a0c:	4b0d      	ldr	r3, [pc, #52]	; (8017a44 <RegionEU868ChannelsRemove+0x50>)
 8017a0e:	6819      	ldr	r1, [r3, #0]
 8017a10:	7dfa      	ldrb	r2, [r7, #23]
 8017a12:	4613      	mov	r3, r2
 8017a14:	005b      	lsls	r3, r3, #1
 8017a16:	4413      	add	r3, r2
 8017a18:	009b      	lsls	r3, r3, #2
 8017a1a:	440b      	add	r3, r1
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	2300      	movs	r3, #0
 8017a20:	6013      	str	r3, [r2, #0]
 8017a22:	6053      	str	r3, [r2, #4]
 8017a24:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8017a26:	4b07      	ldr	r3, [pc, #28]	; (8017a44 <RegionEU868ChannelsRemove+0x50>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017a2e:	7df9      	ldrb	r1, [r7, #23]
 8017a30:	2210      	movs	r2, #16
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7fe f91c 	bl	8015c70 <RegionCommonChanDisable>
 8017a38:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	3718      	adds	r7, #24
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop
 8017a44:	20003ce4 	.word	0x20003ce4

08017a48 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8017a48:	b590      	push	{r4, r7, lr}
 8017a4a:	b085      	sub	sp, #20
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017a56:	4b20      	ldr	r3, [pc, #128]	; (8017ad8 <RegionEU868SetContinuousWave+0x90>)
 8017a58:	681a      	ldr	r2, [r3, #0]
 8017a5a:	4b20      	ldr	r3, [pc, #128]	; (8017adc <RegionEU868SetContinuousWave+0x94>)
 8017a5c:	6819      	ldr	r1, [r3, #0]
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	461c      	mov	r4, r3
 8017a64:	4623      	mov	r3, r4
 8017a66:	005b      	lsls	r3, r3, #1
 8017a68:	4423      	add	r3, r4
 8017a6a:	009b      	lsls	r3, r3, #2
 8017a6c:	440b      	add	r3, r1
 8017a6e:	3309      	adds	r3, #9
 8017a70:	781b      	ldrb	r3, [r3, #0]
 8017a72:	4619      	mov	r1, r3
 8017a74:	460b      	mov	r3, r1
 8017a76:	005b      	lsls	r3, r3, #1
 8017a78:	440b      	add	r3, r1
 8017a7a:	00db      	lsls	r3, r3, #3
 8017a7c:	4413      	add	r3, r2
 8017a7e:	3302      	adds	r3, #2
 8017a80:	f993 3000 	ldrsb.w	r3, [r3]
 8017a84:	4619      	mov	r1, r3
 8017a86:	f7fe fdce 	bl	8016626 <RegionCommonLimitTxPower>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8017a92:	4b12      	ldr	r3, [pc, #72]	; (8017adc <RegionEU868SetContinuousWave+0x94>)
 8017a94:	681a      	ldr	r2, [r3, #0]
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	781b      	ldrb	r3, [r3, #0]
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	460b      	mov	r3, r1
 8017a9e:	005b      	lsls	r3, r3, #1
 8017aa0:	440b      	add	r3, r1
 8017aa2:	009b      	lsls	r3, r3, #2
 8017aa4:	4413      	add	r3, r2
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	6859      	ldr	r1, [r3, #4]
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	689a      	ldr	r2, [r3, #8]
 8017ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f7fe fc26 	bl	8016308 <RegionCommonComputeTxPower>
 8017abc:	4603      	mov	r3, r0
 8017abe:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8017ac0:	4b07      	ldr	r3, [pc, #28]	; (8017ae0 <RegionEU868SetContinuousWave+0x98>)
 8017ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ac4:	687a      	ldr	r2, [r7, #4]
 8017ac6:	8992      	ldrh	r2, [r2, #12]
 8017ac8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017acc:	68b8      	ldr	r0, [r7, #8]
 8017ace:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8017ad0:	bf00      	nop
 8017ad2:	3714      	adds	r7, #20
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd90      	pop	{r4, r7, pc}
 8017ad8:	20003ce0 	.word	0x20003ce0
 8017adc:	20003ce4 	.word	0x20003ce4
 8017ae0:	0801e73c 	.word	0x0801e73c

08017ae4 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017ae4:	b480      	push	{r7}
 8017ae6:	b085      	sub	sp, #20
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	4603      	mov	r3, r0
 8017aec:	71fb      	strb	r3, [r7, #7]
 8017aee:	460b      	mov	r3, r1
 8017af0:	71bb      	strb	r3, [r7, #6]
 8017af2:	4613      	mov	r3, r2
 8017af4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8017af6:	79ba      	ldrb	r2, [r7, #6]
 8017af8:	797b      	ldrb	r3, [r7, #5]
 8017afa:	1ad3      	subs	r3, r2, r3
 8017afc:	b2db      	uxtb	r3, r3
 8017afe:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	da01      	bge.n	8017b0c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8017b08:	2300      	movs	r3, #0
 8017b0a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017b0c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	3714      	adds	r7, #20
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bc80      	pop	{r7}
 8017b16:	4770      	bx	lr

08017b18 <LimitTxPower>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	603b      	str	r3, [r7, #0]
 8017b20:	4603      	mov	r3, r0
 8017b22:	71fb      	strb	r3, [r7, #7]
 8017b24:	460b      	mov	r3, r1
 8017b26:	71bb      	strb	r3, [r7, #6]
 8017b28:	4613      	mov	r3, r2
 8017b2a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8017b2c:	79fb      	ldrb	r3, [r7, #7]
 8017b2e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8017b30:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b38:	4611      	mov	r1, r2
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7fe fd73 	bl	8016626 <RegionCommonLimitTxPower>
 8017b40:	4603      	mov	r3, r0
 8017b42:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8017b44:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017b48:	2b04      	cmp	r3, #4
 8017b4a:	d106      	bne.n	8017b5a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b50:	2b02      	cmp	r3, #2
 8017b52:	bfb8      	it	lt
 8017b54:	2302      	movlt	r3, #2
 8017b56:	73fb      	strb	r3, [r7, #15]
 8017b58:	e00d      	b.n	8017b76 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8017b5a:	2204      	movs	r2, #4
 8017b5c:	2100      	movs	r1, #0
 8017b5e:	6838      	ldr	r0, [r7, #0]
 8017b60:	f7fe f8ba 	bl	8015cd8 <RegionCommonCountChannels>
 8017b64:	4603      	mov	r3, r0
 8017b66:	2b31      	cmp	r3, #49	; 0x31
 8017b68:	d805      	bhi.n	8017b76 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8017b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b6e:	2b05      	cmp	r3, #5
 8017b70:	bfb8      	it	lt
 8017b72:	2305      	movlt	r3, #5
 8017b74:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8017b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	3710      	adds	r7, #16
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd80      	pop	{r7, pc}
	...

08017b84 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b082      	sub	sp, #8
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017b8c:	4b18      	ldr	r3, [pc, #96]	; (8017bf0 <VerifyRfFreq+0x6c>)
 8017b8e:	6a1b      	ldr	r3, [r3, #32]
 8017b90:	6878      	ldr	r0, [r7, #4]
 8017b92:	4798      	blx	r3
 8017b94:	4603      	mov	r3, r0
 8017b96:	f083 0301 	eor.w	r3, r3, #1
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d001      	beq.n	8017ba4 <VerifyRfFreq+0x20>
    {
        return false;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	e021      	b.n	8017be8 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	4a13      	ldr	r2, [pc, #76]	; (8017bf4 <VerifyRfFreq+0x70>)
 8017ba8:	4293      	cmp	r3, r2
 8017baa:	d910      	bls.n	8017bce <VerifyRfFreq+0x4a>
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	4a12      	ldr	r2, [pc, #72]	; (8017bf8 <VerifyRfFreq+0x74>)
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	d80c      	bhi.n	8017bce <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	4b11      	ldr	r3, [pc, #68]	; (8017bfc <VerifyRfFreq+0x78>)
 8017bb8:	4413      	add	r3, r2
 8017bba:	4a11      	ldr	r2, [pc, #68]	; (8017c00 <VerifyRfFreq+0x7c>)
 8017bbc:	fba2 1203 	umull	r1, r2, r2, r3
 8017bc0:	0c92      	lsrs	r2, r2, #18
 8017bc2:	4910      	ldr	r1, [pc, #64]	; (8017c04 <VerifyRfFreq+0x80>)
 8017bc4:	fb01 f202 	mul.w	r2, r1, r2
 8017bc8:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8017bca:	2a00      	cmp	r2, #0
 8017bcc:	d001      	beq.n	8017bd2 <VerifyRfFreq+0x4e>
    {
        return false;
 8017bce:	2300      	movs	r3, #0
 8017bd0:	e00a      	b.n	8017be8 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	4a0c      	ldr	r2, [pc, #48]	; (8017c08 <VerifyRfFreq+0x84>)
 8017bd6:	4293      	cmp	r3, r2
 8017bd8:	d903      	bls.n	8017be2 <VerifyRfFreq+0x5e>
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	4a06      	ldr	r2, [pc, #24]	; (8017bf8 <VerifyRfFreq+0x74>)
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d901      	bls.n	8017be6 <VerifyRfFreq+0x62>
    {
        return false;
 8017be2:	2300      	movs	r3, #0
 8017be4:	e000      	b.n	8017be8 <VerifyRfFreq+0x64>
    }
    return true;
 8017be6:	2301      	movs	r3, #1
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	3708      	adds	r7, #8
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}
 8017bf0:	0801e73c 	.word	0x0801e73c
 8017bf4:	3708709f 	.word	0x3708709f
 8017bf8:	374886e0 	.word	0x374886e0
 8017bfc:	c8f78f60 	.word	0xc8f78f60
 8017c00:	6fd91d85 	.word	0x6fd91d85
 8017c04:	000927c0 	.word	0x000927c0
 8017c08:	35c8015f 	.word	0x35c8015f

08017c0c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017c0c:	b590      	push	{r4, r7, lr}
 8017c0e:	b089      	sub	sp, #36	; 0x24
 8017c10:	af04      	add	r7, sp, #16
 8017c12:	4603      	mov	r3, r0
 8017c14:	460a      	mov	r2, r1
 8017c16:	71fb      	strb	r3, [r7, #7]
 8017c18:	4613      	mov	r3, r2
 8017c1a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8017c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c20:	4a0f      	ldr	r2, [pc, #60]	; (8017c60 <GetTimeOnAir+0x54>)
 8017c22:	5cd3      	ldrb	r3, [r2, r3]
 8017c24:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8017c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c2a:	490e      	ldr	r1, [pc, #56]	; (8017c64 <GetTimeOnAir+0x58>)
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7fe fd0f 	bl	8016650 <RegionCommonGetBandwidth>
 8017c32:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017c34:	4b0c      	ldr	r3, [pc, #48]	; (8017c68 <GetTimeOnAir+0x5c>)
 8017c36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017c38:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017c3c:	88bb      	ldrh	r3, [r7, #4]
 8017c3e:	b2db      	uxtb	r3, r3
 8017c40:	2101      	movs	r1, #1
 8017c42:	9103      	str	r1, [sp, #12]
 8017c44:	9302      	str	r3, [sp, #8]
 8017c46:	2300      	movs	r3, #0
 8017c48:	9301      	str	r3, [sp, #4]
 8017c4a:	2308      	movs	r3, #8
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	2301      	movs	r3, #1
 8017c50:	68b9      	ldr	r1, [r7, #8]
 8017c52:	2001      	movs	r0, #1
 8017c54:	47a0      	blx	r4
 8017c56:	4603      	mov	r3, r0
}
 8017c58:	4618      	mov	r0, r3
 8017c5a:	3714      	adds	r7, #20
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	bd90      	pop	{r4, r7, pc}
 8017c60:	0801e6b8 	.word	0x0801e6b8
 8017c64:	0801e6c8 	.word	0x0801e6c8
 8017c68:	0801e73c 	.word	0x0801e73c

08017c6c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b088      	sub	sp, #32
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017c74:	2300      	movs	r3, #0
 8017c76:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	781b      	ldrb	r3, [r3, #0]
 8017c7c:	3b01      	subs	r3, #1
 8017c7e:	2b38      	cmp	r3, #56	; 0x38
 8017c80:	f200 813c 	bhi.w	8017efc <RegionUS915GetPhyParam+0x290>
 8017c84:	a201      	add	r2, pc, #4	; (adr r2, 8017c8c <RegionUS915GetPhyParam+0x20>)
 8017c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c8a:	bf00      	nop
 8017c8c:	08017d71 	.word	0x08017d71
 8017c90:	08017d77 	.word	0x08017d77
 8017c94:	08017efd 	.word	0x08017efd
 8017c98:	08017efd 	.word	0x08017efd
 8017c9c:	08017efd 	.word	0x08017efd
 8017ca0:	08017d7d 	.word	0x08017d7d
 8017ca4:	08017efd 	.word	0x08017efd
 8017ca8:	08017db7 	.word	0x08017db7
 8017cac:	08017efd 	.word	0x08017efd
 8017cb0:	08017dbd 	.word	0x08017dbd
 8017cb4:	08017dc3 	.word	0x08017dc3
 8017cb8:	08017dc9 	.word	0x08017dc9
 8017cbc:	08017dcf 	.word	0x08017dcf
 8017cc0:	08017ddf 	.word	0x08017ddf
 8017cc4:	08017def 	.word	0x08017def
 8017cc8:	08017df5 	.word	0x08017df5
 8017ccc:	08017dfd 	.word	0x08017dfd
 8017cd0:	08017e05 	.word	0x08017e05
 8017cd4:	08017e0d 	.word	0x08017e0d
 8017cd8:	08017e15 	.word	0x08017e15
 8017cdc:	08017e1d 	.word	0x08017e1d
 8017ce0:	08017e25 	.word	0x08017e25
 8017ce4:	08017e39 	.word	0x08017e39
 8017ce8:	08017e3f 	.word	0x08017e3f
 8017cec:	08017e45 	.word	0x08017e45
 8017cf0:	08017e4b 	.word	0x08017e4b
 8017cf4:	08017e57 	.word	0x08017e57
 8017cf8:	08017e63 	.word	0x08017e63
 8017cfc:	08017e69 	.word	0x08017e69
 8017d00:	08017e71 	.word	0x08017e71
 8017d04:	08017e77 	.word	0x08017e77
 8017d08:	08017e7d 	.word	0x08017e7d
 8017d0c:	08017e83 	.word	0x08017e83
 8017d10:	08017d83 	.word	0x08017d83
 8017d14:	08017efd 	.word	0x08017efd
 8017d18:	08017efd 	.word	0x08017efd
 8017d1c:	08017efd 	.word	0x08017efd
 8017d20:	08017efd 	.word	0x08017efd
 8017d24:	08017efd 	.word	0x08017efd
 8017d28:	08017efd 	.word	0x08017efd
 8017d2c:	08017efd 	.word	0x08017efd
 8017d30:	08017efd 	.word	0x08017efd
 8017d34:	08017efd 	.word	0x08017efd
 8017d38:	08017efd 	.word	0x08017efd
 8017d3c:	08017efd 	.word	0x08017efd
 8017d40:	08017efd 	.word	0x08017efd
 8017d44:	08017efd 	.word	0x08017efd
 8017d48:	08017e8b 	.word	0x08017e8b
 8017d4c:	08017e9f 	.word	0x08017e9f
 8017d50:	08017ead 	.word	0x08017ead
 8017d54:	08017eb3 	.word	0x08017eb3
 8017d58:	08017efd 	.word	0x08017efd
 8017d5c:	08017eb9 	.word	0x08017eb9
 8017d60:	08017ecd 	.word	0x08017ecd
 8017d64:	08017ed3 	.word	0x08017ed3
 8017d68:	08017ed9 	.word	0x08017ed9
 8017d6c:	08017ee9 	.word	0x08017ee9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017d70:	2308      	movs	r3, #8
 8017d72:	61bb      	str	r3, [r7, #24]
            break;
 8017d74:	e0c3      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017d76:	2300      	movs	r3, #0
 8017d78:	61bb      	str	r3, [r7, #24]
            break;
 8017d7a:	e0c0      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	61bb      	str	r3, [r7, #24]
            break;
 8017d80:	e0bd      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017d88:	733b      	strb	r3, [r7, #12]
 8017d8a:	2304      	movs	r3, #4
 8017d8c:	737b      	strb	r3, [r7, #13]
 8017d8e:	2300      	movs	r3, #0
 8017d90:	73bb      	strb	r3, [r7, #14]
 8017d92:	2348      	movs	r3, #72	; 0x48
 8017d94:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017d96:	4b5d      	ldr	r3, [pc, #372]	; (8017f0c <RegionUS915GetPhyParam+0x2a0>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017d9e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017da0:	4b5a      	ldr	r3, [pc, #360]	; (8017f0c <RegionUS915GetPhyParam+0x2a0>)
 8017da2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017da4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017da6:	f107 030c 	add.w	r3, r7, #12
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7fe fbfd 	bl	80165aa <RegionCommonGetNextLowerTxDr>
 8017db0:	4603      	mov	r3, r0
 8017db2:	61bb      	str	r3, [r7, #24]
            break;
 8017db4:	e0a3      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017db6:	2300      	movs	r3, #0
 8017db8:	61bb      	str	r3, [r7, #24]
            break;
 8017dba:	e0a0      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	61bb      	str	r3, [r7, #24]
            break;
 8017dc0:	e09d      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017dc2:	2340      	movs	r3, #64	; 0x40
 8017dc4:	61bb      	str	r3, [r7, #24]
            break;
 8017dc6:	e09a      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017dc8:	2320      	movs	r3, #32
 8017dca:	61bb      	str	r3, [r7, #24]
            break;
 8017dcc:	e097      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dd4:	461a      	mov	r2, r3
 8017dd6:	4b4e      	ldr	r3, [pc, #312]	; (8017f10 <RegionUS915GetPhyParam+0x2a4>)
 8017dd8:	5c9b      	ldrb	r3, [r3, r2]
 8017dda:	61bb      	str	r3, [r7, #24]
            break;
 8017ddc:	e08f      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017de4:	461a      	mov	r2, r3
 8017de6:	4b4b      	ldr	r3, [pc, #300]	; (8017f14 <RegionUS915GetPhyParam+0x2a8>)
 8017de8:	5c9b      	ldrb	r3, [r3, r2]
 8017dea:	61bb      	str	r3, [r7, #24]
            break;
 8017dec:	e087      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017dee:	2300      	movs	r3, #0
 8017df0:	61bb      	str	r3, [r7, #24]
            break;
 8017df2:	e084      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017df4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017df8:	61bb      	str	r3, [r7, #24]
            break;
 8017dfa:	e080      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e00:	61bb      	str	r3, [r7, #24]
            break;
 8017e02:	e07c      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017e04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017e08:	61bb      	str	r3, [r7, #24]
            break;
 8017e0a:	e078      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017e0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8017e10:	61bb      	str	r3, [r7, #24]
            break;
 8017e12:	e074      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017e14:	f241 7370 	movw	r3, #6000	; 0x1770
 8017e18:	61bb      	str	r3, [r7, #24]
            break;
 8017e1a:	e070      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8017e1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017e20:	61bb      	str	r3, [r7, #24]
            break;
 8017e22:	e06c      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8017e24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017e28:	483b      	ldr	r0, [pc, #236]	; (8017f18 <RegionUS915GetPhyParam+0x2ac>)
 8017e2a:	f001 f90b 	bl	8019044 <randr>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017e34:	61bb      	str	r3, [r7, #24]
            break;
 8017e36:	e062      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017e38:	2300      	movs	r3, #0
 8017e3a:	61bb      	str	r3, [r7, #24]
            break;
 8017e3c:	e05f      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017e3e:	4b37      	ldr	r3, [pc, #220]	; (8017f1c <RegionUS915GetPhyParam+0x2b0>)
 8017e40:	61bb      	str	r3, [r7, #24]
            break;
 8017e42:	e05c      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017e44:	2308      	movs	r3, #8
 8017e46:	61bb      	str	r3, [r7, #24]
            break;
 8017e48:	e059      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017e4a:	4b30      	ldr	r3, [pc, #192]	; (8017f0c <RegionUS915GetPhyParam+0x2a0>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017e52:	61bb      	str	r3, [r7, #24]
            break;
 8017e54:	e053      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017e56:	4b2d      	ldr	r3, [pc, #180]	; (8017f0c <RegionUS915GetPhyParam+0x2a0>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017e5e:	61bb      	str	r3, [r7, #24]
            break;
 8017e60:	e04d      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017e62:	2348      	movs	r3, #72	; 0x48
 8017e64:	61bb      	str	r3, [r7, #24]
            break;
 8017e66:	e04a      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017e68:	4b28      	ldr	r3, [pc, #160]	; (8017f0c <RegionUS915GetPhyParam+0x2a0>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	61bb      	str	r3, [r7, #24]
            break;
 8017e6e:	e046      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017e70:	2300      	movs	r3, #0
 8017e72:	61bb      	str	r3, [r7, #24]
            break;
 8017e74:	e043      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017e76:	2300      	movs	r3, #0
 8017e78:	61bb      	str	r3, [r7, #24]
            break;
 8017e7a:	e040      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017e7c:	4b28      	ldr	r3, [pc, #160]	; (8017f20 <RegionUS915GetPhyParam+0x2b4>)
 8017e7e:	61bb      	str	r3, [r7, #24]
            break;
 8017e80:	e03d      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017e82:	f04f 0300 	mov.w	r3, #0
 8017e86:	61bb      	str	r3, [r7, #24]
            break;
 8017e88:	e039      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	791b      	ldrb	r3, [r3, #4]
 8017e8e:	4a25      	ldr	r2, [pc, #148]	; (8017f24 <RegionUS915GetPhyParam+0x2b8>)
 8017e90:	4922      	ldr	r1, [pc, #136]	; (8017f1c <RegionUS915GetPhyParam+0x2b0>)
 8017e92:	4618      	mov	r0, r3
 8017e94:	f7fd fcfb 	bl	801588e <RegionBaseUSCalcDownlinkFrequency>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017e9c:	e02f      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017e9e:	2317      	movs	r3, #23
 8017ea0:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017ea2:	2305      	movs	r3, #5
 8017ea4:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017ea6:	2303      	movs	r3, #3
 8017ea8:	76bb      	strb	r3, [r7, #26]
            break;
 8017eaa:	e028      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017eac:	2308      	movs	r3, #8
 8017eae:	61bb      	str	r3, [r7, #24]
            break;
 8017eb0:	e025      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017eb2:	2308      	movs	r3, #8
 8017eb4:	61bb      	str	r3, [r7, #24]
            break;
 8017eb6:	e022      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	791b      	ldrb	r3, [r3, #4]
 8017ebc:	4a19      	ldr	r2, [pc, #100]	; (8017f24 <RegionUS915GetPhyParam+0x2b8>)
 8017ebe:	4917      	ldr	r1, [pc, #92]	; (8017f1c <RegionUS915GetPhyParam+0x2b0>)
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7fd fce4 	bl	801588e <RegionBaseUSCalcDownlinkFrequency>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017eca:	e018      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017ecc:	2308      	movs	r3, #8
 8017ece:	61bb      	str	r3, [r7, #24]
            break;
 8017ed0:	e015      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017ed2:	2308      	movs	r3, #8
 8017ed4:	61bb      	str	r3, [r7, #24]
            break;
 8017ed6:	e012      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ede:	461a      	mov	r2, r3
 8017ee0:	4b11      	ldr	r3, [pc, #68]	; (8017f28 <RegionUS915GetPhyParam+0x2bc>)
 8017ee2:	5c9b      	ldrb	r3, [r3, r2]
 8017ee4:	61bb      	str	r3, [r7, #24]
            break;
 8017ee6:	e00a      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017eee:	490f      	ldr	r1, [pc, #60]	; (8017f2c <RegionUS915GetPhyParam+0x2c0>)
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f7fe fbad 	bl	8016650 <RegionCommonGetBandwidth>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	61bb      	str	r3, [r7, #24]
            break;
 8017efa:	e000      	b.n	8017efe <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 8017efc:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017efe:	69bb      	ldr	r3, [r7, #24]
 8017f00:	61fb      	str	r3, [r7, #28]
 8017f02:	69fb      	ldr	r3, [r7, #28]
}
 8017f04:	4618      	mov	r0, r3
 8017f06:	3720      	adds	r7, #32
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}
 8017f0c:	20003cec 	.word	0x20003cec
 8017f10:	0801e71c 	.word	0x0801e71c
 8017f14:	0801e72c 	.word	0x0801e72c
 8017f18:	fffffc18 	.word	0xfffffc18
 8017f1c:	370870a0 	.word	0x370870a0
 8017f20:	4200999a 	.word	0x4200999a
 8017f24:	000927c0 	.word	0x000927c0
 8017f28:	0801e6b8 	.word	0x0801e6b8
 8017f2c:	0801e6c8 	.word	0x0801e6c8

08017f30 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017f30:	b590      	push	{r4, r7, lr}
 8017f32:	b085      	sub	sp, #20
 8017f34:	af02      	add	r7, sp, #8
 8017f36:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017f38:	4b11      	ldr	r3, [pc, #68]	; (8017f80 <RegionUS915SetBandTxDone+0x50>)
 8017f3a:	681a      	ldr	r2, [r3, #0]
 8017f3c:	4b11      	ldr	r3, [pc, #68]	; (8017f84 <RegionUS915SetBandTxDone+0x54>)
 8017f3e:	6819      	ldr	r1, [r3, #0]
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	781b      	ldrb	r3, [r3, #0]
 8017f44:	4618      	mov	r0, r3
 8017f46:	4603      	mov	r3, r0
 8017f48:	005b      	lsls	r3, r3, #1
 8017f4a:	4403      	add	r3, r0
 8017f4c:	009b      	lsls	r3, r3, #2
 8017f4e:	440b      	add	r3, r1
 8017f50:	3309      	adds	r3, #9
 8017f52:	781b      	ldrb	r3, [r3, #0]
 8017f54:	4619      	mov	r1, r3
 8017f56:	460b      	mov	r3, r1
 8017f58:	005b      	lsls	r3, r3, #1
 8017f5a:	440b      	add	r3, r1
 8017f5c:	00db      	lsls	r3, r3, #3
 8017f5e:	18d0      	adds	r0, r2, r3
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	6899      	ldr	r1, [r3, #8]
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	785c      	ldrb	r4, [r3, #1]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	691a      	ldr	r2, [r3, #16]
 8017f6c:	9200      	str	r2, [sp, #0]
 8017f6e:	68db      	ldr	r3, [r3, #12]
 8017f70:	4622      	mov	r2, r4
 8017f72:	f7fd ff03 	bl	8015d7c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 8017f76:	bf00      	nop
 8017f78:	370c      	adds	r7, #12
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd90      	pop	{r4, r7, pc}
 8017f7e:	bf00      	nop
 8017f80:	20003ce8 	.word	0x20003ce8
 8017f84:	20003cec 	.word	0x20003cec

08017f88 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b08a      	sub	sp, #40	; 0x28
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017f90:	2301      	movs	r3, #1
 8017f92:	81bb      	strh	r3, [r7, #12]
 8017f94:	2300      	movs	r3, #0
 8017f96:	73bb      	strb	r3, [r7, #14]
 8017f98:	2300      	movs	r3, #0
 8017f9a:	613b      	str	r3, [r7, #16]
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	617b      	str	r3, [r7, #20]
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	61bb      	str	r3, [r7, #24]
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	61fb      	str	r3, [r7, #28]
 8017fa8:	2300      	movs	r3, #0
 8017faa:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	7a1b      	ldrb	r3, [r3, #8]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d007      	beq.n	8017fc6 <RegionUS915InitDefaults+0x3e>
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	f2c0 8106 	blt.w	80181c8 <RegionUS915InitDefaults+0x240>
 8017fbc:	3b01      	subs	r3, #1
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	f200 8102 	bhi.w	80181c8 <RegionUS915InitDefaults+0x240>
 8017fc4:	e0ce      	b.n	8018164 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	f000 80fe 	beq.w	80181cc <RegionUS915InitDefaults+0x244>
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	685b      	ldr	r3, [r3, #4]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	f000 80f9 	beq.w	80181cc <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	4a7d      	ldr	r2, [pc, #500]	; (80181d4 <RegionUS915InitDefaults+0x24c>)
 8017fe0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	685b      	ldr	r3, [r3, #4]
 8017fe6:	4a7c      	ldr	r2, [pc, #496]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8017fe8:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017fea:	4b7a      	ldr	r3, [pc, #488]	; (80181d4 <RegionUS915InitDefaults+0x24c>)
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	2200      	movs	r2, #0
 8017ff0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8017ff4:	4b77      	ldr	r3, [pc, #476]	; (80181d4 <RegionUS915InitDefaults+0x24c>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017ffe:	4b75      	ldr	r3, [pc, #468]	; (80181d4 <RegionUS915InitDefaults+0x24c>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	4618      	mov	r0, r3
 8018004:	f107 030c 	add.w	r3, r7, #12
 8018008:	2218      	movs	r2, #24
 801800a:	4619      	mov	r1, r3
 801800c:	f001 f831 	bl	8019072 <memcpy1>

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8018010:	2300      	movs	r3, #0
 8018012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018016:	e02e      	b.n	8018076 <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8018018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801801c:	4a6f      	ldr	r2, [pc, #444]	; (80181dc <RegionUS915InitDefaults+0x254>)
 801801e:	fb03 f202 	mul.w	r2, r3, r2
 8018022:	4b6f      	ldr	r3, [pc, #444]	; (80181e0 <RegionUS915InitDefaults+0x258>)
 8018024:	4413      	add	r3, r2
 8018026:	4a6c      	ldr	r2, [pc, #432]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018028:	6811      	ldr	r1, [r2, #0]
 801802a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801802e:	4618      	mov	r0, r3
 8018030:	4613      	mov	r3, r2
 8018032:	005b      	lsls	r3, r3, #1
 8018034:	4413      	add	r3, r2
 8018036:	009b      	lsls	r3, r3, #2
 8018038:	440b      	add	r3, r1
 801803a:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801803c:	4b66      	ldr	r3, [pc, #408]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 801803e:	6819      	ldr	r1, [r3, #0]
 8018040:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018044:	4613      	mov	r3, r2
 8018046:	005b      	lsls	r3, r3, #1
 8018048:	4413      	add	r3, r2
 801804a:	009b      	lsls	r3, r3, #2
 801804c:	440b      	add	r3, r1
 801804e:	3308      	adds	r3, #8
 8018050:	2230      	movs	r2, #48	; 0x30
 8018052:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8018054:	4b60      	ldr	r3, [pc, #384]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018056:	6819      	ldr	r1, [r3, #0]
 8018058:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801805c:	4613      	mov	r3, r2
 801805e:	005b      	lsls	r3, r3, #1
 8018060:	4413      	add	r3, r2
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	440b      	add	r3, r1
 8018066:	3309      	adds	r3, #9
 8018068:	2200      	movs	r2, #0
 801806a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801806c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018070:	3301      	adds	r3, #1
 8018072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801807a:	2b3f      	cmp	r3, #63	; 0x3f
 801807c:	d9cc      	bls.n	8018018 <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801807e:	2340      	movs	r3, #64	; 0x40
 8018080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018084:	e02f      	b.n	80180e6 <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8018086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801808a:	3b40      	subs	r3, #64	; 0x40
 801808c:	4a55      	ldr	r2, [pc, #340]	; (80181e4 <RegionUS915InitDefaults+0x25c>)
 801808e:	fb03 f202 	mul.w	r2, r3, r2
 8018092:	4b55      	ldr	r3, [pc, #340]	; (80181e8 <RegionUS915InitDefaults+0x260>)
 8018094:	4413      	add	r3, r2
 8018096:	4a50      	ldr	r2, [pc, #320]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018098:	6811      	ldr	r1, [r2, #0]
 801809a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801809e:	4618      	mov	r0, r3
 80180a0:	4613      	mov	r3, r2
 80180a2:	005b      	lsls	r3, r3, #1
 80180a4:	4413      	add	r3, r2
 80180a6:	009b      	lsls	r3, r3, #2
 80180a8:	440b      	add	r3, r1
 80180aa:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80180ac:	4b4a      	ldr	r3, [pc, #296]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 80180ae:	6819      	ldr	r1, [r3, #0]
 80180b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80180b4:	4613      	mov	r3, r2
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	4413      	add	r3, r2
 80180ba:	009b      	lsls	r3, r3, #2
 80180bc:	440b      	add	r3, r1
 80180be:	3308      	adds	r3, #8
 80180c0:	2244      	movs	r2, #68	; 0x44
 80180c2:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80180c4:	4b44      	ldr	r3, [pc, #272]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 80180c6:	6819      	ldr	r1, [r3, #0]
 80180c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80180cc:	4613      	mov	r3, r2
 80180ce:	005b      	lsls	r3, r3, #1
 80180d0:	4413      	add	r3, r2
 80180d2:	009b      	lsls	r3, r3, #2
 80180d4:	440b      	add	r3, r1
 80180d6:	3309      	adds	r3, #9
 80180d8:	2200      	movs	r2, #0
 80180da:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80180dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80180e0:	3301      	adds	r3, #1
 80180e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80180e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80180ea:	2b47      	cmp	r3, #71	; 0x47
 80180ec:	d9cb      	bls.n	8018086 <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x0001;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80180ee:	4b3a      	ldr	r3, [pc, #232]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180f6:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80180fa:	4b37      	ldr	r3, [pc, #220]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018102:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8018106:	4b34      	ldr	r3, [pc, #208]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801810e:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8018112:	4b31      	ldr	r3, [pc, #196]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801811a:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801811e:	4b2e      	ldr	r3, [pc, #184]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	22ff      	movs	r2, #255	; 0xff
 8018124:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8018128:	4b2b      	ldr	r3, [pc, #172]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	2200      	movs	r2, #0
 801812e:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018132:	4b29      	ldr	r3, [pc, #164]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801813a:	4b27      	ldr	r3, [pc, #156]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018142:	2206      	movs	r2, #6
 8018144:	4619      	mov	r1, r3
 8018146:	f7fd fdf3 	bl	8015d30 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801814a:	4b22      	ldr	r3, [pc, #136]	; (80181d4 <RegionUS915InitDefaults+0x24c>)
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8018152:	4b21      	ldr	r3, [pc, #132]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801815a:	2206      	movs	r2, #6
 801815c:	4619      	mov	r1, r3
 801815e:	f7fd fde7 	bl	8015d30 <RegionCommonChanMaskCopy>
            break;
 8018162:	e034      	b.n	80181ce <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018164:	4b1c      	ldr	r3, [pc, #112]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801816c:	4b1a      	ldr	r3, [pc, #104]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018174:	2206      	movs	r2, #6
 8018176:	4619      	mov	r1, r3
 8018178:	f7fd fdda 	bl	8015d30 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801817c:	2300      	movs	r3, #0
 801817e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018182:	e01c      	b.n	80181be <RegionUS915InitDefaults+0x236>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018184:	4b13      	ldr	r3, [pc, #76]	; (80181d4 <RegionUS915InitDefaults+0x24c>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801818c:	3248      	adds	r2, #72	; 0x48
 801818e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018192:	4b11      	ldr	r3, [pc, #68]	; (80181d8 <RegionUS915InitDefaults+0x250>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801819a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801819e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80181a2:	4b0c      	ldr	r3, [pc, #48]	; (80181d4 <RegionUS915InitDefaults+0x24c>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80181aa:	4001      	ands	r1, r0
 80181ac:	b289      	uxth	r1, r1
 80181ae:	3248      	adds	r2, #72	; 0x48
 80181b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80181b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80181b8:	3301      	adds	r3, #1
 80181ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80181be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80181c2:	2b05      	cmp	r3, #5
 80181c4:	d9de      	bls.n	8018184 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80181c6:	e002      	b.n	80181ce <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 80181c8:	bf00      	nop
 80181ca:	e000      	b.n	80181ce <RegionUS915InitDefaults+0x246>
                return;
 80181cc:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80181ce:	3728      	adds	r7, #40	; 0x28
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd80      	pop	{r7, pc}
 80181d4:	20003ce8 	.word	0x20003ce8
 80181d8:	20003cec 	.word	0x20003cec
 80181dc:	00030d40 	.word	0x00030d40
 80181e0:	35c80160 	.word	0x35c80160
 80181e4:	00186a00 	.word	0x00186a00
 80181e8:	35d2afc0 	.word	0x35d2afc0

080181ec <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b082      	sub	sp, #8
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
 80181f4:	460b      	mov	r3, r1
 80181f6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 80181f8:	78fb      	ldrb	r3, [r7, #3]
 80181fa:	2b0f      	cmp	r3, #15
 80181fc:	d858      	bhi.n	80182b0 <RegionUS915Verify+0xc4>
 80181fe:	a201      	add	r2, pc, #4	; (adr r2, 8018204 <RegionUS915Verify+0x18>)
 8018200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018204:	08018245 	.word	0x08018245
 8018208:	080182b1 	.word	0x080182b1
 801820c:	080182b1 	.word	0x080182b1
 8018210:	080182b1 	.word	0x080182b1
 8018214:	080182b1 	.word	0x080182b1
 8018218:	08018253 	.word	0x08018253
 801821c:	08018253 	.word	0x08018253
 8018220:	08018271 	.word	0x08018271
 8018224:	080182b1 	.word	0x080182b1
 8018228:	0801828f 	.word	0x0801828f
 801822c:	0801828f 	.word	0x0801828f
 8018230:	080182b1 	.word	0x080182b1
 8018234:	080182b1 	.word	0x080182b1
 8018238:	080182b1 	.word	0x080182b1
 801823c:	080182b1 	.word	0x080182b1
 8018240:	080182ad 	.word	0x080182ad
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	4618      	mov	r0, r3
 801824a:	f7ff fc9b 	bl	8017b84 <VerifyRfFreq>
 801824e:	4603      	mov	r3, r0
 8018250:	e02f      	b.n	80182b2 <RegionUS915Verify+0xc6>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	f993 3000 	ldrsb.w	r3, [r3]
 8018258:	2204      	movs	r2, #4
 801825a:	2100      	movs	r1, #0
 801825c:	4618      	mov	r0, r3
 801825e:	f7fd fcea 	bl	8015c36 <RegionCommonValueInRange>
 8018262:	4603      	mov	r3, r0
 8018264:	2b00      	cmp	r3, #0
 8018266:	bf14      	ite	ne
 8018268:	2301      	movne	r3, #1
 801826a:	2300      	moveq	r3, #0
 801826c:	b2db      	uxtb	r3, r3
 801826e:	e020      	b.n	80182b2 <RegionUS915Verify+0xc6>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f993 3000 	ldrsb.w	r3, [r3]
 8018276:	220d      	movs	r2, #13
 8018278:	2108      	movs	r1, #8
 801827a:	4618      	mov	r0, r3
 801827c:	f7fd fcdb 	bl	8015c36 <RegionCommonValueInRange>
 8018280:	4603      	mov	r3, r0
 8018282:	2b00      	cmp	r3, #0
 8018284:	bf14      	ite	ne
 8018286:	2301      	movne	r3, #1
 8018288:	2300      	moveq	r3, #0
 801828a:	b2db      	uxtb	r3, r3
 801828c:	e011      	b.n	80182b2 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	f993 3000 	ldrsb.w	r3, [r3]
 8018294:	220e      	movs	r2, #14
 8018296:	2100      	movs	r1, #0
 8018298:	4618      	mov	r0, r3
 801829a:	f7fd fccc 	bl	8015c36 <RegionCommonValueInRange>
 801829e:	4603      	mov	r3, r0
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	bf14      	ite	ne
 80182a4:	2301      	movne	r3, #1
 80182a6:	2300      	moveq	r3, #0
 80182a8:	b2db      	uxtb	r3, r3
 80182aa:	e002      	b.n	80182b2 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80182ac:	2300      	movs	r3, #0
 80182ae:	e000      	b.n	80182b2 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 80182b0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3708      	adds	r7, #8
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}
 80182ba:	bf00      	nop

080182bc <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80182bc:	b480      	push	{r7}
 80182be:	b085      	sub	sp, #20
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	791b      	ldrb	r3, [r3, #4]
 80182c8:	2b10      	cmp	r3, #16
 80182ca:	d162      	bne.n	8018392 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	330f      	adds	r3, #15
 80182d2:	781b      	ldrb	r3, [r3, #0]
 80182d4:	2b01      	cmp	r3, #1
 80182d6:	d15e      	bne.n	8018396 <RegionUS915ApplyCFList+0xda>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80182d8:	2300      	movs	r3, #0
 80182da:	73fb      	strb	r3, [r7, #15]
 80182dc:	2300      	movs	r3, #0
 80182de:	73bb      	strb	r3, [r7, #14]
 80182e0:	e053      	b.n	801838a <RegionUS915ApplyCFList+0xce>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	681a      	ldr	r2, [r3, #0]
 80182e6:	7bbb      	ldrb	r3, [r7, #14]
 80182e8:	4413      	add	r3, r2
 80182ea:	7819      	ldrb	r1, [r3, #0]
 80182ec:	4b2c      	ldr	r3, [pc, #176]	; (80183a0 <RegionUS915ApplyCFList+0xe4>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	7bfa      	ldrb	r2, [r7, #15]
 80182f2:	b289      	uxth	r1, r1
 80182f4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80182f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80182fc:	4b28      	ldr	r3, [pc, #160]	; (80183a0 <RegionUS915ApplyCFList+0xe4>)
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	7bfa      	ldrb	r2, [r7, #15]
 8018302:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018306:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681a      	ldr	r2, [r3, #0]
 801830e:	7bbb      	ldrb	r3, [r7, #14]
 8018310:	3301      	adds	r3, #1
 8018312:	4413      	add	r3, r2
 8018314:	781b      	ldrb	r3, [r3, #0]
 8018316:	b29b      	uxth	r3, r3
 8018318:	021b      	lsls	r3, r3, #8
 801831a:	b299      	uxth	r1, r3
 801831c:	4b20      	ldr	r3, [pc, #128]	; (80183a0 <RegionUS915ApplyCFList+0xe4>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	7bfa      	ldrb	r2, [r7, #15]
 8018322:	4301      	orrs	r1, r0
 8018324:	b289      	uxth	r1, r1
 8018326:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801832a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801832e:	7bfb      	ldrb	r3, [r7, #15]
 8018330:	2b04      	cmp	r3, #4
 8018332:	d10f      	bne.n	8018354 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8018334:	4b1a      	ldr	r3, [pc, #104]	; (80183a0 <RegionUS915ApplyCFList+0xe4>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	7bfa      	ldrb	r2, [r7, #15]
 801833a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801833e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018342:	4b17      	ldr	r3, [pc, #92]	; (80183a0 <RegionUS915ApplyCFList+0xe4>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	7bfa      	ldrb	r2, [r7, #15]
 8018348:	b2c9      	uxtb	r1, r1
 801834a:	b289      	uxth	r1, r1
 801834c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018350:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8018354:	4b13      	ldr	r3, [pc, #76]	; (80183a4 <RegionUS915ApplyCFList+0xe8>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	7bfa      	ldrb	r2, [r7, #15]
 801835a:	3248      	adds	r2, #72	; 0x48
 801835c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018360:	4b0f      	ldr	r3, [pc, #60]	; (80183a0 <RegionUS915ApplyCFList+0xe4>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	7bfa      	ldrb	r2, [r7, #15]
 8018366:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801836a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801836e:	4b0d      	ldr	r3, [pc, #52]	; (80183a4 <RegionUS915ApplyCFList+0xe8>)
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	7bfa      	ldrb	r2, [r7, #15]
 8018374:	4001      	ands	r1, r0
 8018376:	b289      	uxth	r1, r1
 8018378:	3248      	adds	r2, #72	; 0x48
 801837a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801837e:	7bfb      	ldrb	r3, [r7, #15]
 8018380:	3301      	adds	r3, #1
 8018382:	73fb      	strb	r3, [r7, #15]
 8018384:	7bbb      	ldrb	r3, [r7, #14]
 8018386:	3302      	adds	r3, #2
 8018388:	73bb      	strb	r3, [r7, #14]
 801838a:	7bfb      	ldrb	r3, [r7, #15]
 801838c:	2b04      	cmp	r3, #4
 801838e:	d9a8      	bls.n	80182e2 <RegionUS915ApplyCFList+0x26>
 8018390:	e002      	b.n	8018398 <RegionUS915ApplyCFList+0xdc>
        return;
 8018392:	bf00      	nop
 8018394:	e000      	b.n	8018398 <RegionUS915ApplyCFList+0xdc>
        return;
 8018396:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8018398:	3714      	adds	r7, #20
 801839a:	46bd      	mov	sp, r7
 801839c:	bc80      	pop	{r7}
 801839e:	4770      	bx	lr
 80183a0:	20003cec 	.word	0x20003cec
 80183a4:	20003ce8 	.word	0x20003ce8

080183a8 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b084      	sub	sp, #16
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	2204      	movs	r2, #4
 80183b6:	2100      	movs	r1, #0
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7fd fc8d 	bl	8015cd8 <RegionCommonCountChannels>
 80183be:	4603      	mov	r3, r0
 80183c0:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80183c2:	7bbb      	ldrb	r3, [r7, #14]
 80183c4:	2b01      	cmp	r3, #1
 80183c6:	d804      	bhi.n	80183d2 <RegionUS915ChanMaskSet+0x2a>
 80183c8:	7bbb      	ldrb	r3, [r7, #14]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d001      	beq.n	80183d2 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 80183ce:	2300      	movs	r3, #0
 80183d0:	e04c      	b.n	801846c <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	791b      	ldrb	r3, [r3, #4]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d002      	beq.n	80183e0 <RegionUS915ChanMaskSet+0x38>
 80183da:	2b01      	cmp	r3, #1
 80183dc:	d038      	beq.n	8018450 <RegionUS915ChanMaskSet+0xa8>
 80183de:	e042      	b.n	8018466 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80183e0:	4b24      	ldr	r3, [pc, #144]	; (8018474 <RegionUS915ChanMaskSet+0xcc>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	2206      	movs	r2, #6
 80183ee:	4619      	mov	r1, r3
 80183f0:	f7fd fc9e 	bl	8015d30 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80183f4:	4b1f      	ldr	r3, [pc, #124]	; (8018474 <RegionUS915ChanMaskSet+0xcc>)
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 80183fc:	4b1d      	ldr	r3, [pc, #116]	; (8018474 <RegionUS915ChanMaskSet+0xcc>)
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	b2d2      	uxtb	r2, r2
 8018402:	b292      	uxth	r2, r2
 8018404:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8018408:	4b1a      	ldr	r3, [pc, #104]	; (8018474 <RegionUS915ChanMaskSet+0xcc>)
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	2200      	movs	r2, #0
 801840e:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018412:	2300      	movs	r3, #0
 8018414:	73fb      	strb	r3, [r7, #15]
 8018416:	e017      	b.n	8018448 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018418:	4b17      	ldr	r3, [pc, #92]	; (8018478 <RegionUS915ChanMaskSet+0xd0>)
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	7bfa      	ldrb	r2, [r7, #15]
 801841e:	3248      	adds	r2, #72	; 0x48
 8018420:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018424:	4b13      	ldr	r3, [pc, #76]	; (8018474 <RegionUS915ChanMaskSet+0xcc>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	7bfa      	ldrb	r2, [r7, #15]
 801842a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801842e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018432:	4b11      	ldr	r3, [pc, #68]	; (8018478 <RegionUS915ChanMaskSet+0xd0>)
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	7bfa      	ldrb	r2, [r7, #15]
 8018438:	4001      	ands	r1, r0
 801843a:	b289      	uxth	r1, r1
 801843c:	3248      	adds	r2, #72	; 0x48
 801843e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018442:	7bfb      	ldrb	r3, [r7, #15]
 8018444:	3301      	adds	r3, #1
 8018446:	73fb      	strb	r3, [r7, #15]
 8018448:	7bfb      	ldrb	r3, [r7, #15]
 801844a:	2b05      	cmp	r3, #5
 801844c:	d9e4      	bls.n	8018418 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801844e:	e00c      	b.n	801846a <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018450:	4b08      	ldr	r3, [pc, #32]	; (8018474 <RegionUS915ChanMaskSet+0xcc>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	2206      	movs	r2, #6
 801845e:	4619      	mov	r1, r3
 8018460:	f7fd fc66 	bl	8015d30 <RegionCommonChanMaskCopy>
            break;
 8018464:	e001      	b.n	801846a <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 8018466:	2300      	movs	r3, #0
 8018468:	e000      	b.n	801846c <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 801846a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801846c:	4618      	mov	r0, r3
 801846e:	3710      	adds	r7, #16
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}
 8018474:	20003cec 	.word	0x20003cec
 8018478:	20003ce8 	.word	0x20003ce8

0801847c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b088      	sub	sp, #32
 8018480:	af02      	add	r7, sp, #8
 8018482:	60ba      	str	r2, [r7, #8]
 8018484:	607b      	str	r3, [r7, #4]
 8018486:	4603      	mov	r3, r0
 8018488:	73fb      	strb	r3, [r7, #15]
 801848a:	460b      	mov	r3, r1
 801848c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801848e:	2300      	movs	r3, #0
 8018490:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8018492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018496:	2b0d      	cmp	r3, #13
 8018498:	bfa8      	it	ge
 801849a:	230d      	movge	r3, #13
 801849c:	b25a      	sxtb	r2, r3
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184a8:	4916      	ldr	r1, [pc, #88]	; (8018504 <RegionUS915ComputeRxWindowParameters+0x88>)
 80184aa:	4618      	mov	r0, r3
 80184ac:	f7fe f8d0 	bl	8016650 <RegionCommonGetBandwidth>
 80184b0:	4603      	mov	r3, r0
 80184b2:	b2da      	uxtb	r2, r3
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184be:	461a      	mov	r2, r3
 80184c0:	4b11      	ldr	r3, [pc, #68]	; (8018508 <RegionUS915ComputeRxWindowParameters+0x8c>)
 80184c2:	5c9a      	ldrb	r2, [r3, r2]
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184ca:	4619      	mov	r1, r3
 80184cc:	4b0d      	ldr	r3, [pc, #52]	; (8018504 <RegionUS915ComputeRxWindowParameters+0x88>)
 80184ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80184d2:	4619      	mov	r1, r3
 80184d4:	4610      	mov	r0, r2
 80184d6:	f7fd fe39 	bl	801614c <RegionCommonComputeSymbolTimeLoRa>
 80184da:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80184dc:	4b0b      	ldr	r3, [pc, #44]	; (801850c <RegionUS915ComputeRxWindowParameters+0x90>)
 80184de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184e0:	4798      	blx	r3
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	3308      	adds	r3, #8
 80184e6:	687a      	ldr	r2, [r7, #4]
 80184e8:	320c      	adds	r2, #12
 80184ea:	7bb9      	ldrb	r1, [r7, #14]
 80184ec:	9201      	str	r2, [sp, #4]
 80184ee:	9300      	str	r3, [sp, #0]
 80184f0:	4603      	mov	r3, r0
 80184f2:	68ba      	ldr	r2, [r7, #8]
 80184f4:	6978      	ldr	r0, [r7, #20]
 80184f6:	f7fd fe4f 	bl	8016198 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 80184fa:	bf00      	nop
 80184fc:	3718      	adds	r7, #24
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}
 8018502:	bf00      	nop
 8018504:	0801e6c8 	.word	0x0801e6c8
 8018508:	0801e6b8 	.word	0x0801e6b8
 801850c:	0801e73c 	.word	0x0801e73c

08018510 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018510:	b590      	push	{r4, r7, lr}
 8018512:	b091      	sub	sp, #68	; 0x44
 8018514:	af0a      	add	r7, sp, #40	; 0x28
 8018516:	6078      	str	r0, [r7, #4]
 8018518:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	785b      	ldrb	r3, [r3, #1]
 801851e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018520:	2300      	movs	r3, #0
 8018522:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8018524:	2300      	movs	r3, #0
 8018526:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	685b      	ldr	r3, [r3, #4]
 801852c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801852e:	4b34      	ldr	r3, [pc, #208]	; (8018600 <RegionUS915RxConfig+0xf0>)
 8018530:	685b      	ldr	r3, [r3, #4]
 8018532:	4798      	blx	r3
 8018534:	4603      	mov	r3, r0
 8018536:	2b00      	cmp	r3, #0
 8018538:	d001      	beq.n	801853e <RegionUS915RxConfig+0x2e>
    {
        return false;
 801853a:	2300      	movs	r3, #0
 801853c:	e05c      	b.n	80185f8 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	7cdb      	ldrb	r3, [r3, #19]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d109      	bne.n	801855a <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	f003 0307 	and.w	r3, r3, #7
 801854e:	4a2d      	ldr	r2, [pc, #180]	; (8018604 <RegionUS915RxConfig+0xf4>)
 8018550:	fb03 f202 	mul.w	r2, r3, r2
 8018554:	4b2c      	ldr	r3, [pc, #176]	; (8018608 <RegionUS915RxConfig+0xf8>)
 8018556:	4413      	add	r3, r2
 8018558:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801855e:	4a2b      	ldr	r2, [pc, #172]	; (801860c <RegionUS915RxConfig+0xfc>)
 8018560:	5cd3      	ldrb	r3, [r2, r3]
 8018562:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018564:	4b26      	ldr	r3, [pc, #152]	; (8018600 <RegionUS915RxConfig+0xf0>)
 8018566:	68db      	ldr	r3, [r3, #12]
 8018568:	6938      	ldr	r0, [r7, #16]
 801856a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801856c:	4b24      	ldr	r3, [pc, #144]	; (8018600 <RegionUS915RxConfig+0xf0>)
 801856e:	699c      	ldr	r4, [r3, #24]
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	789b      	ldrb	r3, [r3, #2]
 8018574:	4618      	mov	r0, r3
 8018576:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	689b      	ldr	r3, [r3, #8]
 801857e:	b29b      	uxth	r3, r3
 8018580:	687a      	ldr	r2, [r7, #4]
 8018582:	7c92      	ldrb	r2, [r2, #18]
 8018584:	9209      	str	r2, [sp, #36]	; 0x24
 8018586:	2201      	movs	r2, #1
 8018588:	9208      	str	r2, [sp, #32]
 801858a:	2200      	movs	r2, #0
 801858c:	9207      	str	r2, [sp, #28]
 801858e:	2200      	movs	r2, #0
 8018590:	9206      	str	r2, [sp, #24]
 8018592:	2200      	movs	r2, #0
 8018594:	9205      	str	r2, [sp, #20]
 8018596:	2200      	movs	r2, #0
 8018598:	9204      	str	r2, [sp, #16]
 801859a:	2200      	movs	r2, #0
 801859c:	9203      	str	r2, [sp, #12]
 801859e:	9302      	str	r3, [sp, #8]
 80185a0:	2308      	movs	r3, #8
 80185a2:	9301      	str	r3, [sp, #4]
 80185a4:	2300      	movs	r3, #0
 80185a6:	9300      	str	r3, [sp, #0]
 80185a8:	2301      	movs	r3, #1
 80185aa:	460a      	mov	r2, r1
 80185ac:	4601      	mov	r1, r0
 80185ae:	2001      	movs	r0, #1
 80185b0:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	7c5b      	ldrb	r3, [r3, #17]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d005      	beq.n	80185c6 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80185ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185be:	4a14      	ldr	r2, [pc, #80]	; (8018610 <RegionUS915RxConfig+0x100>)
 80185c0:	5cd3      	ldrb	r3, [r2, r3]
 80185c2:	75fb      	strb	r3, [r7, #23]
 80185c4:	e004      	b.n	80185d0 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80185c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185ca:	4a12      	ldr	r2, [pc, #72]	; (8018614 <RegionUS915RxConfig+0x104>)
 80185cc:	5cd3      	ldrb	r3, [r2, r3]
 80185ce:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80185d0:	4b0b      	ldr	r3, [pc, #44]	; (8018600 <RegionUS915RxConfig+0xf0>)
 80185d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185d4:	7dfa      	ldrb	r2, [r7, #23]
 80185d6:	320d      	adds	r2, #13
 80185d8:	b2d2      	uxtb	r2, r2
 80185da:	4611      	mov	r1, r2
 80185dc:	2001      	movs	r0, #1
 80185de:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	7cdb      	ldrb	r3, [r3, #19]
 80185e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80185e8:	6939      	ldr	r1, [r7, #16]
 80185ea:	4618      	mov	r0, r3
 80185ec:	f7fe f84e 	bl	801668c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80185f0:	683b      	ldr	r3, [r7, #0]
 80185f2:	7bfa      	ldrb	r2, [r7, #15]
 80185f4:	701a      	strb	r2, [r3, #0]
    return true;
 80185f6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	371c      	adds	r7, #28
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd90      	pop	{r4, r7, pc}
 8018600:	0801e73c 	.word	0x0801e73c
 8018604:	000927c0 	.word	0x000927c0
 8018608:	370870a0 	.word	0x370870a0
 801860c:	0801e6b8 	.word	0x0801e6b8
 8018610:	0801e72c 	.word	0x0801e72c
 8018614:	0801e71c 	.word	0x0801e71c

08018618 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018618:	b590      	push	{r4, r7, lr}
 801861a:	b093      	sub	sp, #76	; 0x4c
 801861c:	af0a      	add	r7, sp, #40	; 0x28
 801861e:	60f8      	str	r0, [r7, #12]
 8018620:	60b9      	str	r1, [r7, #8]
 8018622:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801862a:	461a      	mov	r2, r3
 801862c:	4b4a      	ldr	r3, [pc, #296]	; (8018758 <RegionUS915TxConfig+0x140>)
 801862e:	5c9b      	ldrb	r3, [r3, r2]
 8018630:	77fb      	strb	r3, [r7, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018638:	4b48      	ldr	r3, [pc, #288]	; (801875c <RegionUS915TxConfig+0x144>)
 801863a:	681a      	ldr	r2, [r3, #0]
 801863c:	4b48      	ldr	r3, [pc, #288]	; (8018760 <RegionUS915TxConfig+0x148>)
 801863e:	6819      	ldr	r1, [r3, #0]
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	781b      	ldrb	r3, [r3, #0]
 8018644:	461c      	mov	r4, r3
 8018646:	4623      	mov	r3, r4
 8018648:	005b      	lsls	r3, r3, #1
 801864a:	4423      	add	r3, r4
 801864c:	009b      	lsls	r3, r3, #2
 801864e:	440b      	add	r3, r1
 8018650:	3309      	adds	r3, #9
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	4619      	mov	r1, r3
 8018656:	460b      	mov	r3, r1
 8018658:	005b      	lsls	r3, r3, #1
 801865a:	440b      	add	r3, r1
 801865c:	00db      	lsls	r3, r3, #3
 801865e:	4413      	add	r3, r2
 8018660:	3302      	adds	r3, #2
 8018662:	f993 1000 	ldrsb.w	r1, [r3]
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801866c:	4b3c      	ldr	r3, [pc, #240]	; (8018760 <RegionUS915TxConfig+0x148>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018674:	f7ff fa50 	bl	8017b18 <LimitTxPower>
 8018678:	4603      	mov	r3, r0
 801867a:	77bb      	strb	r3, [r7, #30]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018682:	4938      	ldr	r1, [pc, #224]	; (8018764 <RegionUS915TxConfig+0x14c>)
 8018684:	4618      	mov	r0, r3
 8018686:	f7fd ffe3 	bl	8016650 <RegionCommonGetBandwidth>
 801868a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801868c:	2300      	movs	r3, #0
 801868e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018690:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018694:	f04f 0200 	mov.w	r2, #0
 8018698:	4933      	ldr	r1, [pc, #204]	; (8018768 <RegionUS915TxConfig+0x150>)
 801869a:	4618      	mov	r0, r3
 801869c:	f7fd fe34 	bl	8016308 <RegionCommonComputeTxPower>
 80186a0:	4603      	mov	r3, r0
 80186a2:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80186a4:	4b31      	ldr	r3, [pc, #196]	; (801876c <RegionUS915TxConfig+0x154>)
 80186a6:	68da      	ldr	r2, [r3, #12]
 80186a8:	4b2d      	ldr	r3, [pc, #180]	; (8018760 <RegionUS915TxConfig+0x148>)
 80186aa:	6819      	ldr	r1, [r3, #0]
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	781b      	ldrb	r3, [r3, #0]
 80186b0:	4618      	mov	r0, r3
 80186b2:	4603      	mov	r3, r0
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	4403      	add	r3, r0
 80186b8:	009b      	lsls	r3, r3, #2
 80186ba:	440b      	add	r3, r1
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	4618      	mov	r0, r3
 80186c0:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80186c2:	4b2a      	ldr	r3, [pc, #168]	; (801876c <RegionUS915TxConfig+0x154>)
 80186c4:	69dc      	ldr	r4, [r3, #28]
 80186c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80186ca:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80186ce:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80186d2:	9208      	str	r2, [sp, #32]
 80186d4:	2200      	movs	r2, #0
 80186d6:	9207      	str	r2, [sp, #28]
 80186d8:	2200      	movs	r2, #0
 80186da:	9206      	str	r2, [sp, #24]
 80186dc:	2200      	movs	r2, #0
 80186de:	9205      	str	r2, [sp, #20]
 80186e0:	2201      	movs	r2, #1
 80186e2:	9204      	str	r2, [sp, #16]
 80186e4:	2200      	movs	r2, #0
 80186e6:	9203      	str	r2, [sp, #12]
 80186e8:	2208      	movs	r2, #8
 80186ea:	9202      	str	r2, [sp, #8]
 80186ec:	2201      	movs	r2, #1
 80186ee:	9201      	str	r2, [sp, #4]
 80186f0:	9300      	str	r3, [sp, #0]
 80186f2:	69bb      	ldr	r3, [r7, #24]
 80186f4:	2200      	movs	r2, #0
 80186f6:	2001      	movs	r0, #1
 80186f8:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80186fa:	4b19      	ldr	r3, [pc, #100]	; (8018760 <RegionUS915TxConfig+0x148>)
 80186fc:	681a      	ldr	r2, [r3, #0]
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	4619      	mov	r1, r3
 8018704:	460b      	mov	r3, r1
 8018706:	005b      	lsls	r3, r3, #1
 8018708:	440b      	add	r3, r1
 801870a:	009b      	lsls	r3, r3, #2
 801870c:	4413      	add	r3, r2
 801870e:	681a      	ldr	r2, [r3, #0]
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018716:	4619      	mov	r1, r3
 8018718:	4610      	mov	r0, r2
 801871a:	f7fd fff5 	bl	8016708 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801871e:	4b13      	ldr	r3, [pc, #76]	; (801876c <RegionUS915TxConfig+0x154>)
 8018720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018722:	68fa      	ldr	r2, [r7, #12]
 8018724:	8992      	ldrh	r2, [r2, #12]
 8018726:	b2d2      	uxtb	r2, r2
 8018728:	4611      	mov	r1, r2
 801872a:	2001      	movs	r0, #1
 801872c:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	899b      	ldrh	r3, [r3, #12]
 8018738:	4619      	mov	r1, r3
 801873a:	4610      	mov	r0, r2
 801873c:	f7ff fa66 	bl	8017c0c <GetTimeOnAir>
 8018740:	4602      	mov	r2, r0
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8018746:	68bb      	ldr	r3, [r7, #8]
 8018748:	7fba      	ldrb	r2, [r7, #30]
 801874a:	701a      	strb	r2, [r3, #0]
    return true;
 801874c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801874e:	4618      	mov	r0, r3
 8018750:	3724      	adds	r7, #36	; 0x24
 8018752:	46bd      	mov	sp, r7
 8018754:	bd90      	pop	{r4, r7, pc}
 8018756:	bf00      	nop
 8018758:	0801e6b8 	.word	0x0801e6b8
 801875c:	20003ce8 	.word	0x20003ce8
 8018760:	20003cec 	.word	0x20003cec
 8018764:	0801e6c8 	.word	0x0801e6c8
 8018768:	41f00000 	.word	0x41f00000
 801876c:	0801e73c 	.word	0x0801e73c

08018770 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018770:	b590      	push	{r4, r7, lr}
 8018772:	b097      	sub	sp, #92	; 0x5c
 8018774:	af00      	add	r7, sp, #0
 8018776:	60f8      	str	r0, [r7, #12]
 8018778:	60b9      	str	r1, [r7, #8]
 801877a:	607a      	str	r2, [r7, #4]
 801877c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801877e:	2307      	movs	r3, #7
 8018780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018788:	2200      	movs	r2, #0
 801878a:	601a      	str	r2, [r3, #0]
 801878c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801878e:	2300      	movs	r3, #0
 8018790:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8018794:	2300      	movs	r3, #0
 8018796:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 801879a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801879e:	2200      	movs	r2, #0
 80187a0:	601a      	str	r2, [r3, #0]
 80187a2:	605a      	str	r2, [r3, #4]
 80187a4:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80187a6:	4b97      	ldr	r3, [pc, #604]	; (8018a04 <RegionUS915LinkAdrReq+0x294>)
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	f503 7158 	add.w	r1, r3, #864	; 0x360
 80187ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187b2:	2206      	movs	r2, #6
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7fd fabb 	bl	8015d30 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80187ba:	e11b      	b.n	80189f4 <RegionUS915LinkAdrReq+0x284>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	685a      	ldr	r2, [r3, #4]
 80187c0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80187c4:	4413      	add	r3, r2
 80187c6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80187ca:	4611      	mov	r1, r2
 80187cc:	4618      	mov	r0, r3
 80187ce:	f7fd fbf3 	bl	8015fb8 <RegionCommonParseLinkAdrReq>
 80187d2:	4603      	mov	r3, r0
 80187d4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 80187d8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80187dc:	2b00      	cmp	r3, #0
 80187de:	f000 8113 	beq.w	8018a08 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80187e2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80187e6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80187ea:	4413      	add	r3, r2
 80187ec:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80187f0:	2307      	movs	r3, #7
 80187f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80187f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80187fa:	2b06      	cmp	r3, #6
 80187fc:	d116      	bne.n	801882c <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80187fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018802:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8018806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801880a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801880e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018812:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8018816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801881a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801881e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018822:	b2db      	uxtb	r3, r3
 8018824:	b29b      	uxth	r3, r3
 8018826:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801882a:	e0e3      	b.n	80189f4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801882c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018830:	2b07      	cmp	r3, #7
 8018832:	d112      	bne.n	801885a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8018834:	2300      	movs	r3, #0
 8018836:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801883a:	2300      	movs	r3, #0
 801883c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8018840:	2300      	movs	r3, #0
 8018842:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8018846:	2300      	movs	r3, #0
 8018848:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801884c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018850:	b2db      	uxtb	r3, r3
 8018852:	b29b      	uxth	r3, r3
 8018854:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018858:	e0cc      	b.n	80189f4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801885a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801885e:	2b05      	cmp	r3, #5
 8018860:	f040 80bf 	bne.w	80189e2 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8018864:	2301      	movs	r3, #1
 8018866:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801886a:	2300      	movs	r3, #0
 801886c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8018870:	2300      	movs	r3, #0
 8018872:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018876:	e0ae      	b.n	80189d6 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8018878:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801887c:	b2da      	uxtb	r2, r3
 801887e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018882:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018886:	fa01 f303 	lsl.w	r3, r1, r3
 801888a:	4013      	ands	r3, r2
 801888c:	2b00      	cmp	r3, #0
 801888e:	d04d      	beq.n	801892c <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8018890:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018894:	f003 0301 	and.w	r3, r3, #1
 8018898:	b2db      	uxtb	r3, r3
 801889a:	2b00      	cmp	r3, #0
 801889c:	d120      	bne.n	80188e0 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801889e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188a2:	005b      	lsls	r3, r3, #1
 80188a4:	3358      	adds	r3, #88	; 0x58
 80188a6:	443b      	add	r3, r7
 80188a8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80188ac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188b0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80188b4:	b292      	uxth	r2, r2
 80188b6:	005b      	lsls	r3, r3, #1
 80188b8:	3358      	adds	r3, #88	; 0x58
 80188ba:	443b      	add	r3, r7
 80188bc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80188c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80188c4:	b21a      	sxth	r2, r3
 80188c6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80188ca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188ce:	fa01 f303 	lsl.w	r3, r1, r3
 80188d2:	b21b      	sxth	r3, r3
 80188d4:	4313      	orrs	r3, r2
 80188d6:	b21b      	sxth	r3, r3
 80188d8:	b29b      	uxth	r3, r3
 80188da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80188de:	e075      	b.n	80189cc <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 80188e0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188e4:	005b      	lsls	r3, r3, #1
 80188e6:	3358      	adds	r3, #88	; 0x58
 80188e8:	443b      	add	r3, r7
 80188ea:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80188ee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188f2:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80188f6:	b292      	uxth	r2, r2
 80188f8:	005b      	lsls	r3, r3, #1
 80188fa:	3358      	adds	r3, #88	; 0x58
 80188fc:	443b      	add	r3, r7
 80188fe:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018902:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018906:	b21a      	sxth	r2, r3
 8018908:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801890c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018910:	fa01 f303 	lsl.w	r3, r1, r3
 8018914:	b21b      	sxth	r3, r3
 8018916:	4313      	orrs	r3, r2
 8018918:	b21b      	sxth	r3, r3
 801891a:	b29b      	uxth	r3, r3
 801891c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018920:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018924:	3301      	adds	r3, #1
 8018926:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801892a:	e04f      	b.n	80189cc <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801892c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018930:	f003 0301 	and.w	r3, r3, #1
 8018934:	b2db      	uxtb	r3, r3
 8018936:	2b00      	cmp	r3, #0
 8018938:	d122      	bne.n	8018980 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801893a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801893e:	005b      	lsls	r3, r3, #1
 8018940:	3358      	adds	r3, #88	; 0x58
 8018942:	443b      	add	r3, r7
 8018944:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018948:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801894c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8018950:	b292      	uxth	r2, r2
 8018952:	005b      	lsls	r3, r3, #1
 8018954:	3358      	adds	r3, #88	; 0x58
 8018956:	443b      	add	r3, r7
 8018958:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801895c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018960:	b21a      	sxth	r2, r3
 8018962:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018966:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801896a:	fa01 f303 	lsl.w	r3, r1, r3
 801896e:	b21b      	sxth	r3, r3
 8018970:	43db      	mvns	r3, r3
 8018972:	b21b      	sxth	r3, r3
 8018974:	4013      	ands	r3, r2
 8018976:	b21b      	sxth	r3, r3
 8018978:	b29b      	uxth	r3, r3
 801897a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801897e:	e025      	b.n	80189cc <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8018980:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018984:	005b      	lsls	r3, r3, #1
 8018986:	3358      	adds	r3, #88	; 0x58
 8018988:	443b      	add	r3, r7
 801898a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801898e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018992:	b2d2      	uxtb	r2, r2
 8018994:	b292      	uxth	r2, r2
 8018996:	005b      	lsls	r3, r3, #1
 8018998:	3358      	adds	r3, #88	; 0x58
 801899a:	443b      	add	r3, r7
 801899c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80189a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80189a4:	b21a      	sxth	r2, r3
 80189a6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80189aa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80189ae:	fa01 f303 	lsl.w	r3, r1, r3
 80189b2:	b21b      	sxth	r3, r3
 80189b4:	43db      	mvns	r3, r3
 80189b6:	b21b      	sxth	r3, r3
 80189b8:	4013      	ands	r3, r2
 80189ba:	b21b      	sxth	r3, r3
 80189bc:	b29b      	uxth	r3, r3
 80189be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80189c2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80189c6:	3301      	adds	r3, #1
 80189c8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 80189cc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80189d0:	3301      	adds	r3, #1
 80189d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80189d6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80189da:	2b07      	cmp	r3, #7
 80189dc:	f67f af4c 	bls.w	8018878 <RegionUS915LinkAdrReq+0x108>
 80189e0:	e008      	b.n	80189f4 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80189e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80189e6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80189ea:	005b      	lsls	r3, r3, #1
 80189ec:	3358      	adds	r3, #88	; 0x58
 80189ee:	443b      	add	r3, r7
 80189f0:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	7a1b      	ldrb	r3, [r3, #8]
 80189f8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80189fc:	429a      	cmp	r2, r3
 80189fe:	f4ff aedd 	bcc.w	80187bc <RegionUS915LinkAdrReq+0x4c>
 8018a02:	e002      	b.n	8018a0a <RegionUS915LinkAdrReq+0x29a>
 8018a04:	20003cec 	.word	0x20003cec
            break; // break loop, since no more request has been found
 8018a08:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8018a0a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018a0e:	2b03      	cmp	r3, #3
 8018a10:	dc0f      	bgt.n	8018a32 <RegionUS915LinkAdrReq+0x2c2>
 8018a12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a16:	2204      	movs	r2, #4
 8018a18:	2100      	movs	r1, #0
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f7fd f95c 	bl	8015cd8 <RegionCommonCountChannels>
 8018a20:	4603      	mov	r3, r0
 8018a22:	2b01      	cmp	r3, #1
 8018a24:	d805      	bhi.n	8018a32 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8018a26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a2a:	f023 0301 	bic.w	r3, r3, #1
 8018a2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018a32:	2302      	movs	r3, #2
 8018a34:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	7a5b      	ldrb	r3, [r3, #9]
 8018a3c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8018a40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018a44:	4618      	mov	r0, r3
 8018a46:	f7ff f911 	bl	8017c6c <RegionUS915GetPhyParam>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8018a4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a52:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	7a9b      	ldrb	r3, [r3, #10]
 8018a58:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018a5a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018a5e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018a60:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018a64:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018a66:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8018a6a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018a72:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018a7a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	7b5b      	ldrb	r3, [r3, #13]
 8018a80:	b25b      	sxtb	r3, r3
 8018a82:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018a84:	2348      	movs	r3, #72	; 0x48
 8018a86:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8018a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a8e:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a92:	b25b      	sxtb	r3, r3
 8018a94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018a98:	2304      	movs	r3, #4
 8018a9a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018a9e:	4b44      	ldr	r3, [pc, #272]	; (8018bb0 <RegionUS915LinkAdrReq+0x440>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8018aa4:	230e      	movs	r3, #14
 8018aa6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8018aaa:	2300      	movs	r3, #0
 8018aac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018ab6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8018aba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018abe:	1c9a      	adds	r2, r3, #2
 8018ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018ac4:	1c59      	adds	r1, r3, #1
 8018ac6:	f107 0014 	add.w	r0, r7, #20
 8018aca:	4623      	mov	r3, r4
 8018acc:	f7fd fac5 	bl	801605a <RegionCommonLinkAdrReqVerifyParams>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018ada:	2b07      	cmp	r3, #7
 8018adc:	d151      	bne.n	8018b82 <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8018ade:	4b34      	ldr	r3, [pc, #208]	; (8018bb0 <RegionUS915LinkAdrReq+0x440>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018ae6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018aea:	2206      	movs	r2, #6
 8018aec:	4618      	mov	r0, r3
 8018aee:	f7fd f91f 	bl	8015d30 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8018af2:	4b30      	ldr	r3, [pc, #192]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 8018afa:	4b2d      	ldr	r3, [pc, #180]	; (8018bb0 <RegionUS915LinkAdrReq+0x440>)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8018b02:	4b2c      	ldr	r3, [pc, #176]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	400a      	ands	r2, r1
 8018b08:	b292      	uxth	r2, r2
 8018b0a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8018b0e:	4b29      	ldr	r3, [pc, #164]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
 8018b16:	4b26      	ldr	r3, [pc, #152]	; (8018bb0 <RegionUS915LinkAdrReq+0x440>)
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8018b1e:	4b25      	ldr	r3, [pc, #148]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	400a      	ands	r2, r1
 8018b24:	b292      	uxth	r2, r2
 8018b26:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8018b2a:	4b22      	ldr	r3, [pc, #136]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94
 8018b32:	4b1f      	ldr	r3, [pc, #124]	; (8018bb0 <RegionUS915LinkAdrReq+0x440>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8018b3a:	4b1e      	ldr	r3, [pc, #120]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	400a      	ands	r2, r1
 8018b40:	b292      	uxth	r2, r2
 8018b42:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8018b46:	4b1b      	ldr	r3, [pc, #108]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	f8b3 1096 	ldrh.w	r1, [r3, #150]	; 0x96
 8018b4e:	4b18      	ldr	r3, [pc, #96]	; (8018bb0 <RegionUS915LinkAdrReq+0x440>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8018b56:	4b17      	ldr	r3, [pc, #92]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	400a      	ands	r2, r1
 8018b5c:	b292      	uxth	r2, r2
 8018b5e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018b62:	4b13      	ldr	r3, [pc, #76]	; (8018bb0 <RegionUS915LinkAdrReq+0x440>)
 8018b64:	681a      	ldr	r2, [r3, #0]
 8018b66:	4b13      	ldr	r3, [pc, #76]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018b6e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8018b72:	4b0f      	ldr	r3, [pc, #60]	; (8018bb0 <RegionUS915LinkAdrReq+0x440>)
 8018b74:	681a      	ldr	r2, [r3, #0]
 8018b76:	4b0f      	ldr	r3, [pc, #60]	; (8018bb4 <RegionUS915LinkAdrReq+0x444>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8018b7e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018b82:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018b8a:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018b92:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8018b96:	683b      	ldr	r3, [r7, #0]
 8018b98:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018b9c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018ba0:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8018ba2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	375c      	adds	r7, #92	; 0x5c
 8018baa:	46bd      	mov	sp, r7
 8018bac:	bd90      	pop	{r4, r7, pc}
 8018bae:	bf00      	nop
 8018bb0:	20003cec 	.word	0x20003cec
 8018bb4:	20003ce8 	.word	0x20003ce8

08018bb8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018bc0:	2307      	movs	r3, #7
 8018bc2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	685b      	ldr	r3, [r3, #4]
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7fe ffdb 	bl	8017b84 <VerifyRfFreq>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	f083 0301 	eor.w	r3, r3, #1
 8018bd4:	b2db      	uxtb	r3, r3
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d003      	beq.n	8018be2 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8018bda:	7bfb      	ldrb	r3, [r7, #15]
 8018bdc:	f023 0301 	bic.w	r3, r3, #1
 8018be0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	f993 3000 	ldrsb.w	r3, [r3]
 8018be8:	220d      	movs	r2, #13
 8018bea:	2108      	movs	r1, #8
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7fd f822 	bl	8015c36 <RegionCommonValueInRange>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d103      	bne.n	8018c00 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8018bf8:	7bfb      	ldrb	r3, [r7, #15]
 8018bfa:	f023 0302 	bic.w	r3, r3, #2
 8018bfe:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	f993 3000 	ldrsb.w	r3, [r3]
 8018c06:	2207      	movs	r2, #7
 8018c08:	2105      	movs	r1, #5
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7fd f813 	bl	8015c36 <RegionCommonValueInRange>
 8018c10:	4603      	mov	r3, r0
 8018c12:	2b01      	cmp	r3, #1
 8018c14:	d004      	beq.n	8018c20 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018c1c:	2b0d      	cmp	r3, #13
 8018c1e:	dd03      	ble.n	8018c28 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8018c20:	7bfb      	ldrb	r3, [r7, #15]
 8018c22:	f023 0302 	bic.w	r3, r3, #2
 8018c26:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c2e:	2203      	movs	r2, #3
 8018c30:	2100      	movs	r1, #0
 8018c32:	4618      	mov	r0, r3
 8018c34:	f7fc ffff 	bl	8015c36 <RegionCommonValueInRange>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d103      	bne.n	8018c46 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018c3e:	7bfb      	ldrb	r3, [r7, #15]
 8018c40:	f023 0304 	bic.w	r3, r3, #4
 8018c44:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8018c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	3710      	adds	r7, #16
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd80      	pop	{r7, pc}

08018c50 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018c50:	b480      	push	{r7}
 8018c52:	b083      	sub	sp, #12
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018c58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	370c      	adds	r7, #12
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bc80      	pop	{r7}
 8018c64:	4770      	bx	lr

08018c66 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018c66:	b480      	push	{r7}
 8018c68:	b083      	sub	sp, #12
 8018c6a:	af00      	add	r7, sp, #0
 8018c6c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c72:	4618      	mov	r0, r3
 8018c74:	370c      	adds	r7, #12
 8018c76:	46bd      	mov	sp, r7
 8018c78:	bc80      	pop	{r7}
 8018c7a:	4770      	bx	lr

08018c7c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018c7c:	b480      	push	{r7}
 8018c7e:	b083      	sub	sp, #12
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	370c      	adds	r7, #12
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bc80      	pop	{r7}
 8018c90:	4770      	bx	lr
	...

08018c94 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018c94:	b480      	push	{r7}
 8018c96:	b083      	sub	sp, #12
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	460a      	mov	r2, r1
 8018c9e:	71fb      	strb	r3, [r7, #7]
 8018ca0:	4613      	mov	r3, r2
 8018ca2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018ca4:	79bb      	ldrb	r3, [r7, #6]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d108      	bne.n	8018cbc <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018caa:	4b16      	ldr	r3, [pc, #88]	; (8018d04 <RegionUS915AlternateDr+0x70>)
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018cb2:	3201      	adds	r2, #1
 8018cb4:	b2d2      	uxtb	r2, r2
 8018cb6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8018cba:	e007      	b.n	8018ccc <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018cbc:	4b11      	ldr	r3, [pc, #68]	; (8018d04 <RegionUS915AlternateDr+0x70>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018cc4:	3a01      	subs	r2, #1
 8018cc6:	b2d2      	uxtb	r2, r2
 8018cc8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018ccc:	4b0d      	ldr	r3, [pc, #52]	; (8018d04 <RegionUS915AlternateDr+0x70>)
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018cd4:	4b0c      	ldr	r3, [pc, #48]	; (8018d08 <RegionUS915AlternateDr+0x74>)
 8018cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8018cda:	0859      	lsrs	r1, r3, #1
 8018cdc:	460b      	mov	r3, r1
 8018cde:	00db      	lsls	r3, r3, #3
 8018ce0:	440b      	add	r3, r1
 8018ce2:	1ad3      	subs	r3, r2, r3
 8018ce4:	b2db      	uxtb	r3, r3
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d102      	bne.n	8018cf0 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018cea:	2304      	movs	r3, #4
 8018cec:	71fb      	strb	r3, [r7, #7]
 8018cee:	e001      	b.n	8018cf4 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	370c      	adds	r7, #12
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bc80      	pop	{r7}
 8018d00:	4770      	bx	lr
 8018d02:	bf00      	nop
 8018d04:	20003ce8 	.word	0x20003ce8
 8018d08:	38e38e39 	.word	0x38e38e39

08018d0c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b0a8      	sub	sp, #160	; 0xa0
 8018d10:	af02      	add	r7, sp, #8
 8018d12:	60f8      	str	r0, [r7, #12]
 8018d14:	60b9      	str	r1, [r7, #8]
 8018d16:	607a      	str	r2, [r7, #4]
 8018d18:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018d20:	2300      	movs	r3, #0
 8018d22:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018d26:	2300      	movs	r3, #0
 8018d28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018d2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018d2e:	2244      	movs	r2, #68	; 0x44
 8018d30:	2100      	movs	r1, #0
 8018d32:	4618      	mov	r0, r3
 8018d34:	f004 fe04 	bl	801d940 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018d38:	230c      	movs	r3, #12
 8018d3a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018d3e:	4b6b      	ldr	r3, [pc, #428]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	3390      	adds	r3, #144	; 0x90
 8018d44:	2204      	movs	r2, #4
 8018d46:	2100      	movs	r1, #0
 8018d48:	4618      	mov	r0, r3
 8018d4a:	f7fc ffc5 	bl	8015cd8 <RegionCommonCountChannels>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d110      	bne.n	8018d76 <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018d54:	4b65      	ldr	r3, [pc, #404]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8018d5c:	4b64      	ldr	r3, [pc, #400]	; (8018ef0 <RegionUS915NextChannel+0x1e4>)
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018d64:	2204      	movs	r2, #4
 8018d66:	4619      	mov	r1, r3
 8018d68:	f7fc ffe2 	bl	8015d30 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018d6c:	4b5f      	ldr	r3, [pc, #380]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	2200      	movs	r2, #0
 8018d72:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d7c:	2b03      	cmp	r3, #3
 8018d7e:	dd0e      	ble.n	8018d9e <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018d80:	4b5a      	ldr	r3, [pc, #360]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d107      	bne.n	8018d9e <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018d8e:	4b58      	ldr	r3, [pc, #352]	; (8018ef0 <RegionUS915NextChannel+0x1e4>)
 8018d90:	681a      	ldr	r2, [r3, #0]
 8018d92:	4b56      	ldr	r3, [pc, #344]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018d9a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	7a5b      	ldrb	r3, [r3, #9]
 8018da2:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018daa:	b2db      	uxtb	r3, r3
 8018dac:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018dae:	4b4f      	ldr	r3, [pc, #316]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	3390      	adds	r3, #144	; 0x90
 8018db4:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018db6:	4b4e      	ldr	r3, [pc, #312]	; (8018ef0 <RegionUS915NextChannel+0x1e4>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8018dbc:	4b4b      	ldr	r3, [pc, #300]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018dc2:	2348      	movs	r3, #72	; 0x48
 8018dc4:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	685b      	ldr	r3, [r3, #4]
 8018dd4:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	7a9b      	ldrb	r3, [r3, #10]
 8018dda:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018dde:	2301      	movs	r3, #1
 8018de0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018de4:	68fa      	ldr	r2, [r7, #12]
 8018de6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018dea:	320c      	adds	r2, #12
 8018dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018df0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	7d1b      	ldrb	r3, [r3, #20]
 8018df8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	8adb      	ldrh	r3, [r3, #22]
 8018e06:	4619      	mov	r1, r3
 8018e08:	4610      	mov	r0, r2
 8018e0a:	f7fe feff 	bl	8017c0c <GetTimeOnAir>
 8018e0e:	4603      	mov	r3, r0
 8018e10:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018e12:	f107 0314 	add.w	r3, r7, #20
 8018e16:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018e18:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018e1c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018e20:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	9301      	str	r3, [sp, #4]
 8018e28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018e2c:	9300      	str	r3, [sp, #0]
 8018e2e:	460b      	mov	r3, r1
 8018e30:	6839      	ldr	r1, [r7, #0]
 8018e32:	f7fd fb58 	bl	80164e6 <RegionCommonIdentifyChannels>
 8018e36:	4603      	mov	r3, r0
 8018e38:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018e3c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d14d      	bne.n	8018ee0 <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	7a5b      	ldrb	r3, [r3, #9]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d00e      	beq.n	8018e6a <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018e4c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018e50:	3b01      	subs	r3, #1
 8018e52:	4619      	mov	r1, r3
 8018e54:	2000      	movs	r0, #0
 8018e56:	f000 f8f5 	bl	8019044 <randr>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	3398      	adds	r3, #152	; 0x98
 8018e5e:	443b      	add	r3, r7
 8018e60:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	701a      	strb	r2, [r3, #0]
 8018e68:	e030      	b.n	8018ecc <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d10f      	bne.n	8018e94 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018e74:	4b1d      	ldr	r3, [pc, #116]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	f103 0090 	add.w	r0, r3, #144	; 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018e7c:	4b1b      	ldr	r3, [pc, #108]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018e80:	339c      	adds	r3, #156	; 0x9c
 8018e82:	68ba      	ldr	r2, [r7, #8]
 8018e84:	4619      	mov	r1, r3
 8018e86:	f7fc fc91 	bl	80157ac <RegionBaseUSComputeNext125kHzJoinChannel>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	2b03      	cmp	r3, #3
 8018e8e:	d11d      	bne.n	8018ecc <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018e90:	2303      	movs	r3, #3
 8018e92:	e027      	b.n	8018ee4 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018e94:	2300      	movs	r3, #0
 8018e96:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018e9a:	e004      	b.n	8018ea6 <RegionUS915NextChannel+0x19a>
                {
                    i++;
 8018e9c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018ea0:	3301      	adds	r3, #1
 8018ea2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018ea6:	4b11      	ldr	r3, [pc, #68]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8018eae:	b2da      	uxtb	r2, r3
 8018eb0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018eb4:	fa42 f303 	asr.w	r3, r2, r3
 8018eb8:	f003 0301 	and.w	r3, r3, #1
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d0ed      	beq.n	8018e9c <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 8018ec0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018ec4:	3340      	adds	r3, #64	; 0x40
 8018ec6:	b2da      	uxtb	r2, r3
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018ecc:	4b07      	ldr	r3, [pc, #28]	; (8018eec <RegionUS915NextChannel+0x1e0>)
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8018ed4:	68bb      	ldr	r3, [r7, #8]
 8018ed6:	781b      	ldrb	r3, [r3, #0]
 8018ed8:	2248      	movs	r2, #72	; 0x48
 8018eda:	4619      	mov	r1, r3
 8018edc:	f7fc fec8 	bl	8015c70 <RegionCommonChanDisable>
    }
    return status;
 8018ee0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	3798      	adds	r7, #152	; 0x98
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}
 8018eec:	20003ce8 	.word	0x20003ce8
 8018ef0:	20003cec 	.word	0x20003cec

08018ef4 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018ef4:	b590      	push	{r4, r7, lr}
 8018ef6:	b085      	sub	sp, #20
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018f02:	4b23      	ldr	r3, [pc, #140]	; (8018f90 <RegionUS915SetContinuousWave+0x9c>)
 8018f04:	681a      	ldr	r2, [r3, #0]
 8018f06:	4b23      	ldr	r3, [pc, #140]	; (8018f94 <RegionUS915SetContinuousWave+0xa0>)
 8018f08:	6819      	ldr	r1, [r3, #0]
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	781b      	ldrb	r3, [r3, #0]
 8018f0e:	461c      	mov	r4, r3
 8018f10:	4623      	mov	r3, r4
 8018f12:	005b      	lsls	r3, r3, #1
 8018f14:	4423      	add	r3, r4
 8018f16:	009b      	lsls	r3, r3, #2
 8018f18:	440b      	add	r3, r1
 8018f1a:	3309      	adds	r3, #9
 8018f1c:	781b      	ldrb	r3, [r3, #0]
 8018f1e:	4619      	mov	r1, r3
 8018f20:	460b      	mov	r3, r1
 8018f22:	005b      	lsls	r3, r3, #1
 8018f24:	440b      	add	r3, r1
 8018f26:	00db      	lsls	r3, r3, #3
 8018f28:	4413      	add	r3, r2
 8018f2a:	3302      	adds	r3, #2
 8018f2c:	f993 1000 	ldrsb.w	r1, [r3]
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018f36:	4b17      	ldr	r3, [pc, #92]	; (8018f94 <RegionUS915SetContinuousWave+0xa0>)
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018f3e:	f7fe fdeb 	bl	8017b18 <LimitTxPower>
 8018f42:	4603      	mov	r3, r0
 8018f44:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018f46:	2300      	movs	r3, #0
 8018f48:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8018f4a:	4b12      	ldr	r3, [pc, #72]	; (8018f94 <RegionUS915SetContinuousWave+0xa0>)
 8018f4c:	681a      	ldr	r2, [r3, #0]
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	781b      	ldrb	r3, [r3, #0]
 8018f52:	4619      	mov	r1, r3
 8018f54:	460b      	mov	r3, r1
 8018f56:	005b      	lsls	r3, r3, #1
 8018f58:	440b      	add	r3, r1
 8018f5a:	009b      	lsls	r3, r3, #2
 8018f5c:	4413      	add	r3, r2
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f66:	f04f 0200 	mov.w	r2, #0
 8018f6a:	490b      	ldr	r1, [pc, #44]	; (8018f98 <RegionUS915SetContinuousWave+0xa4>)
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	f7fd f9cb 	bl	8016308 <RegionCommonComputeTxPower>
 8018f72:	4603      	mov	r3, r0
 8018f74:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018f76:	4b09      	ldr	r3, [pc, #36]	; (8018f9c <RegionUS915SetContinuousWave+0xa8>)
 8018f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f7a:	687a      	ldr	r2, [r7, #4]
 8018f7c:	8992      	ldrh	r2, [r2, #12]
 8018f7e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018f82:	68b8      	ldr	r0, [r7, #8]
 8018f84:	4798      	blx	r3
#endif /* REGION_US915 */
}
 8018f86:	bf00      	nop
 8018f88:	3714      	adds	r7, #20
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd90      	pop	{r4, r7, pc}
 8018f8e:	bf00      	nop
 8018f90:	20003ce8 	.word	0x20003ce8
 8018f94:	20003cec 	.word	0x20003cec
 8018f98:	41f00000 	.word	0x41f00000
 8018f9c:	0801e73c 	.word	0x0801e73c

08018fa0 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018fa0:	b480      	push	{r7}
 8018fa2:	b085      	sub	sp, #20
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	71fb      	strb	r3, [r7, #7]
 8018faa:	460b      	mov	r3, r1
 8018fac:	71bb      	strb	r3, [r7, #6]
 8018fae:	4613      	mov	r3, r2
 8018fb0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018fb2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018fb6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018fba:	4909      	ldr	r1, [pc, #36]	; (8018fe0 <RegionUS915ApplyDrOffset+0x40>)
 8018fbc:	0092      	lsls	r2, r2, #2
 8018fbe:	440a      	add	r2, r1
 8018fc0:	4413      	add	r3, r2
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	da01      	bge.n	8018fd2 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018fd2:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	3714      	adds	r7, #20
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bc80      	pop	{r7}
 8018fdc:	4770      	bx	lr
 8018fde:	bf00      	nop
 8018fe0:	0801e708 	.word	0x0801e708

08018fe4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018fe4:	b480      	push	{r7}
 8018fe6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018fe8:	4b0d      	ldr	r3, [pc, #52]	; (8019020 <rand1+0x3c>)
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	4a0d      	ldr	r2, [pc, #52]	; (8019024 <rand1+0x40>)
 8018fee:	fb02 f303 	mul.w	r3, r2, r3
 8018ff2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018ff6:	3339      	adds	r3, #57	; 0x39
 8018ff8:	4a09      	ldr	r2, [pc, #36]	; (8019020 <rand1+0x3c>)
 8018ffa:	6013      	str	r3, [r2, #0]
 8018ffc:	4b08      	ldr	r3, [pc, #32]	; (8019020 <rand1+0x3c>)
 8018ffe:	681a      	ldr	r2, [r3, #0]
 8019000:	2303      	movs	r3, #3
 8019002:	fba3 1302 	umull	r1, r3, r3, r2
 8019006:	1ad1      	subs	r1, r2, r3
 8019008:	0849      	lsrs	r1, r1, #1
 801900a:	440b      	add	r3, r1
 801900c:	0f99      	lsrs	r1, r3, #30
 801900e:	460b      	mov	r3, r1
 8019010:	07db      	lsls	r3, r3, #31
 8019012:	1a5b      	subs	r3, r3, r1
 8019014:	1ad1      	subs	r1, r2, r3
 8019016:	460b      	mov	r3, r1
}
 8019018:	4618      	mov	r0, r3
 801901a:	46bd      	mov	sp, r7
 801901c:	bc80      	pop	{r7}
 801901e:	4770      	bx	lr
 8019020:	20000100 	.word	0x20000100
 8019024:	41c64e6d 	.word	0x41c64e6d

08019028 <srand1>:

void srand1( uint32_t seed )
{
 8019028:	b480      	push	{r7}
 801902a:	b083      	sub	sp, #12
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
    next = seed;
 8019030:	4a03      	ldr	r2, [pc, #12]	; (8019040 <srand1+0x18>)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	6013      	str	r3, [r2, #0]
}
 8019036:	bf00      	nop
 8019038:	370c      	adds	r7, #12
 801903a:	46bd      	mov	sp, r7
 801903c:	bc80      	pop	{r7}
 801903e:	4770      	bx	lr
 8019040:	20000100 	.word	0x20000100

08019044 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b082      	sub	sp, #8
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
 801904c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801904e:	f7ff ffc9 	bl	8018fe4 <rand1>
 8019052:	4602      	mov	r2, r0
 8019054:	6839      	ldr	r1, [r7, #0]
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	1acb      	subs	r3, r1, r3
 801905a:	3301      	adds	r3, #1
 801905c:	fb92 f1f3 	sdiv	r1, r2, r3
 8019060:	fb01 f303 	mul.w	r3, r1, r3
 8019064:	1ad2      	subs	r2, r2, r3
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	4413      	add	r3, r2
}
 801906a:	4618      	mov	r0, r3
 801906c:	3708      	adds	r7, #8
 801906e:	46bd      	mov	sp, r7
 8019070:	bd80      	pop	{r7, pc}

08019072 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019072:	b480      	push	{r7}
 8019074:	b085      	sub	sp, #20
 8019076:	af00      	add	r7, sp, #0
 8019078:	60f8      	str	r0, [r7, #12]
 801907a:	60b9      	str	r1, [r7, #8]
 801907c:	4613      	mov	r3, r2
 801907e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019080:	e007      	b.n	8019092 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019082:	68ba      	ldr	r2, [r7, #8]
 8019084:	1c53      	adds	r3, r2, #1
 8019086:	60bb      	str	r3, [r7, #8]
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	1c59      	adds	r1, r3, #1
 801908c:	60f9      	str	r1, [r7, #12]
 801908e:	7812      	ldrb	r2, [r2, #0]
 8019090:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019092:	88fb      	ldrh	r3, [r7, #6]
 8019094:	1e5a      	subs	r2, r3, #1
 8019096:	80fa      	strh	r2, [r7, #6]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d1f2      	bne.n	8019082 <memcpy1+0x10>
    }
}
 801909c:	bf00      	nop
 801909e:	bf00      	nop
 80190a0:	3714      	adds	r7, #20
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bc80      	pop	{r7}
 80190a6:	4770      	bx	lr

080190a8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80190a8:	b480      	push	{r7}
 80190aa:	b085      	sub	sp, #20
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	60f8      	str	r0, [r7, #12]
 80190b0:	60b9      	str	r1, [r7, #8]
 80190b2:	4613      	mov	r3, r2
 80190b4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80190b6:	88fb      	ldrh	r3, [r7, #6]
 80190b8:	3b01      	subs	r3, #1
 80190ba:	68fa      	ldr	r2, [r7, #12]
 80190bc:	4413      	add	r3, r2
 80190be:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80190c0:	e007      	b.n	80190d2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80190c2:	68ba      	ldr	r2, [r7, #8]
 80190c4:	1c53      	adds	r3, r2, #1
 80190c6:	60bb      	str	r3, [r7, #8]
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	1e59      	subs	r1, r3, #1
 80190cc:	60f9      	str	r1, [r7, #12]
 80190ce:	7812      	ldrb	r2, [r2, #0]
 80190d0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80190d2:	88fb      	ldrh	r3, [r7, #6]
 80190d4:	1e5a      	subs	r2, r3, #1
 80190d6:	80fa      	strh	r2, [r7, #6]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d1f2      	bne.n	80190c2 <memcpyr+0x1a>
    }
}
 80190dc:	bf00      	nop
 80190de:	bf00      	nop
 80190e0:	3714      	adds	r7, #20
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bc80      	pop	{r7}
 80190e6:	4770      	bx	lr

080190e8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80190e8:	b480      	push	{r7}
 80190ea:	b083      	sub	sp, #12
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
 80190f0:	460b      	mov	r3, r1
 80190f2:	70fb      	strb	r3, [r7, #3]
 80190f4:	4613      	mov	r3, r2
 80190f6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80190f8:	e004      	b.n	8019104 <memset1+0x1c>
    {
        *dst++ = value;
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	1c5a      	adds	r2, r3, #1
 80190fe:	607a      	str	r2, [r7, #4]
 8019100:	78fa      	ldrb	r2, [r7, #3]
 8019102:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019104:	883b      	ldrh	r3, [r7, #0]
 8019106:	1e5a      	subs	r2, r3, #1
 8019108:	803a      	strh	r2, [r7, #0]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d1f5      	bne.n	80190fa <memset1+0x12>
    }
}
 801910e:	bf00      	nop
 8019110:	bf00      	nop
 8019112:	370c      	adds	r7, #12
 8019114:	46bd      	mov	sp, r7
 8019116:	bc80      	pop	{r7}
 8019118:	4770      	bx	lr
	...

0801911c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801911c:	b480      	push	{r7}
 801911e:	b087      	sub	sp, #28
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
 8019124:	460b      	mov	r3, r1
 8019126:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8019128:	4b1a      	ldr	r3, [pc, #104]	; (8019194 <Crc32+0x78>)
 801912a:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801912c:	f04f 33ff 	mov.w	r3, #4294967295
 8019130:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d101      	bne.n	801913c <Crc32+0x20>
    {
        return 0;
 8019138:	2300      	movs	r3, #0
 801913a:	e026      	b.n	801918a <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 801913c:	2300      	movs	r3, #0
 801913e:	827b      	strh	r3, [r7, #18]
 8019140:	e01d      	b.n	801917e <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 8019142:	8a7b      	ldrh	r3, [r7, #18]
 8019144:	687a      	ldr	r2, [r7, #4]
 8019146:	4413      	add	r3, r2
 8019148:	781b      	ldrb	r3, [r3, #0]
 801914a:	461a      	mov	r2, r3
 801914c:	697b      	ldr	r3, [r7, #20]
 801914e:	4053      	eors	r3, r2
 8019150:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8019152:	2300      	movs	r3, #0
 8019154:	823b      	strh	r3, [r7, #16]
 8019156:	e00c      	b.n	8019172 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	085a      	lsrs	r2, r3, #1
 801915c:	697b      	ldr	r3, [r7, #20]
 801915e:	f003 0301 	and.w	r3, r3, #1
 8019162:	4259      	negs	r1, r3
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	400b      	ands	r3, r1
 8019168:	4053      	eors	r3, r2
 801916a:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801916c:	8a3b      	ldrh	r3, [r7, #16]
 801916e:	3301      	adds	r3, #1
 8019170:	823b      	strh	r3, [r7, #16]
 8019172:	8a3b      	ldrh	r3, [r7, #16]
 8019174:	2b07      	cmp	r3, #7
 8019176:	d9ef      	bls.n	8019158 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8019178:	8a7b      	ldrh	r3, [r7, #18]
 801917a:	3301      	adds	r3, #1
 801917c:	827b      	strh	r3, [r7, #18]
 801917e:	8a7a      	ldrh	r2, [r7, #18]
 8019180:	887b      	ldrh	r3, [r7, #2]
 8019182:	429a      	cmp	r2, r3
 8019184:	d3dd      	bcc.n	8019142 <Crc32+0x26>
        }
    }

    return ~crc;
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	43db      	mvns	r3, r3
}
 801918a:	4618      	mov	r0, r3
 801918c:	371c      	adds	r7, #28
 801918e:	46bd      	mov	sp, r7
 8019190:	bc80      	pop	{r7}
 8019192:	4770      	bx	lr
 8019194:	edb88320 	.word	0xedb88320

08019198 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b084      	sub	sp, #16
 801919c:	af02      	add	r7, sp, #8
 801919e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80191a0:	4a21      	ldr	r2, [pc, #132]	; (8019228 <RadioInit+0x90>)
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80191a6:	4b21      	ldr	r3, [pc, #132]	; (801922c <RadioInit+0x94>)
 80191a8:	2200      	movs	r2, #0
 80191aa:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80191ac:	4b1f      	ldr	r3, [pc, #124]	; (801922c <RadioInit+0x94>)
 80191ae:	2200      	movs	r2, #0
 80191b0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80191b2:	4b1e      	ldr	r3, [pc, #120]	; (801922c <RadioInit+0x94>)
 80191b4:	2200      	movs	r2, #0
 80191b6:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80191b8:	481d      	ldr	r0, [pc, #116]	; (8019230 <RadioInit+0x98>)
 80191ba:	f001 feb7 	bl	801af2c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80191be:	2000      	movs	r0, #0
 80191c0:	f001 f81e 	bl	801a200 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 80191c4:	f002 f948 	bl	801b458 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80191c8:	2100      	movs	r1, #0
 80191ca:	2000      	movs	r0, #0
 80191cc:	f002 fca8 	bl	801bb20 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80191d0:	2204      	movs	r2, #4
 80191d2:	2100      	movs	r1, #0
 80191d4:	2001      	movs	r0, #1
 80191d6:	f002 facd 	bl	801b774 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80191da:	2300      	movs	r3, #0
 80191dc:	2200      	movs	r2, #0
 80191de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80191e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80191e6:	f002 f9fd 	bl	801b5e4 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80191ea:	f000 fe9b 	bl	8019f24 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80191ee:	2300      	movs	r3, #0
 80191f0:	9300      	str	r3, [sp, #0]
 80191f2:	4b10      	ldr	r3, [pc, #64]	; (8019234 <RadioInit+0x9c>)
 80191f4:	2200      	movs	r2, #0
 80191f6:	f04f 31ff 	mov.w	r1, #4294967295
 80191fa:	480f      	ldr	r0, [pc, #60]	; (8019238 <RadioInit+0xa0>)
 80191fc:	f003 fe92 	bl	801cf24 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019200:	2300      	movs	r3, #0
 8019202:	9300      	str	r3, [sp, #0]
 8019204:	4b0d      	ldr	r3, [pc, #52]	; (801923c <RadioInit+0xa4>)
 8019206:	2200      	movs	r2, #0
 8019208:	f04f 31ff 	mov.w	r1, #4294967295
 801920c:	480c      	ldr	r0, [pc, #48]	; (8019240 <RadioInit+0xa8>)
 801920e:	f003 fe89 	bl	801cf24 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019212:	4809      	ldr	r0, [pc, #36]	; (8019238 <RadioInit+0xa0>)
 8019214:	f003 ff2a 	bl	801d06c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019218:	4809      	ldr	r0, [pc, #36]	; (8019240 <RadioInit+0xa8>)
 801921a:	f003 ff27 	bl	801d06c <UTIL_TIMER_Stop>
}
 801921e:	bf00      	nop
 8019220:	3708      	adds	r7, #8
 8019222:	46bd      	mov	sp, r7
 8019224:	bd80      	pop	{r7, pc}
 8019226:	bf00      	nop
 8019228:	20003df0 	.word	0x20003df0
 801922c:	20003df4 	.word	0x20003df4
 8019230:	0801a2e5 	.word	0x0801a2e5
 8019234:	0801a26d 	.word	0x0801a26d
 8019238:	20003e4c 	.word	0x20003e4c
 801923c:	0801a281 	.word	0x0801a281
 8019240:	20003e64 	.word	0x20003e64

08019244 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019244:	b580      	push	{r7, lr}
 8019246:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019248:	f001 feb2 	bl	801afb0 <SUBGRF_GetOperatingMode>
 801924c:	4603      	mov	r3, r0
 801924e:	2b07      	cmp	r3, #7
 8019250:	d00a      	beq.n	8019268 <RadioGetStatus+0x24>
 8019252:	2b07      	cmp	r3, #7
 8019254:	dc0a      	bgt.n	801926c <RadioGetStatus+0x28>
 8019256:	2b04      	cmp	r3, #4
 8019258:	d002      	beq.n	8019260 <RadioGetStatus+0x1c>
 801925a:	2b05      	cmp	r3, #5
 801925c:	d002      	beq.n	8019264 <RadioGetStatus+0x20>
 801925e:	e005      	b.n	801926c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019260:	2302      	movs	r3, #2
 8019262:	e004      	b.n	801926e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019264:	2301      	movs	r3, #1
 8019266:	e002      	b.n	801926e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019268:	2303      	movs	r3, #3
 801926a:	e000      	b.n	801926e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801926c:	2300      	movs	r3, #0
    }
}
 801926e:	4618      	mov	r0, r3
 8019270:	bd80      	pop	{r7, pc}
	...

08019274 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b082      	sub	sp, #8
 8019278:	af00      	add	r7, sp, #0
 801927a:	4603      	mov	r3, r0
 801927c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801927e:	4a25      	ldr	r2, [pc, #148]	; (8019314 <RadioSetModem+0xa0>)
 8019280:	79fb      	ldrb	r3, [r7, #7]
 8019282:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8019284:	79fb      	ldrb	r3, [r7, #7]
 8019286:	4618      	mov	r0, r3
 8019288:	f003 f80d 	bl	801c2a6 <RFW_SetRadioModem>
    switch( modem )
 801928c:	79fb      	ldrb	r3, [r7, #7]
 801928e:	3b01      	subs	r3, #1
 8019290:	2b03      	cmp	r3, #3
 8019292:	d80b      	bhi.n	80192ac <RadioSetModem+0x38>
 8019294:	a201      	add	r2, pc, #4	; (adr r2, 801929c <RadioSetModem+0x28>)
 8019296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801929a:	bf00      	nop
 801929c:	080192bb 	.word	0x080192bb
 80192a0:	080192e1 	.word	0x080192e1
 80192a4:	080192ef 	.word	0x080192ef
 80192a8:	080192fd 	.word	0x080192fd
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80192ac:	2000      	movs	r0, #0
 80192ae:	f002 fa3b 	bl	801b728 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80192b2:	4b18      	ldr	r3, [pc, #96]	; (8019314 <RadioSetModem+0xa0>)
 80192b4:	2200      	movs	r2, #0
 80192b6:	735a      	strb	r2, [r3, #13]
        break;
 80192b8:	e028      	b.n	801930c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80192ba:	2001      	movs	r0, #1
 80192bc:	f002 fa34 	bl	801b728 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80192c0:	4b14      	ldr	r3, [pc, #80]	; (8019314 <RadioSetModem+0xa0>)
 80192c2:	7b5a      	ldrb	r2, [r3, #13]
 80192c4:	4b13      	ldr	r3, [pc, #76]	; (8019314 <RadioSetModem+0xa0>)
 80192c6:	7b1b      	ldrb	r3, [r3, #12]
 80192c8:	429a      	cmp	r2, r3
 80192ca:	d01e      	beq.n	801930a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80192cc:	4b11      	ldr	r3, [pc, #68]	; (8019314 <RadioSetModem+0xa0>)
 80192ce:	7b1a      	ldrb	r2, [r3, #12]
 80192d0:	4b10      	ldr	r3, [pc, #64]	; (8019314 <RadioSetModem+0xa0>)
 80192d2:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80192d4:	4b0f      	ldr	r3, [pc, #60]	; (8019314 <RadioSetModem+0xa0>)
 80192d6:	7b5b      	ldrb	r3, [r3, #13]
 80192d8:	4618      	mov	r0, r3
 80192da:	f000 ff91 	bl	801a200 <RadioSetPublicNetwork>
        }
        break;
 80192de:	e014      	b.n	801930a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80192e0:	2002      	movs	r0, #2
 80192e2:	f002 fa21 	bl	801b728 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80192e6:	4b0b      	ldr	r3, [pc, #44]	; (8019314 <RadioSetModem+0xa0>)
 80192e8:	2200      	movs	r2, #0
 80192ea:	735a      	strb	r2, [r3, #13]
        break;
 80192ec:	e00e      	b.n	801930c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80192ee:	2002      	movs	r0, #2
 80192f0:	f002 fa1a 	bl	801b728 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80192f4:	4b07      	ldr	r3, [pc, #28]	; (8019314 <RadioSetModem+0xa0>)
 80192f6:	2200      	movs	r2, #0
 80192f8:	735a      	strb	r2, [r3, #13]
        break;
 80192fa:	e007      	b.n	801930c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80192fc:	2000      	movs	r0, #0
 80192fe:	f002 fa13 	bl	801b728 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019302:	4b04      	ldr	r3, [pc, #16]	; (8019314 <RadioSetModem+0xa0>)
 8019304:	2200      	movs	r2, #0
 8019306:	735a      	strb	r2, [r3, #13]
        break;
 8019308:	e000      	b.n	801930c <RadioSetModem+0x98>
        break;
 801930a:	bf00      	nop
    }
}
 801930c:	bf00      	nop
 801930e:	3708      	adds	r7, #8
 8019310:	46bd      	mov	sp, r7
 8019312:	bd80      	pop	{r7, pc}
 8019314:	20003df4 	.word	0x20003df4

08019318 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b082      	sub	sp, #8
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019320:	6878      	ldr	r0, [r7, #4]
 8019322:	f002 f9bb 	bl	801b69c <SUBGRF_SetRfFrequency>
}
 8019326:	bf00      	nop
 8019328:	3708      	adds	r7, #8
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}

0801932e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801932e:	b580      	push	{r7, lr}
 8019330:	b090      	sub	sp, #64	; 0x40
 8019332:	af0a      	add	r7, sp, #40	; 0x28
 8019334:	60f8      	str	r0, [r7, #12]
 8019336:	60b9      	str	r1, [r7, #8]
 8019338:	603b      	str	r3, [r7, #0]
 801933a:	4613      	mov	r3, r2
 801933c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801933e:	2301      	movs	r3, #1
 8019340:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019342:	2300      	movs	r3, #0
 8019344:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8019346:	2300      	movs	r3, #0
 8019348:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801934a:	f000 fdfe 	bl	8019f4a <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 801934e:	2000      	movs	r0, #0
 8019350:	f7ff ff90 	bl	8019274 <RadioSetModem>

    RadioSetChannel( freq );
 8019354:	68f8      	ldr	r0, [r7, #12]
 8019356:	f7ff ffdf 	bl	8019318 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801935a:	2301      	movs	r3, #1
 801935c:	9309      	str	r3, [sp, #36]	; 0x24
 801935e:	2300      	movs	r3, #0
 8019360:	9308      	str	r3, [sp, #32]
 8019362:	2300      	movs	r3, #0
 8019364:	9307      	str	r3, [sp, #28]
 8019366:	2300      	movs	r3, #0
 8019368:	9306      	str	r3, [sp, #24]
 801936a:	2300      	movs	r3, #0
 801936c:	9305      	str	r3, [sp, #20]
 801936e:	2300      	movs	r3, #0
 8019370:	9304      	str	r3, [sp, #16]
 8019372:	2300      	movs	r3, #0
 8019374:	9303      	str	r3, [sp, #12]
 8019376:	2300      	movs	r3, #0
 8019378:	9302      	str	r3, [sp, #8]
 801937a:	2303      	movs	r3, #3
 801937c:	9301      	str	r3, [sp, #4]
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	9300      	str	r3, [sp, #0]
 8019382:	2300      	movs	r3, #0
 8019384:	f44f 7216 	mov.w	r2, #600	; 0x258
 8019388:	68b9      	ldr	r1, [r7, #8]
 801938a:	2000      	movs	r0, #0
 801938c:	f000 f840 	bl	8019410 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019390:	2000      	movs	r0, #0
 8019392:	f000 fde1 	bl	8019f58 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8019396:	f000 ff61 	bl	801a25c <RadioGetWakeupTime>
 801939a:	4603      	mov	r3, r0
 801939c:	4618      	mov	r0, r3
 801939e:	f7e8 fc72 	bl	8001c86 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80193a2:	f003 ff7d 	bl	801d2a0 <UTIL_TIMER_GetCurrentTime>
 80193a6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80193a8:	e00d      	b.n	80193c6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80193aa:	2000      	movs	r0, #0
 80193ac:	f000 fea6 	bl	801a0fc <RadioRssi>
 80193b0:	4603      	mov	r3, r0
 80193b2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80193b4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80193b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80193bc:	429a      	cmp	r2, r3
 80193be:	dd02      	ble.n	80193c6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80193c0:	2300      	movs	r3, #0
 80193c2:	75fb      	strb	r3, [r7, #23]
            break;
 80193c4:	e006      	b.n	80193d4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80193c6:	6938      	ldr	r0, [r7, #16]
 80193c8:	f003 ff7c 	bl	801d2c4 <UTIL_TIMER_GetElapsedTime>
 80193cc:	4602      	mov	r2, r0
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	4293      	cmp	r3, r2
 80193d2:	d8ea      	bhi.n	80193aa <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80193d4:	f000 fdb9 	bl	8019f4a <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80193d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80193da:	4618      	mov	r0, r3
 80193dc:	3718      	adds	r7, #24
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}

080193e2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80193e2:	b580      	push	{r7, lr}
 80193e4:	b082      	sub	sp, #8
 80193e6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80193e8:	2300      	movs	r3, #0
 80193ea:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80193ec:	2001      	movs	r0, #1
 80193ee:	f7ff ff41 	bl	8019274 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80193f2:	2300      	movs	r3, #0
 80193f4:	2200      	movs	r2, #0
 80193f6:	2100      	movs	r1, #0
 80193f8:	2000      	movs	r0, #0
 80193fa:	f002 f8f3 	bl	801b5e4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80193fe:	f001 fea8 	bl	801b152 <SUBGRF_GetRandom>
 8019402:	6078      	str	r0, [r7, #4]

    return rnd;
 8019404:	687b      	ldr	r3, [r7, #4]
}
 8019406:	4618      	mov	r0, r3
 8019408:	3708      	adds	r7, #8
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}
	...

08019410 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b08a      	sub	sp, #40	; 0x28
 8019414:	af00      	add	r7, sp, #0
 8019416:	60b9      	str	r1, [r7, #8]
 8019418:	607a      	str	r2, [r7, #4]
 801941a:	461a      	mov	r2, r3
 801941c:	4603      	mov	r3, r0
 801941e:	73fb      	strb	r3, [r7, #15]
 8019420:	4613      	mov	r3, r2
 8019422:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8019424:	4abd      	ldr	r2, [pc, #756]	; (801971c <RadioSetRxConfig+0x30c>)
 8019426:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801942a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801942c:	f002 fef9 	bl	801c222 <RFW_DeInit>
    if( rxContinuous == true )
 8019430:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019434:	2b00      	cmp	r3, #0
 8019436:	d001      	beq.n	801943c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019438:	2300      	movs	r3, #0
 801943a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801943c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019440:	2b00      	cmp	r3, #0
 8019442:	d004      	beq.n	801944e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019444:	4ab6      	ldr	r2, [pc, #728]	; (8019720 <RadioSetRxConfig+0x310>)
 8019446:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801944a:	7013      	strb	r3, [r2, #0]
 801944c:	e002      	b.n	8019454 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801944e:	4bb4      	ldr	r3, [pc, #720]	; (8019720 <RadioSetRxConfig+0x310>)
 8019450:	22ff      	movs	r2, #255	; 0xff
 8019452:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019454:	7bfb      	ldrb	r3, [r7, #15]
 8019456:	2b04      	cmp	r3, #4
 8019458:	d009      	beq.n	801946e <RadioSetRxConfig+0x5e>
 801945a:	2b04      	cmp	r3, #4
 801945c:	f300 81da 	bgt.w	8019814 <RadioSetRxConfig+0x404>
 8019460:	2b00      	cmp	r3, #0
 8019462:	f000 80bf 	beq.w	80195e4 <RadioSetRxConfig+0x1d4>
 8019466:	2b01      	cmp	r3, #1
 8019468:	f000 812c 	beq.w	80196c4 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801946c:	e1d2      	b.n	8019814 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801946e:	2001      	movs	r0, #1
 8019470:	f001 ffb4 	bl	801b3dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019474:	4ba9      	ldr	r3, [pc, #676]	; (801971c <RadioSetRxConfig+0x30c>)
 8019476:	2200      	movs	r2, #0
 8019478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801947c:	4aa7      	ldr	r2, [pc, #668]	; (801971c <RadioSetRxConfig+0x30c>)
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8019482:	4ba6      	ldr	r3, [pc, #664]	; (801971c <RadioSetRxConfig+0x30c>)
 8019484:	2209      	movs	r2, #9
 8019486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801948a:	4ba4      	ldr	r3, [pc, #656]	; (801971c <RadioSetRxConfig+0x30c>)
 801948c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019490:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019492:	68b8      	ldr	r0, [r7, #8]
 8019494:	f002 fdf8 	bl	801c088 <SUBGRF_GetFskBandwidthRegValue>
 8019498:	4603      	mov	r3, r0
 801949a:	461a      	mov	r2, r3
 801949c:	4b9f      	ldr	r3, [pc, #636]	; (801971c <RadioSetRxConfig+0x30c>)
 801949e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80194a2:	4b9e      	ldr	r3, [pc, #632]	; (801971c <RadioSetRxConfig+0x30c>)
 80194a4:	2200      	movs	r2, #0
 80194a6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80194a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80194aa:	00db      	lsls	r3, r3, #3
 80194ac:	b29a      	uxth	r2, r3
 80194ae:	4b9b      	ldr	r3, [pc, #620]	; (801971c <RadioSetRxConfig+0x30c>)
 80194b0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80194b2:	4b9a      	ldr	r3, [pc, #616]	; (801971c <RadioSetRxConfig+0x30c>)
 80194b4:	2200      	movs	r2, #0
 80194b6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80194b8:	4b98      	ldr	r3, [pc, #608]	; (801971c <RadioSetRxConfig+0x30c>)
 80194ba:	2210      	movs	r2, #16
 80194bc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80194be:	4b97      	ldr	r3, [pc, #604]	; (801971c <RadioSetRxConfig+0x30c>)
 80194c0:	2200      	movs	r2, #0
 80194c2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80194c4:	4b95      	ldr	r3, [pc, #596]	; (801971c <RadioSetRxConfig+0x30c>)
 80194c6:	2200      	movs	r2, #0
 80194c8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80194ca:	4b95      	ldr	r3, [pc, #596]	; (8019720 <RadioSetRxConfig+0x310>)
 80194cc:	781a      	ldrb	r2, [r3, #0]
 80194ce:	4b93      	ldr	r3, [pc, #588]	; (801971c <RadioSetRxConfig+0x30c>)
 80194d0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80194d2:	4b92      	ldr	r3, [pc, #584]	; (801971c <RadioSetRxConfig+0x30c>)
 80194d4:	2201      	movs	r2, #1
 80194d6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80194d8:	4b90      	ldr	r3, [pc, #576]	; (801971c <RadioSetRxConfig+0x30c>)
 80194da:	2200      	movs	r2, #0
 80194dc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80194de:	2004      	movs	r0, #4
 80194e0:	f7ff fec8 	bl	8019274 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80194e4:	488f      	ldr	r0, [pc, #572]	; (8019724 <RadioSetRxConfig+0x314>)
 80194e6:	f002 f9ab 	bl	801b840 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80194ea:	488f      	ldr	r0, [pc, #572]	; (8019728 <RadioSetRxConfig+0x318>)
 80194ec:	f002 fa7a 	bl	801b9e4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80194f0:	4a8e      	ldr	r2, [pc, #568]	; (801972c <RadioSetRxConfig+0x31c>)
 80194f2:	f107 031c 	add.w	r3, r7, #28
 80194f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80194fe:	f107 031c 	add.w	r3, r7, #28
 8019502:	4618      	mov	r0, r3
 8019504:	f001 fda3 	bl	801b04e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019508:	f240 10ff 	movw	r0, #511	; 0x1ff
 801950c:	f001 fdee 	bl	801b0ec <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8019510:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019514:	f000 fe11 	bl	801a13a <RadioRead>
 8019518:	4603      	mov	r3, r0
 801951a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801951e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019522:	f023 0310 	bic.w	r3, r3, #16
 8019526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 801952a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801952e:	4619      	mov	r1, r3
 8019530:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019534:	f000 fdef 	bl	801a116 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8019538:	2104      	movs	r1, #4
 801953a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801953e:	f000 fdea 	bl	801a116 <RadioWrite>
            modReg= RadioRead(0x89b);
 8019542:	f640 009b 	movw	r0, #2203	; 0x89b
 8019546:	f000 fdf8 	bl	801a13a <RadioRead>
 801954a:	4603      	mov	r3, r0
 801954c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019554:	f023 031c 	bic.w	r3, r3, #28
 8019558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 801955c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019560:	f043 0308 	orr.w	r3, r3, #8
 8019564:	b2db      	uxtb	r3, r3
 8019566:	4619      	mov	r1, r3
 8019568:	f640 009b 	movw	r0, #2203	; 0x89b
 801956c:	f000 fdd3 	bl	801a116 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8019570:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019574:	f000 fde1 	bl	801a13a <RadioRead>
 8019578:	4603      	mov	r3, r0
 801957a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801957e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019582:	f023 0318 	bic.w	r3, r3, #24
 8019586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 801958a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801958e:	f043 0318 	orr.w	r3, r3, #24
 8019592:	b2db      	uxtb	r3, r3
 8019594:	4619      	mov	r1, r3
 8019596:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801959a:	f000 fdbc 	bl	801a116 <RadioWrite>
            modReg= RadioRead(0x6ac);
 801959e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80195a2:	f000 fdca 	bl	801a13a <RadioRead>
 80195a6:	4603      	mov	r3, r0
 80195a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80195ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80195b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80195b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195bc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80195c0:	b2db      	uxtb	r3, r3
 80195c2:	4619      	mov	r1, r3
 80195c4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80195c8:	f000 fda5 	bl	801a116 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80195cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80195ce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80195d2:	fb02 f303 	mul.w	r3, r2, r3
 80195d6:	461a      	mov	r2, r3
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	fbb2 f3f3 	udiv	r3, r2, r3
 80195de:	4a4f      	ldr	r2, [pc, #316]	; (801971c <RadioSetRxConfig+0x30c>)
 80195e0:	6093      	str	r3, [r2, #8]
            break;
 80195e2:	e118      	b.n	8019816 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80195e4:	2000      	movs	r0, #0
 80195e6:	f001 fef9 	bl	801b3dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80195ea:	4b4c      	ldr	r3, [pc, #304]	; (801971c <RadioSetRxConfig+0x30c>)
 80195ec:	2200      	movs	r2, #0
 80195ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80195f2:	4a4a      	ldr	r2, [pc, #296]	; (801971c <RadioSetRxConfig+0x30c>)
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80195f8:	4b48      	ldr	r3, [pc, #288]	; (801971c <RadioSetRxConfig+0x30c>)
 80195fa:	220b      	movs	r2, #11
 80195fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019600:	68b8      	ldr	r0, [r7, #8]
 8019602:	f002 fd41 	bl	801c088 <SUBGRF_GetFskBandwidthRegValue>
 8019606:	4603      	mov	r3, r0
 8019608:	461a      	mov	r2, r3
 801960a:	4b44      	ldr	r3, [pc, #272]	; (801971c <RadioSetRxConfig+0x30c>)
 801960c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019610:	4b42      	ldr	r3, [pc, #264]	; (801971c <RadioSetRxConfig+0x30c>)
 8019612:	2200      	movs	r2, #0
 8019614:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019616:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019618:	00db      	lsls	r3, r3, #3
 801961a:	b29a      	uxth	r2, r3
 801961c:	4b3f      	ldr	r3, [pc, #252]	; (801971c <RadioSetRxConfig+0x30c>)
 801961e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019620:	4b3e      	ldr	r3, [pc, #248]	; (801971c <RadioSetRxConfig+0x30c>)
 8019622:	2204      	movs	r2, #4
 8019624:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019626:	4b3d      	ldr	r3, [pc, #244]	; (801971c <RadioSetRxConfig+0x30c>)
 8019628:	2218      	movs	r2, #24
 801962a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801962c:	4b3b      	ldr	r3, [pc, #236]	; (801971c <RadioSetRxConfig+0x30c>)
 801962e:	2200      	movs	r2, #0
 8019630:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019632:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019636:	f083 0301 	eor.w	r3, r3, #1
 801963a:	b2db      	uxtb	r3, r3
 801963c:	461a      	mov	r2, r3
 801963e:	4b37      	ldr	r3, [pc, #220]	; (801971c <RadioSetRxConfig+0x30c>)
 8019640:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019642:	4b37      	ldr	r3, [pc, #220]	; (8019720 <RadioSetRxConfig+0x310>)
 8019644:	781a      	ldrb	r2, [r3, #0]
 8019646:	4b35      	ldr	r3, [pc, #212]	; (801971c <RadioSetRxConfig+0x30c>)
 8019648:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801964a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801964e:	2b00      	cmp	r3, #0
 8019650:	d003      	beq.n	801965a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019652:	4b32      	ldr	r3, [pc, #200]	; (801971c <RadioSetRxConfig+0x30c>)
 8019654:	22f2      	movs	r2, #242	; 0xf2
 8019656:	75da      	strb	r2, [r3, #23]
 8019658:	e002      	b.n	8019660 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801965a:	4b30      	ldr	r3, [pc, #192]	; (801971c <RadioSetRxConfig+0x30c>)
 801965c:	2201      	movs	r2, #1
 801965e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019660:	4b2e      	ldr	r3, [pc, #184]	; (801971c <RadioSetRxConfig+0x30c>)
 8019662:	2201      	movs	r2, #1
 8019664:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019666:	f000 fc70 	bl	8019f4a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801966a:	4b2c      	ldr	r3, [pc, #176]	; (801971c <RadioSetRxConfig+0x30c>)
 801966c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019670:	2b00      	cmp	r3, #0
 8019672:	bf14      	ite	ne
 8019674:	2301      	movne	r3, #1
 8019676:	2300      	moveq	r3, #0
 8019678:	b2db      	uxtb	r3, r3
 801967a:	4618      	mov	r0, r3
 801967c:	f7ff fdfa 	bl	8019274 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019680:	4828      	ldr	r0, [pc, #160]	; (8019724 <RadioSetRxConfig+0x314>)
 8019682:	f002 f8dd 	bl	801b840 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019686:	4828      	ldr	r0, [pc, #160]	; (8019728 <RadioSetRxConfig+0x318>)
 8019688:	f002 f9ac 	bl	801b9e4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801968c:	4a28      	ldr	r2, [pc, #160]	; (8019730 <RadioSetRxConfig+0x320>)
 801968e:	f107 0314 	add.w	r3, r7, #20
 8019692:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019696:	e883 0003 	stmia.w	r3, {r0, r1}
 801969a:	f107 0314 	add.w	r3, r7, #20
 801969e:	4618      	mov	r0, r3
 80196a0:	f001 fcd5 	bl	801b04e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80196a4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80196a8:	f001 fd20 	bl	801b0ec <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80196ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80196ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80196b2:	fb02 f303 	mul.w	r3, r2, r3
 80196b6:	461a      	mov	r2, r3
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80196be:	4a17      	ldr	r2, [pc, #92]	; (801971c <RadioSetRxConfig+0x30c>)
 80196c0:	6093      	str	r3, [r2, #8]
            break;
 80196c2:	e0a8      	b.n	8019816 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80196c4:	2000      	movs	r0, #0
 80196c6:	f001 fe89 	bl	801b3dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80196ca:	4b14      	ldr	r3, [pc, #80]	; (801971c <RadioSetRxConfig+0x30c>)
 80196cc:	2201      	movs	r2, #1
 80196ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	b2da      	uxtb	r2, r3
 80196d6:	4b11      	ldr	r3, [pc, #68]	; (801971c <RadioSetRxConfig+0x30c>)
 80196d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80196dc:	4a15      	ldr	r2, [pc, #84]	; (8019734 <RadioSetRxConfig+0x324>)
 80196de:	68bb      	ldr	r3, [r7, #8]
 80196e0:	4413      	add	r3, r2
 80196e2:	781a      	ldrb	r2, [r3, #0]
 80196e4:	4b0d      	ldr	r3, [pc, #52]	; (801971c <RadioSetRxConfig+0x30c>)
 80196e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80196ea:	4a0c      	ldr	r2, [pc, #48]	; (801971c <RadioSetRxConfig+0x30c>)
 80196ec:	7bbb      	ldrb	r3, [r7, #14]
 80196ee:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80196f2:	68bb      	ldr	r3, [r7, #8]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d105      	bne.n	8019704 <RadioSetRxConfig+0x2f4>
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2b0b      	cmp	r3, #11
 80196fc:	d008      	beq.n	8019710 <RadioSetRxConfig+0x300>
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	2b0c      	cmp	r3, #12
 8019702:	d005      	beq.n	8019710 <RadioSetRxConfig+0x300>
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	2b01      	cmp	r3, #1
 8019708:	d116      	bne.n	8019738 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	2b0c      	cmp	r3, #12
 801970e:	d113      	bne.n	8019738 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019710:	4b02      	ldr	r3, [pc, #8]	; (801971c <RadioSetRxConfig+0x30c>)
 8019712:	2201      	movs	r2, #1
 8019714:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019718:	e012      	b.n	8019740 <RadioSetRxConfig+0x330>
 801971a:	bf00      	nop
 801971c:	20003df4 	.word	0x20003df4
 8019720:	20000104 	.word	0x20000104
 8019724:	20003e2c 	.word	0x20003e2c
 8019728:	20003e02 	.word	0x20003e02
 801972c:	0801e16c 	.word	0x0801e16c
 8019730:	0801e174 	.word	0x0801e174
 8019734:	0801e7c0 	.word	0x0801e7c0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019738:	4b39      	ldr	r3, [pc, #228]	; (8019820 <RadioSetRxConfig+0x410>)
 801973a:	2200      	movs	r2, #0
 801973c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019740:	4b37      	ldr	r3, [pc, #220]	; (8019820 <RadioSetRxConfig+0x410>)
 8019742:	2201      	movs	r2, #1
 8019744:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019746:	4b36      	ldr	r3, [pc, #216]	; (8019820 <RadioSetRxConfig+0x410>)
 8019748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801974c:	2b05      	cmp	r3, #5
 801974e:	d004      	beq.n	801975a <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019750:	4b33      	ldr	r3, [pc, #204]	; (8019820 <RadioSetRxConfig+0x410>)
 8019752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019756:	2b06      	cmp	r3, #6
 8019758:	d10a      	bne.n	8019770 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 801975a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801975c:	2b0b      	cmp	r3, #11
 801975e:	d803      	bhi.n	8019768 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019760:	4b2f      	ldr	r3, [pc, #188]	; (8019820 <RadioSetRxConfig+0x410>)
 8019762:	220c      	movs	r2, #12
 8019764:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019766:	e006      	b.n	8019776 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019768:	4a2d      	ldr	r2, [pc, #180]	; (8019820 <RadioSetRxConfig+0x410>)
 801976a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801976c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801976e:	e002      	b.n	8019776 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019770:	4a2b      	ldr	r2, [pc, #172]	; (8019820 <RadioSetRxConfig+0x410>)
 8019772:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019774:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019776:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801977a:	4b29      	ldr	r3, [pc, #164]	; (8019820 <RadioSetRxConfig+0x410>)
 801977c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801977e:	4b29      	ldr	r3, [pc, #164]	; (8019824 <RadioSetRxConfig+0x414>)
 8019780:	781a      	ldrb	r2, [r3, #0]
 8019782:	4b27      	ldr	r3, [pc, #156]	; (8019820 <RadioSetRxConfig+0x410>)
 8019784:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019786:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801978a:	4b25      	ldr	r3, [pc, #148]	; (8019820 <RadioSetRxConfig+0x410>)
 801978c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019790:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019794:	4b22      	ldr	r3, [pc, #136]	; (8019820 <RadioSetRxConfig+0x410>)
 8019796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801979a:	f000 fbd6 	bl	8019f4a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801979e:	4b20      	ldr	r3, [pc, #128]	; (8019820 <RadioSetRxConfig+0x410>)
 80197a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	bf14      	ite	ne
 80197a8:	2301      	movne	r3, #1
 80197aa:	2300      	moveq	r3, #0
 80197ac:	b2db      	uxtb	r3, r3
 80197ae:	4618      	mov	r0, r3
 80197b0:	f7ff fd60 	bl	8019274 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197b4:	481c      	ldr	r0, [pc, #112]	; (8019828 <RadioSetRxConfig+0x418>)
 80197b6:	f002 f843 	bl	801b840 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197ba:	481c      	ldr	r0, [pc, #112]	; (801982c <RadioSetRxConfig+0x41c>)
 80197bc:	f002 f912 	bl	801b9e4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80197c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80197c2:	b2db      	uxtb	r3, r3
 80197c4:	4618      	mov	r0, r3
 80197c6:	f001 fe18 	bl	801b3fa <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80197ca:	4b15      	ldr	r3, [pc, #84]	; (8019820 <RadioSetRxConfig+0x410>)
 80197cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80197d0:	2b01      	cmp	r3, #1
 80197d2:	d10d      	bne.n	80197f0 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80197d4:	f240 7036 	movw	r0, #1846	; 0x736
 80197d8:	f002 fa60 	bl	801bc9c <SUBGRF_ReadRegister>
 80197dc:	4603      	mov	r3, r0
 80197de:	f023 0304 	bic.w	r3, r3, #4
 80197e2:	b2db      	uxtb	r3, r3
 80197e4:	4619      	mov	r1, r3
 80197e6:	f240 7036 	movw	r0, #1846	; 0x736
 80197ea:	f002 fa43 	bl	801bc74 <SUBGRF_WriteRegister>
 80197ee:	e00c      	b.n	801980a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80197f0:	f240 7036 	movw	r0, #1846	; 0x736
 80197f4:	f002 fa52 	bl	801bc9c <SUBGRF_ReadRegister>
 80197f8:	4603      	mov	r3, r0
 80197fa:	f043 0304 	orr.w	r3, r3, #4
 80197fe:	b2db      	uxtb	r3, r3
 8019800:	4619      	mov	r1, r3
 8019802:	f240 7036 	movw	r0, #1846	; 0x736
 8019806:	f002 fa35 	bl	801bc74 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801980a:	4b05      	ldr	r3, [pc, #20]	; (8019820 <RadioSetRxConfig+0x410>)
 801980c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019810:	609a      	str	r2, [r3, #8]
            break;
 8019812:	e000      	b.n	8019816 <RadioSetRxConfig+0x406>
            break;
 8019814:	bf00      	nop
    }
}
 8019816:	bf00      	nop
 8019818:	3728      	adds	r7, #40	; 0x28
 801981a:	46bd      	mov	sp, r7
 801981c:	bd80      	pop	{r7, pc}
 801981e:	bf00      	nop
 8019820:	20003df4 	.word	0x20003df4
 8019824:	20000104 	.word	0x20000104
 8019828:	20003e2c 	.word	0x20003e2c
 801982c:	20003e02 	.word	0x20003e02

08019830 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b086      	sub	sp, #24
 8019834:	af00      	add	r7, sp, #0
 8019836:	60ba      	str	r2, [r7, #8]
 8019838:	607b      	str	r3, [r7, #4]
 801983a:	4603      	mov	r3, r0
 801983c:	73fb      	strb	r3, [r7, #15]
 801983e:	460b      	mov	r3, r1
 8019840:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8019842:	f002 fcee 	bl	801c222 <RFW_DeInit>
    switch( modem )
 8019846:	7bfb      	ldrb	r3, [r7, #15]
 8019848:	2b03      	cmp	r3, #3
 801984a:	f000 80d7 	beq.w	80199fc <RadioSetTxConfig+0x1cc>
 801984e:	2b03      	cmp	r3, #3
 8019850:	f300 80e6 	bgt.w	8019a20 <RadioSetTxConfig+0x1f0>
 8019854:	2b00      	cmp	r3, #0
 8019856:	d002      	beq.n	801985e <RadioSetTxConfig+0x2e>
 8019858:	2b01      	cmp	r3, #1
 801985a:	d061      	beq.n	8019920 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 801985c:	e0e0      	b.n	8019a20 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801985e:	4b7c      	ldr	r3, [pc, #496]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019860:	2200      	movs	r2, #0
 8019862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019866:	4a7a      	ldr	r2, [pc, #488]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019868:	6a3b      	ldr	r3, [r7, #32]
 801986a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801986c:	4b78      	ldr	r3, [pc, #480]	; (8019a50 <RadioSetTxConfig+0x220>)
 801986e:	220b      	movs	r2, #11
 8019870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019874:	6878      	ldr	r0, [r7, #4]
 8019876:	f002 fc07 	bl	801c088 <SUBGRF_GetFskBandwidthRegValue>
 801987a:	4603      	mov	r3, r0
 801987c:	461a      	mov	r2, r3
 801987e:	4b74      	ldr	r3, [pc, #464]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8019884:	4a72      	ldr	r2, [pc, #456]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801988a:	4b71      	ldr	r3, [pc, #452]	; (8019a50 <RadioSetTxConfig+0x220>)
 801988c:	2200      	movs	r2, #0
 801988e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019890:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019892:	00db      	lsls	r3, r3, #3
 8019894:	b29a      	uxth	r2, r3
 8019896:	4b6e      	ldr	r3, [pc, #440]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019898:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801989a:	4b6d      	ldr	r3, [pc, #436]	; (8019a50 <RadioSetTxConfig+0x220>)
 801989c:	2204      	movs	r2, #4
 801989e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80198a0:	4b6b      	ldr	r3, [pc, #428]	; (8019a50 <RadioSetTxConfig+0x220>)
 80198a2:	2218      	movs	r2, #24
 80198a4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80198a6:	4b6a      	ldr	r3, [pc, #424]	; (8019a50 <RadioSetTxConfig+0x220>)
 80198a8:	2200      	movs	r2, #0
 80198aa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80198ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80198b0:	f083 0301 	eor.w	r3, r3, #1
 80198b4:	b2db      	uxtb	r3, r3
 80198b6:	461a      	mov	r2, r3
 80198b8:	4b65      	ldr	r3, [pc, #404]	; (8019a50 <RadioSetTxConfig+0x220>)
 80198ba:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80198bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d003      	beq.n	80198cc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80198c4:	4b62      	ldr	r3, [pc, #392]	; (8019a50 <RadioSetTxConfig+0x220>)
 80198c6:	22f2      	movs	r2, #242	; 0xf2
 80198c8:	75da      	strb	r2, [r3, #23]
 80198ca:	e002      	b.n	80198d2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80198cc:	4b60      	ldr	r3, [pc, #384]	; (8019a50 <RadioSetTxConfig+0x220>)
 80198ce:	2201      	movs	r2, #1
 80198d0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80198d2:	4b5f      	ldr	r3, [pc, #380]	; (8019a50 <RadioSetTxConfig+0x220>)
 80198d4:	2201      	movs	r2, #1
 80198d6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80198d8:	f000 fb37 	bl	8019f4a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80198dc:	4b5c      	ldr	r3, [pc, #368]	; (8019a50 <RadioSetTxConfig+0x220>)
 80198de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	bf14      	ite	ne
 80198e6:	2301      	movne	r3, #1
 80198e8:	2300      	moveq	r3, #0
 80198ea:	b2db      	uxtb	r3, r3
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7ff fcc1 	bl	8019274 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80198f2:	4858      	ldr	r0, [pc, #352]	; (8019a54 <RadioSetTxConfig+0x224>)
 80198f4:	f001 ffa4 	bl	801b840 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80198f8:	4857      	ldr	r0, [pc, #348]	; (8019a58 <RadioSetTxConfig+0x228>)
 80198fa:	f002 f873 	bl	801b9e4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80198fe:	4a57      	ldr	r2, [pc, #348]	; (8019a5c <RadioSetTxConfig+0x22c>)
 8019900:	f107 0310 	add.w	r3, r7, #16
 8019904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019908:	e883 0003 	stmia.w	r3, {r0, r1}
 801990c:	f107 0310 	add.w	r3, r7, #16
 8019910:	4618      	mov	r0, r3
 8019912:	f001 fb9c 	bl	801b04e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019916:	f240 10ff 	movw	r0, #511	; 0x1ff
 801991a:	f001 fbe7 	bl	801b0ec <SUBGRF_SetWhiteningSeed>
            break;
 801991e:	e080      	b.n	8019a22 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019920:	4b4b      	ldr	r3, [pc, #300]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019922:	2201      	movs	r2, #1
 8019924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8019928:	6a3b      	ldr	r3, [r7, #32]
 801992a:	b2da      	uxtb	r2, r3
 801992c:	4b48      	ldr	r3, [pc, #288]	; (8019a50 <RadioSetTxConfig+0x220>)
 801992e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8019932:	4a4b      	ldr	r2, [pc, #300]	; (8019a60 <RadioSetTxConfig+0x230>)
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	4413      	add	r3, r2
 8019938:	781a      	ldrb	r2, [r3, #0]
 801993a:	4b45      	ldr	r3, [pc, #276]	; (8019a50 <RadioSetTxConfig+0x220>)
 801993c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019940:	4a43      	ldr	r2, [pc, #268]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019946:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d105      	bne.n	801995c <RadioSetTxConfig+0x12c>
 8019950:	6a3b      	ldr	r3, [r7, #32]
 8019952:	2b0b      	cmp	r3, #11
 8019954:	d008      	beq.n	8019968 <RadioSetTxConfig+0x138>
 8019956:	6a3b      	ldr	r3, [r7, #32]
 8019958:	2b0c      	cmp	r3, #12
 801995a:	d005      	beq.n	8019968 <RadioSetTxConfig+0x138>
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2b01      	cmp	r3, #1
 8019960:	d107      	bne.n	8019972 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019962:	6a3b      	ldr	r3, [r7, #32]
 8019964:	2b0c      	cmp	r3, #12
 8019966:	d104      	bne.n	8019972 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019968:	4b39      	ldr	r3, [pc, #228]	; (8019a50 <RadioSetTxConfig+0x220>)
 801996a:	2201      	movs	r2, #1
 801996c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019970:	e003      	b.n	801997a <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019972:	4b37      	ldr	r3, [pc, #220]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019974:	2200      	movs	r2, #0
 8019976:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801997a:	4b35      	ldr	r3, [pc, #212]	; (8019a50 <RadioSetTxConfig+0x220>)
 801997c:	2201      	movs	r2, #1
 801997e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019980:	4b33      	ldr	r3, [pc, #204]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019986:	2b05      	cmp	r3, #5
 8019988:	d004      	beq.n	8019994 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801998a:	4b31      	ldr	r3, [pc, #196]	; (8019a50 <RadioSetTxConfig+0x220>)
 801998c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019990:	2b06      	cmp	r3, #6
 8019992:	d10a      	bne.n	80199aa <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8019994:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019996:	2b0b      	cmp	r3, #11
 8019998:	d803      	bhi.n	80199a2 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801999a:	4b2d      	ldr	r3, [pc, #180]	; (8019a50 <RadioSetTxConfig+0x220>)
 801999c:	220c      	movs	r2, #12
 801999e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80199a0:	e006      	b.n	80199b0 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80199a2:	4a2b      	ldr	r2, [pc, #172]	; (8019a50 <RadioSetTxConfig+0x220>)
 80199a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80199a6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80199a8:	e002      	b.n	80199b0 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80199aa:	4a29      	ldr	r2, [pc, #164]	; (8019a50 <RadioSetTxConfig+0x220>)
 80199ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80199ae:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80199b0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80199b4:	4b26      	ldr	r3, [pc, #152]	; (8019a50 <RadioSetTxConfig+0x220>)
 80199b6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80199b8:	4b2a      	ldr	r3, [pc, #168]	; (8019a64 <RadioSetTxConfig+0x234>)
 80199ba:	781a      	ldrb	r2, [r3, #0]
 80199bc:	4b24      	ldr	r3, [pc, #144]	; (8019a50 <RadioSetTxConfig+0x220>)
 80199be:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80199c0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80199c4:	4b22      	ldr	r3, [pc, #136]	; (8019a50 <RadioSetTxConfig+0x220>)
 80199c6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80199ca:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80199ce:	4b20      	ldr	r3, [pc, #128]	; (8019a50 <RadioSetTxConfig+0x220>)
 80199d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80199d4:	f000 fab9 	bl	8019f4a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80199d8:	4b1d      	ldr	r3, [pc, #116]	; (8019a50 <RadioSetTxConfig+0x220>)
 80199da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80199de:	2b00      	cmp	r3, #0
 80199e0:	bf14      	ite	ne
 80199e2:	2301      	movne	r3, #1
 80199e4:	2300      	moveq	r3, #0
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	4618      	mov	r0, r3
 80199ea:	f7ff fc43 	bl	8019274 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80199ee:	4819      	ldr	r0, [pc, #100]	; (8019a54 <RadioSetTxConfig+0x224>)
 80199f0:	f001 ff26 	bl	801b840 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80199f4:	4818      	ldr	r0, [pc, #96]	; (8019a58 <RadioSetTxConfig+0x228>)
 80199f6:	f001 fff5 	bl	801b9e4 <SUBGRF_SetPacketParams>
            break;
 80199fa:	e012      	b.n	8019a22 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80199fc:	2003      	movs	r0, #3
 80199fe:	f7ff fc39 	bl	8019274 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019a02:	4b13      	ldr	r3, [pc, #76]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019a04:	2202      	movs	r2, #2
 8019a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8019a0a:	4a11      	ldr	r2, [pc, #68]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019a0c:	6a3b      	ldr	r3, [r7, #32]
 8019a0e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019a10:	4b0f      	ldr	r3, [pc, #60]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019a12:	2216      	movs	r2, #22
 8019a14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019a18:	480e      	ldr	r0, [pc, #56]	; (8019a54 <RadioSetTxConfig+0x224>)
 8019a1a:	f001 ff11 	bl	801b840 <SUBGRF_SetModulationParams>
            break;
 8019a1e:	e000      	b.n	8019a22 <RadioSetTxConfig+0x1f2>
            break;
 8019a20:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019a26:	4618      	mov	r0, r3
 8019a28:	f002 fa40 	bl	801beac <SUBGRF_SetRfTxPower>
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	461a      	mov	r2, r3
 8019a30:	4b07      	ldr	r3, [pc, #28]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019a32:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8019a36:	4b06      	ldr	r3, [pc, #24]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019a38:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f002 fc04 	bl	801c24a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019a42:	4a03      	ldr	r2, [pc, #12]	; (8019a50 <RadioSetTxConfig+0x220>)
 8019a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a46:	6053      	str	r3, [r2, #4]
}
 8019a48:	bf00      	nop
 8019a4a:	3718      	adds	r7, #24
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}
 8019a50:	20003df4 	.word	0x20003df4
 8019a54:	20003e2c 	.word	0x20003e2c
 8019a58:	20003e02 	.word	0x20003e02
 8019a5c:	0801e174 	.word	0x0801e174
 8019a60:	0801e7c0 	.word	0x0801e7c0
 8019a64:	20000104 	.word	0x20000104

08019a68 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019a68:	b480      	push	{r7}
 8019a6a:	b083      	sub	sp, #12
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
    return true;
 8019a70:	2301      	movs	r3, #1
}
 8019a72:	4618      	mov	r0, r3
 8019a74:	370c      	adds	r7, #12
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bc80      	pop	{r7}
 8019a7a:	4770      	bx	lr

08019a7c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019a7c:	b480      	push	{r7}
 8019a7e:	b085      	sub	sp, #20
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	4603      	mov	r3, r0
 8019a84:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019a86:	2300      	movs	r3, #0
 8019a88:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8019a8a:	79fb      	ldrb	r3, [r7, #7]
 8019a8c:	2b0a      	cmp	r3, #10
 8019a8e:	d83e      	bhi.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
 8019a90:	a201      	add	r2, pc, #4	; (adr r2, 8019a98 <RadioGetLoRaBandwidthInHz+0x1c>)
 8019a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a96:	bf00      	nop
 8019a98:	08019ac5 	.word	0x08019ac5
 8019a9c:	08019ad5 	.word	0x08019ad5
 8019aa0:	08019ae5 	.word	0x08019ae5
 8019aa4:	08019af5 	.word	0x08019af5
 8019aa8:	08019afd 	.word	0x08019afd
 8019aac:	08019b03 	.word	0x08019b03
 8019ab0:	08019b09 	.word	0x08019b09
 8019ab4:	08019b0f 	.word	0x08019b0f
 8019ab8:	08019acd 	.word	0x08019acd
 8019abc:	08019add 	.word	0x08019add
 8019ac0:	08019aed 	.word	0x08019aed
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019ac4:	f641 6384 	movw	r3, #7812	; 0x1e84
 8019ac8:	60fb      	str	r3, [r7, #12]
        break;
 8019aca:	e020      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019acc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8019ad0:	60fb      	str	r3, [r7, #12]
        break;
 8019ad2:	e01c      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019ad4:	f643 5309 	movw	r3, #15625	; 0x3d09
 8019ad8:	60fb      	str	r3, [r7, #12]
        break;
 8019ada:	e018      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019adc:	f245 1361 	movw	r3, #20833	; 0x5161
 8019ae0:	60fb      	str	r3, [r7, #12]
        break;
 8019ae2:	e014      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019ae4:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019ae8:	60fb      	str	r3, [r7, #12]
        break;
 8019aea:	e010      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019aec:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8019af0:	60fb      	str	r3, [r7, #12]
        break;
 8019af2:	e00c      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019af4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019af8:	60fb      	str	r3, [r7, #12]
        break;
 8019afa:	e008      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019afc:	4b07      	ldr	r3, [pc, #28]	; (8019b1c <RadioGetLoRaBandwidthInHz+0xa0>)
 8019afe:	60fb      	str	r3, [r7, #12]
        break;
 8019b00:	e005      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8019b02:	4b07      	ldr	r3, [pc, #28]	; (8019b20 <RadioGetLoRaBandwidthInHz+0xa4>)
 8019b04:	60fb      	str	r3, [r7, #12]
        break;
 8019b06:	e002      	b.n	8019b0e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019b08:	4b06      	ldr	r3, [pc, #24]	; (8019b24 <RadioGetLoRaBandwidthInHz+0xa8>)
 8019b0a:	60fb      	str	r3, [r7, #12]
        break;
 8019b0c:	bf00      	nop
    }

    return bandwidthInHz;
 8019b0e:	68fb      	ldr	r3, [r7, #12]
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	3714      	adds	r7, #20
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bc80      	pop	{r7}
 8019b18:	4770      	bx	lr
 8019b1a:	bf00      	nop
 8019b1c:	0001e848 	.word	0x0001e848
 8019b20:	0003d090 	.word	0x0003d090
 8019b24:	0007a120 	.word	0x0007a120

08019b28 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019b28:	b480      	push	{r7}
 8019b2a:	b083      	sub	sp, #12
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
 8019b30:	4608      	mov	r0, r1
 8019b32:	4611      	mov	r1, r2
 8019b34:	461a      	mov	r2, r3
 8019b36:	4603      	mov	r3, r0
 8019b38:	70fb      	strb	r3, [r7, #3]
 8019b3a:	460b      	mov	r3, r1
 8019b3c:	803b      	strh	r3, [r7, #0]
 8019b3e:	4613      	mov	r3, r2
 8019b40:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8019b42:	883b      	ldrh	r3, [r7, #0]
 8019b44:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019b46:	78ba      	ldrb	r2, [r7, #2]
 8019b48:	f082 0201 	eor.w	r2, r2, #1
 8019b4c:	b2d2      	uxtb	r2, r2
 8019b4e:	2a00      	cmp	r2, #0
 8019b50:	d001      	beq.n	8019b56 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8019b52:	2208      	movs	r2, #8
 8019b54:	e000      	b.n	8019b58 <RadioGetGfskTimeOnAirNumerator+0x30>
 8019b56:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019b58:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019b5a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019b5e:	7c3b      	ldrb	r3, [r7, #16]
 8019b60:	7d39      	ldrb	r1, [r7, #20]
 8019b62:	2900      	cmp	r1, #0
 8019b64:	d001      	beq.n	8019b6a <RadioGetGfskTimeOnAirNumerator+0x42>
 8019b66:	2102      	movs	r1, #2
 8019b68:	e000      	b.n	8019b6c <RadioGetGfskTimeOnAirNumerator+0x44>
 8019b6a:	2100      	movs	r1, #0
 8019b6c:	440b      	add	r3, r1
 8019b6e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019b70:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8019b72:	4618      	mov	r0, r3
 8019b74:	370c      	adds	r7, #12
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bc80      	pop	{r7}
 8019b7a:	4770      	bx	lr

08019b7c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019b7c:	b480      	push	{r7}
 8019b7e:	b08b      	sub	sp, #44	; 0x2c
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	60f8      	str	r0, [r7, #12]
 8019b84:	60b9      	str	r1, [r7, #8]
 8019b86:	4611      	mov	r1, r2
 8019b88:	461a      	mov	r2, r3
 8019b8a:	460b      	mov	r3, r1
 8019b8c:	71fb      	strb	r3, [r7, #7]
 8019b8e:	4613      	mov	r3, r2
 8019b90:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019b92:	79fb      	ldrb	r3, [r7, #7]
 8019b94:	3304      	adds	r3, #4
 8019b96:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	2b05      	cmp	r3, #5
 8019ba2:	d002      	beq.n	8019baa <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019ba4:	68bb      	ldr	r3, [r7, #8]
 8019ba6:	2b06      	cmp	r3, #6
 8019ba8:	d104      	bne.n	8019bb4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019baa:	88bb      	ldrh	r3, [r7, #4]
 8019bac:	2b0b      	cmp	r3, #11
 8019bae:	d801      	bhi.n	8019bb4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019bb0:	230c      	movs	r3, #12
 8019bb2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d105      	bne.n	8019bc6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	2b0b      	cmp	r3, #11
 8019bbe:	d008      	beq.n	8019bd2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019bc0:	68bb      	ldr	r3, [r7, #8]
 8019bc2:	2b0c      	cmp	r3, #12
 8019bc4:	d005      	beq.n	8019bd2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	2b01      	cmp	r3, #1
 8019bca:	d105      	bne.n	8019bd8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019bcc:	68bb      	ldr	r3, [r7, #8]
 8019bce:	2b0c      	cmp	r3, #12
 8019bd0:	d102      	bne.n	8019bd8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019bd2:	2301      	movs	r3, #1
 8019bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019bd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019bdc:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019bde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019be2:	2a00      	cmp	r2, #0
 8019be4:	d001      	beq.n	8019bea <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019be6:	2210      	movs	r2, #16
 8019be8:	e000      	b.n	8019bec <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019bea:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019bec:	4413      	add	r3, r2
 8019bee:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019bf0:	68bb      	ldr	r3, [r7, #8]
 8019bf2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019bf4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019bf6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019bfa:	2a00      	cmp	r2, #0
 8019bfc:	d001      	beq.n	8019c02 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019bfe:	2200      	movs	r2, #0
 8019c00:	e000      	b.n	8019c04 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019c02:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019c04:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019c06:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019c08:	68bb      	ldr	r3, [r7, #8]
 8019c0a:	2b06      	cmp	r3, #6
 8019c0c:	d803      	bhi.n	8019c16 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019c0e:	68bb      	ldr	r3, [r7, #8]
 8019c10:	009b      	lsls	r3, r3, #2
 8019c12:	623b      	str	r3, [r7, #32]
 8019c14:	e00e      	b.n	8019c34 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019c16:	69fb      	ldr	r3, [r7, #28]
 8019c18:	3308      	adds	r3, #8
 8019c1a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d004      	beq.n	8019c2e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	3b02      	subs	r3, #2
 8019c28:	009b      	lsls	r3, r3, #2
 8019c2a:	623b      	str	r3, [r7, #32]
 8019c2c:	e002      	b.n	8019c34 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	009b      	lsls	r3, r3, #2
 8019c32:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019c34:	69fb      	ldr	r3, [r7, #28]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	da01      	bge.n	8019c3e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019c3e:	69fa      	ldr	r2, [r7, #28]
 8019c40:	6a3b      	ldr	r3, [r7, #32]
 8019c42:	4413      	add	r3, r2
 8019c44:	1e5a      	subs	r2, r3, #1
 8019c46:	6a3b      	ldr	r3, [r7, #32]
 8019c48:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c4c:	697a      	ldr	r2, [r7, #20]
 8019c4e:	fb03 f202 	mul.w	r2, r3, r2
 8019c52:	88bb      	ldrh	r3, [r7, #4]
 8019c54:	4413      	add	r3, r2
    int32_t intermediate =
 8019c56:	330c      	adds	r3, #12
 8019c58:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019c5a:	68bb      	ldr	r3, [r7, #8]
 8019c5c:	2b06      	cmp	r3, #6
 8019c5e:	d802      	bhi.n	8019c66 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019c60:	69bb      	ldr	r3, [r7, #24]
 8019c62:	3302      	adds	r3, #2
 8019c64:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019c66:	69bb      	ldr	r3, [r7, #24]
 8019c68:	009b      	lsls	r3, r3, #2
 8019c6a:	1c5a      	adds	r2, r3, #1
 8019c6c:	68bb      	ldr	r3, [r7, #8]
 8019c6e:	3b02      	subs	r3, #2
 8019c70:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	372c      	adds	r7, #44	; 0x2c
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bc80      	pop	{r7}
 8019c7c:	4770      	bx	lr
	...

08019c80 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019c80:	b580      	push	{r7, lr}
 8019c82:	b08a      	sub	sp, #40	; 0x28
 8019c84:	af04      	add	r7, sp, #16
 8019c86:	60b9      	str	r1, [r7, #8]
 8019c88:	607a      	str	r2, [r7, #4]
 8019c8a:	461a      	mov	r2, r3
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	73fb      	strb	r3, [r7, #15]
 8019c90:	4613      	mov	r3, r2
 8019c92:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019c94:	2300      	movs	r3, #0
 8019c96:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019c98:	2301      	movs	r3, #1
 8019c9a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019c9c:	7bfb      	ldrb	r3, [r7, #15]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d002      	beq.n	8019ca8 <RadioTimeOnAir+0x28>
 8019ca2:	2b01      	cmp	r3, #1
 8019ca4:	d017      	beq.n	8019cd6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019ca6:	e035      	b.n	8019d14 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019ca8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019cac:	8c3a      	ldrh	r2, [r7, #32]
 8019cae:	7bb9      	ldrb	r1, [r7, #14]
 8019cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019cb4:	9301      	str	r3, [sp, #4]
 8019cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019cba:	9300      	str	r3, [sp, #0]
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	6878      	ldr	r0, [r7, #4]
 8019cc0:	f7ff ff32 	bl	8019b28 <RadioGetGfskTimeOnAirNumerator>
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019cca:	fb02 f303 	mul.w	r3, r2, r3
 8019cce:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	613b      	str	r3, [r7, #16]
        break;
 8019cd4:	e01e      	b.n	8019d14 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019cd6:	8c39      	ldrh	r1, [r7, #32]
 8019cd8:	7bba      	ldrb	r2, [r7, #14]
 8019cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019cde:	9302      	str	r3, [sp, #8]
 8019ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019ce4:	9301      	str	r3, [sp, #4]
 8019ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019cea:	9300      	str	r3, [sp, #0]
 8019cec:	460b      	mov	r3, r1
 8019cee:	6879      	ldr	r1, [r7, #4]
 8019cf0:	68b8      	ldr	r0, [r7, #8]
 8019cf2:	f7ff ff43 	bl	8019b7c <RadioGetLoRaTimeOnAirNumerator>
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019cfc:	fb02 f303 	mul.w	r3, r2, r3
 8019d00:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019d02:	4a0a      	ldr	r2, [pc, #40]	; (8019d2c <RadioTimeOnAir+0xac>)
 8019d04:	68bb      	ldr	r3, [r7, #8]
 8019d06:	4413      	add	r3, r2
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7ff feb6 	bl	8019a7c <RadioGetLoRaBandwidthInHz>
 8019d10:	6138      	str	r0, [r7, #16]
        break;
 8019d12:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8019d14:	697a      	ldr	r2, [r7, #20]
 8019d16:	693b      	ldr	r3, [r7, #16]
 8019d18:	4413      	add	r3, r2
 8019d1a:	1e5a      	subs	r2, r3, #1
 8019d1c:	693b      	ldr	r3, [r7, #16]
 8019d1e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019d22:	4618      	mov	r0, r3
 8019d24:	3718      	adds	r7, #24
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}
 8019d2a:	bf00      	nop
 8019d2c:	0801e7c0 	.word	0x0801e7c0

08019d30 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b084      	sub	sp, #16
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
 8019d38:	460b      	mov	r3, r1
 8019d3a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	2200      	movs	r2, #0
 8019d40:	f240 2101 	movw	r1, #513	; 0x201
 8019d44:	f240 2001 	movw	r0, #513	; 0x201
 8019d48:	f001 fc4c 	bl	801b5e4 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8019d4c:	4b70      	ldr	r3, [pc, #448]	; (8019f10 <RadioSend+0x1e0>)
 8019d4e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019d52:	2101      	movs	r1, #1
 8019d54:	4618      	mov	r0, r3
 8019d56:	f002 f881 	bl	801be5c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8019d5a:	4b6d      	ldr	r3, [pc, #436]	; (8019f10 <RadioSend+0x1e0>)
 8019d5c:	781b      	ldrb	r3, [r3, #0]
 8019d5e:	2b01      	cmp	r3, #1
 8019d60:	d112      	bne.n	8019d88 <RadioSend+0x58>
 8019d62:	4b6b      	ldr	r3, [pc, #428]	; (8019f10 <RadioSend+0x1e0>)
 8019d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019d68:	2b06      	cmp	r3, #6
 8019d6a:	d10d      	bne.n	8019d88 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8019d6c:	f640 0089 	movw	r0, #2185	; 0x889
 8019d70:	f001 ff94 	bl	801bc9c <SUBGRF_ReadRegister>
 8019d74:	4603      	mov	r3, r0
 8019d76:	f023 0304 	bic.w	r3, r3, #4
 8019d7a:	b2db      	uxtb	r3, r3
 8019d7c:	4619      	mov	r1, r3
 8019d7e:	f640 0089 	movw	r0, #2185	; 0x889
 8019d82:	f001 ff77 	bl	801bc74 <SUBGRF_WriteRegister>
 8019d86:	e00c      	b.n	8019da2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8019d88:	f640 0089 	movw	r0, #2185	; 0x889
 8019d8c:	f001 ff86 	bl	801bc9c <SUBGRF_ReadRegister>
 8019d90:	4603      	mov	r3, r0
 8019d92:	f043 0304 	orr.w	r3, r3, #4
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	4619      	mov	r1, r3
 8019d9a:	f640 0089 	movw	r0, #2185	; 0x889
 8019d9e:	f001 ff69 	bl	801bc74 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8019da2:	4b5b      	ldr	r3, [pc, #364]	; (8019f10 <RadioSend+0x1e0>)
 8019da4:	781b      	ldrb	r3, [r3, #0]
 8019da6:	2b03      	cmp	r3, #3
 8019da8:	f200 80a5 	bhi.w	8019ef6 <RadioSend+0x1c6>
 8019dac:	a201      	add	r2, pc, #4	; (adr r2, 8019db4 <RadioSend+0x84>)
 8019dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019db2:	bf00      	nop
 8019db4:	08019ddf 	.word	0x08019ddf
 8019db8:	08019dc5 	.word	0x08019dc5
 8019dbc:	08019e3f 	.word	0x08019e3f
 8019dc0:	08019e5f 	.word	0x08019e5f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019dc4:	4a52      	ldr	r2, [pc, #328]	; (8019f10 <RadioSend+0x1e0>)
 8019dc6:	78fb      	ldrb	r3, [r7, #3]
 8019dc8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019dca:	4852      	ldr	r0, [pc, #328]	; (8019f14 <RadioSend+0x1e4>)
 8019dcc:	f001 fe0a 	bl	801b9e4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019dd0:	78fb      	ldrb	r3, [r7, #3]
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	4619      	mov	r1, r3
 8019dd6:	6878      	ldr	r0, [r7, #4]
 8019dd8:	f001 f926 	bl	801b028 <SUBGRF_SendPayload>
            break;
 8019ddc:	e08c      	b.n	8019ef8 <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019dde:	f002 fa26 	bl	801c22e <RFW_Is_Init>
 8019de2:	4603      	mov	r3, r0
 8019de4:	2b01      	cmp	r3, #1
 8019de6:	d11d      	bne.n	8019e24 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019de8:	f107 020d 	add.w	r2, r7, #13
 8019dec:	78fb      	ldrb	r3, [r7, #3]
 8019dee:	4619      	mov	r1, r3
 8019df0:	6878      	ldr	r0, [r7, #4]
 8019df2:	f002 fa34 	bl	801c25e <RFW_TransmitInit>
 8019df6:	4603      	mov	r3, r0
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d10c      	bne.n	8019e16 <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019dfc:	7b7a      	ldrb	r2, [r7, #13]
 8019dfe:	4b44      	ldr	r3, [pc, #272]	; (8019f10 <RadioSend+0x1e0>)
 8019e00:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e02:	4844      	ldr	r0, [pc, #272]	; (8019f14 <RadioSend+0x1e4>)
 8019e04:	f001 fdee 	bl	801b9e4 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8019e08:	7b7b      	ldrb	r3, [r7, #13]
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	4619      	mov	r1, r3
 8019e0e:	6878      	ldr	r0, [r7, #4]
 8019e10:	f001 f90a 	bl	801b028 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019e14:	e070      	b.n	8019ef8 <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8019e16:	4b40      	ldr	r3, [pc, #256]	; (8019f18 <RadioSend+0x1e8>)
 8019e18:	2201      	movs	r2, #1
 8019e1a:	2100      	movs	r1, #0
 8019e1c:	2002      	movs	r0, #2
 8019e1e:	f002 fa7b 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
 8019e22:	e072      	b.n	8019f0a <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019e24:	4a3a      	ldr	r2, [pc, #232]	; (8019f10 <RadioSend+0x1e0>)
 8019e26:	78fb      	ldrb	r3, [r7, #3]
 8019e28:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e2a:	483a      	ldr	r0, [pc, #232]	; (8019f14 <RadioSend+0x1e4>)
 8019e2c:	f001 fdda 	bl	801b9e4 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8019e30:	78fb      	ldrb	r3, [r7, #3]
 8019e32:	2200      	movs	r2, #0
 8019e34:	4619      	mov	r1, r3
 8019e36:	6878      	ldr	r0, [r7, #4]
 8019e38:	f001 f8f6 	bl	801b028 <SUBGRF_SendPayload>
            break;
 8019e3c:	e05c      	b.n	8019ef8 <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019e3e:	4b34      	ldr	r3, [pc, #208]	; (8019f10 <RadioSend+0x1e0>)
 8019e40:	2202      	movs	r2, #2
 8019e42:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019e44:	4a32      	ldr	r2, [pc, #200]	; (8019f10 <RadioSend+0x1e0>)
 8019e46:	78fb      	ldrb	r3, [r7, #3]
 8019e48:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e4a:	4832      	ldr	r0, [pc, #200]	; (8019f14 <RadioSend+0x1e4>)
 8019e4c:	f001 fdca 	bl	801b9e4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019e50:	78fb      	ldrb	r3, [r7, #3]
 8019e52:	2200      	movs	r2, #0
 8019e54:	4619      	mov	r1, r3
 8019e56:	6878      	ldr	r0, [r7, #4]
 8019e58:	f001 f8e6 	bl	801b028 <SUBGRF_SendPayload>
            break;
 8019e5c:	e04c      	b.n	8019ef8 <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019e5e:	78fb      	ldrb	r3, [r7, #3]
 8019e60:	461a      	mov	r2, r3
 8019e62:	6879      	ldr	r1, [r7, #4]
 8019e64:	482d      	ldr	r0, [pc, #180]	; (8019f1c <RadioSend+0x1ec>)
 8019e66:	f000 fc66 	bl	801a736 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019e6a:	4b29      	ldr	r3, [pc, #164]	; (8019f10 <RadioSend+0x1e0>)
 8019e6c:	2202      	movs	r2, #2
 8019e6e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019e70:	78fb      	ldrb	r3, [r7, #3]
 8019e72:	3301      	adds	r3, #1
 8019e74:	b2da      	uxtb	r2, r3
 8019e76:	4b26      	ldr	r3, [pc, #152]	; (8019f10 <RadioSend+0x1e0>)
 8019e78:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e7a:	4826      	ldr	r0, [pc, #152]	; (8019f14 <RadioSend+0x1e4>)
 8019e7c:	f001 fdb2 	bl	801b9e4 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8019e80:	2100      	movs	r1, #0
 8019e82:	20f1      	movs	r0, #241	; 0xf1
 8019e84:	f000 f947 	bl	801a116 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8019e88:	2100      	movs	r1, #0
 8019e8a:	20f0      	movs	r0, #240	; 0xf0
 8019e8c:	f000 f943 	bl	801a116 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019e90:	4b1f      	ldr	r3, [pc, #124]	; (8019f10 <RadioSend+0x1e0>)
 8019e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e94:	2b64      	cmp	r3, #100	; 0x64
 8019e96:	d108      	bne.n	8019eaa <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8019e98:	2170      	movs	r1, #112	; 0x70
 8019e9a:	20f3      	movs	r0, #243	; 0xf3
 8019e9c:	f000 f93b 	bl	801a116 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8019ea0:	211d      	movs	r1, #29
 8019ea2:	20f2      	movs	r0, #242	; 0xf2
 8019ea4:	f000 f937 	bl	801a116 <RadioWrite>
 8019ea8:	e007      	b.n	8019eba <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8019eaa:	21e1      	movs	r1, #225	; 0xe1
 8019eac:	20f3      	movs	r0, #243	; 0xf3
 8019eae:	f000 f932 	bl	801a116 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8019eb2:	2104      	movs	r1, #4
 8019eb4:	20f2      	movs	r0, #242	; 0xf2
 8019eb6:	f000 f92e 	bl	801a116 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019eba:	78fb      	ldrb	r3, [r7, #3]
 8019ebc:	b29b      	uxth	r3, r3
 8019ebe:	00db      	lsls	r3, r3, #3
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	3302      	adds	r3, #2
 8019ec4:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019ec6:	89fb      	ldrh	r3, [r7, #14]
 8019ec8:	0a1b      	lsrs	r3, r3, #8
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	b2db      	uxtb	r3, r3
 8019ece:	4619      	mov	r1, r3
 8019ed0:	20f4      	movs	r0, #244	; 0xf4
 8019ed2:	f000 f920 	bl	801a116 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8019ed6:	89fb      	ldrh	r3, [r7, #14]
 8019ed8:	b2db      	uxtb	r3, r3
 8019eda:	4619      	mov	r1, r3
 8019edc:	20f5      	movs	r0, #245	; 0xf5
 8019ede:	f000 f91a 	bl	801a116 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8019ee2:	78fb      	ldrb	r3, [r7, #3]
 8019ee4:	3301      	adds	r3, #1
 8019ee6:	b2db      	uxtb	r3, r3
 8019ee8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019eec:	4619      	mov	r1, r3
 8019eee:	480b      	ldr	r0, [pc, #44]	; (8019f1c <RadioSend+0x1ec>)
 8019ef0:	f001 f89a 	bl	801b028 <SUBGRF_SendPayload>
            break;
 8019ef4:	e000      	b.n	8019ef8 <RadioSend+0x1c8>
        }
        default:
            break;
 8019ef6:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019ef8:	4b05      	ldr	r3, [pc, #20]	; (8019f10 <RadioSend+0x1e0>)
 8019efa:	685b      	ldr	r3, [r3, #4]
 8019efc:	4619      	mov	r1, r3
 8019efe:	4808      	ldr	r0, [pc, #32]	; (8019f20 <RadioSend+0x1f0>)
 8019f00:	f003 f924 	bl	801d14c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019f04:	4806      	ldr	r0, [pc, #24]	; (8019f20 <RadioSend+0x1f0>)
 8019f06:	f003 f843 	bl	801cf90 <UTIL_TIMER_Start>
}
 8019f0a:	3710      	adds	r7, #16
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}
 8019f10:	20003df4 	.word	0x20003df4
 8019f14:	20003e02 	.word	0x20003e02
 8019f18:	0801e17c 	.word	0x0801e17c
 8019f1c:	20003cf0 	.word	0x20003cf0
 8019f20:	20003e4c 	.word	0x20003e4c

08019f24 <RadioSleep>:

static void RadioSleep( void )
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b082      	sub	sp, #8
 8019f28:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019f2e:	793b      	ldrb	r3, [r7, #4]
 8019f30:	f043 0304 	orr.w	r3, r3, #4
 8019f34:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019f36:	7938      	ldrb	r0, [r7, #4]
 8019f38:	f001 f952 	bl	801b1e0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019f3c:	2002      	movs	r0, #2
 8019f3e:	f7e7 fea2 	bl	8001c86 <HAL_Delay>
}
 8019f42:	bf00      	nop
 8019f44:	3708      	adds	r7, #8
 8019f46:	46bd      	mov	sp, r7
 8019f48:	bd80      	pop	{r7, pc}

08019f4a <RadioStandby>:

static void RadioStandby( void )
{
 8019f4a:	b580      	push	{r7, lr}
 8019f4c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019f4e:	2000      	movs	r0, #0
 8019f50:	f001 f978 	bl	801b244 <SUBGRF_SetStandby>
}
 8019f54:	bf00      	nop
 8019f56:	bd80      	pop	{r7, pc}

08019f58 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b082      	sub	sp, #8
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8019f60:	f002 f965 	bl	801c22e <RFW_Is_Init>
 8019f64:	4603      	mov	r3, r0
 8019f66:	2b01      	cmp	r3, #1
 8019f68:	d102      	bne.n	8019f70 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8019f6a:	f002 f988 	bl	801c27e <RFW_ReceiveInit>
 8019f6e:	e007      	b.n	8019f80 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019f70:	2300      	movs	r3, #0
 8019f72:	2200      	movs	r2, #0
 8019f74:	f240 2162 	movw	r1, #610	; 0x262
 8019f78:	f240 2062 	movw	r0, #610	; 0x262
 8019f7c:	f001 fb32 	bl	801b5e4 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d006      	beq.n	8019f94 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019f86:	6879      	ldr	r1, [r7, #4]
 8019f88:	480f      	ldr	r0, [pc, #60]	; (8019fc8 <RadioRx+0x70>)
 8019f8a:	f003 f8df 	bl	801d14c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019f8e:	480e      	ldr	r0, [pc, #56]	; (8019fc8 <RadioRx+0x70>)
 8019f90:	f002 fffe 	bl	801cf90 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019f94:	4b0d      	ldr	r3, [pc, #52]	; (8019fcc <RadioRx+0x74>)
 8019f96:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f001 ff5d 	bl	801be5c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019fa2:	4b0a      	ldr	r3, [pc, #40]	; (8019fcc <RadioRx+0x74>)
 8019fa4:	785b      	ldrb	r3, [r3, #1]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d004      	beq.n	8019fb4 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019faa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019fae:	f001 f985 	bl	801b2bc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019fb2:	e005      	b.n	8019fc0 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019fb4:	4b05      	ldr	r3, [pc, #20]	; (8019fcc <RadioRx+0x74>)
 8019fb6:	689b      	ldr	r3, [r3, #8]
 8019fb8:	019b      	lsls	r3, r3, #6
 8019fba:	4618      	mov	r0, r3
 8019fbc:	f001 f97e 	bl	801b2bc <SUBGRF_SetRx>
}
 8019fc0:	bf00      	nop
 8019fc2:	3708      	adds	r7, #8
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd80      	pop	{r7, pc}
 8019fc8:	20003e64 	.word	0x20003e64
 8019fcc:	20003df4 	.word	0x20003df4

08019fd0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b082      	sub	sp, #8
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8019fd8:	f002 f929 	bl	801c22e <RFW_Is_Init>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	2b01      	cmp	r3, #1
 8019fe0:	d102      	bne.n	8019fe8 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8019fe2:	f002 f94c 	bl	801c27e <RFW_ReceiveInit>
 8019fe6:	e007      	b.n	8019ff8 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019fe8:	2300      	movs	r3, #0
 8019fea:	2200      	movs	r2, #0
 8019fec:	f240 2162 	movw	r1, #610	; 0x262
 8019ff0:	f240 2062 	movw	r0, #610	; 0x262
 8019ff4:	f001 faf6 	bl	801b5e4 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d006      	beq.n	801a00c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019ffe:	6879      	ldr	r1, [r7, #4]
 801a000:	480f      	ldr	r0, [pc, #60]	; (801a040 <RadioRxBoosted+0x70>)
 801a002:	f003 f8a3 	bl	801d14c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a006:	480e      	ldr	r0, [pc, #56]	; (801a040 <RadioRxBoosted+0x70>)
 801a008:	f002 ffc2 	bl	801cf90 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801a00c:	4b0d      	ldr	r3, [pc, #52]	; (801a044 <RadioRxBoosted+0x74>)
 801a00e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a012:	2100      	movs	r1, #0
 801a014:	4618      	mov	r0, r3
 801a016:	f001 ff21 	bl	801be5c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a01a:	4b0a      	ldr	r3, [pc, #40]	; (801a044 <RadioRxBoosted+0x74>)
 801a01c:	785b      	ldrb	r3, [r3, #1]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d004      	beq.n	801a02c <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801a022:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a026:	f001 f969 	bl	801b2fc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801a02a:	e005      	b.n	801a038 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801a02c:	4b05      	ldr	r3, [pc, #20]	; (801a044 <RadioRxBoosted+0x74>)
 801a02e:	689b      	ldr	r3, [r3, #8]
 801a030:	019b      	lsls	r3, r3, #6
 801a032:	4618      	mov	r0, r3
 801a034:	f001 f962 	bl	801b2fc <SUBGRF_SetRxBoosted>
}
 801a038:	bf00      	nop
 801a03a:	3708      	adds	r7, #8
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	20003e64 	.word	0x20003e64
 801a044:	20003df4 	.word	0x20003df4

0801a048 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b082      	sub	sp, #8
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801a052:	4b07      	ldr	r3, [pc, #28]	; (801a070 <RadioSetRxDutyCycle+0x28>)
 801a054:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a058:	2100      	movs	r1, #0
 801a05a:	4618      	mov	r0, r3
 801a05c:	f001 fefe 	bl	801be5c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801a060:	6839      	ldr	r1, [r7, #0]
 801a062:	6878      	ldr	r0, [r7, #4]
 801a064:	f001 f96e 	bl	801b344 <SUBGRF_SetRxDutyCycle>
}
 801a068:	bf00      	nop
 801a06a:	3708      	adds	r7, #8
 801a06c:	46bd      	mov	sp, r7
 801a06e:	bd80      	pop	{r7, pc}
 801a070:	20003df4 	.word	0x20003df4

0801a074 <RadioStartCad>:

static void RadioStartCad( void )
{
 801a074:	b580      	push	{r7, lr}
 801a076:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801a078:	4b09      	ldr	r3, [pc, #36]	; (801a0a0 <RadioStartCad+0x2c>)
 801a07a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a07e:	2100      	movs	r1, #0
 801a080:	4618      	mov	r0, r3
 801a082:	f001 feeb 	bl	801be5c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a086:	2300      	movs	r3, #0
 801a088:	2200      	movs	r2, #0
 801a08a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a08e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a092:	f001 faa7 	bl	801b5e4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a096:	f001 f981 	bl	801b39c <SUBGRF_SetCad>
}
 801a09a:	bf00      	nop
 801a09c:	bd80      	pop	{r7, pc}
 801a09e:	bf00      	nop
 801a0a0:	20003df4 	.word	0x20003df4

0801a0a4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b084      	sub	sp, #16
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
 801a0ac:	460b      	mov	r3, r1
 801a0ae:	70fb      	strb	r3, [r7, #3]
 801a0b0:	4613      	mov	r3, r2
 801a0b2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801a0b4:	883b      	ldrh	r3, [r7, #0]
 801a0b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a0ba:	fb02 f303 	mul.w	r3, r2, r3
 801a0be:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801a0c0:	6878      	ldr	r0, [r7, #4]
 801a0c2:	f001 faeb 	bl	801b69c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801a0c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	f001 feee 	bl	801beac <SUBGRF_SetRfTxPower>
 801a0d0:	4603      	mov	r3, r0
 801a0d2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 801a0d4:	7afb      	ldrb	r3, [r7, #11]
 801a0d6:	2101      	movs	r1, #1
 801a0d8:	4618      	mov	r0, r3
 801a0da:	f001 febf 	bl	801be5c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801a0de:	f001 f96b 	bl	801b3b8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a0e2:	68f9      	ldr	r1, [r7, #12]
 801a0e4:	4804      	ldr	r0, [pc, #16]	; (801a0f8 <RadioSetTxContinuousWave+0x54>)
 801a0e6:	f003 f831 	bl	801d14c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a0ea:	4803      	ldr	r0, [pc, #12]	; (801a0f8 <RadioSetTxContinuousWave+0x54>)
 801a0ec:	f002 ff50 	bl	801cf90 <UTIL_TIMER_Start>
}
 801a0f0:	bf00      	nop
 801a0f2:	3710      	adds	r7, #16
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	bd80      	pop	{r7, pc}
 801a0f8:	20003e4c 	.word	0x20003e4c

0801a0fc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b082      	sub	sp, #8
 801a100:	af00      	add	r7, sp, #0
 801a102:	4603      	mov	r3, r0
 801a104:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a106:	f001 fd22 	bl	801bb4e <SUBGRF_GetRssiInst>
 801a10a:	4603      	mov	r3, r0
 801a10c:	b21b      	sxth	r3, r3
}
 801a10e:	4618      	mov	r0, r3
 801a110:	3708      	adds	r7, #8
 801a112:	46bd      	mov	sp, r7
 801a114:	bd80      	pop	{r7, pc}

0801a116 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a116:	b580      	push	{r7, lr}
 801a118:	b082      	sub	sp, #8
 801a11a:	af00      	add	r7, sp, #0
 801a11c:	4603      	mov	r3, r0
 801a11e:	460a      	mov	r2, r1
 801a120:	80fb      	strh	r3, [r7, #6]
 801a122:	4613      	mov	r3, r2
 801a124:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 801a126:	797a      	ldrb	r2, [r7, #5]
 801a128:	88fb      	ldrh	r3, [r7, #6]
 801a12a:	4611      	mov	r1, r2
 801a12c:	4618      	mov	r0, r3
 801a12e:	f001 fda1 	bl	801bc74 <SUBGRF_WriteRegister>
}
 801a132:	bf00      	nop
 801a134:	3708      	adds	r7, #8
 801a136:	46bd      	mov	sp, r7
 801a138:	bd80      	pop	{r7, pc}

0801a13a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a13a:	b580      	push	{r7, lr}
 801a13c:	b082      	sub	sp, #8
 801a13e:	af00      	add	r7, sp, #0
 801a140:	4603      	mov	r3, r0
 801a142:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 801a144:	88fb      	ldrh	r3, [r7, #6]
 801a146:	4618      	mov	r0, r3
 801a148:	f001 fda8 	bl	801bc9c <SUBGRF_ReadRegister>
 801a14c:	4603      	mov	r3, r0
}
 801a14e:	4618      	mov	r0, r3
 801a150:	3708      	adds	r7, #8
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}

0801a156 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a156:	b580      	push	{r7, lr}
 801a158:	b082      	sub	sp, #8
 801a15a:	af00      	add	r7, sp, #0
 801a15c:	4603      	mov	r3, r0
 801a15e:	6039      	str	r1, [r7, #0]
 801a160:	80fb      	strh	r3, [r7, #6]
 801a162:	4613      	mov	r3, r2
 801a164:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a166:	797b      	ldrb	r3, [r7, #5]
 801a168:	b29a      	uxth	r2, r3
 801a16a:	88fb      	ldrh	r3, [r7, #6]
 801a16c:	6839      	ldr	r1, [r7, #0]
 801a16e:	4618      	mov	r0, r3
 801a170:	f001 fda8 	bl	801bcc4 <SUBGRF_WriteRegisters>
}
 801a174:	bf00      	nop
 801a176:	3708      	adds	r7, #8
 801a178:	46bd      	mov	sp, r7
 801a17a:	bd80      	pop	{r7, pc}

0801a17c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b082      	sub	sp, #8
 801a180:	af00      	add	r7, sp, #0
 801a182:	4603      	mov	r3, r0
 801a184:	6039      	str	r1, [r7, #0]
 801a186:	80fb      	strh	r3, [r7, #6]
 801a188:	4613      	mov	r3, r2
 801a18a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a18c:	797b      	ldrb	r3, [r7, #5]
 801a18e:	b29a      	uxth	r2, r3
 801a190:	88fb      	ldrh	r3, [r7, #6]
 801a192:	6839      	ldr	r1, [r7, #0]
 801a194:	4618      	mov	r0, r3
 801a196:	f001 fdb7 	bl	801bd08 <SUBGRF_ReadRegisters>
}
 801a19a:	bf00      	nop
 801a19c:	3708      	adds	r7, #8
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}
	...

0801a1a4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b082      	sub	sp, #8
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	460a      	mov	r2, r1
 801a1ae:	71fb      	strb	r3, [r7, #7]
 801a1b0:	4613      	mov	r3, r2
 801a1b2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a1b4:	79fb      	ldrb	r3, [r7, #7]
 801a1b6:	2b01      	cmp	r3, #1
 801a1b8:	d10a      	bne.n	801a1d0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a1ba:	4a0e      	ldr	r2, [pc, #56]	; (801a1f4 <RadioSetMaxPayloadLength+0x50>)
 801a1bc:	79bb      	ldrb	r3, [r7, #6]
 801a1be:	7013      	strb	r3, [r2, #0]
 801a1c0:	4b0c      	ldr	r3, [pc, #48]	; (801a1f4 <RadioSetMaxPayloadLength+0x50>)
 801a1c2:	781a      	ldrb	r2, [r3, #0]
 801a1c4:	4b0c      	ldr	r3, [pc, #48]	; (801a1f8 <RadioSetMaxPayloadLength+0x54>)
 801a1c6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a1c8:	480c      	ldr	r0, [pc, #48]	; (801a1fc <RadioSetMaxPayloadLength+0x58>)
 801a1ca:	f001 fc0b 	bl	801b9e4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a1ce:	e00d      	b.n	801a1ec <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a1d0:	4b09      	ldr	r3, [pc, #36]	; (801a1f8 <RadioSetMaxPayloadLength+0x54>)
 801a1d2:	7d5b      	ldrb	r3, [r3, #21]
 801a1d4:	2b01      	cmp	r3, #1
 801a1d6:	d109      	bne.n	801a1ec <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a1d8:	4a06      	ldr	r2, [pc, #24]	; (801a1f4 <RadioSetMaxPayloadLength+0x50>)
 801a1da:	79bb      	ldrb	r3, [r7, #6]
 801a1dc:	7013      	strb	r3, [r2, #0]
 801a1de:	4b05      	ldr	r3, [pc, #20]	; (801a1f4 <RadioSetMaxPayloadLength+0x50>)
 801a1e0:	781a      	ldrb	r2, [r3, #0]
 801a1e2:	4b05      	ldr	r3, [pc, #20]	; (801a1f8 <RadioSetMaxPayloadLength+0x54>)
 801a1e4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a1e6:	4805      	ldr	r0, [pc, #20]	; (801a1fc <RadioSetMaxPayloadLength+0x58>)
 801a1e8:	f001 fbfc 	bl	801b9e4 <SUBGRF_SetPacketParams>
}
 801a1ec:	bf00      	nop
 801a1ee:	3708      	adds	r7, #8
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bd80      	pop	{r7, pc}
 801a1f4:	20000104 	.word	0x20000104
 801a1f8:	20003df4 	.word	0x20003df4
 801a1fc:	20003e02 	.word	0x20003e02

0801a200 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a200:	b580      	push	{r7, lr}
 801a202:	b082      	sub	sp, #8
 801a204:	af00      	add	r7, sp, #0
 801a206:	4603      	mov	r3, r0
 801a208:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a20a:	4a13      	ldr	r2, [pc, #76]	; (801a258 <RadioSetPublicNetwork+0x58>)
 801a20c:	79fb      	ldrb	r3, [r7, #7]
 801a20e:	7313      	strb	r3, [r2, #12]
 801a210:	4b11      	ldr	r3, [pc, #68]	; (801a258 <RadioSetPublicNetwork+0x58>)
 801a212:	7b1a      	ldrb	r2, [r3, #12]
 801a214:	4b10      	ldr	r3, [pc, #64]	; (801a258 <RadioSetPublicNetwork+0x58>)
 801a216:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a218:	2001      	movs	r0, #1
 801a21a:	f7ff f82b 	bl	8019274 <RadioSetModem>
    if( enable == true )
 801a21e:	79fb      	ldrb	r3, [r7, #7]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d00a      	beq.n	801a23a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a224:	2134      	movs	r1, #52	; 0x34
 801a226:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a22a:	f001 fd23 	bl	801bc74 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a22e:	2144      	movs	r1, #68	; 0x44
 801a230:	f240 7041 	movw	r0, #1857	; 0x741
 801a234:	f001 fd1e 	bl	801bc74 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a238:	e009      	b.n	801a24e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a23a:	2114      	movs	r1, #20
 801a23c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a240:	f001 fd18 	bl	801bc74 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a244:	2124      	movs	r1, #36	; 0x24
 801a246:	f240 7041 	movw	r0, #1857	; 0x741
 801a24a:	f001 fd13 	bl	801bc74 <SUBGRF_WriteRegister>
}
 801a24e:	bf00      	nop
 801a250:	3708      	adds	r7, #8
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}
 801a256:	bf00      	nop
 801a258:	20003df4 	.word	0x20003df4

0801a25c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a25c:	b580      	push	{r7, lr}
 801a25e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a260:	f001 fe58 	bl	801bf14 <SUBGRF_GetRadioWakeUpTime>
 801a264:	4603      	mov	r3, r0
 801a266:	3303      	adds	r3, #3
}
 801a268:	4618      	mov	r0, r3
 801a26a:	bd80      	pop	{r7, pc}

0801a26c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b082      	sub	sp, #8
 801a270:	af00      	add	r7, sp, #0
 801a272:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a274:	f000 f80e 	bl	801a294 <RadioOnTxTimeoutProcess>
}
 801a278:	bf00      	nop
 801a27a:	3708      	adds	r7, #8
 801a27c:	46bd      	mov	sp, r7
 801a27e:	bd80      	pop	{r7, pc}

0801a280 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 801a280:	b580      	push	{r7, lr}
 801a282:	b082      	sub	sp, #8
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a288:	f000 f818 	bl	801a2bc <RadioOnRxTimeoutProcess>
}
 801a28c:	bf00      	nop
 801a28e:	3708      	adds	r7, #8
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}

0801a294 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a294:	b580      	push	{r7, lr}
 801a296:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a298:	4b07      	ldr	r3, [pc, #28]	; (801a2b8 <RadioOnTxTimeoutProcess+0x24>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d008      	beq.n	801a2b2 <RadioOnTxTimeoutProcess+0x1e>
 801a2a0:	4b05      	ldr	r3, [pc, #20]	; (801a2b8 <RadioOnTxTimeoutProcess+0x24>)
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	685b      	ldr	r3, [r3, #4]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d003      	beq.n	801a2b2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a2aa:	4b03      	ldr	r3, [pc, #12]	; (801a2b8 <RadioOnTxTimeoutProcess+0x24>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	685b      	ldr	r3, [r3, #4]
 801a2b0:	4798      	blx	r3
    }
}
 801a2b2:	bf00      	nop
 801a2b4:	bd80      	pop	{r7, pc}
 801a2b6:	bf00      	nop
 801a2b8:	20003df0 	.word	0x20003df0

0801a2bc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a2c0:	4b07      	ldr	r3, [pc, #28]	; (801a2e0 <RadioOnRxTimeoutProcess+0x24>)
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d008      	beq.n	801a2da <RadioOnRxTimeoutProcess+0x1e>
 801a2c8:	4b05      	ldr	r3, [pc, #20]	; (801a2e0 <RadioOnRxTimeoutProcess+0x24>)
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	68db      	ldr	r3, [r3, #12]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d003      	beq.n	801a2da <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a2d2:	4b03      	ldr	r3, [pc, #12]	; (801a2e0 <RadioOnRxTimeoutProcess+0x24>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	68db      	ldr	r3, [r3, #12]
 801a2d8:	4798      	blx	r3
    }
}
 801a2da:	bf00      	nop
 801a2dc:	bd80      	pop	{r7, pc}
 801a2de:	bf00      	nop
 801a2e0:	20003df0 	.word	0x20003df0

0801a2e4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b082      	sub	sp, #8
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a2ee:	4a05      	ldr	r2, [pc, #20]	; (801a304 <RadioOnDioIrq+0x20>)
 801a2f0:	88fb      	ldrh	r3, [r7, #6]
 801a2f2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801a2f6:	f000 f807 	bl	801a308 <RadioIrqProcess>
}
 801a2fa:	bf00      	nop
 801a2fc:	3708      	adds	r7, #8
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}
 801a302:	bf00      	nop
 801a304:	20003df4 	.word	0x20003df4

0801a308 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a308:	b590      	push	{r4, r7, lr}
 801a30a:	b083      	sub	sp, #12
 801a30c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a30e:	2300      	movs	r3, #0
 801a310:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a312:	2300      	movs	r3, #0
 801a314:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801a316:	4bb5      	ldr	r3, [pc, #724]	; (801a5ec <RadioIrqProcess+0x2e4>)
 801a318:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a31c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a320:	f000 810c 	beq.w	801a53c <RadioIrqProcess+0x234>
 801a324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a328:	f300 81b5 	bgt.w	801a696 <RadioIrqProcess+0x38e>
 801a32c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a330:	f000 80f0 	beq.w	801a514 <RadioIrqProcess+0x20c>
 801a334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a338:	f300 81ad 	bgt.w	801a696 <RadioIrqProcess+0x38e>
 801a33c:	2b80      	cmp	r3, #128	; 0x80
 801a33e:	f000 80d5 	beq.w	801a4ec <RadioIrqProcess+0x1e4>
 801a342:	2b80      	cmp	r3, #128	; 0x80
 801a344:	f300 81a7 	bgt.w	801a696 <RadioIrqProcess+0x38e>
 801a348:	2b20      	cmp	r3, #32
 801a34a:	dc49      	bgt.n	801a3e0 <RadioIrqProcess+0xd8>
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	f340 81a2 	ble.w	801a696 <RadioIrqProcess+0x38e>
 801a352:	3b01      	subs	r3, #1
 801a354:	2b1f      	cmp	r3, #31
 801a356:	f200 819e 	bhi.w	801a696 <RadioIrqProcess+0x38e>
 801a35a:	a201      	add	r2, pc, #4	; (adr r2, 801a360 <RadioIrqProcess+0x58>)
 801a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a360:	0801a3e9 	.word	0x0801a3e9
 801a364:	0801a423 	.word	0x0801a423
 801a368:	0801a697 	.word	0x0801a697
 801a36c:	0801a5b5 	.word	0x0801a5b5
 801a370:	0801a697 	.word	0x0801a697
 801a374:	0801a697 	.word	0x0801a697
 801a378:	0801a697 	.word	0x0801a697
 801a37c:	0801a5c3 	.word	0x0801a5c3
 801a380:	0801a697 	.word	0x0801a697
 801a384:	0801a697 	.word	0x0801a697
 801a388:	0801a697 	.word	0x0801a697
 801a38c:	0801a697 	.word	0x0801a697
 801a390:	0801a697 	.word	0x0801a697
 801a394:	0801a697 	.word	0x0801a697
 801a398:	0801a697 	.word	0x0801a697
 801a39c:	0801a5df 	.word	0x0801a5df
 801a3a0:	0801a697 	.word	0x0801a697
 801a3a4:	0801a697 	.word	0x0801a697
 801a3a8:	0801a697 	.word	0x0801a697
 801a3ac:	0801a697 	.word	0x0801a697
 801a3b0:	0801a697 	.word	0x0801a697
 801a3b4:	0801a697 	.word	0x0801a697
 801a3b8:	0801a697 	.word	0x0801a697
 801a3bc:	0801a697 	.word	0x0801a697
 801a3c0:	0801a697 	.word	0x0801a697
 801a3c4:	0801a697 	.word	0x0801a697
 801a3c8:	0801a697 	.word	0x0801a697
 801a3cc:	0801a697 	.word	0x0801a697
 801a3d0:	0801a697 	.word	0x0801a697
 801a3d4:	0801a697 	.word	0x0801a697
 801a3d8:	0801a697 	.word	0x0801a697
 801a3dc:	0801a619 	.word	0x0801a619
 801a3e0:	2b40      	cmp	r3, #64	; 0x40
 801a3e2:	f000 813a 	beq.w	801a65a <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801a3e6:	e156      	b.n	801a696 <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 801a3e8:	4881      	ldr	r0, [pc, #516]	; (801a5f0 <RadioIrqProcess+0x2e8>)
 801a3ea:	f002 fe3f 	bl	801d06c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a3ee:	2000      	movs	r0, #0
 801a3f0:	f000 ff28 	bl	801b244 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 801a3f4:	f001 ff22 	bl	801c23c <RFW_Is_LongPacketModeEnabled>
 801a3f8:	4603      	mov	r3, r0
 801a3fa:	2b01      	cmp	r3, #1
 801a3fc:	d101      	bne.n	801a402 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a3fe:	f001 ff46 	bl	801c28e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a402:	4b7c      	ldr	r3, [pc, #496]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	2b00      	cmp	r3, #0
 801a408:	f000 8147 	beq.w	801a69a <RadioIrqProcess+0x392>
 801a40c:	4b79      	ldr	r3, [pc, #484]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	2b00      	cmp	r3, #0
 801a414:	f000 8141 	beq.w	801a69a <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 801a418:	4b76      	ldr	r3, [pc, #472]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	4798      	blx	r3
        break;
 801a420:	e13b      	b.n	801a69a <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 801a422:	4875      	ldr	r0, [pc, #468]	; (801a5f8 <RadioIrqProcess+0x2f0>)
 801a424:	f002 fe22 	bl	801d06c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a428:	4b70      	ldr	r3, [pc, #448]	; (801a5ec <RadioIrqProcess+0x2e4>)
 801a42a:	785b      	ldrb	r3, [r3, #1]
 801a42c:	f083 0301 	eor.w	r3, r3, #1
 801a430:	b2db      	uxtb	r3, r3
 801a432:	2b00      	cmp	r3, #0
 801a434:	d014      	beq.n	801a460 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a436:	2000      	movs	r0, #0
 801a438:	f000 ff04 	bl	801b244 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 801a43c:	2100      	movs	r1, #0
 801a43e:	f640 1002 	movw	r0, #2306	; 0x902
 801a442:	f001 fc17 	bl	801bc74 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 801a446:	f640 1044 	movw	r0, #2372	; 0x944
 801a44a:	f001 fc27 	bl	801bc9c <SUBGRF_ReadRegister>
 801a44e:	4603      	mov	r3, r0
 801a450:	f043 0302 	orr.w	r3, r3, #2
 801a454:	b2db      	uxtb	r3, r3
 801a456:	4619      	mov	r1, r3
 801a458:	f640 1044 	movw	r0, #2372	; 0x944
 801a45c:	f001 fc0a 	bl	801bc74 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801a460:	1dfb      	adds	r3, r7, #7
 801a462:	22ff      	movs	r2, #255	; 0xff
 801a464:	4619      	mov	r1, r3
 801a466:	4865      	ldr	r0, [pc, #404]	; (801a5fc <RadioIrqProcess+0x2f4>)
 801a468:	f000 fdbc 	bl	801afe4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 801a46c:	4864      	ldr	r0, [pc, #400]	; (801a600 <RadioIrqProcess+0x2f8>)
 801a46e:	f001 fbaf 	bl	801bbd0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a472:	4b60      	ldr	r3, [pc, #384]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d036      	beq.n	801a4e8 <RadioIrqProcess+0x1e0>
 801a47a:	4b5e      	ldr	r3, [pc, #376]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	689b      	ldr	r3, [r3, #8]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d031      	beq.n	801a4e8 <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 801a484:	4b59      	ldr	r3, [pc, #356]	; (801a5ec <RadioIrqProcess+0x2e4>)
 801a486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a48a:	2b01      	cmp	r3, #1
 801a48c:	d10e      	bne.n	801a4ac <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801a48e:	4b59      	ldr	r3, [pc, #356]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	689c      	ldr	r4, [r3, #8]
 801a494:	79fb      	ldrb	r3, [r7, #7]
 801a496:	b299      	uxth	r1, r3
 801a498:	4b54      	ldr	r3, [pc, #336]	; (801a5ec <RadioIrqProcess+0x2e4>)
 801a49a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a49e:	b21a      	sxth	r2, r3
 801a4a0:	4b52      	ldr	r3, [pc, #328]	; (801a5ec <RadioIrqProcess+0x2e4>)
 801a4a2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a4a6:	4855      	ldr	r0, [pc, #340]	; (801a5fc <RadioIrqProcess+0x2f4>)
 801a4a8:	47a0      	blx	r4
                break;
 801a4aa:	e01e      	b.n	801a4ea <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a4ac:	4b4f      	ldr	r3, [pc, #316]	; (801a5ec <RadioIrqProcess+0x2e4>)
 801a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4b0:	463a      	mov	r2, r7
 801a4b2:	4611      	mov	r1, r2
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	f001 fe0f 	bl	801c0d8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801a4ba:	4b4e      	ldr	r3, [pc, #312]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	689c      	ldr	r4, [r3, #8]
 801a4c0:	79fb      	ldrb	r3, [r7, #7]
 801a4c2:	b299      	uxth	r1, r3
 801a4c4:	4b49      	ldr	r3, [pc, #292]	; (801a5ec <RadioIrqProcess+0x2e4>)
 801a4c6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a4ca:	b218      	sxth	r0, r3
 801a4cc:	683b      	ldr	r3, [r7, #0]
 801a4ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a4d2:	4a4c      	ldr	r2, [pc, #304]	; (801a604 <RadioIrqProcess+0x2fc>)
 801a4d4:	fb82 c203 	smull	ip, r2, r2, r3
 801a4d8:	1192      	asrs	r2, r2, #6
 801a4da:	17db      	asrs	r3, r3, #31
 801a4dc:	1ad3      	subs	r3, r2, r3
 801a4de:	b25b      	sxtb	r3, r3
 801a4e0:	4602      	mov	r2, r0
 801a4e2:	4846      	ldr	r0, [pc, #280]	; (801a5fc <RadioIrqProcess+0x2f4>)
 801a4e4:	47a0      	blx	r4
                break;
 801a4e6:	e000      	b.n	801a4ea <RadioIrqProcess+0x1e2>
        }
 801a4e8:	bf00      	nop
        break;
 801a4ea:	e0e3      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 801a4ec:	2000      	movs	r0, #0
 801a4ee:	f000 fea9 	bl	801b244 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a4f2:	4b40      	ldr	r3, [pc, #256]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	f000 80d1 	beq.w	801a69e <RadioIrqProcess+0x396>
 801a4fc:	4b3d      	ldr	r3, [pc, #244]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	699b      	ldr	r3, [r3, #24]
 801a502:	2b00      	cmp	r3, #0
 801a504:	f000 80cb 	beq.w	801a69e <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 801a508:	4b3a      	ldr	r3, [pc, #232]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	699b      	ldr	r3, [r3, #24]
 801a50e:	2000      	movs	r0, #0
 801a510:	4798      	blx	r3
        break;
 801a512:	e0c4      	b.n	801a69e <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 801a514:	2000      	movs	r0, #0
 801a516:	f000 fe95 	bl	801b244 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a51a:	4b36      	ldr	r3, [pc, #216]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	f000 80bf 	beq.w	801a6a2 <RadioIrqProcess+0x39a>
 801a524:	4b33      	ldr	r3, [pc, #204]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	699b      	ldr	r3, [r3, #24]
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	f000 80b9 	beq.w	801a6a2 <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 801a530:	4b30      	ldr	r3, [pc, #192]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	699b      	ldr	r3, [r3, #24]
 801a536:	2001      	movs	r0, #1
 801a538:	4798      	blx	r3
        break;
 801a53a:	e0b2      	b.n	801a6a2 <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a53c:	4b32      	ldr	r3, [pc, #200]	; (801a608 <RadioIrqProcess+0x300>)
 801a53e:	2201      	movs	r2, #1
 801a540:	2100      	movs	r1, #0
 801a542:	2002      	movs	r0, #2
 801a544:	f001 fee8 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a548:	f000 fd32 	bl	801afb0 <SUBGRF_GetOperatingMode>
 801a54c:	4603      	mov	r3, r0
 801a54e:	2b04      	cmp	r3, #4
 801a550:	d115      	bne.n	801a57e <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801a552:	4827      	ldr	r0, [pc, #156]	; (801a5f0 <RadioIrqProcess+0x2e8>)
 801a554:	f002 fd8a 	bl	801d06c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a558:	2000      	movs	r0, #0
 801a55a:	f000 fe73 	bl	801b244 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a55e:	4b25      	ldr	r3, [pc, #148]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	2b00      	cmp	r3, #0
 801a564:	f000 809f 	beq.w	801a6a6 <RadioIrqProcess+0x39e>
 801a568:	4b22      	ldr	r3, [pc, #136]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	685b      	ldr	r3, [r3, #4]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	f000 8099 	beq.w	801a6a6 <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 801a574:	4b1f      	ldr	r3, [pc, #124]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	685b      	ldr	r3, [r3, #4]
 801a57a:	4798      	blx	r3
        break;
 801a57c:	e093      	b.n	801a6a6 <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a57e:	f000 fd17 	bl	801afb0 <SUBGRF_GetOperatingMode>
 801a582:	4603      	mov	r3, r0
 801a584:	2b05      	cmp	r3, #5
 801a586:	f040 808e 	bne.w	801a6a6 <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 801a58a:	481b      	ldr	r0, [pc, #108]	; (801a5f8 <RadioIrqProcess+0x2f0>)
 801a58c:	f002 fd6e 	bl	801d06c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a590:	2000      	movs	r0, #0
 801a592:	f000 fe57 	bl	801b244 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a596:	4b17      	ldr	r3, [pc, #92]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	f000 8083 	beq.w	801a6a6 <RadioIrqProcess+0x39e>
 801a5a0:	4b14      	ldr	r3, [pc, #80]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	68db      	ldr	r3, [r3, #12]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d07d      	beq.n	801a6a6 <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 801a5aa:	4b12      	ldr	r3, [pc, #72]	; (801a5f4 <RadioIrqProcess+0x2ec>)
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	68db      	ldr	r3, [r3, #12]
 801a5b0:	4798      	blx	r3
        break;
 801a5b2:	e078      	b.n	801a6a6 <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a5b4:	4b15      	ldr	r3, [pc, #84]	; (801a60c <RadioIrqProcess+0x304>)
 801a5b6:	2201      	movs	r2, #1
 801a5b8:	2100      	movs	r1, #0
 801a5ba:	2002      	movs	r0, #2
 801a5bc:	f001 feac 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a5c0:	e078      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a5c2:	4b13      	ldr	r3, [pc, #76]	; (801a610 <RadioIrqProcess+0x308>)
 801a5c4:	2201      	movs	r2, #1
 801a5c6:	2100      	movs	r1, #0
 801a5c8:	2002      	movs	r0, #2
 801a5ca:	f001 fea5 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 801a5ce:	f001 fe2e 	bl	801c22e <RFW_Is_Init>
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	2b01      	cmp	r3, #1
 801a5d6:	d168      	bne.n	801a6aa <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 801a5d8:	f001 fe5f 	bl	801c29a <RFW_ReceivePayload>
        break;
 801a5dc:	e065      	b.n	801a6aa <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a5de:	4b0d      	ldr	r3, [pc, #52]	; (801a614 <RadioIrqProcess+0x30c>)
 801a5e0:	2201      	movs	r2, #1
 801a5e2:	2100      	movs	r1, #0
 801a5e4:	2002      	movs	r0, #2
 801a5e6:	f001 fe97 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a5ea:	e063      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
 801a5ec:	20003df4 	.word	0x20003df4
 801a5f0:	20003e4c 	.word	0x20003e4c
 801a5f4:	20003df0 	.word	0x20003df0
 801a5f8:	20003e64 	.word	0x20003e64
 801a5fc:	20003cf0 	.word	0x20003cf0
 801a600:	20003e18 	.word	0x20003e18
 801a604:	10624dd3 	.word	0x10624dd3
 801a608:	0801e194 	.word	0x0801e194
 801a60c:	0801e1a8 	.word	0x0801e1a8
 801a610:	0801e1b4 	.word	0x0801e1b4
 801a614:	0801e1c0 	.word	0x0801e1c0
        TimerStop( &RxTimeoutTimer );
 801a618:	4828      	ldr	r0, [pc, #160]	; (801a6bc <RadioIrqProcess+0x3b4>)
 801a61a:	f002 fd27 	bl	801d06c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a61e:	4b28      	ldr	r3, [pc, #160]	; (801a6c0 <RadioIrqProcess+0x3b8>)
 801a620:	785b      	ldrb	r3, [r3, #1]
 801a622:	f083 0301 	eor.w	r3, r3, #1
 801a626:	b2db      	uxtb	r3, r3
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d002      	beq.n	801a632 <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 801a62c:	2000      	movs	r0, #0
 801a62e:	f000 fe09 	bl	801b244 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a632:	4b24      	ldr	r3, [pc, #144]	; (801a6c4 <RadioIrqProcess+0x3bc>)
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d039      	beq.n	801a6ae <RadioIrqProcess+0x3a6>
 801a63a:	4b22      	ldr	r3, [pc, #136]	; (801a6c4 <RadioIrqProcess+0x3bc>)
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	68db      	ldr	r3, [r3, #12]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d034      	beq.n	801a6ae <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 801a644:	4b1f      	ldr	r3, [pc, #124]	; (801a6c4 <RadioIrqProcess+0x3bc>)
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	68db      	ldr	r3, [r3, #12]
 801a64a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a64c:	4b1e      	ldr	r3, [pc, #120]	; (801a6c8 <RadioIrqProcess+0x3c0>)
 801a64e:	2201      	movs	r2, #1
 801a650:	2100      	movs	r1, #0
 801a652:	2002      	movs	r0, #2
 801a654:	f001 fe60 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a658:	e029      	b.n	801a6ae <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a65a:	4b1c      	ldr	r3, [pc, #112]	; (801a6cc <RadioIrqProcess+0x3c4>)
 801a65c:	2201      	movs	r2, #1
 801a65e:	2100      	movs	r1, #0
 801a660:	2002      	movs	r0, #2
 801a662:	f001 fe59 	bl	801c318 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a666:	4b16      	ldr	r3, [pc, #88]	; (801a6c0 <RadioIrqProcess+0x3b8>)
 801a668:	785b      	ldrb	r3, [r3, #1]
 801a66a:	f083 0301 	eor.w	r3, r3, #1
 801a66e:	b2db      	uxtb	r3, r3
 801a670:	2b00      	cmp	r3, #0
 801a672:	d002      	beq.n	801a67a <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 801a674:	2000      	movs	r0, #0
 801a676:	f000 fde5 	bl	801b244 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a67a:	4b12      	ldr	r3, [pc, #72]	; (801a6c4 <RadioIrqProcess+0x3bc>)
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d017      	beq.n	801a6b2 <RadioIrqProcess+0x3aa>
 801a682:	4b10      	ldr	r3, [pc, #64]	; (801a6c4 <RadioIrqProcess+0x3bc>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	691b      	ldr	r3, [r3, #16]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d012      	beq.n	801a6b2 <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 801a68c:	4b0d      	ldr	r3, [pc, #52]	; (801a6c4 <RadioIrqProcess+0x3bc>)
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	691b      	ldr	r3, [r3, #16]
 801a692:	4798      	blx	r3
        break;
 801a694:	e00d      	b.n	801a6b2 <RadioIrqProcess+0x3aa>
        break;
 801a696:	bf00      	nop
 801a698:	e00c      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        break;
 801a69a:	bf00      	nop
 801a69c:	e00a      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        break;
 801a69e:	bf00      	nop
 801a6a0:	e008      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        break;
 801a6a2:	bf00      	nop
 801a6a4:	e006      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        break;
 801a6a6:	bf00      	nop
 801a6a8:	e004      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        break;
 801a6aa:	bf00      	nop
 801a6ac:	e002      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        break;
 801a6ae:	bf00      	nop
 801a6b0:	e000      	b.n	801a6b4 <RadioIrqProcess+0x3ac>
        break;
 801a6b2:	bf00      	nop
  }
}
 801a6b4:	bf00      	nop
 801a6b6:	370c      	adds	r7, #12
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd90      	pop	{r4, r7, pc}
 801a6bc:	20003e64 	.word	0x20003e64
 801a6c0:	20003df4 	.word	0x20003df4
 801a6c4:	20003df0 	.word	0x20003df0
 801a6c8:	0801e1cc 	.word	0x0801e1cc
 801a6cc:	0801e1d8 	.word	0x0801e1d8

0801a6d0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a6d4:	4b09      	ldr	r3, [pc, #36]	; (801a6fc <RadioTxPrbs+0x2c>)
 801a6d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a6da:	2101      	movs	r1, #1
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f001 fbbd 	bl	801be5c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 801a6e2:	4b07      	ldr	r3, [pc, #28]	; (801a700 <RadioTxPrbs+0x30>)
 801a6e4:	212d      	movs	r1, #45	; 0x2d
 801a6e6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a6ea:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a6ec:	f000 fe6d 	bl	801b3ca <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a6f0:	4804      	ldr	r0, [pc, #16]	; (801a704 <RadioTxPrbs+0x34>)
 801a6f2:	f000 fdc3 	bl	801b27c <SUBGRF_SetTx>
}
 801a6f6:	bf00      	nop
 801a6f8:	bd80      	pop	{r7, pc}
 801a6fa:	bf00      	nop
 801a6fc:	20003df4 	.word	0x20003df4
 801a700:	0801a117 	.word	0x0801a117
 801a704:	000fffff 	.word	0x000fffff

0801a708 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b084      	sub	sp, #16
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	4603      	mov	r3, r0
 801a710:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a716:	4618      	mov	r0, r3
 801a718:	f001 fbc8 	bl	801beac <SUBGRF_SetRfTxPower>
 801a71c:	4603      	mov	r3, r0
 801a71e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a720:	7bfb      	ldrb	r3, [r7, #15]
 801a722:	2101      	movs	r1, #1
 801a724:	4618      	mov	r0, r3
 801a726:	f001 fb99 	bl	801be5c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a72a:	f000 fe45 	bl	801b3b8 <SUBGRF_SetTxContinuousWave>
}
 801a72e:	bf00      	nop
 801a730:	3710      	adds	r7, #16
 801a732:	46bd      	mov	sp, r7
 801a734:	bd80      	pop	{r7, pc}

0801a736 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a736:	b480      	push	{r7}
 801a738:	b089      	sub	sp, #36	; 0x24
 801a73a:	af00      	add	r7, sp, #0
 801a73c:	60f8      	str	r0, [r7, #12]
 801a73e:	60b9      	str	r1, [r7, #8]
 801a740:	4613      	mov	r3, r2
 801a742:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a744:	2300      	movs	r3, #0
 801a746:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 801a748:	2300      	movs	r3, #0
 801a74a:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 801a74c:	2300      	movs	r3, #0
 801a74e:	61bb      	str	r3, [r7, #24]
 801a750:	e011      	b.n	801a776 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a752:	69bb      	ldr	r3, [r7, #24]
 801a754:	68ba      	ldr	r2, [r7, #8]
 801a756:	4413      	add	r3, r2
 801a758:	781a      	ldrb	r2, [r3, #0]
 801a75a:	69bb      	ldr	r3, [r7, #24]
 801a75c:	68b9      	ldr	r1, [r7, #8]
 801a75e:	440b      	add	r3, r1
 801a760:	43d2      	mvns	r2, r2
 801a762:	b2d2      	uxtb	r2, r2
 801a764:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a766:	69bb      	ldr	r3, [r7, #24]
 801a768:	68fa      	ldr	r2, [r7, #12]
 801a76a:	4413      	add	r3, r2
 801a76c:	2200      	movs	r2, #0
 801a76e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 801a770:	69bb      	ldr	r3, [r7, #24]
 801a772:	3301      	adds	r3, #1
 801a774:	61bb      	str	r3, [r7, #24]
 801a776:	79fb      	ldrb	r3, [r7, #7]
 801a778:	69ba      	ldr	r2, [r7, #24]
 801a77a:	429a      	cmp	r2, r3
 801a77c:	dbe9      	blt.n	801a752 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 801a77e:	2300      	movs	r3, #0
 801a780:	61bb      	str	r3, [r7, #24]
 801a782:	e049      	b.n	801a818 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a784:	69bb      	ldr	r3, [r7, #24]
 801a786:	425a      	negs	r2, r3
 801a788:	f003 0307 	and.w	r3, r3, #7
 801a78c:	f002 0207 	and.w	r2, r2, #7
 801a790:	bf58      	it	pl
 801a792:	4253      	negpl	r3, r2
 801a794:	b2db      	uxtb	r3, r3
 801a796:	f1c3 0307 	rsb	r3, r3, #7
 801a79a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a79c:	69bb      	ldr	r3, [r7, #24]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	da00      	bge.n	801a7a4 <payload_integration+0x6e>
 801a7a2:	3307      	adds	r3, #7
 801a7a4:	10db      	asrs	r3, r3, #3
 801a7a6:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a7a8:	69bb      	ldr	r3, [r7, #24]
 801a7aa:	3301      	adds	r3, #1
 801a7ac:	425a      	negs	r2, r3
 801a7ae:	f003 0307 	and.w	r3, r3, #7
 801a7b2:	f002 0207 	and.w	r2, r2, #7
 801a7b6:	bf58      	it	pl
 801a7b8:	4253      	negpl	r3, r2
 801a7ba:	b2db      	uxtb	r3, r3
 801a7bc:	f1c3 0307 	rsb	r3, r3, #7
 801a7c0:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a7c2:	69bb      	ldr	r3, [r7, #24]
 801a7c4:	3301      	adds	r3, #1
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	da00      	bge.n	801a7cc <payload_integration+0x96>
 801a7ca:	3307      	adds	r3, #7
 801a7cc:	10db      	asrs	r3, r3, #3
 801a7ce:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a7d0:	7dbb      	ldrb	r3, [r7, #22]
 801a7d2:	68ba      	ldr	r2, [r7, #8]
 801a7d4:	4413      	add	r3, r2
 801a7d6:	781b      	ldrb	r3, [r3, #0]
 801a7d8:	461a      	mov	r2, r3
 801a7da:	7dfb      	ldrb	r3, [r7, #23]
 801a7dc:	fa42 f303 	asr.w	r3, r2, r3
 801a7e0:	b2db      	uxtb	r3, r3
 801a7e2:	f003 0301 	and.w	r3, r3, #1
 801a7e6:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a7e8:	7ffa      	ldrb	r2, [r7, #31]
 801a7ea:	7cfb      	ldrb	r3, [r7, #19]
 801a7ec:	4053      	eors	r3, r2
 801a7ee:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a7f0:	7d3b      	ldrb	r3, [r7, #20]
 801a7f2:	68fa      	ldr	r2, [r7, #12]
 801a7f4:	4413      	add	r3, r2
 801a7f6:	781b      	ldrb	r3, [r3, #0]
 801a7f8:	b25a      	sxtb	r2, r3
 801a7fa:	7ff9      	ldrb	r1, [r7, #31]
 801a7fc:	7d7b      	ldrb	r3, [r7, #21]
 801a7fe:	fa01 f303 	lsl.w	r3, r1, r3
 801a802:	b25b      	sxtb	r3, r3
 801a804:	4313      	orrs	r3, r2
 801a806:	b259      	sxtb	r1, r3
 801a808:	7d3b      	ldrb	r3, [r7, #20]
 801a80a:	68fa      	ldr	r2, [r7, #12]
 801a80c:	4413      	add	r3, r2
 801a80e:	b2ca      	uxtb	r2, r1
 801a810:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 801a812:	69bb      	ldr	r3, [r7, #24]
 801a814:	3301      	adds	r3, #1
 801a816:	61bb      	str	r3, [r7, #24]
 801a818:	79fb      	ldrb	r3, [r7, #7]
 801a81a:	00db      	lsls	r3, r3, #3
 801a81c:	69ba      	ldr	r2, [r7, #24]
 801a81e:	429a      	cmp	r2, r3
 801a820:	dbb0      	blt.n	801a784 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a822:	7ffb      	ldrb	r3, [r7, #31]
 801a824:	01db      	lsls	r3, r3, #7
 801a826:	b25a      	sxtb	r2, r3
 801a828:	7ffb      	ldrb	r3, [r7, #31]
 801a82a:	019b      	lsls	r3, r3, #6
 801a82c:	b25b      	sxtb	r3, r3
 801a82e:	4313      	orrs	r3, r2
 801a830:	b25b      	sxtb	r3, r3
 801a832:	7ffa      	ldrb	r2, [r7, #31]
 801a834:	2a00      	cmp	r2, #0
 801a836:	d101      	bne.n	801a83c <payload_integration+0x106>
 801a838:	2220      	movs	r2, #32
 801a83a:	e000      	b.n	801a83e <payload_integration+0x108>
 801a83c:	2200      	movs	r2, #0
 801a83e:	4313      	orrs	r3, r2
 801a840:	b259      	sxtb	r1, r3
 801a842:	79fb      	ldrb	r3, [r7, #7]
 801a844:	68fa      	ldr	r2, [r7, #12]
 801a846:	4413      	add	r3, r2
 801a848:	b2ca      	uxtb	r2, r1
 801a84a:	701a      	strb	r2, [r3, #0]
}
 801a84c:	bf00      	nop
 801a84e:	3724      	adds	r7, #36	; 0x24
 801a850:	46bd      	mov	sp, r7
 801a852:	bc80      	pop	{r7}
 801a854:	4770      	bx	lr
	...

0801a858 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801a858:	b580      	push	{r7, lr}
 801a85a:	b08c      	sub	sp, #48	; 0x30
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	60b9      	str	r1, [r7, #8]
 801a860:	607a      	str	r2, [r7, #4]
 801a862:	603b      	str	r3, [r7, #0]
 801a864:	4603      	mov	r3, r0
 801a866:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801a868:	2300      	movs	r3, #0
 801a86a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 801a86c:	2300      	movs	r3, #0
 801a86e:	61fb      	str	r3, [r7, #28]
 801a870:	2300      	movs	r3, #0
 801a872:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a874:	f001 fcd5 	bl	801c222 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d001      	beq.n	801a882 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a87e:	2300      	movs	r3, #0
 801a880:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	2b00      	cmp	r3, #0
 801a886:	bf14      	ite	ne
 801a888:	2301      	movne	r3, #1
 801a88a:	2300      	moveq	r3, #0
 801a88c:	b2da      	uxtb	r2, r3
 801a88e:	4b9f      	ldr	r3, [pc, #636]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a890:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a892:	7bfb      	ldrb	r3, [r7, #15]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d003      	beq.n	801a8a0 <RadioSetRxGenericConfig+0x48>
 801a898:	2b01      	cmp	r3, #1
 801a89a:	f000 80e8 	beq.w	801aa6e <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a89e:	e1a0      	b.n	801abe2 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a8a0:	68bb      	ldr	r3, [r7, #8]
 801a8a2:	68db      	ldr	r3, [r3, #12]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d003      	beq.n	801a8b0 <RadioSetRxGenericConfig+0x58>
 801a8a8:	68bb      	ldr	r3, [r7, #8]
 801a8aa:	691b      	ldr	r3, [r3, #16]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d102      	bne.n	801a8b6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a8b0:	f04f 33ff 	mov.w	r3, #4294967295
 801a8b4:	e196      	b.n	801abe4 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	7d5b      	ldrb	r3, [r3, #21]
 801a8ba:	2b08      	cmp	r3, #8
 801a8bc:	d902      	bls.n	801a8c4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a8be:	f04f 33ff 	mov.w	r3, #4294967295
 801a8c2:	e18f      	b.n	801abe4 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a8c4:	2300      	movs	r3, #0
 801a8c6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a8c8:	e00d      	b.n	801a8e6 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 801a8ca:	68bb      	ldr	r3, [r7, #8]
 801a8cc:	699a      	ldr	r2, [r3, #24]
 801a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8d0:	4413      	add	r3, r2
 801a8d2:	7819      	ldrb	r1, [r3, #0]
 801a8d4:	f107 021c 	add.w	r2, r7, #28
 801a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8da:	4413      	add	r3, r2
 801a8dc:	460a      	mov	r2, r1
 801a8de:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8e2:	3301      	adds	r3, #1
 801a8e4:	62bb      	str	r3, [r7, #40]	; 0x28
 801a8e6:	68bb      	ldr	r3, [r7, #8]
 801a8e8:	7d5b      	ldrb	r3, [r3, #21]
 801a8ea:	461a      	mov	r2, r3
 801a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8ee:	4293      	cmp	r3, r2
 801a8f0:	dbeb      	blt.n	801a8ca <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a8f2:	68bb      	ldr	r3, [r7, #8]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	bf14      	ite	ne
 801a8fa:	2301      	movne	r3, #1
 801a8fc:	2300      	moveq	r3, #0
 801a8fe:	b2db      	uxtb	r3, r3
 801a900:	4618      	mov	r0, r3
 801a902:	f000 fd6b 	bl	801b3dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a906:	4b81      	ldr	r3, [pc, #516]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a908:	2200      	movs	r2, #0
 801a90a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a90e:	68bb      	ldr	r3, [r7, #8]
 801a910:	68db      	ldr	r3, [r3, #12]
 801a912:	4a7e      	ldr	r2, [pc, #504]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a914:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801a916:	68bb      	ldr	r3, [r7, #8]
 801a918:	791a      	ldrb	r2, [r3, #4]
 801a91a:	4b7c      	ldr	r3, [pc, #496]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a91c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	689b      	ldr	r3, [r3, #8]
 801a924:	4618      	mov	r0, r3
 801a926:	f001 fbaf 	bl	801c088 <SUBGRF_GetFskBandwidthRegValue>
 801a92a:	4603      	mov	r3, r0
 801a92c:	461a      	mov	r2, r3
 801a92e:	4b77      	ldr	r3, [pc, #476]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a934:	4b75      	ldr	r3, [pc, #468]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a936:	2200      	movs	r2, #0
 801a938:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a93a:	68bb      	ldr	r3, [r7, #8]
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	b29b      	uxth	r3, r3
 801a940:	00db      	lsls	r3, r3, #3
 801a942:	b29a      	uxth	r2, r3
 801a944:	4b71      	ldr	r3, [pc, #452]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a946:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a948:	68bb      	ldr	r3, [r7, #8]
 801a94a:	7d1a      	ldrb	r2, [r3, #20]
 801a94c:	4b6f      	ldr	r3, [pc, #444]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a94e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	7d5b      	ldrb	r3, [r3, #21]
 801a954:	00db      	lsls	r3, r3, #3
 801a956:	b2da      	uxtb	r2, r3
 801a958:	4b6c      	ldr	r3, [pc, #432]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a95a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a95c:	68bb      	ldr	r3, [r7, #8]
 801a95e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a962:	4b6a      	ldr	r3, [pc, #424]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a964:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d105      	bne.n	801a97c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a970:	68bb      	ldr	r3, [r7, #8]
 801a972:	69db      	ldr	r3, [r3, #28]
 801a974:	b2da      	uxtb	r2, r3
 801a976:	4b65      	ldr	r3, [pc, #404]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a978:	759a      	strb	r2, [r3, #22]
 801a97a:	e00b      	b.n	801a994 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a97c:	68bb      	ldr	r3, [r7, #8]
 801a97e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a982:	2b02      	cmp	r3, #2
 801a984:	d103      	bne.n	801a98e <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a986:	4b61      	ldr	r3, [pc, #388]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a988:	22ff      	movs	r2, #255	; 0xff
 801a98a:	759a      	strb	r2, [r3, #22]
 801a98c:	e002      	b.n	801a994 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a98e:	4b5f      	ldr	r3, [pc, #380]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a990:	22ff      	movs	r2, #255	; 0xff
 801a992:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801a99a:	2b02      	cmp	r3, #2
 801a99c:	d004      	beq.n	801a9a8 <RadioSetRxGenericConfig+0x150>
 801a99e:	68bb      	ldr	r3, [r7, #8]
 801a9a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a9a4:	2b02      	cmp	r3, #2
 801a9a6:	d12d      	bne.n	801aa04 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a9ae:	2bf1      	cmp	r3, #241	; 0xf1
 801a9b0:	d00c      	beq.n	801a9cc <RadioSetRxGenericConfig+0x174>
 801a9b2:	68bb      	ldr	r3, [r7, #8]
 801a9b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a9b8:	2bf2      	cmp	r3, #242	; 0xf2
 801a9ba:	d007      	beq.n	801a9cc <RadioSetRxGenericConfig+0x174>
 801a9bc:	68bb      	ldr	r3, [r7, #8]
 801a9be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a9c2:	2b01      	cmp	r3, #1
 801a9c4:	d002      	beq.n	801a9cc <RadioSetRxGenericConfig+0x174>
            return -1;
 801a9c6:	f04f 33ff 	mov.w	r3, #4294967295
 801a9ca:	e10b      	b.n	801abe4 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a9d4:	4b4e      	ldr	r3, [pc, #312]	; (801ab10 <RadioSetRxGenericConfig+0x2b8>)
 801a9d6:	6819      	ldr	r1, [r3, #0]
 801a9d8:	f107 0310 	add.w	r3, r7, #16
 801a9dc:	4a4d      	ldr	r2, [pc, #308]	; (801ab14 <RadioSetRxGenericConfig+0x2bc>)
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f001 fc12 	bl	801c208 <RFW_Init>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d002      	beq.n	801a9f0 <RadioSetRxGenericConfig+0x198>
            return -1;
 801a9ea:	f04f 33ff 	mov.w	r3, #4294967295
 801a9ee:	e0f9      	b.n	801abe4 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a9f0:	4b46      	ldr	r3, [pc, #280]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a9f6:	4b45      	ldr	r3, [pc, #276]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a9f8:	2201      	movs	r2, #1
 801a9fa:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a9fc:	4b43      	ldr	r3, [pc, #268]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801a9fe:	2200      	movs	r2, #0
 801aa00:	755a      	strb	r2, [r3, #21]
        {
 801aa02:	e00e      	b.n	801aa22 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801aa0a:	4b40      	ldr	r3, [pc, #256]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aa0c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801aa14:	4b3d      	ldr	r3, [pc, #244]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aa16:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801aa18:	68bb      	ldr	r3, [r7, #8]
 801aa1a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801aa1e:	4b3b      	ldr	r3, [pc, #236]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aa20:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801aa22:	f7ff fa92 	bl	8019f4a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801aa26:	2000      	movs	r0, #0
 801aa28:	f7fe fc24 	bl	8019274 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa2c:	483a      	ldr	r0, [pc, #232]	; (801ab18 <RadioSetRxGenericConfig+0x2c0>)
 801aa2e:	f000 ff07 	bl	801b840 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa32:	483a      	ldr	r0, [pc, #232]	; (801ab1c <RadioSetRxGenericConfig+0x2c4>)
 801aa34:	f000 ffd6 	bl	801b9e4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801aa38:	f107 031c 	add.w	r3, r7, #28
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	f000 fb06 	bl	801b04e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801aa42:	68bb      	ldr	r3, [r7, #8]
 801aa44:	8c1b      	ldrh	r3, [r3, #32]
 801aa46:	4618      	mov	r0, r3
 801aa48:	f000 fb50 	bl	801b0ec <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801aa50:	4618      	mov	r0, r3
 801aa52:	f000 fb2b 	bl	801b0ac <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801aa5c:	fb03 f202 	mul.w	r2, r3, r2
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	68db      	ldr	r3, [r3, #12]
 801aa64:	fbb2 f3f3 	udiv	r3, r2, r3
 801aa68:	4a28      	ldr	r2, [pc, #160]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aa6a:	6093      	str	r3, [r2, #8]
        break;
 801aa6c:	e0b9      	b.n	801abe2 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 801aa6e:	68bb      	ldr	r3, [r7, #8]
 801aa70:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d102      	bne.n	801aa7c <RadioSetRxGenericConfig+0x224>
            return -1;
 801aa76:	f04f 33ff 	mov.w	r3, #4294967295
 801aa7a:	e0b3      	b.n	801abe4 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801aa82:	2b01      	cmp	r3, #1
 801aa84:	d104      	bne.n	801aa90 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	69db      	ldr	r3, [r3, #28]
 801aa8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801aa8e:	e002      	b.n	801aa96 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 801aa90:	23ff      	movs	r3, #255	; 0xff
 801aa92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801aa96:	68bb      	ldr	r3, [r7, #8]
 801aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	bf14      	ite	ne
 801aa9e:	2301      	movne	r3, #1
 801aaa0:	2300      	moveq	r3, #0
 801aaa2:	b2db      	uxtb	r3, r3
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	f000 fc99 	bl	801b3dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801aaaa:	683b      	ldr	r3, [r7, #0]
 801aaac:	b2db      	uxtb	r3, r3
 801aaae:	4618      	mov	r0, r3
 801aab0:	f000 fca3 	bl	801b3fa <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801aab4:	4b15      	ldr	r3, [pc, #84]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aab6:	2201      	movs	r2, #1
 801aab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801aabc:	68bb      	ldr	r3, [r7, #8]
 801aabe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801aac2:	4b12      	ldr	r3, [pc, #72]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801aace:	4b0f      	ldr	r3, [pc, #60]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801aada:	4b0c      	ldr	r3, [pc, #48]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aadc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801aae6:	2b02      	cmp	r3, #2
 801aae8:	d01a      	beq.n	801ab20 <RadioSetRxGenericConfig+0x2c8>
 801aaea:	2b02      	cmp	r3, #2
 801aaec:	dc2c      	bgt.n	801ab48 <RadioSetRxGenericConfig+0x2f0>
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d002      	beq.n	801aaf8 <RadioSetRxGenericConfig+0x2a0>
 801aaf2:	2b01      	cmp	r3, #1
 801aaf4:	d005      	beq.n	801ab02 <RadioSetRxGenericConfig+0x2aa>
            break;
 801aaf6:	e027      	b.n	801ab48 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aaf8:	4b04      	ldr	r3, [pc, #16]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801aafa:	2200      	movs	r2, #0
 801aafc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ab00:	e023      	b.n	801ab4a <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ab02:	4b02      	ldr	r3, [pc, #8]	; (801ab0c <RadioSetRxGenericConfig+0x2b4>)
 801ab04:	2201      	movs	r2, #1
 801ab06:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ab0a:	e01e      	b.n	801ab4a <RadioSetRxGenericConfig+0x2f2>
 801ab0c:	20003df4 	.word	0x20003df4
 801ab10:	20003df0 	.word	0x20003df0
 801ab14:	20003e64 	.word	0x20003e64
 801ab18:	20003e2c 	.word	0x20003e2c
 801ab1c:	20003e02 	.word	0x20003e02
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ab20:	68bb      	ldr	r3, [r7, #8]
 801ab22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ab26:	2b0b      	cmp	r3, #11
 801ab28:	d004      	beq.n	801ab34 <RadioSetRxGenericConfig+0x2dc>
 801ab2a:	68bb      	ldr	r3, [r7, #8]
 801ab2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ab30:	2b0c      	cmp	r3, #12
 801ab32:	d104      	bne.n	801ab3e <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ab34:	4b2d      	ldr	r3, [pc, #180]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab36:	2201      	movs	r2, #1
 801ab38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ab3c:	e005      	b.n	801ab4a <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ab3e:	4b2b      	ldr	r3, [pc, #172]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab40:	2200      	movs	r2, #0
 801ab42:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ab46:	e000      	b.n	801ab4a <RadioSetRxGenericConfig+0x2f2>
            break;
 801ab48:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ab4a:	4b28      	ldr	r3, [pc, #160]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab4c:	2201      	movs	r2, #1
 801ab4e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ab50:	68bb      	ldr	r3, [r7, #8]
 801ab52:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801ab54:	4b25      	ldr	r3, [pc, #148]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab56:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ab58:	68bb      	ldr	r3, [r7, #8]
 801ab5a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801ab5e:	4b23      	ldr	r3, [pc, #140]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab60:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801ab62:	4a22      	ldr	r2, [pc, #136]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ab68:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ab6a:	68bb      	ldr	r3, [r7, #8]
 801ab6c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801ab70:	4b1e      	ldr	r3, [pc, #120]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab72:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ab76:	68bb      	ldr	r3, [r7, #8]
 801ab78:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801ab7c:	4b1b      	ldr	r3, [pc, #108]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801ab82:	f7ff f9e2 	bl	8019f4a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ab86:	2001      	movs	r0, #1
 801ab88:	f7fe fb74 	bl	8019274 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ab8c:	4818      	ldr	r0, [pc, #96]	; (801abf0 <RadioSetRxGenericConfig+0x398>)
 801ab8e:	f000 fe57 	bl	801b840 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab92:	4818      	ldr	r0, [pc, #96]	; (801abf4 <RadioSetRxGenericConfig+0x39c>)
 801ab94:	f000 ff26 	bl	801b9e4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801ab98:	4b14      	ldr	r3, [pc, #80]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801ab9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801ab9e:	2b01      	cmp	r3, #1
 801aba0:	d10d      	bne.n	801abbe <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801aba2:	f240 7036 	movw	r0, #1846	; 0x736
 801aba6:	f001 f879 	bl	801bc9c <SUBGRF_ReadRegister>
 801abaa:	4603      	mov	r3, r0
 801abac:	f023 0304 	bic.w	r3, r3, #4
 801abb0:	b2db      	uxtb	r3, r3
 801abb2:	4619      	mov	r1, r3
 801abb4:	f240 7036 	movw	r0, #1846	; 0x736
 801abb8:	f001 f85c 	bl	801bc74 <SUBGRF_WriteRegister>
 801abbc:	e00c      	b.n	801abd8 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801abbe:	f240 7036 	movw	r0, #1846	; 0x736
 801abc2:	f001 f86b 	bl	801bc9c <SUBGRF_ReadRegister>
 801abc6:	4603      	mov	r3, r0
 801abc8:	f043 0304 	orr.w	r3, r3, #4
 801abcc:	b2db      	uxtb	r3, r3
 801abce:	4619      	mov	r1, r3
 801abd0:	f240 7036 	movw	r0, #1846	; 0x736
 801abd4:	f001 f84e 	bl	801bc74 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801abd8:	4b04      	ldr	r3, [pc, #16]	; (801abec <RadioSetRxGenericConfig+0x394>)
 801abda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801abde:	609a      	str	r2, [r3, #8]
        break;
 801abe0:	bf00      	nop
    }
    return status;
 801abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801abe4:	4618      	mov	r0, r3
 801abe6:	3730      	adds	r7, #48	; 0x30
 801abe8:	46bd      	mov	sp, r7
 801abea:	bd80      	pop	{r7, pc}
 801abec:	20003df4 	.word	0x20003df4
 801abf0:	20003e2c 	.word	0x20003e2c
 801abf4:	20003e02 	.word	0x20003e02

0801abf8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801abf8:	b580      	push	{r7, lr}
 801abfa:	b08a      	sub	sp, #40	; 0x28
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	60b9      	str	r1, [r7, #8]
 801ac00:	607b      	str	r3, [r7, #4]
 801ac02:	4603      	mov	r3, r0
 801ac04:	73fb      	strb	r3, [r7, #15]
 801ac06:	4613      	mov	r3, r2
 801ac08:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	61fb      	str	r3, [r7, #28]
 801ac0e:	2300      	movs	r3, #0
 801ac10:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ac12:	f001 fb06 	bl	801c222 <RFW_DeInit>
    switch( modem )
 801ac16:	7bfb      	ldrb	r3, [r7, #15]
 801ac18:	2b02      	cmp	r3, #2
 801ac1a:	f000 8144 	beq.w	801aea6 <RadioSetTxGenericConfig+0x2ae>
 801ac1e:	2b02      	cmp	r3, #2
 801ac20:	f300 8160 	bgt.w	801aee4 <RadioSetTxGenericConfig+0x2ec>
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d003      	beq.n	801ac30 <RadioSetTxGenericConfig+0x38>
 801ac28:	2b01      	cmp	r3, #1
 801ac2a:	f000 80b7 	beq.w	801ad9c <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801ac2e:	e159      	b.n	801aee4 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801ac30:	68bb      	ldr	r3, [r7, #8]
 801ac32:	689b      	ldr	r3, [r3, #8]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d003      	beq.n	801ac40 <RadioSetTxGenericConfig+0x48>
 801ac38:	68bb      	ldr	r3, [r7, #8]
 801ac3a:	691b      	ldr	r3, [r3, #16]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d102      	bne.n	801ac46 <RadioSetTxGenericConfig+0x4e>
            return -1;
 801ac40:	f04f 33ff 	mov.w	r3, #4294967295
 801ac44:	e163      	b.n	801af0e <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	7d1b      	ldrb	r3, [r3, #20]
 801ac4a:	2b08      	cmp	r3, #8
 801ac4c:	d902      	bls.n	801ac54 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801ac4e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac52:	e15c      	b.n	801af0e <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801ac54:	2300      	movs	r3, #0
 801ac56:	627b      	str	r3, [r7, #36]	; 0x24
 801ac58:	e00d      	b.n	801ac76 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801ac5a:	68bb      	ldr	r3, [r7, #8]
 801ac5c:	699a      	ldr	r2, [r3, #24]
 801ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac60:	4413      	add	r3, r2
 801ac62:	7819      	ldrb	r1, [r3, #0]
 801ac64:	f107 021c 	add.w	r2, r7, #28
 801ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac6a:	4413      	add	r3, r2
 801ac6c:	460a      	mov	r2, r1
 801ac6e:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac72:	3301      	adds	r3, #1
 801ac74:	627b      	str	r3, [r7, #36]	; 0x24
 801ac76:	68bb      	ldr	r3, [r7, #8]
 801ac78:	7d1b      	ldrb	r3, [r3, #20]
 801ac7a:	461a      	mov	r2, r3
 801ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	dbeb      	blt.n	801ac5a <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ac82:	4ba5      	ldr	r3, [pc, #660]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ac84:	2200      	movs	r2, #0
 801ac86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801ac8a:	68bb      	ldr	r3, [r7, #8]
 801ac8c:	689b      	ldr	r3, [r3, #8]
 801ac8e:	4aa2      	ldr	r2, [pc, #648]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ac90:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ac92:	68bb      	ldr	r3, [r7, #8]
 801ac94:	781a      	ldrb	r2, [r3, #0]
 801ac96:	4ba0      	ldr	r3, [pc, #640]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ac98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	685b      	ldr	r3, [r3, #4]
 801aca0:	4618      	mov	r0, r3
 801aca2:	f001 f9f1 	bl	801c088 <SUBGRF_GetFskBandwidthRegValue>
 801aca6:	4603      	mov	r3, r0
 801aca8:	461a      	mov	r2, r3
 801acaa:	4b9b      	ldr	r3, [pc, #620]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801acac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	68db      	ldr	r3, [r3, #12]
 801acb4:	4a98      	ldr	r2, [pc, #608]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801acb6:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801acb8:	4b97      	ldr	r3, [pc, #604]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801acba:	2200      	movs	r2, #0
 801acbc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801acbe:	68bb      	ldr	r3, [r7, #8]
 801acc0:	691b      	ldr	r3, [r3, #16]
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	00db      	lsls	r3, r3, #3
 801acc6:	b29a      	uxth	r2, r3
 801acc8:	4b93      	ldr	r3, [pc, #588]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801acca:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801accc:	4b92      	ldr	r3, [pc, #584]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801acce:	2204      	movs	r2, #4
 801acd0:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801acd2:	68bb      	ldr	r3, [r7, #8]
 801acd4:	7d1b      	ldrb	r3, [r3, #20]
 801acd6:	00db      	lsls	r3, r3, #3
 801acd8:	b2da      	uxtb	r2, r3
 801acda:	4b8f      	ldr	r3, [pc, #572]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801acdc:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801acde:	4b8e      	ldr	r3, [pc, #568]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ace0:	2200      	movs	r2, #0
 801ace2:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801acea:	2b02      	cmp	r3, #2
 801acec:	d003      	beq.n	801acf6 <RadioSetTxGenericConfig+0xfe>
 801acee:	68bb      	ldr	r3, [r7, #8]
 801acf0:	7f9b      	ldrb	r3, [r3, #30]
 801acf2:	2b02      	cmp	r3, #2
 801acf4:	d12a      	bne.n	801ad4c <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801acf6:	68bb      	ldr	r3, [r7, #8]
 801acf8:	7fdb      	ldrb	r3, [r3, #31]
 801acfa:	2bf1      	cmp	r3, #241	; 0xf1
 801acfc:	d00a      	beq.n	801ad14 <RadioSetTxGenericConfig+0x11c>
 801acfe:	68bb      	ldr	r3, [r7, #8]
 801ad00:	7fdb      	ldrb	r3, [r3, #31]
 801ad02:	2bf2      	cmp	r3, #242	; 0xf2
 801ad04:	d006      	beq.n	801ad14 <RadioSetTxGenericConfig+0x11c>
 801ad06:	68bb      	ldr	r3, [r7, #8]
 801ad08:	7fdb      	ldrb	r3, [r3, #31]
 801ad0a:	2b01      	cmp	r3, #1
 801ad0c:	d002      	beq.n	801ad14 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801ad0e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad12:	e0fc      	b.n	801af0e <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 801ad14:	2301      	movs	r3, #1
 801ad16:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 801ad18:	68bb      	ldr	r3, [r7, #8]
 801ad1a:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ad1c:	4b7f      	ldr	r3, [pc, #508]	; (801af1c <RadioSetTxGenericConfig+0x324>)
 801ad1e:	6819      	ldr	r1, [r3, #0]
 801ad20:	f107 0310 	add.w	r3, r7, #16
 801ad24:	4a7e      	ldr	r2, [pc, #504]	; (801af20 <RadioSetTxGenericConfig+0x328>)
 801ad26:	4618      	mov	r0, r3
 801ad28:	f001 fa6e 	bl	801c208 <RFW_Init>
 801ad2c:	4603      	mov	r3, r0
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d002      	beq.n	801ad38 <RadioSetTxGenericConfig+0x140>
              return -1;
 801ad32:	f04f 33ff 	mov.w	r3, #4294967295
 801ad36:	e0ea      	b.n	801af0e <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ad38:	4b77      	ldr	r3, [pc, #476]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ad3a:	2200      	movs	r2, #0
 801ad3c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801ad3e:	4b76      	ldr	r3, [pc, #472]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ad40:	2201      	movs	r2, #1
 801ad42:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ad44:	4b74      	ldr	r3, [pc, #464]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ad46:	2200      	movs	r2, #0
 801ad48:	755a      	strb	r2, [r3, #21]
        {
 801ad4a:	e00c      	b.n	801ad66 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ad4c:	68bb      	ldr	r3, [r7, #8]
 801ad4e:	7fda      	ldrb	r2, [r3, #31]
 801ad50:	4b71      	ldr	r3, [pc, #452]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ad52:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801ad5a:	4b6f      	ldr	r3, [pc, #444]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ad5c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801ad5e:	68bb      	ldr	r3, [r7, #8]
 801ad60:	7f9a      	ldrb	r2, [r3, #30]
 801ad62:	4b6d      	ldr	r3, [pc, #436]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ad64:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801ad66:	f7ff f8f0 	bl	8019f4a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ad6a:	2000      	movs	r0, #0
 801ad6c:	f7fe fa82 	bl	8019274 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad70:	486c      	ldr	r0, [pc, #432]	; (801af24 <RadioSetTxGenericConfig+0x32c>)
 801ad72:	f000 fd65 	bl	801b840 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ad76:	486c      	ldr	r0, [pc, #432]	; (801af28 <RadioSetTxGenericConfig+0x330>)
 801ad78:	f000 fe34 	bl	801b9e4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ad7c:	f107 031c 	add.w	r3, r7, #28
 801ad80:	4618      	mov	r0, r3
 801ad82:	f000 f964 	bl	801b04e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801ad86:	68bb      	ldr	r3, [r7, #8]
 801ad88:	8b9b      	ldrh	r3, [r3, #28]
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f000 f9ae 	bl	801b0ec <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801ad90:	68bb      	ldr	r3, [r7, #8]
 801ad92:	8c1b      	ldrh	r3, [r3, #32]
 801ad94:	4618      	mov	r0, r3
 801ad96:	f000 f989 	bl	801b0ac <SUBGRF_SetCrcPolynomial>
        break;
 801ad9a:	e0a4      	b.n	801aee6 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ad9c:	4b5e      	ldr	r3, [pc, #376]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ad9e:	2201      	movs	r2, #1
 801ada0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801ada4:	68bb      	ldr	r3, [r7, #8]
 801ada6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801adaa:	4b5b      	ldr	r3, [pc, #364]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801adac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801adb0:	68bb      	ldr	r3, [r7, #8]
 801adb2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801adb6:	4b58      	ldr	r3, [pc, #352]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801adb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801adbc:	68bb      	ldr	r3, [r7, #8]
 801adbe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801adc2:	4b55      	ldr	r3, [pc, #340]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801adc4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801adce:	2b02      	cmp	r3, #2
 801add0:	d010      	beq.n	801adf4 <RadioSetTxGenericConfig+0x1fc>
 801add2:	2b02      	cmp	r3, #2
 801add4:	dc22      	bgt.n	801ae1c <RadioSetTxGenericConfig+0x224>
 801add6:	2b00      	cmp	r3, #0
 801add8:	d002      	beq.n	801ade0 <RadioSetTxGenericConfig+0x1e8>
 801adda:	2b01      	cmp	r3, #1
 801addc:	d005      	beq.n	801adea <RadioSetTxGenericConfig+0x1f2>
            break;
 801adde:	e01d      	b.n	801ae1c <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ade0:	4b4d      	ldr	r3, [pc, #308]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ade2:	2200      	movs	r2, #0
 801ade4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ade8:	e019      	b.n	801ae1e <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801adea:	4b4b      	ldr	r3, [pc, #300]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801adec:	2201      	movs	r2, #1
 801adee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801adf2:	e014      	b.n	801ae1e <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801adf4:	68bb      	ldr	r3, [r7, #8]
 801adf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801adfa:	2b0b      	cmp	r3, #11
 801adfc:	d004      	beq.n	801ae08 <RadioSetTxGenericConfig+0x210>
 801adfe:	68bb      	ldr	r3, [r7, #8]
 801ae00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ae04:	2b0c      	cmp	r3, #12
 801ae06:	d104      	bne.n	801ae12 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ae08:	4b43      	ldr	r3, [pc, #268]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ae0a:	2201      	movs	r2, #1
 801ae0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ae10:	e005      	b.n	801ae1e <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ae12:	4b41      	ldr	r3, [pc, #260]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ae14:	2200      	movs	r2, #0
 801ae16:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ae1a:	e000      	b.n	801ae1e <RadioSetTxGenericConfig+0x226>
            break;
 801ae1c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ae1e:	4b3e      	ldr	r3, [pc, #248]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ae20:	2201      	movs	r2, #1
 801ae22:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801ae28:	4b3b      	ldr	r3, [pc, #236]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ae2a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801ae32:	4b39      	ldr	r3, [pc, #228]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ae34:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801ae3c:	4b36      	ldr	r3, [pc, #216]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ae3e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ae42:	68bb      	ldr	r3, [r7, #8]
 801ae44:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801ae48:	4b33      	ldr	r3, [pc, #204]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ae4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801ae4e:	f7ff f87c 	bl	8019f4a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ae52:	2001      	movs	r0, #1
 801ae54:	f7fe fa0e 	bl	8019274 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ae58:	4832      	ldr	r0, [pc, #200]	; (801af24 <RadioSetTxGenericConfig+0x32c>)
 801ae5a:	f000 fcf1 	bl	801b840 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae5e:	4832      	ldr	r0, [pc, #200]	; (801af28 <RadioSetTxGenericConfig+0x330>)
 801ae60:	f000 fdc0 	bl	801b9e4 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801ae64:	4b2c      	ldr	r3, [pc, #176]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801ae66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ae6a:	2b06      	cmp	r3, #6
 801ae6c:	d10d      	bne.n	801ae8a <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801ae6e:	f640 0089 	movw	r0, #2185	; 0x889
 801ae72:	f000 ff13 	bl	801bc9c <SUBGRF_ReadRegister>
 801ae76:	4603      	mov	r3, r0
 801ae78:	f023 0304 	bic.w	r3, r3, #4
 801ae7c:	b2db      	uxtb	r3, r3
 801ae7e:	4619      	mov	r1, r3
 801ae80:	f640 0089 	movw	r0, #2185	; 0x889
 801ae84:	f000 fef6 	bl	801bc74 <SUBGRF_WriteRegister>
        break;
 801ae88:	e02d      	b.n	801aee6 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801ae8a:	f640 0089 	movw	r0, #2185	; 0x889
 801ae8e:	f000 ff05 	bl	801bc9c <SUBGRF_ReadRegister>
 801ae92:	4603      	mov	r3, r0
 801ae94:	f043 0304 	orr.w	r3, r3, #4
 801ae98:	b2db      	uxtb	r3, r3
 801ae9a:	4619      	mov	r1, r3
 801ae9c:	f640 0089 	movw	r0, #2185	; 0x889
 801aea0:	f000 fee8 	bl	801bc74 <SUBGRF_WriteRegister>
        break;
 801aea4:	e01f      	b.n	801aee6 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801aea6:	68bb      	ldr	r3, [r7, #8]
 801aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d004      	beq.n	801aeb8 <RadioSetTxGenericConfig+0x2c0>
 801aeae:	68bb      	ldr	r3, [r7, #8]
 801aeb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aeb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801aeb6:	d902      	bls.n	801aebe <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801aeb8:	f04f 33ff 	mov.w	r3, #4294967295
 801aebc:	e027      	b.n	801af0e <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 801aebe:	2002      	movs	r0, #2
 801aec0:	f7fe f9d8 	bl	8019274 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801aec4:	4b14      	ldr	r3, [pc, #80]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801aec6:	2202      	movs	r2, #2
 801aec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801aecc:	68bb      	ldr	r3, [r7, #8]
 801aece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aed0:	4a11      	ldr	r2, [pc, #68]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801aed2:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801aed4:	4b10      	ldr	r3, [pc, #64]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801aed6:	2216      	movs	r2, #22
 801aed8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aedc:	4811      	ldr	r0, [pc, #68]	; (801af24 <RadioSetTxGenericConfig+0x32c>)
 801aede:	f000 fcaf 	bl	801b840 <SUBGRF_SetModulationParams>
        break;
 801aee2:	e000      	b.n	801aee6 <RadioSetTxGenericConfig+0x2ee>
        break;
 801aee4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801aee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aeea:	4618      	mov	r0, r3
 801aeec:	f000 ffde 	bl	801beac <SUBGRF_SetRfTxPower>
 801aef0:	4603      	mov	r3, r0
 801aef2:	461a      	mov	r2, r3
 801aef4:	4b08      	ldr	r3, [pc, #32]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801aef6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801aefa:	4b07      	ldr	r3, [pc, #28]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801aefc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801af00:	4618      	mov	r0, r3
 801af02:	f001 f9a2 	bl	801c24a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801af06:	4a04      	ldr	r2, [pc, #16]	; (801af18 <RadioSetTxGenericConfig+0x320>)
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	6053      	str	r3, [r2, #4]
    return 0;
 801af0c:	2300      	movs	r3, #0
}
 801af0e:	4618      	mov	r0, r3
 801af10:	3728      	adds	r7, #40	; 0x28
 801af12:	46bd      	mov	sp, r7
 801af14:	bd80      	pop	{r7, pc}
 801af16:	bf00      	nop
 801af18:	20003df4 	.word	0x20003df4
 801af1c:	20003df0 	.word	0x20003df0
 801af20:	20003e4c 	.word	0x20003e4c
 801af24:	20003e2c 	.word	0x20003e2c
 801af28:	20003e02 	.word	0x20003e02

0801af2c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b084      	sub	sp, #16
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d002      	beq.n	801af40 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801af3a:	4a1a      	ldr	r2, [pc, #104]	; (801afa4 <SUBGRF_Init+0x78>)
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801af40:	f7e6 fce6 	bl	8001910 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801af44:	2002      	movs	r0, #2
 801af46:	f001 f87d 	bl	801c044 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801af4a:	4b17      	ldr	r3, [pc, #92]	; (801afa8 <SUBGRF_Init+0x7c>)
 801af4c:	2200      	movs	r2, #0
 801af4e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801af50:	2000      	movs	r0, #0
 801af52:	f000 f977 	bl	801b244 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801af56:	f7ef fbbd 	bl	800a6d4 <RBI_IsTCXO>
 801af5a:	4603      	mov	r3, r0
 801af5c:	2b01      	cmp	r3, #1
 801af5e:	d10e      	bne.n	801af7e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801af60:	2140      	movs	r1, #64	; 0x40
 801af62:	2001      	movs	r0, #1
 801af64:	f000 fb78 	bl	801b658 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801af68:	2100      	movs	r1, #0
 801af6a:	f640 1011 	movw	r0, #2321	; 0x911
 801af6e:	f000 fe81 	bl	801bc74 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801af72:	237f      	movs	r3, #127	; 0x7f
 801af74:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801af76:	7b38      	ldrb	r0, [r7, #12]
 801af78:	f000 fa85 	bl	801b486 <SUBGRF_Calibrate>
 801af7c:	e009      	b.n	801af92 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801af7e:	2120      	movs	r1, #32
 801af80:	f640 1011 	movw	r0, #2321	; 0x911
 801af84:	f000 fe76 	bl	801bc74 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801af88:	2120      	movs	r1, #32
 801af8a:	f640 1012 	movw	r0, #2322	; 0x912
 801af8e:	f000 fe71 	bl	801bc74 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801af92:	f7ef fb83 	bl	800a69c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801af96:	4b05      	ldr	r3, [pc, #20]	; (801afac <SUBGRF_Init+0x80>)
 801af98:	2201      	movs	r2, #1
 801af9a:	701a      	strb	r2, [r3, #0]
}
 801af9c:	bf00      	nop
 801af9e:	3710      	adds	r7, #16
 801afa0:	46bd      	mov	sp, r7
 801afa2:	bd80      	pop	{r7, pc}
 801afa4:	20003e88 	.word	0x20003e88
 801afa8:	20003e84 	.word	0x20003e84
 801afac:	20003e7c 	.word	0x20003e7c

0801afb0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801afb0:	b480      	push	{r7}
 801afb2:	af00      	add	r7, sp, #0
    return OperatingMode;
 801afb4:	4b02      	ldr	r3, [pc, #8]	; (801afc0 <SUBGRF_GetOperatingMode+0x10>)
 801afb6:	781b      	ldrb	r3, [r3, #0]
}
 801afb8:	4618      	mov	r0, r3
 801afba:	46bd      	mov	sp, r7
 801afbc:	bc80      	pop	{r7}
 801afbe:	4770      	bx	lr
 801afc0:	20003e7c 	.word	0x20003e7c

0801afc4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b082      	sub	sp, #8
 801afc8:	af00      	add	r7, sp, #0
 801afca:	6078      	str	r0, [r7, #4]
 801afcc:	460b      	mov	r3, r1
 801afce:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801afd0:	78fb      	ldrb	r3, [r7, #3]
 801afd2:	461a      	mov	r2, r3
 801afd4:	6879      	ldr	r1, [r7, #4]
 801afd6:	2000      	movs	r0, #0
 801afd8:	f000 feb8 	bl	801bd4c <SUBGRF_WriteBuffer>
}
 801afdc:	bf00      	nop
 801afde:	3708      	adds	r7, #8
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bd80      	pop	{r7, pc}

0801afe4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b086      	sub	sp, #24
 801afe8:	af00      	add	r7, sp, #0
 801afea:	60f8      	str	r0, [r7, #12]
 801afec:	60b9      	str	r1, [r7, #8]
 801afee:	4613      	mov	r3, r2
 801aff0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801aff2:	2300      	movs	r3, #0
 801aff4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801aff6:	f107 0317 	add.w	r3, r7, #23
 801affa:	4619      	mov	r1, r3
 801affc:	68b8      	ldr	r0, [r7, #8]
 801affe:	f000 fdbb 	bl	801bb78 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b002:	68bb      	ldr	r3, [r7, #8]
 801b004:	781b      	ldrb	r3, [r3, #0]
 801b006:	79fa      	ldrb	r2, [r7, #7]
 801b008:	429a      	cmp	r2, r3
 801b00a:	d201      	bcs.n	801b010 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b00c:	2301      	movs	r3, #1
 801b00e:	e007      	b.n	801b020 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b010:	7df8      	ldrb	r0, [r7, #23]
 801b012:	68bb      	ldr	r3, [r7, #8]
 801b014:	781b      	ldrb	r3, [r3, #0]
 801b016:	461a      	mov	r2, r3
 801b018:	68f9      	ldr	r1, [r7, #12]
 801b01a:	f000 feb9 	bl	801bd90 <SUBGRF_ReadBuffer>

    return 0;
 801b01e:	2300      	movs	r3, #0
}
 801b020:	4618      	mov	r0, r3
 801b022:	3718      	adds	r7, #24
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}

0801b028 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b028:	b580      	push	{r7, lr}
 801b02a:	b084      	sub	sp, #16
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	60f8      	str	r0, [r7, #12]
 801b030:	460b      	mov	r3, r1
 801b032:	607a      	str	r2, [r7, #4]
 801b034:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b036:	7afb      	ldrb	r3, [r7, #11]
 801b038:	4619      	mov	r1, r3
 801b03a:	68f8      	ldr	r0, [r7, #12]
 801b03c:	f7ff ffc2 	bl	801afc4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b040:	6878      	ldr	r0, [r7, #4]
 801b042:	f000 f91b 	bl	801b27c <SUBGRF_SetTx>
}
 801b046:	bf00      	nop
 801b048:	3710      	adds	r7, #16
 801b04a:	46bd      	mov	sp, r7
 801b04c:	bd80      	pop	{r7, pc}

0801b04e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b04e:	b580      	push	{r7, lr}
 801b050:	b082      	sub	sp, #8
 801b052:	af00      	add	r7, sp, #0
 801b054:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b056:	2208      	movs	r2, #8
 801b058:	6879      	ldr	r1, [r7, #4]
 801b05a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801b05e:	f000 fe31 	bl	801bcc4 <SUBGRF_WriteRegisters>
    return 0;
 801b062:	2300      	movs	r3, #0
}
 801b064:	4618      	mov	r0, r3
 801b066:	3708      	adds	r7, #8
 801b068:	46bd      	mov	sp, r7
 801b06a:	bd80      	pop	{r7, pc}

0801b06c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b06c:	b580      	push	{r7, lr}
 801b06e:	b084      	sub	sp, #16
 801b070:	af00      	add	r7, sp, #0
 801b072:	4603      	mov	r3, r0
 801b074:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b076:	88fb      	ldrh	r3, [r7, #6]
 801b078:	0a1b      	lsrs	r3, r3, #8
 801b07a:	b29b      	uxth	r3, r3
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b080:	88fb      	ldrh	r3, [r7, #6]
 801b082:	b2db      	uxtb	r3, r3
 801b084:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b086:	f000 fb6b 	bl	801b760 <SUBGRF_GetPacketType>
 801b08a:	4603      	mov	r3, r0
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d108      	bne.n	801b0a2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b090:	f107 030c 	add.w	r3, r7, #12
 801b094:	2202      	movs	r2, #2
 801b096:	4619      	mov	r1, r3
 801b098:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801b09c:	f000 fe12 	bl	801bcc4 <SUBGRF_WriteRegisters>
            break;
 801b0a0:	e000      	b.n	801b0a4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b0a2:	bf00      	nop
    }
}
 801b0a4:	bf00      	nop
 801b0a6:	3710      	adds	r7, #16
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	bd80      	pop	{r7, pc}

0801b0ac <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b084      	sub	sp, #16
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801b0b6:	88fb      	ldrh	r3, [r7, #6]
 801b0b8:	0a1b      	lsrs	r3, r3, #8
 801b0ba:	b29b      	uxth	r3, r3
 801b0bc:	b2db      	uxtb	r3, r3
 801b0be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801b0c0:	88fb      	ldrh	r3, [r7, #6]
 801b0c2:	b2db      	uxtb	r3, r3
 801b0c4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b0c6:	f000 fb4b 	bl	801b760 <SUBGRF_GetPacketType>
 801b0ca:	4603      	mov	r3, r0
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d108      	bne.n	801b0e2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801b0d0:	f107 030c 	add.w	r3, r7, #12
 801b0d4:	2202      	movs	r2, #2
 801b0d6:	4619      	mov	r1, r3
 801b0d8:	f240 60be 	movw	r0, #1726	; 0x6be
 801b0dc:	f000 fdf2 	bl	801bcc4 <SUBGRF_WriteRegisters>
            break;
 801b0e0:	e000      	b.n	801b0e4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801b0e2:	bf00      	nop
    }
}
 801b0e4:	bf00      	nop
 801b0e6:	3710      	adds	r7, #16
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bd80      	pop	{r7, pc}

0801b0ec <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801b0ec:	b580      	push	{r7, lr}
 801b0ee:	b084      	sub	sp, #16
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801b0fa:	f000 fb31 	bl	801b760 <SUBGRF_GetPacketType>
 801b0fe:	4603      	mov	r3, r0
 801b100:	2b00      	cmp	r3, #0
 801b102:	d121      	bne.n	801b148 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801b104:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b108:	f000 fdc8 	bl	801bc9c <SUBGRF_ReadRegister>
 801b10c:	4603      	mov	r3, r0
 801b10e:	f023 0301 	bic.w	r3, r3, #1
 801b112:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801b114:	88fb      	ldrh	r3, [r7, #6]
 801b116:	0a1b      	lsrs	r3, r3, #8
 801b118:	b29b      	uxth	r3, r3
 801b11a:	b25b      	sxtb	r3, r3
 801b11c:	f003 0301 	and.w	r3, r3, #1
 801b120:	b25a      	sxtb	r2, r3
 801b122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b126:	4313      	orrs	r3, r2
 801b128:	b25b      	sxtb	r3, r3
 801b12a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801b12c:	7bfb      	ldrb	r3, [r7, #15]
 801b12e:	4619      	mov	r1, r3
 801b130:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b134:	f000 fd9e 	bl	801bc74 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801b138:	88fb      	ldrh	r3, [r7, #6]
 801b13a:	b2db      	uxtb	r3, r3
 801b13c:	4619      	mov	r1, r3
 801b13e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801b142:	f000 fd97 	bl	801bc74 <SUBGRF_WriteRegister>
            break;
 801b146:	e000      	b.n	801b14a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801b148:	bf00      	nop
    }
}
 801b14a:	bf00      	nop
 801b14c:	3710      	adds	r7, #16
 801b14e:	46bd      	mov	sp, r7
 801b150:	bd80      	pop	{r7, pc}

0801b152 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801b152:	b580      	push	{r7, lr}
 801b154:	b082      	sub	sp, #8
 801b156:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801b158:	2300      	movs	r3, #0
 801b15a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801b15c:	2300      	movs	r3, #0
 801b15e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801b160:	2300      	movs	r3, #0
 801b162:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801b164:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b168:	f000 fd98 	bl	801bc9c <SUBGRF_ReadRegister>
 801b16c:	4603      	mov	r3, r0
 801b16e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b170:	79fb      	ldrb	r3, [r7, #7]
 801b172:	f023 0301 	bic.w	r3, r3, #1
 801b176:	b2db      	uxtb	r3, r3
 801b178:	4619      	mov	r1, r3
 801b17a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b17e:	f000 fd79 	bl	801bc74 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b182:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b186:	f000 fd89 	bl	801bc9c <SUBGRF_ReadRegister>
 801b18a:	4603      	mov	r3, r0
 801b18c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b18e:	79bb      	ldrb	r3, [r7, #6]
 801b190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b194:	b2db      	uxtb	r3, r3
 801b196:	4619      	mov	r1, r3
 801b198:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b19c:	f000 fd6a 	bl	801bc74 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b1a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b1a4:	f000 f88a 	bl	801b2bc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b1a8:	463b      	mov	r3, r7
 801b1aa:	2204      	movs	r2, #4
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	f640 0019 	movw	r0, #2073	; 0x819
 801b1b2:	f000 fda9 	bl	801bd08 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b1b6:	2000      	movs	r0, #0
 801b1b8:	f000 f844 	bl	801b244 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b1bc:	79fb      	ldrb	r3, [r7, #7]
 801b1be:	4619      	mov	r1, r3
 801b1c0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b1c4:	f000 fd56 	bl	801bc74 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b1c8:	79bb      	ldrb	r3, [r7, #6]
 801b1ca:	4619      	mov	r1, r3
 801b1cc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b1d0:	f000 fd50 	bl	801bc74 <SUBGRF_WriteRegister>

    return number;
 801b1d4:	683b      	ldr	r3, [r7, #0]
}
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	3708      	adds	r7, #8
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	bd80      	pop	{r7, pc}
	...

0801b1e0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b1e0:	b580      	push	{r7, lr}
 801b1e2:	b084      	sub	sp, #16
 801b1e4:	af00      	add	r7, sp, #0
 801b1e6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b1e8:	2000      	movs	r0, #0
 801b1ea:	f7ef fa5e 	bl	800a6aa <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b1ee:	2002      	movs	r0, #2
 801b1f0:	f000 ff28 	bl	801c044 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b1f4:	793b      	ldrb	r3, [r7, #4]
 801b1f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b1fa:	b2db      	uxtb	r3, r3
 801b1fc:	009b      	lsls	r3, r3, #2
 801b1fe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b200:	793b      	ldrb	r3, [r7, #4]
 801b202:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b206:	b2db      	uxtb	r3, r3
 801b208:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b20a:	b25b      	sxtb	r3, r3
 801b20c:	4313      	orrs	r3, r2
 801b20e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b210:	793b      	ldrb	r3, [r7, #4]
 801b212:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b216:	b2db      	uxtb	r3, r3
 801b218:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b21a:	4313      	orrs	r3, r2
 801b21c:	b25b      	sxtb	r3, r3
 801b21e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b220:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b222:	f107 030f 	add.w	r3, r7, #15
 801b226:	2201      	movs	r2, #1
 801b228:	4619      	mov	r1, r3
 801b22a:	2084      	movs	r0, #132	; 0x84
 801b22c:	f000 fdd2 	bl	801bdd4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b230:	4b03      	ldr	r3, [pc, #12]	; (801b240 <SUBGRF_SetSleep+0x60>)
 801b232:	2200      	movs	r2, #0
 801b234:	701a      	strb	r2, [r3, #0]
}
 801b236:	bf00      	nop
 801b238:	3710      	adds	r7, #16
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bd80      	pop	{r7, pc}
 801b23e:	bf00      	nop
 801b240:	20003e7c 	.word	0x20003e7c

0801b244 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b244:	b580      	push	{r7, lr}
 801b246:	b082      	sub	sp, #8
 801b248:	af00      	add	r7, sp, #0
 801b24a:	4603      	mov	r3, r0
 801b24c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b24e:	1dfb      	adds	r3, r7, #7
 801b250:	2201      	movs	r2, #1
 801b252:	4619      	mov	r1, r3
 801b254:	2080      	movs	r0, #128	; 0x80
 801b256:	f000 fdbd 	bl	801bdd4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b25a:	79fb      	ldrb	r3, [r7, #7]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d103      	bne.n	801b268 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b260:	4b05      	ldr	r3, [pc, #20]	; (801b278 <SUBGRF_SetStandby+0x34>)
 801b262:	2201      	movs	r2, #1
 801b264:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b266:	e002      	b.n	801b26e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b268:	4b03      	ldr	r3, [pc, #12]	; (801b278 <SUBGRF_SetStandby+0x34>)
 801b26a:	2202      	movs	r2, #2
 801b26c:	701a      	strb	r2, [r3, #0]
}
 801b26e:	bf00      	nop
 801b270:	3708      	adds	r7, #8
 801b272:	46bd      	mov	sp, r7
 801b274:	bd80      	pop	{r7, pc}
 801b276:	bf00      	nop
 801b278:	20003e7c 	.word	0x20003e7c

0801b27c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b084      	sub	sp, #16
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b284:	4b0c      	ldr	r3, [pc, #48]	; (801b2b8 <SUBGRF_SetTx+0x3c>)
 801b286:	2204      	movs	r2, #4
 801b288:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	0c1b      	lsrs	r3, r3, #16
 801b28e:	b2db      	uxtb	r3, r3
 801b290:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	0a1b      	lsrs	r3, r3, #8
 801b296:	b2db      	uxtb	r3, r3
 801b298:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	b2db      	uxtb	r3, r3
 801b29e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b2a0:	f107 030c 	add.w	r3, r7, #12
 801b2a4:	2203      	movs	r2, #3
 801b2a6:	4619      	mov	r1, r3
 801b2a8:	2083      	movs	r0, #131	; 0x83
 801b2aa:	f000 fd93 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b2ae:	bf00      	nop
 801b2b0:	3710      	adds	r7, #16
 801b2b2:	46bd      	mov	sp, r7
 801b2b4:	bd80      	pop	{r7, pc}
 801b2b6:	bf00      	nop
 801b2b8:	20003e7c 	.word	0x20003e7c

0801b2bc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b084      	sub	sp, #16
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b2c4:	4b0c      	ldr	r3, [pc, #48]	; (801b2f8 <SUBGRF_SetRx+0x3c>)
 801b2c6:	2205      	movs	r2, #5
 801b2c8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	0c1b      	lsrs	r3, r3, #16
 801b2ce:	b2db      	uxtb	r3, r3
 801b2d0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	0a1b      	lsrs	r3, r3, #8
 801b2d6:	b2db      	uxtb	r3, r3
 801b2d8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	b2db      	uxtb	r3, r3
 801b2de:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b2e0:	f107 030c 	add.w	r3, r7, #12
 801b2e4:	2203      	movs	r2, #3
 801b2e6:	4619      	mov	r1, r3
 801b2e8:	2082      	movs	r0, #130	; 0x82
 801b2ea:	f000 fd73 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b2ee:	bf00      	nop
 801b2f0:	3710      	adds	r7, #16
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	bd80      	pop	{r7, pc}
 801b2f6:	bf00      	nop
 801b2f8:	20003e7c 	.word	0x20003e7c

0801b2fc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b084      	sub	sp, #16
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b304:	4b0e      	ldr	r3, [pc, #56]	; (801b340 <SUBGRF_SetRxBoosted+0x44>)
 801b306:	2205      	movs	r2, #5
 801b308:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b30a:	2197      	movs	r1, #151	; 0x97
 801b30c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b310:	f000 fcb0 	bl	801bc74 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	0c1b      	lsrs	r3, r3, #16
 801b318:	b2db      	uxtb	r3, r3
 801b31a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	0a1b      	lsrs	r3, r3, #8
 801b320:	b2db      	uxtb	r3, r3
 801b322:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	b2db      	uxtb	r3, r3
 801b328:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b32a:	f107 030c 	add.w	r3, r7, #12
 801b32e:	2203      	movs	r2, #3
 801b330:	4619      	mov	r1, r3
 801b332:	2082      	movs	r0, #130	; 0x82
 801b334:	f000 fd4e 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b338:	bf00      	nop
 801b33a:	3710      	adds	r7, #16
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	20003e7c 	.word	0x20003e7c

0801b344 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b084      	sub	sp, #16
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
 801b34c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	0c1b      	lsrs	r3, r3, #16
 801b352:	b2db      	uxtb	r3, r3
 801b354:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	0a1b      	lsrs	r3, r3, #8
 801b35a:	b2db      	uxtb	r3, r3
 801b35c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	b2db      	uxtb	r3, r3
 801b362:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b364:	683b      	ldr	r3, [r7, #0]
 801b366:	0c1b      	lsrs	r3, r3, #16
 801b368:	b2db      	uxtb	r3, r3
 801b36a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b36c:	683b      	ldr	r3, [r7, #0]
 801b36e:	0a1b      	lsrs	r3, r3, #8
 801b370:	b2db      	uxtb	r3, r3
 801b372:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b374:	683b      	ldr	r3, [r7, #0]
 801b376:	b2db      	uxtb	r3, r3
 801b378:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b37a:	f107 0308 	add.w	r3, r7, #8
 801b37e:	2206      	movs	r2, #6
 801b380:	4619      	mov	r1, r3
 801b382:	2094      	movs	r0, #148	; 0x94
 801b384:	f000 fd26 	bl	801bdd4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b388:	4b03      	ldr	r3, [pc, #12]	; (801b398 <SUBGRF_SetRxDutyCycle+0x54>)
 801b38a:	2206      	movs	r2, #6
 801b38c:	701a      	strb	r2, [r3, #0]
}
 801b38e:	bf00      	nop
 801b390:	3710      	adds	r7, #16
 801b392:	46bd      	mov	sp, r7
 801b394:	bd80      	pop	{r7, pc}
 801b396:	bf00      	nop
 801b398:	20003e7c 	.word	0x20003e7c

0801b39c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b3a0:	2200      	movs	r2, #0
 801b3a2:	2100      	movs	r1, #0
 801b3a4:	20c5      	movs	r0, #197	; 0xc5
 801b3a6:	f000 fd15 	bl	801bdd4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b3aa:	4b02      	ldr	r3, [pc, #8]	; (801b3b4 <SUBGRF_SetCad+0x18>)
 801b3ac:	2207      	movs	r2, #7
 801b3ae:	701a      	strb	r2, [r3, #0]
}
 801b3b0:	bf00      	nop
 801b3b2:	bd80      	pop	{r7, pc}
 801b3b4:	20003e7c 	.word	0x20003e7c

0801b3b8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b3bc:	2200      	movs	r2, #0
 801b3be:	2100      	movs	r1, #0
 801b3c0:	20d1      	movs	r0, #209	; 0xd1
 801b3c2:	f000 fd07 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b3c6:	bf00      	nop
 801b3c8:	bd80      	pop	{r7, pc}

0801b3ca <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b3ca:	b580      	push	{r7, lr}
 801b3cc:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	2100      	movs	r1, #0
 801b3d2:	20d2      	movs	r0, #210	; 0xd2
 801b3d4:	f000 fcfe 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b3d8:	bf00      	nop
 801b3da:	bd80      	pop	{r7, pc}

0801b3dc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b082      	sub	sp, #8
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b3e6:	1dfb      	adds	r3, r7, #7
 801b3e8:	2201      	movs	r2, #1
 801b3ea:	4619      	mov	r1, r3
 801b3ec:	209f      	movs	r0, #159	; 0x9f
 801b3ee:	f000 fcf1 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b3f2:	bf00      	nop
 801b3f4:	3708      	adds	r7, #8
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	bd80      	pop	{r7, pc}

0801b3fa <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b3fa:	b580      	push	{r7, lr}
 801b3fc:	b084      	sub	sp, #16
 801b3fe:	af00      	add	r7, sp, #0
 801b400:	4603      	mov	r3, r0
 801b402:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b404:	1dfb      	adds	r3, r7, #7
 801b406:	2201      	movs	r2, #1
 801b408:	4619      	mov	r1, r3
 801b40a:	20a0      	movs	r0, #160	; 0xa0
 801b40c:	f000 fce2 	bl	801bdd4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b410:	79fb      	ldrb	r3, [r7, #7]
 801b412:	2b3f      	cmp	r3, #63	; 0x3f
 801b414:	d91c      	bls.n	801b450 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b416:	79fb      	ldrb	r3, [r7, #7]
 801b418:	085b      	lsrs	r3, r3, #1
 801b41a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b41c:	2300      	movs	r3, #0
 801b41e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b420:	2300      	movs	r3, #0
 801b422:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b424:	e005      	b.n	801b432 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b426:	7bfb      	ldrb	r3, [r7, #15]
 801b428:	089b      	lsrs	r3, r3, #2
 801b42a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b42c:	7bbb      	ldrb	r3, [r7, #14]
 801b42e:	3301      	adds	r3, #1
 801b430:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b432:	7bfb      	ldrb	r3, [r7, #15]
 801b434:	2b1f      	cmp	r3, #31
 801b436:	d8f6      	bhi.n	801b426 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b438:	7bfb      	ldrb	r3, [r7, #15]
 801b43a:	00db      	lsls	r3, r3, #3
 801b43c:	b2da      	uxtb	r2, r3
 801b43e:	7bbb      	ldrb	r3, [r7, #14]
 801b440:	4413      	add	r3, r2
 801b442:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b444:	7b7b      	ldrb	r3, [r7, #13]
 801b446:	4619      	mov	r1, r3
 801b448:	f240 7006 	movw	r0, #1798	; 0x706
 801b44c:	f000 fc12 	bl	801bc74 <SUBGRF_WriteRegister>
    }
}
 801b450:	bf00      	nop
 801b452:	3710      	adds	r7, #16
 801b454:	46bd      	mov	sp, r7
 801b456:	bd80      	pop	{r7, pc}

0801b458 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b082      	sub	sp, #8
 801b45c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b45e:	f7ef f940 	bl	800a6e2 <RBI_IsDCDC>
 801b462:	4603      	mov	r3, r0
 801b464:	2b01      	cmp	r3, #1
 801b466:	d102      	bne.n	801b46e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b468:	2301      	movs	r3, #1
 801b46a:	71fb      	strb	r3, [r7, #7]
 801b46c:	e001      	b.n	801b472 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b46e:	2300      	movs	r3, #0
 801b470:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b472:	1dfb      	adds	r3, r7, #7
 801b474:	2201      	movs	r2, #1
 801b476:	4619      	mov	r1, r3
 801b478:	2096      	movs	r0, #150	; 0x96
 801b47a:	f000 fcab 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b47e:	bf00      	nop
 801b480:	3708      	adds	r7, #8
 801b482:	46bd      	mov	sp, r7
 801b484:	bd80      	pop	{r7, pc}

0801b486 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b486:	b580      	push	{r7, lr}
 801b488:	b084      	sub	sp, #16
 801b48a:	af00      	add	r7, sp, #0
 801b48c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b48e:	793b      	ldrb	r3, [r7, #4]
 801b490:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b494:	b2db      	uxtb	r3, r3
 801b496:	019b      	lsls	r3, r3, #6
 801b498:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b49a:	793b      	ldrb	r3, [r7, #4]
 801b49c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b4a0:	b2db      	uxtb	r3, r3
 801b4a2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b4a4:	b25b      	sxtb	r3, r3
 801b4a6:	4313      	orrs	r3, r2
 801b4a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b4aa:	793b      	ldrb	r3, [r7, #4]
 801b4ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b4b0:	b2db      	uxtb	r3, r3
 801b4b2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b4b4:	b25b      	sxtb	r3, r3
 801b4b6:	4313      	orrs	r3, r2
 801b4b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b4ba:	793b      	ldrb	r3, [r7, #4]
 801b4bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b4c0:	b2db      	uxtb	r3, r3
 801b4c2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b4c4:	b25b      	sxtb	r3, r3
 801b4c6:	4313      	orrs	r3, r2
 801b4c8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b4ca:	793b      	ldrb	r3, [r7, #4]
 801b4cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b4d0:	b2db      	uxtb	r3, r3
 801b4d2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b4d4:	b25b      	sxtb	r3, r3
 801b4d6:	4313      	orrs	r3, r2
 801b4d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b4da:	793b      	ldrb	r3, [r7, #4]
 801b4dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b4e0:	b2db      	uxtb	r3, r3
 801b4e2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b4e4:	b25b      	sxtb	r3, r3
 801b4e6:	4313      	orrs	r3, r2
 801b4e8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b4ea:	793b      	ldrb	r3, [r7, #4]
 801b4ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b4f0:	b2db      	uxtb	r3, r3
 801b4f2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b4f4:	4313      	orrs	r3, r2
 801b4f6:	b25b      	sxtb	r3, r3
 801b4f8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b4fa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b4fc:	f107 030f 	add.w	r3, r7, #15
 801b500:	2201      	movs	r2, #1
 801b502:	4619      	mov	r1, r3
 801b504:	2089      	movs	r0, #137	; 0x89
 801b506:	f000 fc65 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b50a:	bf00      	nop
 801b50c:	3710      	adds	r7, #16
 801b50e:	46bd      	mov	sp, r7
 801b510:	bd80      	pop	{r7, pc}
	...

0801b514 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b514:	b580      	push	{r7, lr}
 801b516:	b084      	sub	sp, #16
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	4a1b      	ldr	r2, [pc, #108]	; (801b58c <SUBGRF_CalibrateImage+0x78>)
 801b520:	4293      	cmp	r3, r2
 801b522:	d904      	bls.n	801b52e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b524:	23e1      	movs	r3, #225	; 0xe1
 801b526:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b528:	23e9      	movs	r3, #233	; 0xe9
 801b52a:	737b      	strb	r3, [r7, #13]
 801b52c:	e022      	b.n	801b574 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	4a17      	ldr	r2, [pc, #92]	; (801b590 <SUBGRF_CalibrateImage+0x7c>)
 801b532:	4293      	cmp	r3, r2
 801b534:	d904      	bls.n	801b540 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b536:	23d7      	movs	r3, #215	; 0xd7
 801b538:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b53a:	23db      	movs	r3, #219	; 0xdb
 801b53c:	737b      	strb	r3, [r7, #13]
 801b53e:	e019      	b.n	801b574 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	4a14      	ldr	r2, [pc, #80]	; (801b594 <SUBGRF_CalibrateImage+0x80>)
 801b544:	4293      	cmp	r3, r2
 801b546:	d904      	bls.n	801b552 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b548:	23c1      	movs	r3, #193	; 0xc1
 801b54a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b54c:	23c5      	movs	r3, #197	; 0xc5
 801b54e:	737b      	strb	r3, [r7, #13]
 801b550:	e010      	b.n	801b574 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	4a10      	ldr	r2, [pc, #64]	; (801b598 <SUBGRF_CalibrateImage+0x84>)
 801b556:	4293      	cmp	r3, r2
 801b558:	d904      	bls.n	801b564 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b55a:	2375      	movs	r3, #117	; 0x75
 801b55c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b55e:	2381      	movs	r3, #129	; 0x81
 801b560:	737b      	strb	r3, [r7, #13]
 801b562:	e007      	b.n	801b574 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	4a0d      	ldr	r2, [pc, #52]	; (801b59c <SUBGRF_CalibrateImage+0x88>)
 801b568:	4293      	cmp	r3, r2
 801b56a:	d903      	bls.n	801b574 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801b56c:	236b      	movs	r3, #107	; 0x6b
 801b56e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b570:	236f      	movs	r3, #111	; 0x6f
 801b572:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b574:	f107 030c 	add.w	r3, r7, #12
 801b578:	2202      	movs	r2, #2
 801b57a:	4619      	mov	r1, r3
 801b57c:	2098      	movs	r0, #152	; 0x98
 801b57e:	f000 fc29 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b582:	bf00      	nop
 801b584:	3710      	adds	r7, #16
 801b586:	46bd      	mov	sp, r7
 801b588:	bd80      	pop	{r7, pc}
 801b58a:	bf00      	nop
 801b58c:	35a4e900 	.word	0x35a4e900
 801b590:	32a9f880 	.word	0x32a9f880
 801b594:	2de54480 	.word	0x2de54480
 801b598:	1b6b0b00 	.word	0x1b6b0b00
 801b59c:	1954fc40 	.word	0x1954fc40

0801b5a0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b5a0:	b590      	push	{r4, r7, lr}
 801b5a2:	b085      	sub	sp, #20
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	4604      	mov	r4, r0
 801b5a8:	4608      	mov	r0, r1
 801b5aa:	4611      	mov	r1, r2
 801b5ac:	461a      	mov	r2, r3
 801b5ae:	4623      	mov	r3, r4
 801b5b0:	71fb      	strb	r3, [r7, #7]
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	71bb      	strb	r3, [r7, #6]
 801b5b6:	460b      	mov	r3, r1
 801b5b8:	717b      	strb	r3, [r7, #5]
 801b5ba:	4613      	mov	r3, r2
 801b5bc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b5be:	79fb      	ldrb	r3, [r7, #7]
 801b5c0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b5c2:	79bb      	ldrb	r3, [r7, #6]
 801b5c4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b5c6:	797b      	ldrb	r3, [r7, #5]
 801b5c8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b5ca:	793b      	ldrb	r3, [r7, #4]
 801b5cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b5ce:	f107 030c 	add.w	r3, r7, #12
 801b5d2:	2204      	movs	r2, #4
 801b5d4:	4619      	mov	r1, r3
 801b5d6:	2095      	movs	r0, #149	; 0x95
 801b5d8:	f000 fbfc 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b5dc:	bf00      	nop
 801b5de:	3714      	adds	r7, #20
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bd90      	pop	{r4, r7, pc}

0801b5e4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b5e4:	b590      	push	{r4, r7, lr}
 801b5e6:	b085      	sub	sp, #20
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	4604      	mov	r4, r0
 801b5ec:	4608      	mov	r0, r1
 801b5ee:	4611      	mov	r1, r2
 801b5f0:	461a      	mov	r2, r3
 801b5f2:	4623      	mov	r3, r4
 801b5f4:	80fb      	strh	r3, [r7, #6]
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	80bb      	strh	r3, [r7, #4]
 801b5fa:	460b      	mov	r3, r1
 801b5fc:	807b      	strh	r3, [r7, #2]
 801b5fe:	4613      	mov	r3, r2
 801b600:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b602:	88fb      	ldrh	r3, [r7, #6]
 801b604:	0a1b      	lsrs	r3, r3, #8
 801b606:	b29b      	uxth	r3, r3
 801b608:	b2db      	uxtb	r3, r3
 801b60a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b60c:	88fb      	ldrh	r3, [r7, #6]
 801b60e:	b2db      	uxtb	r3, r3
 801b610:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b612:	88bb      	ldrh	r3, [r7, #4]
 801b614:	0a1b      	lsrs	r3, r3, #8
 801b616:	b29b      	uxth	r3, r3
 801b618:	b2db      	uxtb	r3, r3
 801b61a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b61c:	88bb      	ldrh	r3, [r7, #4]
 801b61e:	b2db      	uxtb	r3, r3
 801b620:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b622:	887b      	ldrh	r3, [r7, #2]
 801b624:	0a1b      	lsrs	r3, r3, #8
 801b626:	b29b      	uxth	r3, r3
 801b628:	b2db      	uxtb	r3, r3
 801b62a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b62c:	887b      	ldrh	r3, [r7, #2]
 801b62e:	b2db      	uxtb	r3, r3
 801b630:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b632:	883b      	ldrh	r3, [r7, #0]
 801b634:	0a1b      	lsrs	r3, r3, #8
 801b636:	b29b      	uxth	r3, r3
 801b638:	b2db      	uxtb	r3, r3
 801b63a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b63c:	883b      	ldrh	r3, [r7, #0]
 801b63e:	b2db      	uxtb	r3, r3
 801b640:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b642:	f107 0308 	add.w	r3, r7, #8
 801b646:	2208      	movs	r2, #8
 801b648:	4619      	mov	r1, r3
 801b64a:	2008      	movs	r0, #8
 801b64c:	f000 fbc2 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b650:	bf00      	nop
 801b652:	3714      	adds	r7, #20
 801b654:	46bd      	mov	sp, r7
 801b656:	bd90      	pop	{r4, r7, pc}

0801b658 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b658:	b580      	push	{r7, lr}
 801b65a:	b084      	sub	sp, #16
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	4603      	mov	r3, r0
 801b660:	6039      	str	r1, [r7, #0]
 801b662:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b664:	79fb      	ldrb	r3, [r7, #7]
 801b666:	f003 0307 	and.w	r3, r3, #7
 801b66a:	b2db      	uxtb	r3, r3
 801b66c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	0c1b      	lsrs	r3, r3, #16
 801b672:	b2db      	uxtb	r3, r3
 801b674:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b676:	683b      	ldr	r3, [r7, #0]
 801b678:	0a1b      	lsrs	r3, r3, #8
 801b67a:	b2db      	uxtb	r3, r3
 801b67c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b67e:	683b      	ldr	r3, [r7, #0]
 801b680:	b2db      	uxtb	r3, r3
 801b682:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b684:	f107 030c 	add.w	r3, r7, #12
 801b688:	2204      	movs	r2, #4
 801b68a:	4619      	mov	r1, r3
 801b68c:	2097      	movs	r0, #151	; 0x97
 801b68e:	f000 fba1 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b692:	bf00      	nop
 801b694:	3710      	adds	r7, #16
 801b696:	46bd      	mov	sp, r7
 801b698:	bd80      	pop	{r7, pc}
	...

0801b69c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b69c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b6a0:	b084      	sub	sp, #16
 801b6a2:	af00      	add	r7, sp, #0
 801b6a4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b6aa:	4b1d      	ldr	r3, [pc, #116]	; (801b720 <SUBGRF_SetRfFrequency+0x84>)
 801b6ac:	781b      	ldrb	r3, [r3, #0]
 801b6ae:	f083 0301 	eor.w	r3, r3, #1
 801b6b2:	b2db      	uxtb	r3, r3
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d005      	beq.n	801b6c4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b6b8:	6878      	ldr	r0, [r7, #4]
 801b6ba:	f7ff ff2b 	bl	801b514 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b6be:	4b18      	ldr	r3, [pc, #96]	; (801b720 <SUBGRF_SetRfFrequency+0x84>)
 801b6c0:	2201      	movs	r2, #1
 801b6c2:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	2200      	movs	r2, #0
 801b6c8:	461c      	mov	r4, r3
 801b6ca:	4615      	mov	r5, r2
 801b6cc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b6d0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b6d4:	4a13      	ldr	r2, [pc, #76]	; (801b724 <SUBGRF_SetRfFrequency+0x88>)
 801b6d6:	f04f 0300 	mov.w	r3, #0
 801b6da:	4640      	mov	r0, r8
 801b6dc:	4649      	mov	r1, r9
 801b6de:	f7e5 fa41 	bl	8000b64 <__aeabi_uldivmod>
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	460b      	mov	r3, r1
 801b6e6:	4613      	mov	r3, r2
 801b6e8:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	0e1b      	lsrs	r3, r3, #24
 801b6ee:	b2db      	uxtb	r3, r3
 801b6f0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	0c1b      	lsrs	r3, r3, #16
 801b6f6:	b2db      	uxtb	r3, r3
 801b6f8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	0a1b      	lsrs	r3, r3, #8
 801b6fe:	b2db      	uxtb	r3, r3
 801b700:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	b2db      	uxtb	r3, r3
 801b706:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b708:	f107 0308 	add.w	r3, r7, #8
 801b70c:	2204      	movs	r2, #4
 801b70e:	4619      	mov	r1, r3
 801b710:	2086      	movs	r0, #134	; 0x86
 801b712:	f000 fb5f 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b716:	bf00      	nop
 801b718:	3710      	adds	r7, #16
 801b71a:	46bd      	mov	sp, r7
 801b71c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b720:	20003e84 	.word	0x20003e84
 801b724:	01e84800 	.word	0x01e84800

0801b728 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b728:	b580      	push	{r7, lr}
 801b72a:	b082      	sub	sp, #8
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	4603      	mov	r3, r0
 801b730:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b732:	79fa      	ldrb	r2, [r7, #7]
 801b734:	4b09      	ldr	r3, [pc, #36]	; (801b75c <SUBGRF_SetPacketType+0x34>)
 801b736:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b738:	79fb      	ldrb	r3, [r7, #7]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d104      	bne.n	801b748 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b73e:	2100      	movs	r1, #0
 801b740:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b744:	f000 fa96 	bl	801bc74 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b748:	1dfb      	adds	r3, r7, #7
 801b74a:	2201      	movs	r2, #1
 801b74c:	4619      	mov	r1, r3
 801b74e:	208a      	movs	r0, #138	; 0x8a
 801b750:	f000 fb40 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b754:	bf00      	nop
 801b756:	3708      	adds	r7, #8
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd80      	pop	{r7, pc}
 801b75c:	20003e7d 	.word	0x20003e7d

0801b760 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b760:	b480      	push	{r7}
 801b762:	af00      	add	r7, sp, #0
    return PacketType;
 801b764:	4b02      	ldr	r3, [pc, #8]	; (801b770 <SUBGRF_GetPacketType+0x10>)
 801b766:	781b      	ldrb	r3, [r3, #0]
}
 801b768:	4618      	mov	r0, r3
 801b76a:	46bd      	mov	sp, r7
 801b76c:	bc80      	pop	{r7}
 801b76e:	4770      	bx	lr
 801b770:	20003e7d 	.word	0x20003e7d

0801b774 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 801b774:	b580      	push	{r7, lr}
 801b776:	b084      	sub	sp, #16
 801b778:	af00      	add	r7, sp, #0
 801b77a:	4603      	mov	r3, r0
 801b77c:	71fb      	strb	r3, [r7, #7]
 801b77e:	460b      	mov	r3, r1
 801b780:	71bb      	strb	r3, [r7, #6]
 801b782:	4613      	mov	r3, r2
 801b784:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 801b786:	79fb      	ldrb	r3, [r7, #7]
 801b788:	2b01      	cmp	r3, #1
 801b78a:	d124      	bne.n	801b7d6 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 801b78c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b790:	2b0f      	cmp	r3, #15
 801b792:	d106      	bne.n	801b7a2 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 801b794:	2301      	movs	r3, #1
 801b796:	2201      	movs	r2, #1
 801b798:	2100      	movs	r1, #0
 801b79a:	2006      	movs	r0, #6
 801b79c:	f7ff ff00 	bl	801b5a0 <SUBGRF_SetPaConfig>
 801b7a0:	e005      	b.n	801b7ae <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 801b7a2:	2301      	movs	r3, #1
 801b7a4:	2201      	movs	r2, #1
 801b7a6:	2100      	movs	r1, #0
 801b7a8:	2004      	movs	r0, #4
 801b7aa:	f7ff fef9 	bl	801b5a0 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 801b7ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b7b2:	2b0d      	cmp	r3, #13
 801b7b4:	dd02      	ble.n	801b7bc <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 801b7b6:	230e      	movs	r3, #14
 801b7b8:	71bb      	strb	r3, [r7, #6]
 801b7ba:	e006      	b.n	801b7ca <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 801b7bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b7c0:	f113 0f11 	cmn.w	r3, #17
 801b7c4:	da01      	bge.n	801b7ca <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 801b7c6:	23ef      	movs	r3, #239	; 0xef
 801b7c8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 801b7ca:	2118      	movs	r1, #24
 801b7cc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b7d0:	f000 fa50 	bl	801bc74 <SUBGRF_WriteRegister>
 801b7d4:	e025      	b.n	801b822 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 801b7d6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b7da:	f000 fa5f 	bl	801bc9c <SUBGRF_ReadRegister>
 801b7de:	4603      	mov	r3, r0
 801b7e0:	f043 031e 	orr.w	r3, r3, #30
 801b7e4:	b2db      	uxtb	r3, r3
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b7ec:	f000 fa42 	bl	801bc74 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801b7f0:	2301      	movs	r3, #1
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	2107      	movs	r1, #7
 801b7f6:	2004      	movs	r0, #4
 801b7f8:	f7ff fed2 	bl	801b5a0 <SUBGRF_SetPaConfig>
        if( power > 22 )
 801b7fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b800:	2b16      	cmp	r3, #22
 801b802:	dd02      	ble.n	801b80a <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 801b804:	2316      	movs	r3, #22
 801b806:	71bb      	strb	r3, [r7, #6]
 801b808:	e006      	b.n	801b818 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 801b80a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b80e:	f113 0f09 	cmn.w	r3, #9
 801b812:	da01      	bge.n	801b818 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 801b814:	23f7      	movs	r3, #247	; 0xf7
 801b816:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801b818:	2138      	movs	r1, #56	; 0x38
 801b81a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b81e:	f000 fa29 	bl	801bc74 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b822:	79bb      	ldrb	r3, [r7, #6]
 801b824:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 801b826:	797b      	ldrb	r3, [r7, #5]
 801b828:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 801b82a:	f107 030c 	add.w	r3, r7, #12
 801b82e:	2202      	movs	r2, #2
 801b830:	4619      	mov	r1, r3
 801b832:	208e      	movs	r0, #142	; 0x8e
 801b834:	f000 face 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801b838:	bf00      	nop
 801b83a:	3710      	adds	r7, #16
 801b83c:	46bd      	mov	sp, r7
 801b83e:	bd80      	pop	{r7, pc}

0801b840 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b844:	b086      	sub	sp, #24
 801b846:	af00      	add	r7, sp, #0
 801b848:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b84a:	2300      	movs	r3, #0
 801b84c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b84e:	4a61      	ldr	r2, [pc, #388]	; (801b9d4 <SUBGRF_SetModulationParams+0x194>)
 801b850:	f107 0308 	add.w	r3, r7, #8
 801b854:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b858:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	781a      	ldrb	r2, [r3, #0]
 801b860:	4b5d      	ldr	r3, [pc, #372]	; (801b9d8 <SUBGRF_SetModulationParams+0x198>)
 801b862:	781b      	ldrb	r3, [r3, #0]
 801b864:	429a      	cmp	r2, r3
 801b866:	d004      	beq.n	801b872 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	781b      	ldrb	r3, [r3, #0]
 801b86c:	4618      	mov	r0, r3
 801b86e:	f7ff ff5b 	bl	801b728 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	781b      	ldrb	r3, [r3, #0]
 801b876:	2b03      	cmp	r3, #3
 801b878:	f200 80a5 	bhi.w	801b9c6 <SUBGRF_SetModulationParams+0x186>
 801b87c:	a201      	add	r2, pc, #4	; (adr r2, 801b884 <SUBGRF_SetModulationParams+0x44>)
 801b87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b882:	bf00      	nop
 801b884:	0801b895 	.word	0x0801b895
 801b888:	0801b955 	.word	0x0801b955
 801b88c:	0801b917 	.word	0x0801b917
 801b890:	0801b983 	.word	0x0801b983
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b894:	2308      	movs	r3, #8
 801b896:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	685b      	ldr	r3, [r3, #4]
 801b89c:	4a4f      	ldr	r2, [pc, #316]	; (801b9dc <SUBGRF_SetModulationParams+0x19c>)
 801b89e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8a2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b8a4:	697b      	ldr	r3, [r7, #20]
 801b8a6:	0c1b      	lsrs	r3, r3, #16
 801b8a8:	b2db      	uxtb	r3, r3
 801b8aa:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b8ac:	697b      	ldr	r3, [r7, #20]
 801b8ae:	0a1b      	lsrs	r3, r3, #8
 801b8b0:	b2db      	uxtb	r3, r3
 801b8b2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b8b4:	697b      	ldr	r3, [r7, #20]
 801b8b6:	b2db      	uxtb	r3, r3
 801b8b8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	7b1b      	ldrb	r3, [r3, #12]
 801b8be:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	7b5b      	ldrb	r3, [r3, #13]
 801b8c4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	689b      	ldr	r3, [r3, #8]
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	461c      	mov	r4, r3
 801b8ce:	4615      	mov	r5, r2
 801b8d0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b8d4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b8d8:	4a41      	ldr	r2, [pc, #260]	; (801b9e0 <SUBGRF_SetModulationParams+0x1a0>)
 801b8da:	f04f 0300 	mov.w	r3, #0
 801b8de:	4640      	mov	r0, r8
 801b8e0:	4649      	mov	r1, r9
 801b8e2:	f7e5 f93f 	bl	8000b64 <__aeabi_uldivmod>
 801b8e6:	4602      	mov	r2, r0
 801b8e8:	460b      	mov	r3, r1
 801b8ea:	4613      	mov	r3, r2
 801b8ec:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b8ee:	697b      	ldr	r3, [r7, #20]
 801b8f0:	0c1b      	lsrs	r3, r3, #16
 801b8f2:	b2db      	uxtb	r3, r3
 801b8f4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b8f6:	697b      	ldr	r3, [r7, #20]
 801b8f8:	0a1b      	lsrs	r3, r3, #8
 801b8fa:	b2db      	uxtb	r3, r3
 801b8fc:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b8fe:	697b      	ldr	r3, [r7, #20]
 801b900:	b2db      	uxtb	r3, r3
 801b902:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b904:	7cfb      	ldrb	r3, [r7, #19]
 801b906:	b29a      	uxth	r2, r3
 801b908:	f107 0308 	add.w	r3, r7, #8
 801b90c:	4619      	mov	r1, r3
 801b90e:	208b      	movs	r0, #139	; 0x8b
 801b910:	f000 fa60 	bl	801bdd4 <SUBGRF_WriteCommand>
        break;
 801b914:	e058      	b.n	801b9c8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b916:	2304      	movs	r3, #4
 801b918:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	691b      	ldr	r3, [r3, #16]
 801b91e:	4a2f      	ldr	r2, [pc, #188]	; (801b9dc <SUBGRF_SetModulationParams+0x19c>)
 801b920:	fbb2 f3f3 	udiv	r3, r2, r3
 801b924:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b926:	697b      	ldr	r3, [r7, #20]
 801b928:	0c1b      	lsrs	r3, r3, #16
 801b92a:	b2db      	uxtb	r3, r3
 801b92c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b92e:	697b      	ldr	r3, [r7, #20]
 801b930:	0a1b      	lsrs	r3, r3, #8
 801b932:	b2db      	uxtb	r3, r3
 801b934:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b936:	697b      	ldr	r3, [r7, #20]
 801b938:	b2db      	uxtb	r3, r3
 801b93a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	7d1b      	ldrb	r3, [r3, #20]
 801b940:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b942:	7cfb      	ldrb	r3, [r7, #19]
 801b944:	b29a      	uxth	r2, r3
 801b946:	f107 0308 	add.w	r3, r7, #8
 801b94a:	4619      	mov	r1, r3
 801b94c:	208b      	movs	r0, #139	; 0x8b
 801b94e:	f000 fa41 	bl	801bdd4 <SUBGRF_WriteCommand>
        break;
 801b952:	e039      	b.n	801b9c8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b954:	2304      	movs	r3, #4
 801b956:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	7e1b      	ldrb	r3, [r3, #24]
 801b95c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	7e5b      	ldrb	r3, [r3, #25]
 801b962:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	7e9b      	ldrb	r3, [r3, #26]
 801b968:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	7edb      	ldrb	r3, [r3, #27]
 801b96e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b970:	7cfb      	ldrb	r3, [r7, #19]
 801b972:	b29a      	uxth	r2, r3
 801b974:	f107 0308 	add.w	r3, r7, #8
 801b978:	4619      	mov	r1, r3
 801b97a:	208b      	movs	r0, #139	; 0x8b
 801b97c:	f000 fa2a 	bl	801bdd4 <SUBGRF_WriteCommand>

        break;
 801b980:	e022      	b.n	801b9c8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b982:	2305      	movs	r3, #5
 801b984:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	685b      	ldr	r3, [r3, #4]
 801b98a:	4a14      	ldr	r2, [pc, #80]	; (801b9dc <SUBGRF_SetModulationParams+0x19c>)
 801b98c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b990:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b992:	697b      	ldr	r3, [r7, #20]
 801b994:	0c1b      	lsrs	r3, r3, #16
 801b996:	b2db      	uxtb	r3, r3
 801b998:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b99a:	697b      	ldr	r3, [r7, #20]
 801b99c:	0a1b      	lsrs	r3, r3, #8
 801b99e:	b2db      	uxtb	r3, r3
 801b9a0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b9a2:	697b      	ldr	r3, [r7, #20]
 801b9a4:	b2db      	uxtb	r3, r3
 801b9a6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	7b1b      	ldrb	r3, [r3, #12]
 801b9ac:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	7b5b      	ldrb	r3, [r3, #13]
 801b9b2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b9b4:	7cfb      	ldrb	r3, [r7, #19]
 801b9b6:	b29a      	uxth	r2, r3
 801b9b8:	f107 0308 	add.w	r3, r7, #8
 801b9bc:	4619      	mov	r1, r3
 801b9be:	208b      	movs	r0, #139	; 0x8b
 801b9c0:	f000 fa08 	bl	801bdd4 <SUBGRF_WriteCommand>
        break;
 801b9c4:	e000      	b.n	801b9c8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b9c6:	bf00      	nop
    }
}
 801b9c8:	bf00      	nop
 801b9ca:	3718      	adds	r7, #24
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b9d2:	bf00      	nop
 801b9d4:	0801e1e8 	.word	0x0801e1e8
 801b9d8:	20003e7d 	.word	0x20003e7d
 801b9dc:	3d090000 	.word	0x3d090000
 801b9e0:	01e84800 	.word	0x01e84800

0801b9e4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b9e4:	b580      	push	{r7, lr}
 801b9e6:	b086      	sub	sp, #24
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b9f0:	4a48      	ldr	r2, [pc, #288]	; (801bb14 <SUBGRF_SetPacketParams+0x130>)
 801b9f2:	f107 030c 	add.w	r3, r7, #12
 801b9f6:	ca07      	ldmia	r2, {r0, r1, r2}
 801b9f8:	c303      	stmia	r3!, {r0, r1}
 801b9fa:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	781a      	ldrb	r2, [r3, #0]
 801ba00:	4b45      	ldr	r3, [pc, #276]	; (801bb18 <SUBGRF_SetPacketParams+0x134>)
 801ba02:	781b      	ldrb	r3, [r3, #0]
 801ba04:	429a      	cmp	r2, r3
 801ba06:	d004      	beq.n	801ba12 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	781b      	ldrb	r3, [r3, #0]
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	f7ff fe8b 	bl	801b728 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	781b      	ldrb	r3, [r3, #0]
 801ba16:	2b03      	cmp	r3, #3
 801ba18:	d878      	bhi.n	801bb0c <SUBGRF_SetPacketParams+0x128>
 801ba1a:	a201      	add	r2, pc, #4	; (adr r2, 801ba20 <SUBGRF_SetPacketParams+0x3c>)
 801ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba20:	0801ba31 	.word	0x0801ba31
 801ba24:	0801bac1 	.word	0x0801bac1
 801ba28:	0801bab5 	.word	0x0801bab5
 801ba2c:	0801ba31 	.word	0x0801ba31
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	7a5b      	ldrb	r3, [r3, #9]
 801ba34:	2bf1      	cmp	r3, #241	; 0xf1
 801ba36:	d10a      	bne.n	801ba4e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801ba38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ba3c:	f7ff fb16 	bl	801b06c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801ba40:	f248 0005 	movw	r0, #32773	; 0x8005
 801ba44:	f7ff fb32 	bl	801b0ac <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801ba48:	2302      	movs	r3, #2
 801ba4a:	75bb      	strb	r3, [r7, #22]
 801ba4c:	e011      	b.n	801ba72 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	7a5b      	ldrb	r3, [r3, #9]
 801ba52:	2bf2      	cmp	r3, #242	; 0xf2
 801ba54:	d10a      	bne.n	801ba6c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801ba56:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801ba5a:	f7ff fb07 	bl	801b06c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801ba5e:	f241 0021 	movw	r0, #4129	; 0x1021
 801ba62:	f7ff fb23 	bl	801b0ac <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801ba66:	2306      	movs	r3, #6
 801ba68:	75bb      	strb	r3, [r7, #22]
 801ba6a:	e002      	b.n	801ba72 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	7a5b      	ldrb	r3, [r3, #9]
 801ba70:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801ba72:	2309      	movs	r3, #9
 801ba74:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	885b      	ldrh	r3, [r3, #2]
 801ba7a:	0a1b      	lsrs	r3, r3, #8
 801ba7c:	b29b      	uxth	r3, r3
 801ba7e:	b2db      	uxtb	r3, r3
 801ba80:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	885b      	ldrh	r3, [r3, #2]
 801ba86:	b2db      	uxtb	r3, r3
 801ba88:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	791b      	ldrb	r3, [r3, #4]
 801ba8e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	795b      	ldrb	r3, [r3, #5]
 801ba94:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	799b      	ldrb	r3, [r3, #6]
 801ba9a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	79db      	ldrb	r3, [r3, #7]
 801baa0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	7a1b      	ldrb	r3, [r3, #8]
 801baa6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801baa8:	7dbb      	ldrb	r3, [r7, #22]
 801baaa:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	7a9b      	ldrb	r3, [r3, #10]
 801bab0:	753b      	strb	r3, [r7, #20]
        break;
 801bab2:	e022      	b.n	801bafa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801bab4:	2301      	movs	r3, #1
 801bab6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	7b1b      	ldrb	r3, [r3, #12]
 801babc:	733b      	strb	r3, [r7, #12]
        break;
 801babe:	e01c      	b.n	801bafa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801bac0:	2306      	movs	r3, #6
 801bac2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	89db      	ldrh	r3, [r3, #14]
 801bac8:	0a1b      	lsrs	r3, r3, #8
 801baca:	b29b      	uxth	r3, r3
 801bacc:	b2db      	uxtb	r3, r3
 801bace:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	89db      	ldrh	r3, [r3, #14]
 801bad4:	b2db      	uxtb	r3, r3
 801bad6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	7c1a      	ldrb	r2, [r3, #16]
 801badc:	4b0f      	ldr	r3, [pc, #60]	; (801bb1c <SUBGRF_SetPacketParams+0x138>)
 801bade:	4611      	mov	r1, r2
 801bae0:	7019      	strb	r1, [r3, #0]
 801bae2:	4613      	mov	r3, r2
 801bae4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	7c5b      	ldrb	r3, [r3, #17]
 801baea:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	7c9b      	ldrb	r3, [r3, #18]
 801baf0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	7cdb      	ldrb	r3, [r3, #19]
 801baf6:	747b      	strb	r3, [r7, #17]
        break;
 801baf8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801bafa:	7dfb      	ldrb	r3, [r7, #23]
 801bafc:	b29a      	uxth	r2, r3
 801bafe:	f107 030c 	add.w	r3, r7, #12
 801bb02:	4619      	mov	r1, r3
 801bb04:	208c      	movs	r0, #140	; 0x8c
 801bb06:	f000 f965 	bl	801bdd4 <SUBGRF_WriteCommand>
 801bb0a:	e000      	b.n	801bb0e <SUBGRF_SetPacketParams+0x12a>
        return;
 801bb0c:	bf00      	nop
}
 801bb0e:	3718      	adds	r7, #24
 801bb10:	46bd      	mov	sp, r7
 801bb12:	bd80      	pop	{r7, pc}
 801bb14:	0801e1f0 	.word	0x0801e1f0
 801bb18:	20003e7d 	.word	0x20003e7d
 801bb1c:	20003e7e 	.word	0x20003e7e

0801bb20 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b084      	sub	sp, #16
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	4603      	mov	r3, r0
 801bb28:	460a      	mov	r2, r1
 801bb2a:	71fb      	strb	r3, [r7, #7]
 801bb2c:	4613      	mov	r3, r2
 801bb2e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801bb30:	79fb      	ldrb	r3, [r7, #7]
 801bb32:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801bb34:	79bb      	ldrb	r3, [r7, #6]
 801bb36:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801bb38:	f107 030c 	add.w	r3, r7, #12
 801bb3c:	2202      	movs	r2, #2
 801bb3e:	4619      	mov	r1, r3
 801bb40:	208f      	movs	r0, #143	; 0x8f
 801bb42:	f000 f947 	bl	801bdd4 <SUBGRF_WriteCommand>
}
 801bb46:	bf00      	nop
 801bb48:	3710      	adds	r7, #16
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	bd80      	pop	{r7, pc}

0801bb4e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801bb4e:	b580      	push	{r7, lr}
 801bb50:	b082      	sub	sp, #8
 801bb52:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bb54:	2300      	movs	r3, #0
 801bb56:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bb58:	1d3b      	adds	r3, r7, #4
 801bb5a:	2201      	movs	r2, #1
 801bb5c:	4619      	mov	r1, r3
 801bb5e:	2015      	movs	r0, #21
 801bb60:	f000 f95a 	bl	801be18 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bb64:	793b      	ldrb	r3, [r7, #4]
 801bb66:	425b      	negs	r3, r3
 801bb68:	105b      	asrs	r3, r3, #1
 801bb6a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801bb6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bb70:	4618      	mov	r0, r3
 801bb72:	3708      	adds	r7, #8
 801bb74:	46bd      	mov	sp, r7
 801bb76:	bd80      	pop	{r7, pc}

0801bb78 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bb78:	b580      	push	{r7, lr}
 801bb7a:	b084      	sub	sp, #16
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	6078      	str	r0, [r7, #4]
 801bb80:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801bb82:	f107 030c 	add.w	r3, r7, #12
 801bb86:	2202      	movs	r2, #2
 801bb88:	4619      	mov	r1, r3
 801bb8a:	2013      	movs	r0, #19
 801bb8c:	f000 f944 	bl	801be18 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801bb90:	f7ff fde6 	bl	801b760 <SUBGRF_GetPacketType>
 801bb94:	4603      	mov	r3, r0
 801bb96:	2b01      	cmp	r3, #1
 801bb98:	d10d      	bne.n	801bbb6 <SUBGRF_GetRxBufferStatus+0x3e>
 801bb9a:	4b0c      	ldr	r3, [pc, #48]	; (801bbcc <SUBGRF_GetRxBufferStatus+0x54>)
 801bb9c:	781b      	ldrb	r3, [r3, #0]
 801bb9e:	b2db      	uxtb	r3, r3
 801bba0:	2b01      	cmp	r3, #1
 801bba2:	d108      	bne.n	801bbb6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801bba4:	f240 7002 	movw	r0, #1794	; 0x702
 801bba8:	f000 f878 	bl	801bc9c <SUBGRF_ReadRegister>
 801bbac:	4603      	mov	r3, r0
 801bbae:	461a      	mov	r2, r3
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	701a      	strb	r2, [r3, #0]
 801bbb4:	e002      	b.n	801bbbc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801bbb6:	7b3a      	ldrb	r2, [r7, #12]
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801bbbc:	7b7a      	ldrb	r2, [r7, #13]
 801bbbe:	683b      	ldr	r3, [r7, #0]
 801bbc0:	701a      	strb	r2, [r3, #0]
}
 801bbc2:	bf00      	nop
 801bbc4:	3710      	adds	r7, #16
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}
 801bbca:	bf00      	nop
 801bbcc:	20003e7e 	.word	0x20003e7e

0801bbd0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801bbd0:	b580      	push	{r7, lr}
 801bbd2:	b084      	sub	sp, #16
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801bbd8:	f107 030c 	add.w	r3, r7, #12
 801bbdc:	2203      	movs	r2, #3
 801bbde:	4619      	mov	r1, r3
 801bbe0:	2014      	movs	r0, #20
 801bbe2:	f000 f919 	bl	801be18 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801bbe6:	f7ff fdbb 	bl	801b760 <SUBGRF_GetPacketType>
 801bbea:	4603      	mov	r3, r0
 801bbec:	461a      	mov	r2, r3
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	781b      	ldrb	r3, [r3, #0]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d002      	beq.n	801bc00 <SUBGRF_GetPacketStatus+0x30>
 801bbfa:	2b01      	cmp	r3, #1
 801bbfc:	d013      	beq.n	801bc26 <SUBGRF_GetPacketStatus+0x56>
 801bbfe:	e02a      	b.n	801bc56 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801bc00:	7b3a      	ldrb	r2, [r7, #12]
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801bc06:	7b7b      	ldrb	r3, [r7, #13]
 801bc08:	425b      	negs	r3, r3
 801bc0a:	105b      	asrs	r3, r3, #1
 801bc0c:	b25a      	sxtb	r2, r3
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801bc12:	7bbb      	ldrb	r3, [r7, #14]
 801bc14:	425b      	negs	r3, r3
 801bc16:	105b      	asrs	r3, r3, #1
 801bc18:	b25a      	sxtb	r2, r3
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	2200      	movs	r2, #0
 801bc22:	609a      	str	r2, [r3, #8]
            break;
 801bc24:	e020      	b.n	801bc68 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801bc26:	7b3b      	ldrb	r3, [r7, #12]
 801bc28:	425b      	negs	r3, r3
 801bc2a:	105b      	asrs	r3, r3, #1
 801bc2c:	b25a      	sxtb	r2, r3
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801bc32:	7b7b      	ldrb	r3, [r7, #13]
 801bc34:	b25b      	sxtb	r3, r3
 801bc36:	3302      	adds	r3, #2
 801bc38:	109b      	asrs	r3, r3, #2
 801bc3a:	b25a      	sxtb	r2, r3
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801bc40:	7bbb      	ldrb	r3, [r7, #14]
 801bc42:	425b      	negs	r3, r3
 801bc44:	105b      	asrs	r3, r3, #1
 801bc46:	b25a      	sxtb	r2, r3
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801bc4c:	4b08      	ldr	r3, [pc, #32]	; (801bc70 <SUBGRF_GetPacketStatus+0xa0>)
 801bc4e:	681a      	ldr	r2, [r3, #0]
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	611a      	str	r2, [r3, #16]
            break;
 801bc54:	e008      	b.n	801bc68 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801bc56:	2214      	movs	r2, #20
 801bc58:	2100      	movs	r1, #0
 801bc5a:	6878      	ldr	r0, [r7, #4]
 801bc5c:	f000 fe63 	bl	801c926 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	220f      	movs	r2, #15
 801bc64:	701a      	strb	r2, [r3, #0]
            break;
 801bc66:	bf00      	nop
    }
}
 801bc68:	bf00      	nop
 801bc6a:	3710      	adds	r7, #16
 801bc6c:	46bd      	mov	sp, r7
 801bc6e:	bd80      	pop	{r7, pc}
 801bc70:	20003e80 	.word	0x20003e80

0801bc74 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801bc74:	b580      	push	{r7, lr}
 801bc76:	b082      	sub	sp, #8
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	460a      	mov	r2, r1
 801bc7e:	80fb      	strh	r3, [r7, #6]
 801bc80:	4613      	mov	r3, r2
 801bc82:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801bc84:	1d7a      	adds	r2, r7, #5
 801bc86:	88f9      	ldrh	r1, [r7, #6]
 801bc88:	2301      	movs	r3, #1
 801bc8a:	4803      	ldr	r0, [pc, #12]	; (801bc98 <SUBGRF_WriteRegister+0x24>)
 801bc8c:	f7eb fb6a 	bl	8007364 <HAL_SUBGHZ_WriteRegisters>
}
 801bc90:	bf00      	nop
 801bc92:	3708      	adds	r7, #8
 801bc94:	46bd      	mov	sp, r7
 801bc96:	bd80      	pop	{r7, pc}
 801bc98:	20000a78 	.word	0x20000a78

0801bc9c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801bc9c:	b580      	push	{r7, lr}
 801bc9e:	b084      	sub	sp, #16
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	4603      	mov	r3, r0
 801bca4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801bca6:	f107 020f 	add.w	r2, r7, #15
 801bcaa:	88f9      	ldrh	r1, [r7, #6]
 801bcac:	2301      	movs	r3, #1
 801bcae:	4804      	ldr	r0, [pc, #16]	; (801bcc0 <SUBGRF_ReadRegister+0x24>)
 801bcb0:	f7eb fbb7 	bl	8007422 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801bcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	3710      	adds	r7, #16
 801bcba:	46bd      	mov	sp, r7
 801bcbc:	bd80      	pop	{r7, pc}
 801bcbe:	bf00      	nop
 801bcc0:	20000a78 	.word	0x20000a78

0801bcc4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b086      	sub	sp, #24
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	4603      	mov	r3, r0
 801bccc:	6039      	str	r1, [r7, #0]
 801bcce:	80fb      	strh	r3, [r7, #6]
 801bcd0:	4613      	mov	r3, r2
 801bcd2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bcd4:	f3ef 8310 	mrs	r3, PRIMASK
 801bcd8:	60fb      	str	r3, [r7, #12]
  return(result);
 801bcda:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bcdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcde:	b672      	cpsid	i
}
 801bce0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801bce2:	88bb      	ldrh	r3, [r7, #4]
 801bce4:	88f9      	ldrh	r1, [r7, #6]
 801bce6:	683a      	ldr	r2, [r7, #0]
 801bce8:	4806      	ldr	r0, [pc, #24]	; (801bd04 <SUBGRF_WriteRegisters+0x40>)
 801bcea:	f7eb fb3b 	bl	8007364 <HAL_SUBGHZ_WriteRegisters>
 801bcee:	697b      	ldr	r3, [r7, #20]
 801bcf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcf2:	693b      	ldr	r3, [r7, #16]
 801bcf4:	f383 8810 	msr	PRIMASK, r3
}
 801bcf8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bcfa:	bf00      	nop
 801bcfc:	3718      	adds	r7, #24
 801bcfe:	46bd      	mov	sp, r7
 801bd00:	bd80      	pop	{r7, pc}
 801bd02:	bf00      	nop
 801bd04:	20000a78 	.word	0x20000a78

0801bd08 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b086      	sub	sp, #24
 801bd0c:	af00      	add	r7, sp, #0
 801bd0e:	4603      	mov	r3, r0
 801bd10:	6039      	str	r1, [r7, #0]
 801bd12:	80fb      	strh	r3, [r7, #6]
 801bd14:	4613      	mov	r3, r2
 801bd16:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd18:	f3ef 8310 	mrs	r3, PRIMASK
 801bd1c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bd1e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bd20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd22:	b672      	cpsid	i
}
 801bd24:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801bd26:	88bb      	ldrh	r3, [r7, #4]
 801bd28:	88f9      	ldrh	r1, [r7, #6]
 801bd2a:	683a      	ldr	r2, [r7, #0]
 801bd2c:	4806      	ldr	r0, [pc, #24]	; (801bd48 <SUBGRF_ReadRegisters+0x40>)
 801bd2e:	f7eb fb78 	bl	8007422 <HAL_SUBGHZ_ReadRegisters>
 801bd32:	697b      	ldr	r3, [r7, #20]
 801bd34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd36:	693b      	ldr	r3, [r7, #16]
 801bd38:	f383 8810 	msr	PRIMASK, r3
}
 801bd3c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bd3e:	bf00      	nop
 801bd40:	3718      	adds	r7, #24
 801bd42:	46bd      	mov	sp, r7
 801bd44:	bd80      	pop	{r7, pc}
 801bd46:	bf00      	nop
 801bd48:	20000a78 	.word	0x20000a78

0801bd4c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b086      	sub	sp, #24
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	4603      	mov	r3, r0
 801bd54:	6039      	str	r1, [r7, #0]
 801bd56:	71fb      	strb	r3, [r7, #7]
 801bd58:	4613      	mov	r3, r2
 801bd5a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd5c:	f3ef 8310 	mrs	r3, PRIMASK
 801bd60:	60fb      	str	r3, [r7, #12]
  return(result);
 801bd62:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bd64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd66:	b672      	cpsid	i
}
 801bd68:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bd6a:	79bb      	ldrb	r3, [r7, #6]
 801bd6c:	b29b      	uxth	r3, r3
 801bd6e:	79f9      	ldrb	r1, [r7, #7]
 801bd70:	683a      	ldr	r2, [r7, #0]
 801bd72:	4806      	ldr	r0, [pc, #24]	; (801bd8c <SUBGRF_WriteBuffer+0x40>)
 801bd74:	f7eb fc69 	bl	800764a <HAL_SUBGHZ_WriteBuffer>
 801bd78:	697b      	ldr	r3, [r7, #20]
 801bd7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd7c:	693b      	ldr	r3, [r7, #16]
 801bd7e:	f383 8810 	msr	PRIMASK, r3
}
 801bd82:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bd84:	bf00      	nop
 801bd86:	3718      	adds	r7, #24
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd80      	pop	{r7, pc}
 801bd8c:	20000a78 	.word	0x20000a78

0801bd90 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b086      	sub	sp, #24
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	4603      	mov	r3, r0
 801bd98:	6039      	str	r1, [r7, #0]
 801bd9a:	71fb      	strb	r3, [r7, #7]
 801bd9c:	4613      	mov	r3, r2
 801bd9e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bda0:	f3ef 8310 	mrs	r3, PRIMASK
 801bda4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bda6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bda8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdaa:	b672      	cpsid	i
}
 801bdac:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bdae:	79bb      	ldrb	r3, [r7, #6]
 801bdb0:	b29b      	uxth	r3, r3
 801bdb2:	79f9      	ldrb	r1, [r7, #7]
 801bdb4:	683a      	ldr	r2, [r7, #0]
 801bdb6:	4806      	ldr	r0, [pc, #24]	; (801bdd0 <SUBGRF_ReadBuffer+0x40>)
 801bdb8:	f7eb fc9a 	bl	80076f0 <HAL_SUBGHZ_ReadBuffer>
 801bdbc:	697b      	ldr	r3, [r7, #20]
 801bdbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdc0:	693b      	ldr	r3, [r7, #16]
 801bdc2:	f383 8810 	msr	PRIMASK, r3
}
 801bdc6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bdc8:	bf00      	nop
 801bdca:	3718      	adds	r7, #24
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}
 801bdd0:	20000a78 	.word	0x20000a78

0801bdd4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b086      	sub	sp, #24
 801bdd8:	af00      	add	r7, sp, #0
 801bdda:	4603      	mov	r3, r0
 801bddc:	6039      	str	r1, [r7, #0]
 801bdde:	71fb      	strb	r3, [r7, #7]
 801bde0:	4613      	mov	r3, r2
 801bde2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bde4:	f3ef 8310 	mrs	r3, PRIMASK
 801bde8:	60fb      	str	r3, [r7, #12]
  return(result);
 801bdea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bdec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdee:	b672      	cpsid	i
}
 801bdf0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bdf2:	88bb      	ldrh	r3, [r7, #4]
 801bdf4:	79f9      	ldrb	r1, [r7, #7]
 801bdf6:	683a      	ldr	r2, [r7, #0]
 801bdf8:	4806      	ldr	r0, [pc, #24]	; (801be14 <SUBGRF_WriteCommand+0x40>)
 801bdfa:	f7eb fb73 	bl	80074e4 <HAL_SUBGHZ_ExecSetCmd>
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	f383 8810 	msr	PRIMASK, r3
}
 801be08:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801be0a:	bf00      	nop
 801be0c:	3718      	adds	r7, #24
 801be0e:	46bd      	mov	sp, r7
 801be10:	bd80      	pop	{r7, pc}
 801be12:	bf00      	nop
 801be14:	20000a78 	.word	0x20000a78

0801be18 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801be18:	b580      	push	{r7, lr}
 801be1a:	b086      	sub	sp, #24
 801be1c:	af00      	add	r7, sp, #0
 801be1e:	4603      	mov	r3, r0
 801be20:	6039      	str	r1, [r7, #0]
 801be22:	71fb      	strb	r3, [r7, #7]
 801be24:	4613      	mov	r3, r2
 801be26:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be28:	f3ef 8310 	mrs	r3, PRIMASK
 801be2c:	60fb      	str	r3, [r7, #12]
  return(result);
 801be2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801be30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801be32:	b672      	cpsid	i
}
 801be34:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801be36:	88bb      	ldrh	r3, [r7, #4]
 801be38:	79f9      	ldrb	r1, [r7, #7]
 801be3a:	683a      	ldr	r2, [r7, #0]
 801be3c:	4806      	ldr	r0, [pc, #24]	; (801be58 <SUBGRF_ReadCommand+0x40>)
 801be3e:	f7eb fbb0 	bl	80075a2 <HAL_SUBGHZ_ExecGetCmd>
 801be42:	697b      	ldr	r3, [r7, #20]
 801be44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be46:	693b      	ldr	r3, [r7, #16]
 801be48:	f383 8810 	msr	PRIMASK, r3
}
 801be4c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801be4e:	bf00      	nop
 801be50:	3718      	adds	r7, #24
 801be52:	46bd      	mov	sp, r7
 801be54:	bd80      	pop	{r7, pc}
 801be56:	bf00      	nop
 801be58:	20000a78 	.word	0x20000a78

0801be5c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b084      	sub	sp, #16
 801be60:	af00      	add	r7, sp, #0
 801be62:	4603      	mov	r3, r0
 801be64:	460a      	mov	r2, r1
 801be66:	71fb      	strb	r3, [r7, #7]
 801be68:	4613      	mov	r3, r2
 801be6a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801be6c:	2301      	movs	r3, #1
 801be6e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801be70:	79bb      	ldrb	r3, [r7, #6]
 801be72:	2b01      	cmp	r3, #1
 801be74:	d10d      	bne.n	801be92 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801be76:	79fb      	ldrb	r3, [r7, #7]
 801be78:	2b01      	cmp	r3, #1
 801be7a:	d104      	bne.n	801be86 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801be7c:	2302      	movs	r3, #2
 801be7e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801be80:	2004      	movs	r0, #4
 801be82:	f000 f8df 	bl	801c044 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801be86:	79fb      	ldrb	r3, [r7, #7]
 801be88:	2b02      	cmp	r3, #2
 801be8a:	d107      	bne.n	801be9c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801be8c:	2303      	movs	r3, #3
 801be8e:	73fb      	strb	r3, [r7, #15]
 801be90:	e004      	b.n	801be9c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801be92:	79bb      	ldrb	r3, [r7, #6]
 801be94:	2b00      	cmp	r3, #0
 801be96:	d101      	bne.n	801be9c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801be98:	2301      	movs	r3, #1
 801be9a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801be9c:	7bfb      	ldrb	r3, [r7, #15]
 801be9e:	4618      	mov	r0, r3
 801bea0:	f7ee fc03 	bl	800a6aa <RBI_ConfigRFSwitch>
}
 801bea4:	bf00      	nop
 801bea6:	3710      	adds	r7, #16
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bd80      	pop	{r7, pc}

0801beac <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801beac:	b580      	push	{r7, lr}
 801beae:	b084      	sub	sp, #16
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	4603      	mov	r3, r0
 801beb4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801beb6:	2301      	movs	r3, #1
 801beb8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801beba:	f7ee fc04 	bl	800a6c6 <RBI_GetTxConfig>
 801bebe:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801bec0:	68bb      	ldr	r3, [r7, #8]
 801bec2:	2b02      	cmp	r3, #2
 801bec4:	d016      	beq.n	801bef4 <SUBGRF_SetRfTxPower+0x48>
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	2b02      	cmp	r3, #2
 801beca:	dc16      	bgt.n	801befa <SUBGRF_SetRfTxPower+0x4e>
 801becc:	68bb      	ldr	r3, [r7, #8]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d003      	beq.n	801beda <SUBGRF_SetRfTxPower+0x2e>
 801bed2:	68bb      	ldr	r3, [r7, #8]
 801bed4:	2b01      	cmp	r3, #1
 801bed6:	d00a      	beq.n	801beee <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801bed8:	e00f      	b.n	801befa <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801beda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bede:	2b0f      	cmp	r3, #15
 801bee0:	dd02      	ble.n	801bee8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801bee2:	2302      	movs	r3, #2
 801bee4:	73fb      	strb	r3, [r7, #15]
            break;
 801bee6:	e009      	b.n	801befc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801bee8:	2301      	movs	r3, #1
 801beea:	73fb      	strb	r3, [r7, #15]
            break;
 801beec:	e006      	b.n	801befc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801beee:	2301      	movs	r3, #1
 801bef0:	73fb      	strb	r3, [r7, #15]
            break;
 801bef2:	e003      	b.n	801befc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801bef4:	2302      	movs	r3, #2
 801bef6:	73fb      	strb	r3, [r7, #15]
            break;
 801bef8:	e000      	b.n	801befc <SUBGRF_SetRfTxPower+0x50>
            break;
 801befa:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801befc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801bf00:	7bfb      	ldrb	r3, [r7, #15]
 801bf02:	2202      	movs	r2, #2
 801bf04:	4618      	mov	r0, r3
 801bf06:	f7ff fc35 	bl	801b774 <SUBGRF_SetTxParams>

    return paSelect;
 801bf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	3710      	adds	r7, #16
 801bf10:	46bd      	mov	sp, r7
 801bf12:	bd80      	pop	{r7, pc}

0801bf14 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801bf14:	b480      	push	{r7}
 801bf16:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801bf18:	2301      	movs	r3, #1
}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	bc80      	pop	{r7}
 801bf20:	4770      	bx	lr
	...

0801bf24 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b082      	sub	sp, #8
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801bf2c:	4b03      	ldr	r3, [pc, #12]	; (801bf3c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	2001      	movs	r0, #1
 801bf32:	4798      	blx	r3
}
 801bf34:	bf00      	nop
 801bf36:	3708      	adds	r7, #8
 801bf38:	46bd      	mov	sp, r7
 801bf3a:	bd80      	pop	{r7, pc}
 801bf3c:	20003e88 	.word	0x20003e88

0801bf40 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b082      	sub	sp, #8
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801bf48:	4b03      	ldr	r3, [pc, #12]	; (801bf58 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	2002      	movs	r0, #2
 801bf4e:	4798      	blx	r3
}
 801bf50:	bf00      	nop
 801bf52:	3708      	adds	r7, #8
 801bf54:	46bd      	mov	sp, r7
 801bf56:	bd80      	pop	{r7, pc}
 801bf58:	20003e88 	.word	0x20003e88

0801bf5c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b082      	sub	sp, #8
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801bf64:	4b03      	ldr	r3, [pc, #12]	; (801bf74 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	2040      	movs	r0, #64	; 0x40
 801bf6a:	4798      	blx	r3
}
 801bf6c:	bf00      	nop
 801bf6e:	3708      	adds	r7, #8
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}
 801bf74:	20003e88 	.word	0x20003e88

0801bf78 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b082      	sub	sp, #8
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]
 801bf80:	460b      	mov	r3, r1
 801bf82:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801bf84:	78fb      	ldrb	r3, [r7, #3]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d002      	beq.n	801bf90 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801bf8a:	2b01      	cmp	r3, #1
 801bf8c:	d005      	beq.n	801bf9a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801bf8e:	e00a      	b.n	801bfa6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801bf90:	4b07      	ldr	r3, [pc, #28]	; (801bfb0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	2080      	movs	r0, #128	; 0x80
 801bf96:	4798      	blx	r3
            break;
 801bf98:	e005      	b.n	801bfa6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801bf9a:	4b05      	ldr	r3, [pc, #20]	; (801bfb0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bfa2:	4798      	blx	r3
            break;
 801bfa4:	bf00      	nop
    }
}
 801bfa6:	bf00      	nop
 801bfa8:	3708      	adds	r7, #8
 801bfaa:	46bd      	mov	sp, r7
 801bfac:	bd80      	pop	{r7, pc}
 801bfae:	bf00      	nop
 801bfb0:	20003e88 	.word	0x20003e88

0801bfb4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b082      	sub	sp, #8
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801bfbc:	4b04      	ldr	r3, [pc, #16]	; (801bfd0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bfc4:	4798      	blx	r3
}
 801bfc6:	bf00      	nop
 801bfc8:	3708      	adds	r7, #8
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	bd80      	pop	{r7, pc}
 801bfce:	bf00      	nop
 801bfd0:	20003e88 	.word	0x20003e88

0801bfd4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bfd4:	b580      	push	{r7, lr}
 801bfd6:	b082      	sub	sp, #8
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801bfdc:	4b03      	ldr	r3, [pc, #12]	; (801bfec <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	2020      	movs	r0, #32
 801bfe2:	4798      	blx	r3
}
 801bfe4:	bf00      	nop
 801bfe6:	3708      	adds	r7, #8
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	bd80      	pop	{r7, pc}
 801bfec:	20003e88 	.word	0x20003e88

0801bff0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bff0:	b580      	push	{r7, lr}
 801bff2:	b082      	sub	sp, #8
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801bff8:	4b03      	ldr	r3, [pc, #12]	; (801c008 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	2004      	movs	r0, #4
 801bffe:	4798      	blx	r3
}
 801c000:	bf00      	nop
 801c002:	3708      	adds	r7, #8
 801c004:	46bd      	mov	sp, r7
 801c006:	bd80      	pop	{r7, pc}
 801c008:	20003e88 	.word	0x20003e88

0801c00c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c00c:	b580      	push	{r7, lr}
 801c00e:	b082      	sub	sp, #8
 801c010:	af00      	add	r7, sp, #0
 801c012:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801c014:	4b03      	ldr	r3, [pc, #12]	; (801c024 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	2008      	movs	r0, #8
 801c01a:	4798      	blx	r3
}
 801c01c:	bf00      	nop
 801c01e:	3708      	adds	r7, #8
 801c020:	46bd      	mov	sp, r7
 801c022:	bd80      	pop	{r7, pc}
 801c024:	20003e88 	.word	0x20003e88

0801c028 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	b082      	sub	sp, #8
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801c030:	4b03      	ldr	r3, [pc, #12]	; (801c040 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	2010      	movs	r0, #16
 801c036:	4798      	blx	r3
}
 801c038:	bf00      	nop
 801c03a:	3708      	adds	r7, #8
 801c03c:	46bd      	mov	sp, r7
 801c03e:	bd80      	pop	{r7, pc}
 801c040:	20003e88 	.word	0x20003e88

0801c044 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801c044:	b580      	push	{r7, lr}
 801c046:	b084      	sub	sp, #16
 801c048:	af00      	add	r7, sp, #0
 801c04a:	4603      	mov	r3, r0
 801c04c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801c04e:	f7ee fb48 	bl	800a6e2 <RBI_IsDCDC>
 801c052:	4603      	mov	r3, r0
 801c054:	2b01      	cmp	r3, #1
 801c056:	d112      	bne.n	801c07e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801c058:	f640 1023 	movw	r0, #2339	; 0x923
 801c05c:	f7ff fe1e 	bl	801bc9c <SUBGRF_ReadRegister>
 801c060:	4603      	mov	r3, r0
 801c062:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801c064:	7bfb      	ldrb	r3, [r7, #15]
 801c066:	f023 0306 	bic.w	r3, r3, #6
 801c06a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801c06c:	7bfa      	ldrb	r2, [r7, #15]
 801c06e:	79fb      	ldrb	r3, [r7, #7]
 801c070:	4313      	orrs	r3, r2
 801c072:	b2db      	uxtb	r3, r3
 801c074:	4619      	mov	r1, r3
 801c076:	f640 1023 	movw	r0, #2339	; 0x923
 801c07a:	f7ff fdfb 	bl	801bc74 <SUBGRF_WriteRegister>
  }
}
 801c07e:	bf00      	nop
 801c080:	3710      	adds	r7, #16
 801c082:	46bd      	mov	sp, r7
 801c084:	bd80      	pop	{r7, pc}
	...

0801c088 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c088:	b480      	push	{r7}
 801c08a:	b085      	sub	sp, #20
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d101      	bne.n	801c09a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c096:	231f      	movs	r3, #31
 801c098:	e016      	b.n	801c0c8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c09a:	2300      	movs	r3, #0
 801c09c:	73fb      	strb	r3, [r7, #15]
 801c09e:	e00f      	b.n	801c0c0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c0a0:	7bfb      	ldrb	r3, [r7, #15]
 801c0a2:	4a0c      	ldr	r2, [pc, #48]	; (801c0d4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c0a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c0a8:	687a      	ldr	r2, [r7, #4]
 801c0aa:	429a      	cmp	r2, r3
 801c0ac:	d205      	bcs.n	801c0ba <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c0ae:	7bfb      	ldrb	r3, [r7, #15]
 801c0b0:	4a08      	ldr	r2, [pc, #32]	; (801c0d4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c0b2:	00db      	lsls	r3, r3, #3
 801c0b4:	4413      	add	r3, r2
 801c0b6:	791b      	ldrb	r3, [r3, #4]
 801c0b8:	e006      	b.n	801c0c8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c0ba:	7bfb      	ldrb	r3, [r7, #15]
 801c0bc:	3301      	adds	r3, #1
 801c0be:	73fb      	strb	r3, [r7, #15]
 801c0c0:	7bfb      	ldrb	r3, [r7, #15]
 801c0c2:	2b15      	cmp	r3, #21
 801c0c4:	d9ec      	bls.n	801c0a0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801c0c6:	e7fe      	b.n	801c0c6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	3714      	adds	r7, #20
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	bc80      	pop	{r7}
 801c0d0:	4770      	bx	lr
 801c0d2:	bf00      	nop
 801c0d4:	0801e7c4 	.word	0x0801e7c4

0801c0d8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c0d8:	b580      	push	{r7, lr}
 801c0da:	b08a      	sub	sp, #40	; 0x28
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	6078      	str	r0, [r7, #4]
 801c0e0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c0e2:	4b35      	ldr	r3, [pc, #212]	; (801c1b8 <SUBGRF_GetCFO+0xe0>)
 801c0e4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801c0e6:	f640 0007 	movw	r0, #2055	; 0x807
 801c0ea:	f7ff fdd7 	bl	801bc9c <SUBGRF_ReadRegister>
 801c0ee:	4603      	mov	r3, r0
 801c0f0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c0f2:	7ffb      	ldrb	r3, [r7, #31]
 801c0f4:	08db      	lsrs	r3, r3, #3
 801c0f6:	b2db      	uxtb	r3, r3
 801c0f8:	f003 0303 	and.w	r3, r3, #3
 801c0fc:	3328      	adds	r3, #40	; 0x28
 801c0fe:	443b      	add	r3, r7
 801c100:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c104:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c106:	7ffb      	ldrb	r3, [r7, #31]
 801c108:	f003 0307 	and.w	r3, r3, #7
 801c10c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801c10e:	7fba      	ldrb	r2, [r7, #30]
 801c110:	7f7b      	ldrb	r3, [r7, #29]
 801c112:	3b01      	subs	r3, #1
 801c114:	fa02 f303 	lsl.w	r3, r2, r3
 801c118:	461a      	mov	r2, r3
 801c11a:	4b28      	ldr	r3, [pc, #160]	; (801c1bc <SUBGRF_GetCFO+0xe4>)
 801c11c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c120:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c122:	69ba      	ldr	r2, [r7, #24]
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	fbb2 f3f3 	udiv	r3, r2, r3
 801c12a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c12c:	2301      	movs	r3, #1
 801c12e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c136:	697a      	ldr	r2, [r7, #20]
 801c138:	fb02 f303 	mul.w	r3, r2, r3
 801c13c:	2b07      	cmp	r3, #7
 801c13e:	d802      	bhi.n	801c146 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c140:	2302      	movs	r3, #2
 801c142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801c146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c14a:	697a      	ldr	r2, [r7, #20]
 801c14c:	fb02 f303 	mul.w	r3, r2, r3
 801c150:	2b03      	cmp	r3, #3
 801c152:	d802      	bhi.n	801c15a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c154:	2304      	movs	r3, #4
 801c156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c15a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c15e:	69bb      	ldr	r3, [r7, #24]
 801c160:	fb02 f303 	mul.w	r3, r2, r3
 801c164:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801c166:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801c16a:	f7ff fd97 	bl	801bc9c <SUBGRF_ReadRegister>
 801c16e:	4603      	mov	r3, r0
 801c170:	021b      	lsls	r3, r3, #8
 801c172:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c176:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801c178:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801c17c:	f7ff fd8e 	bl	801bc9c <SUBGRF_ReadRegister>
 801c180:	4603      	mov	r3, r0
 801c182:	461a      	mov	r2, r3
 801c184:	6a3b      	ldr	r3, [r7, #32]
 801c186:	4313      	orrs	r3, r2
 801c188:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c18a:	6a3b      	ldr	r3, [r7, #32]
 801c18c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c190:	2b00      	cmp	r3, #0
 801c192:	d005      	beq.n	801c1a0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c194:	6a3b      	ldr	r3, [r7, #32]
 801c196:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c19a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c19e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c1a0:	693b      	ldr	r3, [r7, #16]
 801c1a2:	095b      	lsrs	r3, r3, #5
 801c1a4:	6a3a      	ldr	r2, [r7, #32]
 801c1a6:	fb02 f303 	mul.w	r3, r2, r3
 801c1aa:	11da      	asrs	r2, r3, #7
 801c1ac:	683b      	ldr	r3, [r7, #0]
 801c1ae:	601a      	str	r2, [r3, #0]
}
 801c1b0:	bf00      	nop
 801c1b2:	3728      	adds	r7, #40	; 0x28
 801c1b4:	46bd      	mov	sp, r7
 801c1b6:	bd80      	pop	{r7, pc}
 801c1b8:	0c0a0804 	.word	0x0c0a0804
 801c1bc:	01e84800 	.word	0x01e84800

0801c1c0 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801c1c0:	b480      	push	{r7}
 801c1c2:	b087      	sub	sp, #28
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	60b9      	str	r1, [r7, #8]
 801c1ca:	607a      	str	r2, [r7, #4]
 801c1cc:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801c1d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c1d6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801c1d8:	697b      	ldr	r3, [r7, #20]
}
 801c1da:	4618      	mov	r0, r3
 801c1dc:	371c      	adds	r7, #28
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bc80      	pop	{r7}
 801c1e2:	4770      	bx	lr

0801c1e4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801c1e4:	b480      	push	{r7}
 801c1e6:	b087      	sub	sp, #28
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	60b9      	str	r1, [r7, #8]
 801c1ee:	607a      	str	r2, [r7, #4]
 801c1f0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801c1f2:	2300      	movs	r3, #0
 801c1f4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801c1f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c1fa:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801c1fc:	697b      	ldr	r3, [r7, #20]
}
 801c1fe:	4618      	mov	r0, r3
 801c200:	371c      	adds	r7, #28
 801c202:	46bd      	mov	sp, r7
 801c204:	bc80      	pop	{r7}
 801c206:	4770      	bx	lr

0801c208 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801c208:	b480      	push	{r7}
 801c20a:	b085      	sub	sp, #20
 801c20c:	af00      	add	r7, sp, #0
 801c20e:	60f8      	str	r0, [r7, #12]
 801c210:	60b9      	str	r1, [r7, #8]
 801c212:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801c214:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801c218:	4618      	mov	r0, r3
 801c21a:	3714      	adds	r7, #20
 801c21c:	46bd      	mov	sp, r7
 801c21e:	bc80      	pop	{r7}
 801c220:	4770      	bx	lr

0801c222 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801c222:	b480      	push	{r7}
 801c224:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801c226:	bf00      	nop
 801c228:	46bd      	mov	sp, r7
 801c22a:	bc80      	pop	{r7}
 801c22c:	4770      	bx	lr

0801c22e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801c22e:	b480      	push	{r7}
 801c230:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801c232:	2300      	movs	r3, #0
#endif
}
 801c234:	4618      	mov	r0, r3
 801c236:	46bd      	mov	sp, r7
 801c238:	bc80      	pop	{r7}
 801c23a:	4770      	bx	lr

0801c23c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801c23c:	b480      	push	{r7}
 801c23e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801c240:	2300      	movs	r3, #0
#endif
}
 801c242:	4618      	mov	r0, r3
 801c244:	46bd      	mov	sp, r7
 801c246:	bc80      	pop	{r7}
 801c248:	4770      	bx	lr

0801c24a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801c24a:	b480      	push	{r7}
 801c24c:	b083      	sub	sp, #12
 801c24e:	af00      	add	r7, sp, #0
 801c250:	4603      	mov	r3, r0
 801c252:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801c254:	bf00      	nop
 801c256:	370c      	adds	r7, #12
 801c258:	46bd      	mov	sp, r7
 801c25a:	bc80      	pop	{r7}
 801c25c:	4770      	bx	lr

0801c25e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801c25e:	b480      	push	{r7}
 801c260:	b087      	sub	sp, #28
 801c262:	af00      	add	r7, sp, #0
 801c264:	60f8      	str	r0, [r7, #12]
 801c266:	460b      	mov	r3, r1
 801c268:	607a      	str	r2, [r7, #4]
 801c26a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801c26c:	f04f 33ff 	mov.w	r3, #4294967295
 801c270:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801c272:	697b      	ldr	r3, [r7, #20]
}
 801c274:	4618      	mov	r0, r3
 801c276:	371c      	adds	r7, #28
 801c278:	46bd      	mov	sp, r7
 801c27a:	bc80      	pop	{r7}
 801c27c:	4770      	bx	lr

0801c27e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c27e:	b480      	push	{r7}
 801c280:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801c282:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801c286:	4618      	mov	r0, r3
 801c288:	46bd      	mov	sp, r7
 801c28a:	bc80      	pop	{r7}
 801c28c:	4770      	bx	lr

0801c28e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801c28e:	b480      	push	{r7}
 801c290:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801c292:	bf00      	nop
 801c294:	46bd      	mov	sp, r7
 801c296:	bc80      	pop	{r7}
 801c298:	4770      	bx	lr

0801c29a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c29a:	b480      	push	{r7}
 801c29c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801c29e:	bf00      	nop
 801c2a0:	46bd      	mov	sp, r7
 801c2a2:	bc80      	pop	{r7}
 801c2a4:	4770      	bx	lr

0801c2a6 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801c2a6:	b480      	push	{r7}
 801c2a8:	b083      	sub	sp, #12
 801c2aa:	af00      	add	r7, sp, #0
 801c2ac:	4603      	mov	r3, r0
 801c2ae:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801c2b0:	bf00      	nop
 801c2b2:	370c      	adds	r7, #12
 801c2b4:	46bd      	mov	sp, r7
 801c2b6:	bc80      	pop	{r7}
 801c2b8:	4770      	bx	lr
	...

0801c2bc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c2c0:	2218      	movs	r2, #24
 801c2c2:	2100      	movs	r1, #0
 801c2c4:	4807      	ldr	r0, [pc, #28]	; (801c2e4 <UTIL_ADV_TRACE_Init+0x28>)
 801c2c6:	f000 fb2e 	bl	801c926 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c2ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c2ce:	2100      	movs	r1, #0
 801c2d0:	4805      	ldr	r0, [pc, #20]	; (801c2e8 <UTIL_ADV_TRACE_Init+0x2c>)
 801c2d2:	f000 fb28 	bl	801c926 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c2d6:	4b05      	ldr	r3, [pc, #20]	; (801c2ec <UTIL_ADV_TRACE_Init+0x30>)
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	4805      	ldr	r0, [pc, #20]	; (801c2f0 <UTIL_ADV_TRACE_Init+0x34>)
 801c2dc:	4798      	blx	r3
 801c2de:	4603      	mov	r3, r0
}
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	bd80      	pop	{r7, pc}
 801c2e4:	20003e8c 	.word	0x20003e8c
 801c2e8:	20003ea4 	.word	0x20003ea4
 801c2ec:	0801e334 	.word	0x0801e334
 801c2f0:	0801c55d 	.word	0x0801c55d

0801c2f4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c2f4:	b480      	push	{r7}
 801c2f6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c2f8:	4b06      	ldr	r3, [pc, #24]	; (801c314 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c2fa:	8a5a      	ldrh	r2, [r3, #18]
 801c2fc:	4b05      	ldr	r3, [pc, #20]	; (801c314 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c2fe:	8a1b      	ldrh	r3, [r3, #16]
 801c300:	429a      	cmp	r2, r3
 801c302:	d101      	bne.n	801c308 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c304:	2301      	movs	r3, #1
 801c306:	e000      	b.n	801c30a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c308:	2300      	movs	r3, #0
}
 801c30a:	4618      	mov	r0, r3
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bc80      	pop	{r7}
 801c310:	4770      	bx	lr
 801c312:	bf00      	nop
 801c314:	20003e8c 	.word	0x20003e8c

0801c318 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c318:	b408      	push	{r3}
 801c31a:	b580      	push	{r7, lr}
 801c31c:	b08d      	sub	sp, #52	; 0x34
 801c31e:	af00      	add	r7, sp, #0
 801c320:	60f8      	str	r0, [r7, #12]
 801c322:	60b9      	str	r1, [r7, #8]
 801c324:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c326:	2300      	movs	r3, #0
 801c328:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c32a:	2300      	movs	r3, #0
 801c32c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c32e:	4b37      	ldr	r3, [pc, #220]	; (801c40c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c330:	7a1b      	ldrb	r3, [r3, #8]
 801c332:	461a      	mov	r2, r3
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	4293      	cmp	r3, r2
 801c338:	d902      	bls.n	801c340 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c33a:	f06f 0304 	mvn.w	r3, #4
 801c33e:	e05e      	b.n	801c3fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c340:	4b32      	ldr	r3, [pc, #200]	; (801c40c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c342:	68da      	ldr	r2, [r3, #12]
 801c344:	68bb      	ldr	r3, [r7, #8]
 801c346:	4013      	ands	r3, r2
 801c348:	68ba      	ldr	r2, [r7, #8]
 801c34a:	429a      	cmp	r2, r3
 801c34c:	d002      	beq.n	801c354 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c34e:	f06f 0305 	mvn.w	r3, #5
 801c352:	e054      	b.n	801c3fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c354:	4b2d      	ldr	r3, [pc, #180]	; (801c40c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c356:	685b      	ldr	r3, [r3, #4]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d00a      	beq.n	801c372 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d007      	beq.n	801c372 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c362:	4b2a      	ldr	r3, [pc, #168]	; (801c40c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c364:	685b      	ldr	r3, [r3, #4]
 801c366:	f107 0116 	add.w	r1, r7, #22
 801c36a:	f107 0218 	add.w	r2, r7, #24
 801c36e:	4610      	mov	r0, r2
 801c370:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c372:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c376:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c37a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c37c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c380:	4823      	ldr	r0, [pc, #140]	; (801c410 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c382:	f001 f963 	bl	801d64c <tiny_vsnprintf_like>
 801c386:	4603      	mov	r3, r0
 801c388:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c38a:	f000 f9f1 	bl	801c770 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c38e:	8afa      	ldrh	r2, [r7, #22]
 801c390:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c392:	4413      	add	r3, r2
 801c394:	b29b      	uxth	r3, r3
 801c396:	f107 0214 	add.w	r2, r7, #20
 801c39a:	4611      	mov	r1, r2
 801c39c:	4618      	mov	r0, r3
 801c39e:	f000 f969 	bl	801c674 <TRACE_AllocateBufer>
 801c3a2:	4603      	mov	r3, r0
 801c3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3a8:	d025      	beq.n	801c3f6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c3ae:	e00e      	b.n	801c3ce <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c3b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c3b2:	8aba      	ldrh	r2, [r7, #20]
 801c3b4:	3330      	adds	r3, #48	; 0x30
 801c3b6:	443b      	add	r3, r7
 801c3b8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c3bc:	4b15      	ldr	r3, [pc, #84]	; (801c414 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c3be:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c3c0:	8abb      	ldrh	r3, [r7, #20]
 801c3c2:	3301      	adds	r3, #1
 801c3c4:	b29b      	uxth	r3, r3
 801c3c6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c3c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c3ca:	3301      	adds	r3, #1
 801c3cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c3ce:	8afb      	ldrh	r3, [r7, #22]
 801c3d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c3d2:	429a      	cmp	r2, r3
 801c3d4:	d3ec      	bcc.n	801c3b0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c3d6:	8abb      	ldrh	r3, [r7, #20]
 801c3d8:	461a      	mov	r2, r3
 801c3da:	4b0e      	ldr	r3, [pc, #56]	; (801c414 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c3dc:	18d0      	adds	r0, r2, r3
 801c3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c3e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c3e6:	f001 f931 	bl	801d64c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c3ea:	f000 f9df 	bl	801c7ac <TRACE_UnLock>

    return TRACE_Send();
 801c3ee:	f000 f831 	bl	801c454 <TRACE_Send>
 801c3f2:	4603      	mov	r3, r0
 801c3f4:	e003      	b.n	801c3fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c3f6:	f000 f9d9 	bl	801c7ac <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c3fa:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c3fe:	4618      	mov	r0, r3
 801c400:	3734      	adds	r7, #52	; 0x34
 801c402:	46bd      	mov	sp, r7
 801c404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c408:	b001      	add	sp, #4
 801c40a:	4770      	bx	lr
 801c40c:	20003e8c 	.word	0x20003e8c
 801c410:	200042a4 	.word	0x200042a4
 801c414:	20003ea4 	.word	0x20003ea4

0801c418 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c418:	b480      	push	{r7}
 801c41a:	b083      	sub	sp, #12
 801c41c:	af00      	add	r7, sp, #0
 801c41e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c420:	4a03      	ldr	r2, [pc, #12]	; (801c430 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	6053      	str	r3, [r2, #4]
}
 801c426:	bf00      	nop
 801c428:	370c      	adds	r7, #12
 801c42a:	46bd      	mov	sp, r7
 801c42c:	bc80      	pop	{r7}
 801c42e:	4770      	bx	lr
 801c430:	20003e8c 	.word	0x20003e8c

0801c434 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c434:	b480      	push	{r7}
 801c436:	b083      	sub	sp, #12
 801c438:	af00      	add	r7, sp, #0
 801c43a:	4603      	mov	r3, r0
 801c43c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c43e:	4a04      	ldr	r2, [pc, #16]	; (801c450 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c440:	79fb      	ldrb	r3, [r7, #7]
 801c442:	7213      	strb	r3, [r2, #8]
}
 801c444:	bf00      	nop
 801c446:	370c      	adds	r7, #12
 801c448:	46bd      	mov	sp, r7
 801c44a:	bc80      	pop	{r7}
 801c44c:	4770      	bx	lr
 801c44e:	bf00      	nop
 801c450:	20003e8c 	.word	0x20003e8c

0801c454 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c454:	b580      	push	{r7, lr}
 801c456:	b088      	sub	sp, #32
 801c458:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c45a:	2300      	movs	r3, #0
 801c45c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c45e:	2300      	movs	r3, #0
 801c460:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c462:	f3ef 8310 	mrs	r3, PRIMASK
 801c466:	613b      	str	r3, [r7, #16]
  return(result);
 801c468:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c46a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c46c:	b672      	cpsid	i
}
 801c46e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c470:	f000 f9ba 	bl	801c7e8 <TRACE_IsLocked>
 801c474:	4603      	mov	r3, r0
 801c476:	2b00      	cmp	r3, #0
 801c478:	d15d      	bne.n	801c536 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c47a:	f000 f979 	bl	801c770 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c47e:	4b34      	ldr	r3, [pc, #208]	; (801c550 <TRACE_Send+0xfc>)
 801c480:	8a1a      	ldrh	r2, [r3, #16]
 801c482:	4b33      	ldr	r3, [pc, #204]	; (801c550 <TRACE_Send+0xfc>)
 801c484:	8a5b      	ldrh	r3, [r3, #18]
 801c486:	429a      	cmp	r2, r3
 801c488:	d04d      	beq.n	801c526 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c48a:	4b31      	ldr	r3, [pc, #196]	; (801c550 <TRACE_Send+0xfc>)
 801c48c:	789b      	ldrb	r3, [r3, #2]
 801c48e:	2b01      	cmp	r3, #1
 801c490:	d117      	bne.n	801c4c2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c492:	4b2f      	ldr	r3, [pc, #188]	; (801c550 <TRACE_Send+0xfc>)
 801c494:	881a      	ldrh	r2, [r3, #0]
 801c496:	4b2e      	ldr	r3, [pc, #184]	; (801c550 <TRACE_Send+0xfc>)
 801c498:	8a1b      	ldrh	r3, [r3, #16]
 801c49a:	1ad3      	subs	r3, r2, r3
 801c49c:	b29a      	uxth	r2, r3
 801c49e:	4b2c      	ldr	r3, [pc, #176]	; (801c550 <TRACE_Send+0xfc>)
 801c4a0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c4a2:	4b2b      	ldr	r3, [pc, #172]	; (801c550 <TRACE_Send+0xfc>)
 801c4a4:	2202      	movs	r2, #2
 801c4a6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c4a8:	4b29      	ldr	r3, [pc, #164]	; (801c550 <TRACE_Send+0xfc>)
 801c4aa:	2200      	movs	r2, #0
 801c4ac:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c4ae:	4b28      	ldr	r3, [pc, #160]	; (801c550 <TRACE_Send+0xfc>)
 801c4b0:	8a9b      	ldrh	r3, [r3, #20]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d105      	bne.n	801c4c2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c4b6:	4b26      	ldr	r3, [pc, #152]	; (801c550 <TRACE_Send+0xfc>)
 801c4b8:	2200      	movs	r2, #0
 801c4ba:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c4bc:	4b24      	ldr	r3, [pc, #144]	; (801c550 <TRACE_Send+0xfc>)
 801c4be:	2200      	movs	r2, #0
 801c4c0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c4c2:	4b23      	ldr	r3, [pc, #140]	; (801c550 <TRACE_Send+0xfc>)
 801c4c4:	789b      	ldrb	r3, [r3, #2]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d115      	bne.n	801c4f6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c4ca:	4b21      	ldr	r3, [pc, #132]	; (801c550 <TRACE_Send+0xfc>)
 801c4cc:	8a5a      	ldrh	r2, [r3, #18]
 801c4ce:	4b20      	ldr	r3, [pc, #128]	; (801c550 <TRACE_Send+0xfc>)
 801c4d0:	8a1b      	ldrh	r3, [r3, #16]
 801c4d2:	429a      	cmp	r2, r3
 801c4d4:	d908      	bls.n	801c4e8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c4d6:	4b1e      	ldr	r3, [pc, #120]	; (801c550 <TRACE_Send+0xfc>)
 801c4d8:	8a5a      	ldrh	r2, [r3, #18]
 801c4da:	4b1d      	ldr	r3, [pc, #116]	; (801c550 <TRACE_Send+0xfc>)
 801c4dc:	8a1b      	ldrh	r3, [r3, #16]
 801c4de:	1ad3      	subs	r3, r2, r3
 801c4e0:	b29a      	uxth	r2, r3
 801c4e2:	4b1b      	ldr	r3, [pc, #108]	; (801c550 <TRACE_Send+0xfc>)
 801c4e4:	829a      	strh	r2, [r3, #20]
 801c4e6:	e006      	b.n	801c4f6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c4e8:	4b19      	ldr	r3, [pc, #100]	; (801c550 <TRACE_Send+0xfc>)
 801c4ea:	8a1b      	ldrh	r3, [r3, #16]
 801c4ec:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c4f0:	b29a      	uxth	r2, r3
 801c4f2:	4b17      	ldr	r3, [pc, #92]	; (801c550 <TRACE_Send+0xfc>)
 801c4f4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c4f6:	4b16      	ldr	r3, [pc, #88]	; (801c550 <TRACE_Send+0xfc>)
 801c4f8:	8a1b      	ldrh	r3, [r3, #16]
 801c4fa:	461a      	mov	r2, r3
 801c4fc:	4b15      	ldr	r3, [pc, #84]	; (801c554 <TRACE_Send+0x100>)
 801c4fe:	4413      	add	r3, r2
 801c500:	61bb      	str	r3, [r7, #24]
 801c502:	697b      	ldr	r3, [r7, #20]
 801c504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	f383 8810 	msr	PRIMASK, r3
}
 801c50c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c50e:	f7e5 fb83 	bl	8001c18 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c512:	4b11      	ldr	r3, [pc, #68]	; (801c558 <TRACE_Send+0x104>)
 801c514:	68db      	ldr	r3, [r3, #12]
 801c516:	4a0e      	ldr	r2, [pc, #56]	; (801c550 <TRACE_Send+0xfc>)
 801c518:	8a92      	ldrh	r2, [r2, #20]
 801c51a:	4611      	mov	r1, r2
 801c51c:	69b8      	ldr	r0, [r7, #24]
 801c51e:	4798      	blx	r3
 801c520:	4603      	mov	r3, r0
 801c522:	77fb      	strb	r3, [r7, #31]
 801c524:	e00d      	b.n	801c542 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c526:	f000 f941 	bl	801c7ac <TRACE_UnLock>
 801c52a:	697b      	ldr	r3, [r7, #20]
 801c52c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c52e:	68bb      	ldr	r3, [r7, #8]
 801c530:	f383 8810 	msr	PRIMASK, r3
}
 801c534:	e005      	b.n	801c542 <TRACE_Send+0xee>
 801c536:	697b      	ldr	r3, [r7, #20]
 801c538:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	f383 8810 	msr	PRIMASK, r3
}
 801c540:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c542:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c546:	4618      	mov	r0, r3
 801c548:	3720      	adds	r7, #32
 801c54a:	46bd      	mov	sp, r7
 801c54c:	bd80      	pop	{r7, pc}
 801c54e:	bf00      	nop
 801c550:	20003e8c 	.word	0x20003e8c
 801c554:	20003ea4 	.word	0x20003ea4
 801c558:	0801e334 	.word	0x0801e334

0801c55c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b088      	sub	sp, #32
 801c560:	af00      	add	r7, sp, #0
 801c562:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c564:	2300      	movs	r3, #0
 801c566:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c568:	f3ef 8310 	mrs	r3, PRIMASK
 801c56c:	617b      	str	r3, [r7, #20]
  return(result);
 801c56e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c570:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c572:	b672      	cpsid	i
}
 801c574:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c576:	4b3c      	ldr	r3, [pc, #240]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c578:	789b      	ldrb	r3, [r3, #2]
 801c57a:	2b02      	cmp	r3, #2
 801c57c:	d106      	bne.n	801c58c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c57e:	4b3a      	ldr	r3, [pc, #232]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c580:	2200      	movs	r2, #0
 801c582:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c584:	4b38      	ldr	r3, [pc, #224]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c586:	2200      	movs	r2, #0
 801c588:	821a      	strh	r2, [r3, #16]
 801c58a:	e00a      	b.n	801c5a2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c58c:	4b36      	ldr	r3, [pc, #216]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c58e:	8a1a      	ldrh	r2, [r3, #16]
 801c590:	4b35      	ldr	r3, [pc, #212]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c592:	8a9b      	ldrh	r3, [r3, #20]
 801c594:	4413      	add	r3, r2
 801c596:	b29b      	uxth	r3, r3
 801c598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c59c:	b29a      	uxth	r2, r3
 801c59e:	4b32      	ldr	r3, [pc, #200]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5a0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c5a2:	4b31      	ldr	r3, [pc, #196]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5a4:	8a1a      	ldrh	r2, [r3, #16]
 801c5a6:	4b30      	ldr	r3, [pc, #192]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5a8:	8a5b      	ldrh	r3, [r3, #18]
 801c5aa:	429a      	cmp	r2, r3
 801c5ac:	d04d      	beq.n	801c64a <TRACE_TxCpltCallback+0xee>
 801c5ae:	4b2e      	ldr	r3, [pc, #184]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5b0:	8adb      	ldrh	r3, [r3, #22]
 801c5b2:	2b01      	cmp	r3, #1
 801c5b4:	d149      	bne.n	801c64a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c5b6:	4b2c      	ldr	r3, [pc, #176]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5b8:	789b      	ldrb	r3, [r3, #2]
 801c5ba:	2b01      	cmp	r3, #1
 801c5bc:	d117      	bne.n	801c5ee <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c5be:	4b2a      	ldr	r3, [pc, #168]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5c0:	881a      	ldrh	r2, [r3, #0]
 801c5c2:	4b29      	ldr	r3, [pc, #164]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5c4:	8a1b      	ldrh	r3, [r3, #16]
 801c5c6:	1ad3      	subs	r3, r2, r3
 801c5c8:	b29a      	uxth	r2, r3
 801c5ca:	4b27      	ldr	r3, [pc, #156]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5cc:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c5ce:	4b26      	ldr	r3, [pc, #152]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5d0:	2202      	movs	r2, #2
 801c5d2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c5d4:	4b24      	ldr	r3, [pc, #144]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5d6:	2200      	movs	r2, #0
 801c5d8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c5da:	4b23      	ldr	r3, [pc, #140]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5dc:	8a9b      	ldrh	r3, [r3, #20]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d105      	bne.n	801c5ee <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c5e2:	4b21      	ldr	r3, [pc, #132]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5e4:	2200      	movs	r2, #0
 801c5e6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c5e8:	4b1f      	ldr	r3, [pc, #124]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5ea:	2200      	movs	r2, #0
 801c5ec:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c5ee:	4b1e      	ldr	r3, [pc, #120]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5f0:	789b      	ldrb	r3, [r3, #2]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d115      	bne.n	801c622 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c5f6:	4b1c      	ldr	r3, [pc, #112]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5f8:	8a5a      	ldrh	r2, [r3, #18]
 801c5fa:	4b1b      	ldr	r3, [pc, #108]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c5fc:	8a1b      	ldrh	r3, [r3, #16]
 801c5fe:	429a      	cmp	r2, r3
 801c600:	d908      	bls.n	801c614 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c602:	4b19      	ldr	r3, [pc, #100]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c604:	8a5a      	ldrh	r2, [r3, #18]
 801c606:	4b18      	ldr	r3, [pc, #96]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c608:	8a1b      	ldrh	r3, [r3, #16]
 801c60a:	1ad3      	subs	r3, r2, r3
 801c60c:	b29a      	uxth	r2, r3
 801c60e:	4b16      	ldr	r3, [pc, #88]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c610:	829a      	strh	r2, [r3, #20]
 801c612:	e006      	b.n	801c622 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c614:	4b14      	ldr	r3, [pc, #80]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c616:	8a1b      	ldrh	r3, [r3, #16]
 801c618:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c61c:	b29a      	uxth	r2, r3
 801c61e:	4b12      	ldr	r3, [pc, #72]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c620:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c622:	4b11      	ldr	r3, [pc, #68]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c624:	8a1b      	ldrh	r3, [r3, #16]
 801c626:	461a      	mov	r2, r3
 801c628:	4b10      	ldr	r3, [pc, #64]	; (801c66c <TRACE_TxCpltCallback+0x110>)
 801c62a:	4413      	add	r3, r2
 801c62c:	61fb      	str	r3, [r7, #28]
 801c62e:	69bb      	ldr	r3, [r7, #24]
 801c630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c632:	693b      	ldr	r3, [r7, #16]
 801c634:	f383 8810 	msr	PRIMASK, r3
}
 801c638:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c63a:	4b0d      	ldr	r3, [pc, #52]	; (801c670 <TRACE_TxCpltCallback+0x114>)
 801c63c:	68db      	ldr	r3, [r3, #12]
 801c63e:	4a0a      	ldr	r2, [pc, #40]	; (801c668 <TRACE_TxCpltCallback+0x10c>)
 801c640:	8a92      	ldrh	r2, [r2, #20]
 801c642:	4611      	mov	r1, r2
 801c644:	69f8      	ldr	r0, [r7, #28]
 801c646:	4798      	blx	r3
 801c648:	e00a      	b.n	801c660 <TRACE_TxCpltCallback+0x104>
 801c64a:	69bb      	ldr	r3, [r7, #24]
 801c64c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	f383 8810 	msr	PRIMASK, r3
}
 801c654:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c656:	f7e5 fae7 	bl	8001c28 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c65a:	f000 f8a7 	bl	801c7ac <TRACE_UnLock>
  }
}
 801c65e:	bf00      	nop
 801c660:	bf00      	nop
 801c662:	3720      	adds	r7, #32
 801c664:	46bd      	mov	sp, r7
 801c666:	bd80      	pop	{r7, pc}
 801c668:	20003e8c 	.word	0x20003e8c
 801c66c:	20003ea4 	.word	0x20003ea4
 801c670:	0801e334 	.word	0x0801e334

0801c674 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c674:	b480      	push	{r7}
 801c676:	b087      	sub	sp, #28
 801c678:	af00      	add	r7, sp, #0
 801c67a:	4603      	mov	r3, r0
 801c67c:	6039      	str	r1, [r7, #0]
 801c67e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c684:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c686:	f3ef 8310 	mrs	r3, PRIMASK
 801c68a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c68c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c68e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c690:	b672      	cpsid	i
}
 801c692:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c694:	4b35      	ldr	r3, [pc, #212]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c696:	8a5a      	ldrh	r2, [r3, #18]
 801c698:	4b34      	ldr	r3, [pc, #208]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c69a:	8a1b      	ldrh	r3, [r3, #16]
 801c69c:	429a      	cmp	r2, r3
 801c69e:	d11b      	bne.n	801c6d8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c6a0:	4b32      	ldr	r3, [pc, #200]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6a2:	8a5b      	ldrh	r3, [r3, #18]
 801c6a4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c6a8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c6aa:	88fa      	ldrh	r2, [r7, #6]
 801c6ac:	8afb      	ldrh	r3, [r7, #22]
 801c6ae:	429a      	cmp	r2, r3
 801c6b0:	d33a      	bcc.n	801c728 <TRACE_AllocateBufer+0xb4>
 801c6b2:	4b2e      	ldr	r3, [pc, #184]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6b4:	8a1b      	ldrh	r3, [r3, #16]
 801c6b6:	88fa      	ldrh	r2, [r7, #6]
 801c6b8:	429a      	cmp	r2, r3
 801c6ba:	d235      	bcs.n	801c728 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c6bc:	4b2b      	ldr	r3, [pc, #172]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6be:	2201      	movs	r2, #1
 801c6c0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c6c2:	4b2a      	ldr	r3, [pc, #168]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6c4:	8a5a      	ldrh	r2, [r3, #18]
 801c6c6:	4b29      	ldr	r3, [pc, #164]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6c8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c6ca:	4b28      	ldr	r3, [pc, #160]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6cc:	8a1b      	ldrh	r3, [r3, #16]
 801c6ce:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c6d0:	4b26      	ldr	r3, [pc, #152]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6d2:	2200      	movs	r2, #0
 801c6d4:	825a      	strh	r2, [r3, #18]
 801c6d6:	e027      	b.n	801c728 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c6d8:	4b24      	ldr	r3, [pc, #144]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6da:	8a5a      	ldrh	r2, [r3, #18]
 801c6dc:	4b23      	ldr	r3, [pc, #140]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6de:	8a1b      	ldrh	r3, [r3, #16]
 801c6e0:	429a      	cmp	r2, r3
 801c6e2:	d91b      	bls.n	801c71c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c6e4:	4b21      	ldr	r3, [pc, #132]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6e6:	8a5b      	ldrh	r3, [r3, #18]
 801c6e8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c6ec:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c6ee:	88fa      	ldrh	r2, [r7, #6]
 801c6f0:	8afb      	ldrh	r3, [r7, #22]
 801c6f2:	429a      	cmp	r2, r3
 801c6f4:	d318      	bcc.n	801c728 <TRACE_AllocateBufer+0xb4>
 801c6f6:	4b1d      	ldr	r3, [pc, #116]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c6f8:	8a1b      	ldrh	r3, [r3, #16]
 801c6fa:	88fa      	ldrh	r2, [r7, #6]
 801c6fc:	429a      	cmp	r2, r3
 801c6fe:	d213      	bcs.n	801c728 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c700:	4b1a      	ldr	r3, [pc, #104]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c702:	2201      	movs	r2, #1
 801c704:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c706:	4b19      	ldr	r3, [pc, #100]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c708:	8a5a      	ldrh	r2, [r3, #18]
 801c70a:	4b18      	ldr	r3, [pc, #96]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c70c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c70e:	4b17      	ldr	r3, [pc, #92]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c710:	8a1b      	ldrh	r3, [r3, #16]
 801c712:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c714:	4b15      	ldr	r3, [pc, #84]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c716:	2200      	movs	r2, #0
 801c718:	825a      	strh	r2, [r3, #18]
 801c71a:	e005      	b.n	801c728 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c71c:	4b13      	ldr	r3, [pc, #76]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c71e:	8a1a      	ldrh	r2, [r3, #16]
 801c720:	4b12      	ldr	r3, [pc, #72]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c722:	8a5b      	ldrh	r3, [r3, #18]
 801c724:	1ad3      	subs	r3, r2, r3
 801c726:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c728:	8afa      	ldrh	r2, [r7, #22]
 801c72a:	88fb      	ldrh	r3, [r7, #6]
 801c72c:	429a      	cmp	r2, r3
 801c72e:	d90f      	bls.n	801c750 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c730:	4b0e      	ldr	r3, [pc, #56]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c732:	8a5a      	ldrh	r2, [r3, #18]
 801c734:	683b      	ldr	r3, [r7, #0]
 801c736:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c738:	4b0c      	ldr	r3, [pc, #48]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c73a:	8a5a      	ldrh	r2, [r3, #18]
 801c73c:	88fb      	ldrh	r3, [r7, #6]
 801c73e:	4413      	add	r3, r2
 801c740:	b29b      	uxth	r3, r3
 801c742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c746:	b29a      	uxth	r2, r3
 801c748:	4b08      	ldr	r3, [pc, #32]	; (801c76c <TRACE_AllocateBufer+0xf8>)
 801c74a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c74c:	2300      	movs	r3, #0
 801c74e:	82bb      	strh	r3, [r7, #20]
 801c750:	693b      	ldr	r3, [r7, #16]
 801c752:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c754:	68bb      	ldr	r3, [r7, #8]
 801c756:	f383 8810 	msr	PRIMASK, r3
}
 801c75a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c75c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c760:	4618      	mov	r0, r3
 801c762:	371c      	adds	r7, #28
 801c764:	46bd      	mov	sp, r7
 801c766:	bc80      	pop	{r7}
 801c768:	4770      	bx	lr
 801c76a:	bf00      	nop
 801c76c:	20003e8c 	.word	0x20003e8c

0801c770 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c770:	b480      	push	{r7}
 801c772:	b085      	sub	sp, #20
 801c774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c776:	f3ef 8310 	mrs	r3, PRIMASK
 801c77a:	607b      	str	r3, [r7, #4]
  return(result);
 801c77c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c77e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c780:	b672      	cpsid	i
}
 801c782:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c784:	4b08      	ldr	r3, [pc, #32]	; (801c7a8 <TRACE_Lock+0x38>)
 801c786:	8adb      	ldrh	r3, [r3, #22]
 801c788:	3301      	adds	r3, #1
 801c78a:	b29a      	uxth	r2, r3
 801c78c:	4b06      	ldr	r3, [pc, #24]	; (801c7a8 <TRACE_Lock+0x38>)
 801c78e:	82da      	strh	r2, [r3, #22]
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c794:	68bb      	ldr	r3, [r7, #8]
 801c796:	f383 8810 	msr	PRIMASK, r3
}
 801c79a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c79c:	bf00      	nop
 801c79e:	3714      	adds	r7, #20
 801c7a0:	46bd      	mov	sp, r7
 801c7a2:	bc80      	pop	{r7}
 801c7a4:	4770      	bx	lr
 801c7a6:	bf00      	nop
 801c7a8:	20003e8c 	.word	0x20003e8c

0801c7ac <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c7ac:	b480      	push	{r7}
 801c7ae:	b085      	sub	sp, #20
 801c7b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7b2:	f3ef 8310 	mrs	r3, PRIMASK
 801c7b6:	607b      	str	r3, [r7, #4]
  return(result);
 801c7b8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c7ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7bc:	b672      	cpsid	i
}
 801c7be:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c7c0:	4b08      	ldr	r3, [pc, #32]	; (801c7e4 <TRACE_UnLock+0x38>)
 801c7c2:	8adb      	ldrh	r3, [r3, #22]
 801c7c4:	3b01      	subs	r3, #1
 801c7c6:	b29a      	uxth	r2, r3
 801c7c8:	4b06      	ldr	r3, [pc, #24]	; (801c7e4 <TRACE_UnLock+0x38>)
 801c7ca:	82da      	strh	r2, [r3, #22]
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7d0:	68bb      	ldr	r3, [r7, #8]
 801c7d2:	f383 8810 	msr	PRIMASK, r3
}
 801c7d6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c7d8:	bf00      	nop
 801c7da:	3714      	adds	r7, #20
 801c7dc:	46bd      	mov	sp, r7
 801c7de:	bc80      	pop	{r7}
 801c7e0:	4770      	bx	lr
 801c7e2:	bf00      	nop
 801c7e4:	20003e8c 	.word	0x20003e8c

0801c7e8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c7e8:	b480      	push	{r7}
 801c7ea:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c7ec:	4b05      	ldr	r3, [pc, #20]	; (801c804 <TRACE_IsLocked+0x1c>)
 801c7ee:	8adb      	ldrh	r3, [r3, #22]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	bf14      	ite	ne
 801c7f4:	2301      	movne	r3, #1
 801c7f6:	2300      	moveq	r3, #0
 801c7f8:	b2db      	uxtb	r3, r3
}
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	46bd      	mov	sp, r7
 801c7fe:	bc80      	pop	{r7}
 801c800:	4770      	bx	lr
 801c802:	bf00      	nop
 801c804:	20003e8c 	.word	0x20003e8c

0801c808 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c808:	b480      	push	{r7}
 801c80a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c80c:	4b04      	ldr	r3, [pc, #16]	; (801c820 <UTIL_LPM_Init+0x18>)
 801c80e:	2200      	movs	r2, #0
 801c810:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c812:	4b04      	ldr	r3, [pc, #16]	; (801c824 <UTIL_LPM_Init+0x1c>)
 801c814:	2200      	movs	r2, #0
 801c816:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c818:	bf00      	nop
 801c81a:	46bd      	mov	sp, r7
 801c81c:	bc80      	pop	{r7}
 801c81e:	4770      	bx	lr
 801c820:	200044a4 	.word	0x200044a4
 801c824:	200044a8 	.word	0x200044a8

0801c828 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c828:	b480      	push	{r7}
 801c82a:	b087      	sub	sp, #28
 801c82c:	af00      	add	r7, sp, #0
 801c82e:	6078      	str	r0, [r7, #4]
 801c830:	460b      	mov	r3, r1
 801c832:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c834:	f3ef 8310 	mrs	r3, PRIMASK
 801c838:	613b      	str	r3, [r7, #16]
  return(result);
 801c83a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c83c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c83e:	b672      	cpsid	i
}
 801c840:	bf00      	nop
  
  switch( state )
 801c842:	78fb      	ldrb	r3, [r7, #3]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d008      	beq.n	801c85a <UTIL_LPM_SetStopMode+0x32>
 801c848:	2b01      	cmp	r3, #1
 801c84a:	d10e      	bne.n	801c86a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c84c:	4b0d      	ldr	r3, [pc, #52]	; (801c884 <UTIL_LPM_SetStopMode+0x5c>)
 801c84e:	681a      	ldr	r2, [r3, #0]
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	4313      	orrs	r3, r2
 801c854:	4a0b      	ldr	r2, [pc, #44]	; (801c884 <UTIL_LPM_SetStopMode+0x5c>)
 801c856:	6013      	str	r3, [r2, #0]
      break;
 801c858:	e008      	b.n	801c86c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	43da      	mvns	r2, r3
 801c85e:	4b09      	ldr	r3, [pc, #36]	; (801c884 <UTIL_LPM_SetStopMode+0x5c>)
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	4013      	ands	r3, r2
 801c864:	4a07      	ldr	r2, [pc, #28]	; (801c884 <UTIL_LPM_SetStopMode+0x5c>)
 801c866:	6013      	str	r3, [r2, #0]
      break;
 801c868:	e000      	b.n	801c86c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c86a:	bf00      	nop
 801c86c:	697b      	ldr	r3, [r7, #20]
 801c86e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	f383 8810 	msr	PRIMASK, r3
}
 801c876:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c878:	bf00      	nop
 801c87a:	371c      	adds	r7, #28
 801c87c:	46bd      	mov	sp, r7
 801c87e:	bc80      	pop	{r7}
 801c880:	4770      	bx	lr
 801c882:	bf00      	nop
 801c884:	200044a4 	.word	0x200044a4

0801c888 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c888:	b480      	push	{r7}
 801c88a:	b087      	sub	sp, #28
 801c88c:	af00      	add	r7, sp, #0
 801c88e:	6078      	str	r0, [r7, #4]
 801c890:	460b      	mov	r3, r1
 801c892:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c894:	f3ef 8310 	mrs	r3, PRIMASK
 801c898:	613b      	str	r3, [r7, #16]
  return(result);
 801c89a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c89c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c89e:	b672      	cpsid	i
}
 801c8a0:	bf00      	nop
  
  switch(state)
 801c8a2:	78fb      	ldrb	r3, [r7, #3]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d008      	beq.n	801c8ba <UTIL_LPM_SetOffMode+0x32>
 801c8a8:	2b01      	cmp	r3, #1
 801c8aa:	d10e      	bne.n	801c8ca <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c8ac:	4b0d      	ldr	r3, [pc, #52]	; (801c8e4 <UTIL_LPM_SetOffMode+0x5c>)
 801c8ae:	681a      	ldr	r2, [r3, #0]
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	4313      	orrs	r3, r2
 801c8b4:	4a0b      	ldr	r2, [pc, #44]	; (801c8e4 <UTIL_LPM_SetOffMode+0x5c>)
 801c8b6:	6013      	str	r3, [r2, #0]
      break;
 801c8b8:	e008      	b.n	801c8cc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	43da      	mvns	r2, r3
 801c8be:	4b09      	ldr	r3, [pc, #36]	; (801c8e4 <UTIL_LPM_SetOffMode+0x5c>)
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	4013      	ands	r3, r2
 801c8c4:	4a07      	ldr	r2, [pc, #28]	; (801c8e4 <UTIL_LPM_SetOffMode+0x5c>)
 801c8c6:	6013      	str	r3, [r2, #0]
      break;
 801c8c8:	e000      	b.n	801c8cc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c8ca:	bf00      	nop
 801c8cc:	697b      	ldr	r3, [r7, #20]
 801c8ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	f383 8810 	msr	PRIMASK, r3
}
 801c8d6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c8d8:	bf00      	nop
 801c8da:	371c      	adds	r7, #28
 801c8dc:	46bd      	mov	sp, r7
 801c8de:	bc80      	pop	{r7}
 801c8e0:	4770      	bx	lr
 801c8e2:	bf00      	nop
 801c8e4:	200044a8 	.word	0x200044a8

0801c8e8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c8e8:	b480      	push	{r7}
 801c8ea:	b087      	sub	sp, #28
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	60f8      	str	r0, [r7, #12]
 801c8f0:	60b9      	str	r1, [r7, #8]
 801c8f2:	4613      	mov	r3, r2
 801c8f4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c8fa:	68bb      	ldr	r3, [r7, #8]
 801c8fc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c8fe:	e007      	b.n	801c910 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c900:	693a      	ldr	r2, [r7, #16]
 801c902:	1c53      	adds	r3, r2, #1
 801c904:	613b      	str	r3, [r7, #16]
 801c906:	697b      	ldr	r3, [r7, #20]
 801c908:	1c59      	adds	r1, r3, #1
 801c90a:	6179      	str	r1, [r7, #20]
 801c90c:	7812      	ldrb	r2, [r2, #0]
 801c90e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c910:	88fb      	ldrh	r3, [r7, #6]
 801c912:	1e5a      	subs	r2, r3, #1
 801c914:	80fa      	strh	r2, [r7, #6]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d1f2      	bne.n	801c900 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c91a:	bf00      	nop
 801c91c:	bf00      	nop
 801c91e:	371c      	adds	r7, #28
 801c920:	46bd      	mov	sp, r7
 801c922:	bc80      	pop	{r7}
 801c924:	4770      	bx	lr

0801c926 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c926:	b480      	push	{r7}
 801c928:	b085      	sub	sp, #20
 801c92a:	af00      	add	r7, sp, #0
 801c92c:	6078      	str	r0, [r7, #4]
 801c92e:	460b      	mov	r3, r1
 801c930:	70fb      	strb	r3, [r7, #3]
 801c932:	4613      	mov	r3, r2
 801c934:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c93a:	e004      	b.n	801c946 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	1c5a      	adds	r2, r3, #1
 801c940:	60fa      	str	r2, [r7, #12]
 801c942:	78fa      	ldrb	r2, [r7, #3]
 801c944:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c946:	883b      	ldrh	r3, [r7, #0]
 801c948:	1e5a      	subs	r2, r3, #1
 801c94a:	803a      	strh	r2, [r7, #0]
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d1f5      	bne.n	801c93c <UTIL_MEM_set_8+0x16>
  }
}
 801c950:	bf00      	nop
 801c952:	bf00      	nop
 801c954:	3714      	adds	r7, #20
 801c956:	46bd      	mov	sp, r7
 801c958:	bc80      	pop	{r7}
 801c95a:	4770      	bx	lr

0801c95c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b08c      	sub	sp, #48	; 0x30
 801c960:	af00      	add	r7, sp, #0
 801c962:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c964:	4b67      	ldr	r3, [pc, #412]	; (801cb04 <UTIL_SEQ_Run+0x1a8>)
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c96a:	4b66      	ldr	r3, [pc, #408]	; (801cb04 <UTIL_SEQ_Run+0x1a8>)
 801c96c:	681a      	ldr	r2, [r3, #0]
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	4013      	ands	r3, r2
 801c972:	4a64      	ldr	r2, [pc, #400]	; (801cb04 <UTIL_SEQ_Run+0x1a8>)
 801c974:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c976:	e083      	b.n	801ca80 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801c978:	2300      	movs	r3, #0
 801c97a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c97c:	e002      	b.n	801c984 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c980:	3301      	adds	r3, #1
 801c982:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c984:	4a60      	ldr	r2, [pc, #384]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c988:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c98c:	4b5f      	ldr	r3, [pc, #380]	; (801cb0c <UTIL_SEQ_Run+0x1b0>)
 801c98e:	681b      	ldr	r3, [r3, #0]
 801c990:	401a      	ands	r2, r3
 801c992:	4b5c      	ldr	r3, [pc, #368]	; (801cb04 <UTIL_SEQ_Run+0x1a8>)
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	4013      	ands	r3, r2
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d0f0      	beq.n	801c97e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c99c:	4a5a      	ldr	r2, [pc, #360]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801c99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c9a4:	4b59      	ldr	r3, [pc, #356]	; (801cb0c <UTIL_SEQ_Run+0x1b0>)
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	401a      	ands	r2, r3
 801c9aa:	4b56      	ldr	r3, [pc, #344]	; (801cb04 <UTIL_SEQ_Run+0x1a8>)
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	4013      	ands	r3, r2
 801c9b0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c9b2:	4a55      	ldr	r2, [pc, #340]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9b6:	00db      	lsls	r3, r3, #3
 801c9b8:	4413      	add	r3, r2
 801c9ba:	685a      	ldr	r2, [r3, #4]
 801c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9be:	4013      	ands	r3, r2
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d106      	bne.n	801c9d2 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c9c4:	4a50      	ldr	r2, [pc, #320]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801c9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9c8:	00db      	lsls	r3, r3, #3
 801c9ca:	4413      	add	r3, r2
 801c9cc:	f04f 32ff 	mov.w	r2, #4294967295
 801c9d0:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c9d2:	4a4d      	ldr	r2, [pc, #308]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9d6:	00db      	lsls	r3, r3, #3
 801c9d8:	4413      	add	r3, r2
 801c9da:	685a      	ldr	r2, [r3, #4]
 801c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9de:	4013      	ands	r3, r2
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	f000 f8f9 	bl	801cbd8 <SEQ_BitPosition>
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	461a      	mov	r2, r3
 801c9ea:	4b49      	ldr	r3, [pc, #292]	; (801cb10 <UTIL_SEQ_Run+0x1b4>)
 801c9ec:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c9ee:	4a46      	ldr	r2, [pc, #280]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9f2:	00db      	lsls	r3, r3, #3
 801c9f4:	4413      	add	r3, r2
 801c9f6:	685a      	ldr	r2, [r3, #4]
 801c9f8:	4b45      	ldr	r3, [pc, #276]	; (801cb10 <UTIL_SEQ_Run+0x1b4>)
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	2101      	movs	r1, #1
 801c9fe:	fa01 f303 	lsl.w	r3, r1, r3
 801ca02:	43db      	mvns	r3, r3
 801ca04:	401a      	ands	r2, r3
 801ca06:	4940      	ldr	r1, [pc, #256]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801ca08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca0a:	00db      	lsls	r3, r3, #3
 801ca0c:	440b      	add	r3, r1
 801ca0e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca10:	f3ef 8310 	mrs	r3, PRIMASK
 801ca14:	61bb      	str	r3, [r7, #24]
  return(result);
 801ca16:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ca18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca1a:	b672      	cpsid	i
}
 801ca1c:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ca1e:	4b3c      	ldr	r3, [pc, #240]	; (801cb10 <UTIL_SEQ_Run+0x1b4>)
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	2201      	movs	r2, #1
 801ca24:	fa02 f303 	lsl.w	r3, r2, r3
 801ca28:	43da      	mvns	r2, r3
 801ca2a:	4b3a      	ldr	r3, [pc, #232]	; (801cb14 <UTIL_SEQ_Run+0x1b8>)
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	4013      	ands	r3, r2
 801ca30:	4a38      	ldr	r2, [pc, #224]	; (801cb14 <UTIL_SEQ_Run+0x1b8>)
 801ca32:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ca34:	2302      	movs	r3, #2
 801ca36:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca38:	e013      	b.n	801ca62 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ca3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca3c:	3b01      	subs	r3, #1
 801ca3e:	4a32      	ldr	r2, [pc, #200]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801ca40:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ca44:	4b32      	ldr	r3, [pc, #200]	; (801cb10 <UTIL_SEQ_Run+0x1b4>)
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	2201      	movs	r2, #1
 801ca4a:	fa02 f303 	lsl.w	r3, r2, r3
 801ca4e:	43da      	mvns	r2, r3
 801ca50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca52:	3b01      	subs	r3, #1
 801ca54:	400a      	ands	r2, r1
 801ca56:	492c      	ldr	r1, [pc, #176]	; (801cb08 <UTIL_SEQ_Run+0x1ac>)
 801ca58:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca5e:	3b01      	subs	r3, #1
 801ca60:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d1e8      	bne.n	801ca3a <UTIL_SEQ_Run+0xde>
 801ca68:	6a3b      	ldr	r3, [r7, #32]
 801ca6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca6c:	697b      	ldr	r3, [r7, #20]
 801ca6e:	f383 8810 	msr	PRIMASK, r3
}
 801ca72:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ca74:	4b26      	ldr	r3, [pc, #152]	; (801cb10 <UTIL_SEQ_Run+0x1b4>)
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	4a27      	ldr	r2, [pc, #156]	; (801cb18 <UTIL_SEQ_Run+0x1bc>)
 801ca7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ca7e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801ca80:	4b24      	ldr	r3, [pc, #144]	; (801cb14 <UTIL_SEQ_Run+0x1b8>)
 801ca82:	681a      	ldr	r2, [r3, #0]
 801ca84:	4b21      	ldr	r3, [pc, #132]	; (801cb0c <UTIL_SEQ_Run+0x1b0>)
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	401a      	ands	r2, r3
 801ca8a:	4b1e      	ldr	r3, [pc, #120]	; (801cb04 <UTIL_SEQ_Run+0x1a8>)
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	4013      	ands	r3, r2
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d007      	beq.n	801caa4 <UTIL_SEQ_Run+0x148>
 801ca94:	4b21      	ldr	r3, [pc, #132]	; (801cb1c <UTIL_SEQ_Run+0x1c0>)
 801ca96:	681a      	ldr	r2, [r3, #0]
 801ca98:	4b21      	ldr	r3, [pc, #132]	; (801cb20 <UTIL_SEQ_Run+0x1c4>)
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	4013      	ands	r3, r2
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	f43f af6a 	beq.w	801c978 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801caa4:	4b1a      	ldr	r3, [pc, #104]	; (801cb10 <UTIL_SEQ_Run+0x1b4>)
 801caa6:	f04f 32ff 	mov.w	r2, #4294967295
 801caaa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801caac:	f000 f888 	bl	801cbc0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cab0:	f3ef 8310 	mrs	r3, PRIMASK
 801cab4:	613b      	str	r3, [r7, #16]
  return(result);
 801cab6:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801cab8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801caba:	b672      	cpsid	i
}
 801cabc:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801cabe:	4b15      	ldr	r3, [pc, #84]	; (801cb14 <UTIL_SEQ_Run+0x1b8>)
 801cac0:	681a      	ldr	r2, [r3, #0]
 801cac2:	4b12      	ldr	r3, [pc, #72]	; (801cb0c <UTIL_SEQ_Run+0x1b0>)
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	401a      	ands	r2, r3
 801cac8:	4b0e      	ldr	r3, [pc, #56]	; (801cb04 <UTIL_SEQ_Run+0x1a8>)
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	4013      	ands	r3, r2
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d108      	bne.n	801cae4 <UTIL_SEQ_Run+0x188>
 801cad2:	4b12      	ldr	r3, [pc, #72]	; (801cb1c <UTIL_SEQ_Run+0x1c0>)
 801cad4:	681a      	ldr	r2, [r3, #0]
 801cad6:	4b12      	ldr	r3, [pc, #72]	; (801cb20 <UTIL_SEQ_Run+0x1c4>)
 801cad8:	681b      	ldr	r3, [r3, #0]
 801cada:	4013      	ands	r3, r2
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d101      	bne.n	801cae4 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801cae0:	f7e4 ff90 	bl	8001a04 <UTIL_SEQ_Idle>
 801cae4:	69fb      	ldr	r3, [r7, #28]
 801cae6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	f383 8810 	msr	PRIMASK, r3
}
 801caee:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801caf0:	f000 f86c 	bl	801cbcc <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801caf4:	4a03      	ldr	r2, [pc, #12]	; (801cb04 <UTIL_SEQ_Run+0x1a8>)
 801caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801caf8:	6013      	str	r3, [r2, #0]

  return;
 801cafa:	bf00      	nop
}
 801cafc:	3730      	adds	r7, #48	; 0x30
 801cafe:	46bd      	mov	sp, r7
 801cb00:	bd80      	pop	{r7, pc}
 801cb02:	bf00      	nop
 801cb04:	2000010c 	.word	0x2000010c
 801cb08:	2000453c 	.word	0x2000453c
 801cb0c:	20000108 	.word	0x20000108
 801cb10:	200044b8 	.word	0x200044b8
 801cb14:	200044ac 	.word	0x200044ac
 801cb18:	200044bc 	.word	0x200044bc
 801cb1c:	200044b0 	.word	0x200044b0
 801cb20:	200044b4 	.word	0x200044b4

0801cb24 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801cb24:	b580      	push	{r7, lr}
 801cb26:	b088      	sub	sp, #32
 801cb28:	af00      	add	r7, sp, #0
 801cb2a:	60f8      	str	r0, [r7, #12]
 801cb2c:	60b9      	str	r1, [r7, #8]
 801cb2e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb30:	f3ef 8310 	mrs	r3, PRIMASK
 801cb34:	617b      	str	r3, [r7, #20]
  return(result);
 801cb36:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801cb38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb3a:	b672      	cpsid	i
}
 801cb3c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801cb3e:	68f8      	ldr	r0, [r7, #12]
 801cb40:	f000 f84a 	bl	801cbd8 <SEQ_BitPosition>
 801cb44:	4603      	mov	r3, r0
 801cb46:	4619      	mov	r1, r3
 801cb48:	4a06      	ldr	r2, [pc, #24]	; (801cb64 <UTIL_SEQ_RegTask+0x40>)
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801cb50:	69fb      	ldr	r3, [r7, #28]
 801cb52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb54:	69bb      	ldr	r3, [r7, #24]
 801cb56:	f383 8810 	msr	PRIMASK, r3
}
 801cb5a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801cb5c:	bf00      	nop
}
 801cb5e:	3720      	adds	r7, #32
 801cb60:	46bd      	mov	sp, r7
 801cb62:	bd80      	pop	{r7, pc}
 801cb64:	200044bc 	.word	0x200044bc

0801cb68 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801cb68:	b480      	push	{r7}
 801cb6a:	b087      	sub	sp, #28
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
 801cb70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb72:	f3ef 8310 	mrs	r3, PRIMASK
 801cb76:	60fb      	str	r3, [r7, #12]
  return(result);
 801cb78:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cb7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb7c:	b672      	cpsid	i
}
 801cb7e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801cb80:	4b0d      	ldr	r3, [pc, #52]	; (801cbb8 <UTIL_SEQ_SetTask+0x50>)
 801cb82:	681a      	ldr	r2, [r3, #0]
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	4313      	orrs	r3, r2
 801cb88:	4a0b      	ldr	r2, [pc, #44]	; (801cbb8 <UTIL_SEQ_SetTask+0x50>)
 801cb8a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801cb8c:	4a0b      	ldr	r2, [pc, #44]	; (801cbbc <UTIL_SEQ_SetTask+0x54>)
 801cb8e:	683b      	ldr	r3, [r7, #0]
 801cb90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	431a      	orrs	r2, r3
 801cb98:	4908      	ldr	r1, [pc, #32]	; (801cbbc <UTIL_SEQ_SetTask+0x54>)
 801cb9a:	683b      	ldr	r3, [r7, #0]
 801cb9c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801cba0:	697b      	ldr	r3, [r7, #20]
 801cba2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cba4:	693b      	ldr	r3, [r7, #16]
 801cba6:	f383 8810 	msr	PRIMASK, r3
}
 801cbaa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801cbac:	bf00      	nop
}
 801cbae:	371c      	adds	r7, #28
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	bc80      	pop	{r7}
 801cbb4:	4770      	bx	lr
 801cbb6:	bf00      	nop
 801cbb8:	200044ac 	.word	0x200044ac
 801cbbc:	2000453c 	.word	0x2000453c

0801cbc0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801cbc0:	b480      	push	{r7}
 801cbc2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cbc4:	bf00      	nop
}
 801cbc6:	46bd      	mov	sp, r7
 801cbc8:	bc80      	pop	{r7}
 801cbca:	4770      	bx	lr

0801cbcc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801cbcc:	b480      	push	{r7}
 801cbce:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cbd0:	bf00      	nop
}
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bc80      	pop	{r7}
 801cbd6:	4770      	bx	lr

0801cbd8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801cbd8:	b480      	push	{r7}
 801cbda:	b085      	sub	sp, #20
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	0c1b      	lsrs	r3, r3, #16
 801cbe8:	041b      	lsls	r3, r3, #16
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d104      	bne.n	801cbf8 <SEQ_BitPosition+0x20>
 801cbee:	2310      	movs	r3, #16
 801cbf0:	73fb      	strb	r3, [r7, #15]
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	041b      	lsls	r3, r3, #16
 801cbf6:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d105      	bne.n	801cc0e <SEQ_BitPosition+0x36>
 801cc02:	7bfb      	ldrb	r3, [r7, #15]
 801cc04:	3308      	adds	r3, #8
 801cc06:	73fb      	strb	r3, [r7, #15]
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	021b      	lsls	r3, r3, #8
 801cc0c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d105      	bne.n	801cc24 <SEQ_BitPosition+0x4c>
 801cc18:	7bfb      	ldrb	r3, [r7, #15]
 801cc1a:	3304      	adds	r3, #4
 801cc1c:	73fb      	strb	r3, [r7, #15]
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	011b      	lsls	r3, r3, #4
 801cc22:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	0f1b      	lsrs	r3, r3, #28
 801cc28:	4a06      	ldr	r2, [pc, #24]	; (801cc44 <SEQ_BitPosition+0x6c>)
 801cc2a:	5cd2      	ldrb	r2, [r2, r3]
 801cc2c:	7bfb      	ldrb	r3, [r7, #15]
 801cc2e:	4413      	add	r3, r2
 801cc30:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801cc32:	7bfb      	ldrb	r3, [r7, #15]
 801cc34:	f1c3 031f 	rsb	r3, r3, #31
 801cc38:	b2db      	uxtb	r3, r3
}
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	3714      	adds	r7, #20
 801cc3e:	46bd      	mov	sp, r7
 801cc40:	bc80      	pop	{r7}
 801cc42:	4770      	bx	lr
 801cc44:	0801e874 	.word	0x0801e874

0801cc48 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801cc48:	b082      	sub	sp, #8
 801cc4a:	b480      	push	{r7}
 801cc4c:	b087      	sub	sp, #28
 801cc4e:	af00      	add	r7, sp, #0
 801cc50:	60f8      	str	r0, [r7, #12]
 801cc52:	1d38      	adds	r0, r7, #4
 801cc54:	e880 0006 	stmia.w	r0, {r1, r2}
 801cc58:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	613b      	str	r3, [r7, #16]
 801cc5e:	2300      	movs	r3, #0
 801cc60:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801cc62:	687a      	ldr	r2, [r7, #4]
 801cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc66:	4413      	add	r3, r2
 801cc68:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801cc6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cc6e:	b29a      	uxth	r2, r3
 801cc70:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cc74:	b29b      	uxth	r3, r3
 801cc76:	4413      	add	r3, r2
 801cc78:	b29b      	uxth	r3, r3
 801cc7a:	b21b      	sxth	r3, r3
 801cc7c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801cc7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cc82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cc86:	db0a      	blt.n	801cc9e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801cc88:	693b      	ldr	r3, [r7, #16]
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801cc8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cc92:	b29b      	uxth	r3, r3
 801cc94:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801cc98:	b29b      	uxth	r3, r3
 801cc9a:	b21b      	sxth	r3, r3
 801cc9c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	461a      	mov	r2, r3
 801cca2:	f107 0310 	add.w	r3, r7, #16
 801cca6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ccaa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ccae:	68f8      	ldr	r0, [r7, #12]
 801ccb0:	371c      	adds	r7, #28
 801ccb2:	46bd      	mov	sp, r7
 801ccb4:	bc80      	pop	{r7}
 801ccb6:	b002      	add	sp, #8
 801ccb8:	4770      	bx	lr

0801ccba <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801ccba:	b082      	sub	sp, #8
 801ccbc:	b480      	push	{r7}
 801ccbe:	b087      	sub	sp, #28
 801ccc0:	af00      	add	r7, sp, #0
 801ccc2:	60f8      	str	r0, [r7, #12]
 801ccc4:	1d38      	adds	r0, r7, #4
 801ccc6:	e880 0006 	stmia.w	r0, {r1, r2}
 801ccca:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801cccc:	2300      	movs	r3, #0
 801ccce:	613b      	str	r3, [r7, #16]
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801ccd4:	687a      	ldr	r2, [r7, #4]
 801ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccd8:	1ad3      	subs	r3, r2, r3
 801ccda:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ccdc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cce0:	b29a      	uxth	r2, r3
 801cce2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cce6:	b29b      	uxth	r3, r3
 801cce8:	1ad3      	subs	r3, r2, r3
 801ccea:	b29b      	uxth	r3, r3
 801ccec:	b21b      	sxth	r3, r3
 801ccee:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801ccf0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	da0a      	bge.n	801cd0e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801ccf8:	693b      	ldr	r3, [r7, #16]
 801ccfa:	3b01      	subs	r3, #1
 801ccfc:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801ccfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cd02:	b29b      	uxth	r3, r3
 801cd04:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801cd08:	b29b      	uxth	r3, r3
 801cd0a:	b21b      	sxth	r3, r3
 801cd0c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	461a      	mov	r2, r3
 801cd12:	f107 0310 	add.w	r3, r7, #16
 801cd16:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cd1a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cd1e:	68f8      	ldr	r0, [r7, #12]
 801cd20:	371c      	adds	r7, #28
 801cd22:	46bd      	mov	sp, r7
 801cd24:	bc80      	pop	{r7}
 801cd26:	b002      	add	sp, #8
 801cd28:	4770      	bx	lr
	...

0801cd2c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b088      	sub	sp, #32
 801cd30:	af02      	add	r7, sp, #8
 801cd32:	463b      	mov	r3, r7
 801cd34:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cd38:	2300      	movs	r3, #0
 801cd3a:	60bb      	str	r3, [r7, #8]
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cd40:	4b10      	ldr	r3, [pc, #64]	; (801cd84 <SysTimeSet+0x58>)
 801cd42:	691b      	ldr	r3, [r3, #16]
 801cd44:	f107 0208 	add.w	r2, r7, #8
 801cd48:	3204      	adds	r2, #4
 801cd4a:	4610      	mov	r0, r2
 801cd4c:	4798      	blx	r3
 801cd4e:	4603      	mov	r3, r0
 801cd50:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801cd52:	f107 0010 	add.w	r0, r7, #16
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	9300      	str	r3, [sp, #0]
 801cd5a:	68bb      	ldr	r3, [r7, #8]
 801cd5c:	463a      	mov	r2, r7
 801cd5e:	ca06      	ldmia	r2, {r1, r2}
 801cd60:	f7ff ffab 	bl	801ccba <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801cd64:	4b07      	ldr	r3, [pc, #28]	; (801cd84 <SysTimeSet+0x58>)
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	693a      	ldr	r2, [r7, #16]
 801cd6a:	4610      	mov	r0, r2
 801cd6c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801cd6e:	4b05      	ldr	r3, [pc, #20]	; (801cd84 <SysTimeSet+0x58>)
 801cd70:	689b      	ldr	r3, [r3, #8]
 801cd72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801cd76:	4610      	mov	r0, r2
 801cd78:	4798      	blx	r3
}
 801cd7a:	bf00      	nop
 801cd7c:	3718      	adds	r7, #24
 801cd7e:	46bd      	mov	sp, r7
 801cd80:	bd80      	pop	{r7, pc}
 801cd82:	bf00      	nop
 801cd84:	0801e320 	.word	0x0801e320

0801cd88 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801cd88:	b580      	push	{r7, lr}
 801cd8a:	b08a      	sub	sp, #40	; 0x28
 801cd8c:	af02      	add	r7, sp, #8
 801cd8e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cd90:	2300      	movs	r3, #0
 801cd92:	61bb      	str	r3, [r7, #24]
 801cd94:	2300      	movs	r3, #0
 801cd96:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801cd98:	2300      	movs	r3, #0
 801cd9a:	613b      	str	r3, [r7, #16]
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cda0:	4b14      	ldr	r3, [pc, #80]	; (801cdf4 <SysTimeGet+0x6c>)
 801cda2:	691b      	ldr	r3, [r3, #16]
 801cda4:	f107 0218 	add.w	r2, r7, #24
 801cda8:	3204      	adds	r2, #4
 801cdaa:	4610      	mov	r0, r2
 801cdac:	4798      	blx	r3
 801cdae:	4603      	mov	r3, r0
 801cdb0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cdb2:	4b10      	ldr	r3, [pc, #64]	; (801cdf4 <SysTimeGet+0x6c>)
 801cdb4:	68db      	ldr	r3, [r3, #12]
 801cdb6:	4798      	blx	r3
 801cdb8:	4603      	mov	r3, r0
 801cdba:	b21b      	sxth	r3, r3
 801cdbc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cdbe:	4b0d      	ldr	r3, [pc, #52]	; (801cdf4 <SysTimeGet+0x6c>)
 801cdc0:	685b      	ldr	r3, [r3, #4]
 801cdc2:	4798      	blx	r3
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801cdc8:	f107 0010 	add.w	r0, r7, #16
 801cdcc:	69fb      	ldr	r3, [r7, #28]
 801cdce:	9300      	str	r3, [sp, #0]
 801cdd0:	69bb      	ldr	r3, [r7, #24]
 801cdd2:	f107 0208 	add.w	r2, r7, #8
 801cdd6:	ca06      	ldmia	r2, {r1, r2}
 801cdd8:	f7ff ff36 	bl	801cc48 <SysTimeAdd>

  return sysTime;
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	461a      	mov	r2, r3
 801cde0:	f107 0310 	add.w	r3, r7, #16
 801cde4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cde8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cdec:	6878      	ldr	r0, [r7, #4]
 801cdee:	3720      	adds	r7, #32
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}
 801cdf4:	0801e320 	.word	0x0801e320

0801cdf8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	b084      	sub	sp, #16
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ce00:	2300      	movs	r3, #0
 801ce02:	60bb      	str	r3, [r7, #8]
 801ce04:	2300      	movs	r3, #0
 801ce06:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ce08:	4b0a      	ldr	r3, [pc, #40]	; (801ce34 <SysTimeGetMcuTime+0x3c>)
 801ce0a:	691b      	ldr	r3, [r3, #16]
 801ce0c:	f107 0208 	add.w	r2, r7, #8
 801ce10:	3204      	adds	r2, #4
 801ce12:	4610      	mov	r0, r2
 801ce14:	4798      	blx	r3
 801ce16:	4603      	mov	r3, r0
 801ce18:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	461a      	mov	r2, r3
 801ce1e:	f107 0308 	add.w	r3, r7, #8
 801ce22:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ce26:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ce2a:	6878      	ldr	r0, [r7, #4]
 801ce2c:	3710      	adds	r7, #16
 801ce2e:	46bd      	mov	sp, r7
 801ce30:	bd80      	pop	{r7, pc}
 801ce32:	bf00      	nop
 801ce34:	0801e320 	.word	0x0801e320

0801ce38 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b088      	sub	sp, #32
 801ce3c:	af02      	add	r7, sp, #8
 801ce3e:	463b      	mov	r3, r7
 801ce40:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ce44:	4b0f      	ldr	r3, [pc, #60]	; (801ce84 <SysTimeToMs+0x4c>)
 801ce46:	68db      	ldr	r3, [r3, #12]
 801ce48:	4798      	blx	r3
 801ce4a:	4603      	mov	r3, r0
 801ce4c:	b21b      	sxth	r3, r3
 801ce4e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ce50:	4b0c      	ldr	r3, [pc, #48]	; (801ce84 <SysTimeToMs+0x4c>)
 801ce52:	685b      	ldr	r3, [r3, #4]
 801ce54:	4798      	blx	r3
 801ce56:	4603      	mov	r3, r0
 801ce58:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801ce5a:	f107 0008 	add.w	r0, r7, #8
 801ce5e:	697b      	ldr	r3, [r7, #20]
 801ce60:	9300      	str	r3, [sp, #0]
 801ce62:	693b      	ldr	r3, [r7, #16]
 801ce64:	463a      	mov	r2, r7
 801ce66:	ca06      	ldmia	r2, {r1, r2}
 801ce68:	f7ff ff27 	bl	801ccba <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801ce6c:	68bb      	ldr	r3, [r7, #8]
 801ce6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ce72:	fb02 f303 	mul.w	r3, r2, r3
 801ce76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801ce7a:	4413      	add	r3, r2
}
 801ce7c:	4618      	mov	r0, r3
 801ce7e:	3718      	adds	r7, #24
 801ce80:	46bd      	mov	sp, r7
 801ce82:	bd80      	pop	{r7, pc}
 801ce84:	0801e320 	.word	0x0801e320

0801ce88 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b08a      	sub	sp, #40	; 0x28
 801ce8c:	af02      	add	r7, sp, #8
 801ce8e:	6078      	str	r0, [r7, #4]
 801ce90:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801ce92:	683b      	ldr	r3, [r7, #0]
 801ce94:	4a19      	ldr	r2, [pc, #100]	; (801cefc <SysTimeFromMs+0x74>)
 801ce96:	fba2 2303 	umull	r2, r3, r2, r3
 801ce9a:	099b      	lsrs	r3, r3, #6
 801ce9c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801ce9e:	69fb      	ldr	r3, [r7, #28]
 801cea0:	617b      	str	r3, [r7, #20]
 801cea2:	683b      	ldr	r3, [r7, #0]
 801cea4:	b29a      	uxth	r2, r3
 801cea6:	69fb      	ldr	r3, [r7, #28]
 801cea8:	b29b      	uxth	r3, r3
 801ceaa:	4619      	mov	r1, r3
 801ceac:	0149      	lsls	r1, r1, #5
 801ceae:	1ac9      	subs	r1, r1, r3
 801ceb0:	0089      	lsls	r1, r1, #2
 801ceb2:	440b      	add	r3, r1
 801ceb4:	00db      	lsls	r3, r3, #3
 801ceb6:	b29b      	uxth	r3, r3
 801ceb8:	1ad3      	subs	r3, r2, r3
 801ceba:	b29b      	uxth	r3, r3
 801cebc:	b21b      	sxth	r3, r3
 801cebe:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801cec0:	f107 030c 	add.w	r3, r7, #12
 801cec4:	2200      	movs	r2, #0
 801cec6:	601a      	str	r2, [r3, #0]
 801cec8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ceca:	4b0d      	ldr	r3, [pc, #52]	; (801cf00 <SysTimeFromMs+0x78>)
 801cecc:	68db      	ldr	r3, [r3, #12]
 801cece:	4798      	blx	r3
 801ced0:	4603      	mov	r3, r0
 801ced2:	b21b      	sxth	r3, r3
 801ced4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ced6:	4b0a      	ldr	r3, [pc, #40]	; (801cf00 <SysTimeFromMs+0x78>)
 801ced8:	685b      	ldr	r3, [r3, #4]
 801ceda:	4798      	blx	r3
 801cedc:	4603      	mov	r3, r0
 801cede:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801cee0:	6878      	ldr	r0, [r7, #4]
 801cee2:	693b      	ldr	r3, [r7, #16]
 801cee4:	9300      	str	r3, [sp, #0]
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	f107 0214 	add.w	r2, r7, #20
 801ceec:	ca06      	ldmia	r2, {r1, r2}
 801ceee:	f7ff feab 	bl	801cc48 <SysTimeAdd>
}
 801cef2:	6878      	ldr	r0, [r7, #4]
 801cef4:	3720      	adds	r7, #32
 801cef6:	46bd      	mov	sp, r7
 801cef8:	bd80      	pop	{r7, pc}
 801cefa:	bf00      	nop
 801cefc:	10624dd3 	.word	0x10624dd3
 801cf00:	0801e320 	.word	0x0801e320

0801cf04 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cf04:	b580      	push	{r7, lr}
 801cf06:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cf08:	4b04      	ldr	r3, [pc, #16]	; (801cf1c <UTIL_TIMER_Init+0x18>)
 801cf0a:	2200      	movs	r2, #0
 801cf0c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cf0e:	4b04      	ldr	r3, [pc, #16]	; (801cf20 <UTIL_TIMER_Init+0x1c>)
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	4798      	blx	r3
 801cf14:	4603      	mov	r3, r0
}
 801cf16:	4618      	mov	r0, r3
 801cf18:	bd80      	pop	{r7, pc}
 801cf1a:	bf00      	nop
 801cf1c:	2000454c 	.word	0x2000454c
 801cf20:	0801e2f4 	.word	0x0801e2f4

0801cf24 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b084      	sub	sp, #16
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	60f8      	str	r0, [r7, #12]
 801cf2c:	60b9      	str	r1, [r7, #8]
 801cf2e:	603b      	str	r3, [r7, #0]
 801cf30:	4613      	mov	r3, r2
 801cf32:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d023      	beq.n	801cf82 <UTIL_TIMER_Create+0x5e>
 801cf3a:	683b      	ldr	r3, [r7, #0]
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	d020      	beq.n	801cf82 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	2200      	movs	r2, #0
 801cf44:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cf46:	4b11      	ldr	r3, [pc, #68]	; (801cf8c <UTIL_TIMER_Create+0x68>)
 801cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf4a:	68b8      	ldr	r0, [r7, #8]
 801cf4c:	4798      	blx	r3
 801cf4e:	4602      	mov	r2, r0
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	2200      	movs	r2, #0
 801cf58:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	2200      	movs	r2, #0
 801cf5e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	2200      	movs	r2, #0
 801cf64:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	683a      	ldr	r2, [r7, #0]
 801cf6a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cf6c:	68fb      	ldr	r3, [r7, #12]
 801cf6e:	69ba      	ldr	r2, [r7, #24]
 801cf70:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	79fa      	ldrb	r2, [r7, #7]
 801cf76:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cf7e:	2300      	movs	r3, #0
 801cf80:	e000      	b.n	801cf84 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cf82:	2301      	movs	r3, #1
  }
}
 801cf84:	4618      	mov	r0, r3
 801cf86:	3710      	adds	r7, #16
 801cf88:	46bd      	mov	sp, r7
 801cf8a:	bd80      	pop	{r7, pc}
 801cf8c:	0801e2f4 	.word	0x0801e2f4

0801cf90 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cf90:	b580      	push	{r7, lr}
 801cf92:	b08a      	sub	sp, #40	; 0x28
 801cf94:	af00      	add	r7, sp, #0
 801cf96:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cf98:	2300      	movs	r3, #0
 801cf9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d056      	beq.n	801d052 <UTIL_TIMER_Start+0xc2>
 801cfa4:	6878      	ldr	r0, [r7, #4]
 801cfa6:	f000 f9a9 	bl	801d2fc <TimerExists>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	f083 0301 	eor.w	r3, r3, #1
 801cfb0:	b2db      	uxtb	r3, r3
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d04d      	beq.n	801d052 <UTIL_TIMER_Start+0xc2>
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	7a5b      	ldrb	r3, [r3, #9]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d149      	bne.n	801d052 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cfbe:	f3ef 8310 	mrs	r3, PRIMASK
 801cfc2:	613b      	str	r3, [r7, #16]
  return(result);
 801cfc4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cfc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cfc8:	b672      	cpsid	i
}
 801cfca:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	685b      	ldr	r3, [r3, #4]
 801cfd0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801cfd2:	4b24      	ldr	r3, [pc, #144]	; (801d064 <UTIL_TIMER_Start+0xd4>)
 801cfd4:	6a1b      	ldr	r3, [r3, #32]
 801cfd6:	4798      	blx	r3
 801cfd8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801cfda:	6a3a      	ldr	r2, [r7, #32]
 801cfdc:	69bb      	ldr	r3, [r7, #24]
 801cfde:	429a      	cmp	r2, r3
 801cfe0:	d201      	bcs.n	801cfe6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801cfe2:	69bb      	ldr	r3, [r7, #24]
 801cfe4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	6a3a      	ldr	r2, [r7, #32]
 801cfea:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	2200      	movs	r2, #0
 801cff0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	2201      	movs	r2, #1
 801cff6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	2200      	movs	r2, #0
 801cffc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cffe:	4b1a      	ldr	r3, [pc, #104]	; (801d068 <UTIL_TIMER_Start+0xd8>)
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	2b00      	cmp	r3, #0
 801d004:	d106      	bne.n	801d014 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801d006:	4b17      	ldr	r3, [pc, #92]	; (801d064 <UTIL_TIMER_Start+0xd4>)
 801d008:	691b      	ldr	r3, [r3, #16]
 801d00a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801d00c:	6878      	ldr	r0, [r7, #4]
 801d00e:	f000 f9eb 	bl	801d3e8 <TimerInsertNewHeadTimer>
 801d012:	e017      	b.n	801d044 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801d014:	4b13      	ldr	r3, [pc, #76]	; (801d064 <UTIL_TIMER_Start+0xd4>)
 801d016:	699b      	ldr	r3, [r3, #24]
 801d018:	4798      	blx	r3
 801d01a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	681a      	ldr	r2, [r3, #0]
 801d020:	697b      	ldr	r3, [r7, #20]
 801d022:	441a      	add	r2, r3
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	681a      	ldr	r2, [r3, #0]
 801d02c:	4b0e      	ldr	r3, [pc, #56]	; (801d068 <UTIL_TIMER_Start+0xd8>)
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	429a      	cmp	r2, r3
 801d034:	d203      	bcs.n	801d03e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801d036:	6878      	ldr	r0, [r7, #4]
 801d038:	f000 f9d6 	bl	801d3e8 <TimerInsertNewHeadTimer>
 801d03c:	e002      	b.n	801d044 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801d03e:	6878      	ldr	r0, [r7, #4]
 801d040:	f000 f9a2 	bl	801d388 <TimerInsertTimer>
 801d044:	69fb      	ldr	r3, [r7, #28]
 801d046:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d048:	68fb      	ldr	r3, [r7, #12]
 801d04a:	f383 8810 	msr	PRIMASK, r3
}
 801d04e:	bf00      	nop
  {
 801d050:	e002      	b.n	801d058 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d052:	2301      	movs	r3, #1
 801d054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801d058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d05c:	4618      	mov	r0, r3
 801d05e:	3728      	adds	r7, #40	; 0x28
 801d060:	46bd      	mov	sp, r7
 801d062:	bd80      	pop	{r7, pc}
 801d064:	0801e2f4 	.word	0x0801e2f4
 801d068:	2000454c 	.word	0x2000454c

0801d06c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d06c:	b580      	push	{r7, lr}
 801d06e:	b088      	sub	sp, #32
 801d070:	af00      	add	r7, sp, #0
 801d072:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d074:	2300      	movs	r3, #0
 801d076:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d05b      	beq.n	801d136 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d07e:	f3ef 8310 	mrs	r3, PRIMASK
 801d082:	60fb      	str	r3, [r7, #12]
  return(result);
 801d084:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d088:	b672      	cpsid	i
}
 801d08a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801d08c:	4b2d      	ldr	r3, [pc, #180]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801d092:	4b2c      	ldr	r3, [pc, #176]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	2201      	movs	r2, #1
 801d09c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801d09e:	4b29      	ldr	r3, [pc, #164]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d041      	beq.n	801d12a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	2200      	movs	r2, #0
 801d0aa:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801d0ac:	4b25      	ldr	r3, [pc, #148]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	687a      	ldr	r2, [r7, #4]
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	d134      	bne.n	801d120 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801d0b6:	4b23      	ldr	r3, [pc, #140]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801d0be:	4b21      	ldr	r3, [pc, #132]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	695b      	ldr	r3, [r3, #20]
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d00a      	beq.n	801d0de <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801d0c8:	4b1e      	ldr	r3, [pc, #120]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	695b      	ldr	r3, [r3, #20]
 801d0ce:	4a1d      	ldr	r2, [pc, #116]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d0d0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801d0d2:	4b1c      	ldr	r3, [pc, #112]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	f000 f92c 	bl	801d334 <TimerSetTimeout>
 801d0dc:	e023      	b.n	801d126 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801d0de:	4b1a      	ldr	r3, [pc, #104]	; (801d148 <UTIL_TIMER_Stop+0xdc>)
 801d0e0:	68db      	ldr	r3, [r3, #12]
 801d0e2:	4798      	blx	r3
            TimerListHead = NULL;
 801d0e4:	4b17      	ldr	r3, [pc, #92]	; (801d144 <UTIL_TIMER_Stop+0xd8>)
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	601a      	str	r2, [r3, #0]
 801d0ea:	e01c      	b.n	801d126 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801d0ec:	697a      	ldr	r2, [r7, #20]
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	429a      	cmp	r2, r3
 801d0f2:	d110      	bne.n	801d116 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801d0f4:	697b      	ldr	r3, [r7, #20]
 801d0f6:	695b      	ldr	r3, [r3, #20]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d006      	beq.n	801d10a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801d0fc:	697b      	ldr	r3, [r7, #20]
 801d0fe:	695b      	ldr	r3, [r3, #20]
 801d100:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d102:	69bb      	ldr	r3, [r7, #24]
 801d104:	697a      	ldr	r2, [r7, #20]
 801d106:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801d108:	e00d      	b.n	801d126 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801d10a:	2300      	movs	r3, #0
 801d10c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d10e:	69bb      	ldr	r3, [r7, #24]
 801d110:	697a      	ldr	r2, [r7, #20]
 801d112:	615a      	str	r2, [r3, #20]
            break;
 801d114:	e007      	b.n	801d126 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801d116:	697b      	ldr	r3, [r7, #20]
 801d118:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801d11a:	697b      	ldr	r3, [r7, #20]
 801d11c:	695b      	ldr	r3, [r3, #20]
 801d11e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801d120:	697b      	ldr	r3, [r7, #20]
 801d122:	2b00      	cmp	r3, #0
 801d124:	d1e2      	bne.n	801d0ec <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801d126:	2300      	movs	r3, #0
 801d128:	77fb      	strb	r3, [r7, #31]
 801d12a:	693b      	ldr	r3, [r7, #16]
 801d12c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d12e:	68bb      	ldr	r3, [r7, #8]
 801d130:	f383 8810 	msr	PRIMASK, r3
}
 801d134:	e001      	b.n	801d13a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801d136:	2301      	movs	r3, #1
 801d138:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801d13a:	7ffb      	ldrb	r3, [r7, #31]
}
 801d13c:	4618      	mov	r0, r3
 801d13e:	3720      	adds	r7, #32
 801d140:	46bd      	mov	sp, r7
 801d142:	bd80      	pop	{r7, pc}
 801d144:	2000454c 	.word	0x2000454c
 801d148:	0801e2f4 	.word	0x0801e2f4

0801d14c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801d14c:	b580      	push	{r7, lr}
 801d14e:	b084      	sub	sp, #16
 801d150:	af00      	add	r7, sp, #0
 801d152:	6078      	str	r0, [r7, #4]
 801d154:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d156:	2300      	movs	r3, #0
 801d158:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d102      	bne.n	801d166 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d160:	2301      	movs	r3, #1
 801d162:	73fb      	strb	r3, [r7, #15]
 801d164:	e014      	b.n	801d190 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d166:	4b0d      	ldr	r3, [pc, #52]	; (801d19c <UTIL_TIMER_SetPeriod+0x50>)
 801d168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d16a:	6838      	ldr	r0, [r7, #0]
 801d16c:	4798      	blx	r3
 801d16e:	4602      	mov	r2, r0
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d174:	6878      	ldr	r0, [r7, #4]
 801d176:	f000 f8c1 	bl	801d2fc <TimerExists>
 801d17a:	4603      	mov	r3, r0
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d007      	beq.n	801d190 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d180:	6878      	ldr	r0, [r7, #4]
 801d182:	f7ff ff73 	bl	801d06c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d186:	6878      	ldr	r0, [r7, #4]
 801d188:	f7ff ff02 	bl	801cf90 <UTIL_TIMER_Start>
 801d18c:	4603      	mov	r3, r0
 801d18e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d190:	7bfb      	ldrb	r3, [r7, #15]
}
 801d192:	4618      	mov	r0, r3
 801d194:	3710      	adds	r7, #16
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}
 801d19a:	bf00      	nop
 801d19c:	0801e2f4 	.word	0x0801e2f4

0801d1a0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d1a0:	b590      	push	{r4, r7, lr}
 801d1a2:	b089      	sub	sp, #36	; 0x24
 801d1a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1a6:	f3ef 8310 	mrs	r3, PRIMASK
 801d1aa:	60bb      	str	r3, [r7, #8]
  return(result);
 801d1ac:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d1ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d1b0:	b672      	cpsid	i
}
 801d1b2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d1b4:	4b38      	ldr	r3, [pc, #224]	; (801d298 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d1b6:	695b      	ldr	r3, [r3, #20]
 801d1b8:	4798      	blx	r3
 801d1ba:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d1bc:	4b36      	ldr	r3, [pc, #216]	; (801d298 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d1be:	691b      	ldr	r3, [r3, #16]
 801d1c0:	4798      	blx	r3
 801d1c2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d1c4:	693a      	ldr	r2, [r7, #16]
 801d1c6:	697b      	ldr	r3, [r7, #20]
 801d1c8:	1ad3      	subs	r3, r2, r3
 801d1ca:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d1cc:	4b33      	ldr	r3, [pc, #204]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d037      	beq.n	801d244 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d1d4:	4b31      	ldr	r3, [pc, #196]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d1da:	69fb      	ldr	r3, [r7, #28]
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	68fa      	ldr	r2, [r7, #12]
 801d1e0:	429a      	cmp	r2, r3
 801d1e2:	d206      	bcs.n	801d1f2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d1e4:	69fb      	ldr	r3, [r7, #28]
 801d1e6:	681a      	ldr	r2, [r3, #0]
 801d1e8:	68fb      	ldr	r3, [r7, #12]
 801d1ea:	1ad2      	subs	r2, r2, r3
 801d1ec:	69fb      	ldr	r3, [r7, #28]
 801d1ee:	601a      	str	r2, [r3, #0]
 801d1f0:	e002      	b.n	801d1f8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d1f2:	69fb      	ldr	r3, [r7, #28]
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d1f8:	69fb      	ldr	r3, [r7, #28]
 801d1fa:	695b      	ldr	r3, [r3, #20]
 801d1fc:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d1fe:	69fb      	ldr	r3, [r7, #28]
 801d200:	2b00      	cmp	r3, #0
 801d202:	d1ea      	bne.n	801d1da <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d204:	e01e      	b.n	801d244 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d206:	4b25      	ldr	r3, [pc, #148]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d20c:	4b23      	ldr	r3, [pc, #140]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	695b      	ldr	r3, [r3, #20]
 801d212:	4a22      	ldr	r2, [pc, #136]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d214:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d216:	69fb      	ldr	r3, [r7, #28]
 801d218:	2200      	movs	r2, #0
 801d21a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d21c:	69fb      	ldr	r3, [r7, #28]
 801d21e:	2200      	movs	r2, #0
 801d220:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d222:	69fb      	ldr	r3, [r7, #28]
 801d224:	68db      	ldr	r3, [r3, #12]
 801d226:	69fa      	ldr	r2, [r7, #28]
 801d228:	6912      	ldr	r2, [r2, #16]
 801d22a:	4610      	mov	r0, r2
 801d22c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d22e:	69fb      	ldr	r3, [r7, #28]
 801d230:	7adb      	ldrb	r3, [r3, #11]
 801d232:	2b01      	cmp	r3, #1
 801d234:	d106      	bne.n	801d244 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d236:	69fb      	ldr	r3, [r7, #28]
 801d238:	7a9b      	ldrb	r3, [r3, #10]
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d102      	bne.n	801d244 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d23e:	69f8      	ldr	r0, [r7, #28]
 801d240:	f7ff fea6 	bl	801cf90 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d244:	4b15      	ldr	r3, [pc, #84]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d246:	681b      	ldr	r3, [r3, #0]
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d00d      	beq.n	801d268 <UTIL_TIMER_IRQ_Handler+0xc8>
 801d24c:	4b13      	ldr	r3, [pc, #76]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d0d7      	beq.n	801d206 <UTIL_TIMER_IRQ_Handler+0x66>
 801d256:	4b11      	ldr	r3, [pc, #68]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	681c      	ldr	r4, [r3, #0]
 801d25c:	4b0e      	ldr	r3, [pc, #56]	; (801d298 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d25e:	699b      	ldr	r3, [r3, #24]
 801d260:	4798      	blx	r3
 801d262:	4603      	mov	r3, r0
 801d264:	429c      	cmp	r4, r3
 801d266:	d3ce      	bcc.n	801d206 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d268:	4b0c      	ldr	r3, [pc, #48]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	d009      	beq.n	801d284 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d270:	4b0a      	ldr	r3, [pc, #40]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	7a1b      	ldrb	r3, [r3, #8]
 801d276:	2b00      	cmp	r3, #0
 801d278:	d104      	bne.n	801d284 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d27a:	4b08      	ldr	r3, [pc, #32]	; (801d29c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	4618      	mov	r0, r3
 801d280:	f000 f858 	bl	801d334 <TimerSetTimeout>
 801d284:	69bb      	ldr	r3, [r7, #24]
 801d286:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	f383 8810 	msr	PRIMASK, r3
}
 801d28e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d290:	bf00      	nop
 801d292:	3724      	adds	r7, #36	; 0x24
 801d294:	46bd      	mov	sp, r7
 801d296:	bd90      	pop	{r4, r7, pc}
 801d298:	0801e2f4 	.word	0x0801e2f4
 801d29c:	2000454c 	.word	0x2000454c

0801d2a0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b082      	sub	sp, #8
 801d2a4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d2a6:	4b06      	ldr	r3, [pc, #24]	; (801d2c0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d2a8:	69db      	ldr	r3, [r3, #28]
 801d2aa:	4798      	blx	r3
 801d2ac:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d2ae:	4b04      	ldr	r3, [pc, #16]	; (801d2c0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2b2:	6878      	ldr	r0, [r7, #4]
 801d2b4:	4798      	blx	r3
 801d2b6:	4603      	mov	r3, r0
}
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	3708      	adds	r7, #8
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	bd80      	pop	{r7, pc}
 801d2c0:	0801e2f4 	.word	0x0801e2f4

0801d2c4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d2c4:	b580      	push	{r7, lr}
 801d2c6:	b084      	sub	sp, #16
 801d2c8:	af00      	add	r7, sp, #0
 801d2ca:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d2cc:	4b0a      	ldr	r3, [pc, #40]	; (801d2f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d2ce:	69db      	ldr	r3, [r3, #28]
 801d2d0:	4798      	blx	r3
 801d2d2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d2d4:	4b08      	ldr	r3, [pc, #32]	; (801d2f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2d8:	6878      	ldr	r0, [r7, #4]
 801d2da:	4798      	blx	r3
 801d2dc:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d2de:	4b06      	ldr	r3, [pc, #24]	; (801d2f8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2e2:	68f9      	ldr	r1, [r7, #12]
 801d2e4:	68ba      	ldr	r2, [r7, #8]
 801d2e6:	1a8a      	subs	r2, r1, r2
 801d2e8:	4610      	mov	r0, r2
 801d2ea:	4798      	blx	r3
 801d2ec:	4603      	mov	r3, r0
}
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	3710      	adds	r7, #16
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	bd80      	pop	{r7, pc}
 801d2f6:	bf00      	nop
 801d2f8:	0801e2f4 	.word	0x0801e2f4

0801d2fc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d2fc:	b480      	push	{r7}
 801d2fe:	b085      	sub	sp, #20
 801d300:	af00      	add	r7, sp, #0
 801d302:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d304:	4b0a      	ldr	r3, [pc, #40]	; (801d330 <TimerExists+0x34>)
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d30a:	e008      	b.n	801d31e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d30c:	68fa      	ldr	r2, [r7, #12]
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	429a      	cmp	r2, r3
 801d312:	d101      	bne.n	801d318 <TimerExists+0x1c>
    {
      return true;
 801d314:	2301      	movs	r3, #1
 801d316:	e006      	b.n	801d326 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	695b      	ldr	r3, [r3, #20]
 801d31c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	2b00      	cmp	r3, #0
 801d322:	d1f3      	bne.n	801d30c <TimerExists+0x10>
  }
  return false;
 801d324:	2300      	movs	r3, #0
}
 801d326:	4618      	mov	r0, r3
 801d328:	3714      	adds	r7, #20
 801d32a:	46bd      	mov	sp, r7
 801d32c:	bc80      	pop	{r7}
 801d32e:	4770      	bx	lr
 801d330:	2000454c 	.word	0x2000454c

0801d334 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d334:	b590      	push	{r4, r7, lr}
 801d336:	b085      	sub	sp, #20
 801d338:	af00      	add	r7, sp, #0
 801d33a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d33c:	4b11      	ldr	r3, [pc, #68]	; (801d384 <TimerSetTimeout+0x50>)
 801d33e:	6a1b      	ldr	r3, [r3, #32]
 801d340:	4798      	blx	r3
 801d342:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	2201      	movs	r2, #1
 801d348:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	681c      	ldr	r4, [r3, #0]
 801d34e:	4b0d      	ldr	r3, [pc, #52]	; (801d384 <TimerSetTimeout+0x50>)
 801d350:	699b      	ldr	r3, [r3, #24]
 801d352:	4798      	blx	r3
 801d354:	4602      	mov	r2, r0
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	4413      	add	r3, r2
 801d35a:	429c      	cmp	r4, r3
 801d35c:	d207      	bcs.n	801d36e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d35e:	4b09      	ldr	r3, [pc, #36]	; (801d384 <TimerSetTimeout+0x50>)
 801d360:	699b      	ldr	r3, [r3, #24]
 801d362:	4798      	blx	r3
 801d364:	4602      	mov	r2, r0
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	441a      	add	r2, r3
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d36e:	4b05      	ldr	r3, [pc, #20]	; (801d384 <TimerSetTimeout+0x50>)
 801d370:	689b      	ldr	r3, [r3, #8]
 801d372:	687a      	ldr	r2, [r7, #4]
 801d374:	6812      	ldr	r2, [r2, #0]
 801d376:	4610      	mov	r0, r2
 801d378:	4798      	blx	r3
}
 801d37a:	bf00      	nop
 801d37c:	3714      	adds	r7, #20
 801d37e:	46bd      	mov	sp, r7
 801d380:	bd90      	pop	{r4, r7, pc}
 801d382:	bf00      	nop
 801d384:	0801e2f4 	.word	0x0801e2f4

0801d388 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d388:	b480      	push	{r7}
 801d38a:	b085      	sub	sp, #20
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d390:	4b14      	ldr	r3, [pc, #80]	; (801d3e4 <TimerInsertTimer+0x5c>)
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d396:	4b13      	ldr	r3, [pc, #76]	; (801d3e4 <TimerInsertTimer+0x5c>)
 801d398:	681b      	ldr	r3, [r3, #0]
 801d39a:	695b      	ldr	r3, [r3, #20]
 801d39c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d39e:	e012      	b.n	801d3c6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	681a      	ldr	r2, [r3, #0]
 801d3a4:	68bb      	ldr	r3, [r7, #8]
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	429a      	cmp	r2, r3
 801d3aa:	d905      	bls.n	801d3b8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d3ac:	68bb      	ldr	r3, [r7, #8]
 801d3ae:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	695b      	ldr	r3, [r3, #20]
 801d3b4:	60bb      	str	r3, [r7, #8]
 801d3b6:	e006      	b.n	801d3c6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	687a      	ldr	r2, [r7, #4]
 801d3bc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	68ba      	ldr	r2, [r7, #8]
 801d3c2:	615a      	str	r2, [r3, #20]
        return;
 801d3c4:	e009      	b.n	801d3da <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	695b      	ldr	r3, [r3, #20]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d1e8      	bne.n	801d3a0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	687a      	ldr	r2, [r7, #4]
 801d3d2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	615a      	str	r2, [r3, #20]
}
 801d3da:	3714      	adds	r7, #20
 801d3dc:	46bd      	mov	sp, r7
 801d3de:	bc80      	pop	{r7}
 801d3e0:	4770      	bx	lr
 801d3e2:	bf00      	nop
 801d3e4:	2000454c 	.word	0x2000454c

0801d3e8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d3e8:	b580      	push	{r7, lr}
 801d3ea:	b084      	sub	sp, #16
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d3f0:	4b0b      	ldr	r3, [pc, #44]	; (801d420 <TimerInsertNewHeadTimer+0x38>)
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d002      	beq.n	801d402 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	2200      	movs	r2, #0
 801d400:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	68fa      	ldr	r2, [r7, #12]
 801d406:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d408:	4a05      	ldr	r2, [pc, #20]	; (801d420 <TimerInsertNewHeadTimer+0x38>)
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d40e:	4b04      	ldr	r3, [pc, #16]	; (801d420 <TimerInsertNewHeadTimer+0x38>)
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	4618      	mov	r0, r3
 801d414:	f7ff ff8e 	bl	801d334 <TimerSetTimeout>
}
 801d418:	bf00      	nop
 801d41a:	3710      	adds	r7, #16
 801d41c:	46bd      	mov	sp, r7
 801d41e:	bd80      	pop	{r7, pc}
 801d420:	2000454c 	.word	0x2000454c

0801d424 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d424:	b480      	push	{r7}
 801d426:	b085      	sub	sp, #20
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d42c:	2300      	movs	r3, #0
 801d42e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d430:	e00e      	b.n	801d450 <ee_skip_atoi+0x2c>
 801d432:	68fa      	ldr	r2, [r7, #12]
 801d434:	4613      	mov	r3, r2
 801d436:	009b      	lsls	r3, r3, #2
 801d438:	4413      	add	r3, r2
 801d43a:	005b      	lsls	r3, r3, #1
 801d43c:	4618      	mov	r0, r3
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	1c59      	adds	r1, r3, #1
 801d444:	687a      	ldr	r2, [r7, #4]
 801d446:	6011      	str	r1, [r2, #0]
 801d448:	781b      	ldrb	r3, [r3, #0]
 801d44a:	4403      	add	r3, r0
 801d44c:	3b30      	subs	r3, #48	; 0x30
 801d44e:	60fb      	str	r3, [r7, #12]
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	781b      	ldrb	r3, [r3, #0]
 801d456:	2b2f      	cmp	r3, #47	; 0x2f
 801d458:	d904      	bls.n	801d464 <ee_skip_atoi+0x40>
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	781b      	ldrb	r3, [r3, #0]
 801d460:	2b39      	cmp	r3, #57	; 0x39
 801d462:	d9e6      	bls.n	801d432 <ee_skip_atoi+0xe>
  return i;
 801d464:	68fb      	ldr	r3, [r7, #12]
}
 801d466:	4618      	mov	r0, r3
 801d468:	3714      	adds	r7, #20
 801d46a:	46bd      	mov	sp, r7
 801d46c:	bc80      	pop	{r7}
 801d46e:	4770      	bx	lr

0801d470 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d470:	b480      	push	{r7}
 801d472:	b099      	sub	sp, #100	; 0x64
 801d474:	af00      	add	r7, sp, #0
 801d476:	60f8      	str	r0, [r7, #12]
 801d478:	60b9      	str	r1, [r7, #8]
 801d47a:	607a      	str	r2, [r7, #4]
 801d47c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d47e:	4b71      	ldr	r3, [pc, #452]	; (801d644 <ee_number+0x1d4>)
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d002      	beq.n	801d494 <ee_number+0x24>
 801d48e:	4b6e      	ldr	r3, [pc, #440]	; (801d648 <ee_number+0x1d8>)
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d494:	683b      	ldr	r3, [r7, #0]
 801d496:	2b01      	cmp	r3, #1
 801d498:	dd02      	ble.n	801d4a0 <ee_number+0x30>
 801d49a:	683b      	ldr	r3, [r7, #0]
 801d49c:	2b24      	cmp	r3, #36	; 0x24
 801d49e:	dd01      	ble.n	801d4a4 <ee_number+0x34>
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	e0ca      	b.n	801d63a <ee_number+0x1ca>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801d4a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d4a6:	f003 0301 	and.w	r3, r3, #1
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d001      	beq.n	801d4b2 <ee_number+0x42>
 801d4ae:	2330      	movs	r3, #48	; 0x30
 801d4b0:	e000      	b.n	801d4b4 <ee_number+0x44>
 801d4b2:	2320      	movs	r3, #32
 801d4b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d4b8:	2300      	movs	r3, #0
 801d4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d4be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d4c0:	f003 0302 	and.w	r3, r3, #2
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d00b      	beq.n	801d4e0 <ee_number+0x70>
  {
    if (num < 0)
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	da08      	bge.n	801d4e0 <ee_number+0x70>
    {
      sign = '-';
 801d4ce:	232d      	movs	r3, #45	; 0x2d
 801d4d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	425b      	negs	r3, r3
 801d4d8:	607b      	str	r3, [r7, #4]
      size--;
 801d4da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d4dc:	3b01      	subs	r3, #1
 801d4de:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801d4e0:	2300      	movs	r3, #0
 801d4e2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d11e      	bne.n	801d528 <ee_number+0xb8>
    tmp[i++] = '0';
 801d4ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d4ec:	1c5a      	adds	r2, r3, #1
 801d4ee:	657a      	str	r2, [r7, #84]	; 0x54
 801d4f0:	3360      	adds	r3, #96	; 0x60
 801d4f2:	443b      	add	r3, r7
 801d4f4:	2230      	movs	r2, #48	; 0x30
 801d4f6:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d4fa:	e018      	b.n	801d52e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	683a      	ldr	r2, [r7, #0]
 801d500:	fbb3 f1f2 	udiv	r1, r3, r2
 801d504:	fb01 f202 	mul.w	r2, r1, r2
 801d508:	1a9b      	subs	r3, r3, r2
 801d50a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d50c:	441a      	add	r2, r3
 801d50e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d510:	1c59      	adds	r1, r3, #1
 801d512:	6579      	str	r1, [r7, #84]	; 0x54
 801d514:	7812      	ldrb	r2, [r2, #0]
 801d516:	3360      	adds	r3, #96	; 0x60
 801d518:	443b      	add	r3, r7
 801d51a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d51e:	687a      	ldr	r2, [r7, #4]
 801d520:	683b      	ldr	r3, [r7, #0]
 801d522:	fbb2 f3f3 	udiv	r3, r2, r3
 801d526:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d1e6      	bne.n	801d4fc <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d52e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d532:	429a      	cmp	r2, r3
 801d534:	dd01      	ble.n	801d53a <ee_number+0xca>
 801d536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d538:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d53a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d53c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d53e:	1ad3      	subs	r3, r2, r3
 801d540:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d544:	f003 0301 	and.w	r3, r3, #1
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d112      	bne.n	801d572 <ee_number+0x102>
 801d54c:	e00c      	b.n	801d568 <ee_number+0xf8>
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	1c5a      	adds	r2, r3, #1
 801d552:	60fa      	str	r2, [r7, #12]
 801d554:	2220      	movs	r2, #32
 801d556:	701a      	strb	r2, [r3, #0]
 801d558:	68bb      	ldr	r3, [r7, #8]
 801d55a:	3b01      	subs	r3, #1
 801d55c:	60bb      	str	r3, [r7, #8]
 801d55e:	68bb      	ldr	r3, [r7, #8]
 801d560:	2b00      	cmp	r3, #0
 801d562:	d101      	bne.n	801d568 <ee_number+0xf8>
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	e068      	b.n	801d63a <ee_number+0x1ca>
 801d568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d56a:	1e5a      	subs	r2, r3, #1
 801d56c:	66ba      	str	r2, [r7, #104]	; 0x68
 801d56e:	2b00      	cmp	r3, #0
 801d570:	dced      	bgt.n	801d54e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d576:	2b00      	cmp	r3, #0
 801d578:	d01b      	beq.n	801d5b2 <ee_number+0x142>
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	1c5a      	adds	r2, r3, #1
 801d57e:	60fa      	str	r2, [r7, #12]
 801d580:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d584:	701a      	strb	r2, [r3, #0]
 801d586:	68bb      	ldr	r3, [r7, #8]
 801d588:	3b01      	subs	r3, #1
 801d58a:	60bb      	str	r3, [r7, #8]
 801d58c:	68bb      	ldr	r3, [r7, #8]
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d10f      	bne.n	801d5b2 <ee_number+0x142>
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	e051      	b.n	801d63a <ee_number+0x1ca>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	1c5a      	adds	r2, r3, #1
 801d59a:	60fa      	str	r2, [r7, #12]
 801d59c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d5a0:	701a      	strb	r2, [r3, #0]
 801d5a2:	68bb      	ldr	r3, [r7, #8]
 801d5a4:	3b01      	subs	r3, #1
 801d5a6:	60bb      	str	r3, [r7, #8]
 801d5a8:	68bb      	ldr	r3, [r7, #8]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d101      	bne.n	801d5b2 <ee_number+0x142>
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	e043      	b.n	801d63a <ee_number+0x1ca>
 801d5b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d5b4:	1e5a      	subs	r2, r3, #1
 801d5b6:	66ba      	str	r2, [r7, #104]	; 0x68
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	dcec      	bgt.n	801d596 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d5bc:	e00c      	b.n	801d5d8 <ee_number+0x168>
 801d5be:	68fb      	ldr	r3, [r7, #12]
 801d5c0:	1c5a      	adds	r2, r3, #1
 801d5c2:	60fa      	str	r2, [r7, #12]
 801d5c4:	2230      	movs	r2, #48	; 0x30
 801d5c6:	701a      	strb	r2, [r3, #0]
 801d5c8:	68bb      	ldr	r3, [r7, #8]
 801d5ca:	3b01      	subs	r3, #1
 801d5cc:	60bb      	str	r3, [r7, #8]
 801d5ce:	68bb      	ldr	r3, [r7, #8]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d101      	bne.n	801d5d8 <ee_number+0x168>
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	e030      	b.n	801d63a <ee_number+0x1ca>
 801d5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d5da:	1e5a      	subs	r2, r3, #1
 801d5dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d5de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d5e0:	429a      	cmp	r2, r3
 801d5e2:	dbec      	blt.n	801d5be <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d5e4:	e010      	b.n	801d608 <ee_number+0x198>
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	1c5a      	adds	r2, r3, #1
 801d5ea:	60fa      	str	r2, [r7, #12]
 801d5ec:	f107 0110 	add.w	r1, r7, #16
 801d5f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d5f2:	440a      	add	r2, r1
 801d5f4:	7812      	ldrb	r2, [r2, #0]
 801d5f6:	701a      	strb	r2, [r3, #0]
 801d5f8:	68bb      	ldr	r3, [r7, #8]
 801d5fa:	3b01      	subs	r3, #1
 801d5fc:	60bb      	str	r3, [r7, #8]
 801d5fe:	68bb      	ldr	r3, [r7, #8]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d101      	bne.n	801d608 <ee_number+0x198>
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	e018      	b.n	801d63a <ee_number+0x1ca>
 801d608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d60a:	1e5a      	subs	r2, r3, #1
 801d60c:	657a      	str	r2, [r7, #84]	; 0x54
 801d60e:	2b00      	cmp	r3, #0
 801d610:	dce9      	bgt.n	801d5e6 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d612:	e00c      	b.n	801d62e <ee_number+0x1be>
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	1c5a      	adds	r2, r3, #1
 801d618:	60fa      	str	r2, [r7, #12]
 801d61a:	2220      	movs	r2, #32
 801d61c:	701a      	strb	r2, [r3, #0]
 801d61e:	68bb      	ldr	r3, [r7, #8]
 801d620:	3b01      	subs	r3, #1
 801d622:	60bb      	str	r3, [r7, #8]
 801d624:	68bb      	ldr	r3, [r7, #8]
 801d626:	2b00      	cmp	r3, #0
 801d628:	d101      	bne.n	801d62e <ee_number+0x1be>
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	e005      	b.n	801d63a <ee_number+0x1ca>
 801d62e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d630:	1e5a      	subs	r2, r3, #1
 801d632:	66ba      	str	r2, [r7, #104]	; 0x68
 801d634:	2b00      	cmp	r3, #0
 801d636:	dced      	bgt.n	801d614 <ee_number+0x1a4>

  return str;
 801d638:	68fb      	ldr	r3, [r7, #12]
}
 801d63a:	4618      	mov	r0, r3
 801d63c:	3764      	adds	r7, #100	; 0x64
 801d63e:	46bd      	mov	sp, r7
 801d640:	bc80      	pop	{r7}
 801d642:	4770      	bx	lr
 801d644:	20000110 	.word	0x20000110
 801d648:	20000114 	.word	0x20000114

0801d64c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d64c:	b580      	push	{r7, lr}
 801d64e:	b092      	sub	sp, #72	; 0x48
 801d650:	af04      	add	r7, sp, #16
 801d652:	60f8      	str	r0, [r7, #12]
 801d654:	60b9      	str	r1, [r7, #8]
 801d656:	607a      	str	r2, [r7, #4]
 801d658:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d65a:	68bb      	ldr	r3, [r7, #8]
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	dc01      	bgt.n	801d664 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d660:	2300      	movs	r3, #0
 801d662:	e142      	b.n	801d8ea <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d668:	e12a      	b.n	801d8c0 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	1ad2      	subs	r2, r2, r3
 801d670:	68bb      	ldr	r3, [r7, #8]
 801d672:	3b01      	subs	r3, #1
 801d674:	429a      	cmp	r2, r3
 801d676:	f280 8131 	bge.w	801d8dc <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	781b      	ldrb	r3, [r3, #0]
 801d67e:	2b25      	cmp	r3, #37	; 0x25
 801d680:	d006      	beq.n	801d690 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d682:	687a      	ldr	r2, [r7, #4]
 801d684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d686:	1c59      	adds	r1, r3, #1
 801d688:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d68a:	7812      	ldrb	r2, [r2, #0]
 801d68c:	701a      	strb	r2, [r3, #0]
      continue;
 801d68e:	e114      	b.n	801d8ba <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 801d690:	2300      	movs	r3, #0
 801d692:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	3301      	adds	r3, #1
 801d698:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	781b      	ldrb	r3, [r3, #0]
 801d69e:	2b30      	cmp	r3, #48	; 0x30
 801d6a0:	d103      	bne.n	801d6aa <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d6a2:	6a3b      	ldr	r3, [r7, #32]
 801d6a4:	f043 0301 	orr.w	r3, r3, #1
 801d6a8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d6aa:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ae:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	781b      	ldrb	r3, [r3, #0]
 801d6b4:	2b2f      	cmp	r3, #47	; 0x2f
 801d6b6:	d908      	bls.n	801d6ca <tiny_vsnprintf_like+0x7e>
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	781b      	ldrb	r3, [r3, #0]
 801d6bc:	2b39      	cmp	r3, #57	; 0x39
 801d6be:	d804      	bhi.n	801d6ca <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d6c0:	1d3b      	adds	r3, r7, #4
 801d6c2:	4618      	mov	r0, r3
 801d6c4:	f7ff feae 	bl	801d424 <ee_skip_atoi>
 801d6c8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d6ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ce:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d6d0:	f04f 33ff 	mov.w	r3, #4294967295
 801d6d4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d6d6:	230a      	movs	r3, #10
 801d6d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	781b      	ldrb	r3, [r3, #0]
 801d6de:	3b58      	subs	r3, #88	; 0x58
 801d6e0:	2b20      	cmp	r3, #32
 801d6e2:	f200 8094 	bhi.w	801d80e <tiny_vsnprintf_like+0x1c2>
 801d6e6:	a201      	add	r2, pc, #4	; (adr r2, 801d6ec <tiny_vsnprintf_like+0xa0>)
 801d6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d6ec:	0801d7f7 	.word	0x0801d7f7
 801d6f0:	0801d80f 	.word	0x0801d80f
 801d6f4:	0801d80f 	.word	0x0801d80f
 801d6f8:	0801d80f 	.word	0x0801d80f
 801d6fc:	0801d80f 	.word	0x0801d80f
 801d700:	0801d80f 	.word	0x0801d80f
 801d704:	0801d80f 	.word	0x0801d80f
 801d708:	0801d80f 	.word	0x0801d80f
 801d70c:	0801d80f 	.word	0x0801d80f
 801d710:	0801d80f 	.word	0x0801d80f
 801d714:	0801d80f 	.word	0x0801d80f
 801d718:	0801d77b 	.word	0x0801d77b
 801d71c:	0801d805 	.word	0x0801d805
 801d720:	0801d80f 	.word	0x0801d80f
 801d724:	0801d80f 	.word	0x0801d80f
 801d728:	0801d80f 	.word	0x0801d80f
 801d72c:	0801d80f 	.word	0x0801d80f
 801d730:	0801d805 	.word	0x0801d805
 801d734:	0801d80f 	.word	0x0801d80f
 801d738:	0801d80f 	.word	0x0801d80f
 801d73c:	0801d80f 	.word	0x0801d80f
 801d740:	0801d80f 	.word	0x0801d80f
 801d744:	0801d80f 	.word	0x0801d80f
 801d748:	0801d80f 	.word	0x0801d80f
 801d74c:	0801d80f 	.word	0x0801d80f
 801d750:	0801d80f 	.word	0x0801d80f
 801d754:	0801d80f 	.word	0x0801d80f
 801d758:	0801d79b 	.word	0x0801d79b
 801d75c:	0801d80f 	.word	0x0801d80f
 801d760:	0801d85b 	.word	0x0801d85b
 801d764:	0801d80f 	.word	0x0801d80f
 801d768:	0801d80f 	.word	0x0801d80f
 801d76c:	0801d7ff 	.word	0x0801d7ff
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d772:	1c5a      	adds	r2, r3, #1
 801d774:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d776:	2220      	movs	r2, #32
 801d778:	701a      	strb	r2, [r3, #0]
 801d77a:	69fb      	ldr	r3, [r7, #28]
 801d77c:	3b01      	subs	r3, #1
 801d77e:	61fb      	str	r3, [r7, #28]
 801d780:	69fb      	ldr	r3, [r7, #28]
 801d782:	2b00      	cmp	r3, #0
 801d784:	dcf4      	bgt.n	801d770 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	1d1a      	adds	r2, r3, #4
 801d78a:	603a      	str	r2, [r7, #0]
 801d78c:	6819      	ldr	r1, [r3, #0]
 801d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d790:	1c5a      	adds	r2, r3, #1
 801d792:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d794:	b2ca      	uxtb	r2, r1
 801d796:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d798:	e08f      	b.n	801d8ba <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801d79a:	683b      	ldr	r3, [r7, #0]
 801d79c:	1d1a      	adds	r2, r3, #4
 801d79e:	603a      	str	r2, [r7, #0]
 801d7a0:	681b      	ldr	r3, [r3, #0]
 801d7a2:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d101      	bne.n	801d7ae <tiny_vsnprintf_like+0x162>
 801d7aa:	4b52      	ldr	r3, [pc, #328]	; (801d8f4 <tiny_vsnprintf_like+0x2a8>)
 801d7ac:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d7ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d7b0:	f7e2 fce6 	bl	8000180 <strlen>
 801d7b4:	4603      	mov	r3, r0
 801d7b6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d7b8:	e004      	b.n	801d7c4 <tiny_vsnprintf_like+0x178>
 801d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7bc:	1c5a      	adds	r2, r3, #1
 801d7be:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d7c0:	2220      	movs	r2, #32
 801d7c2:	701a      	strb	r2, [r3, #0]
 801d7c4:	69fb      	ldr	r3, [r7, #28]
 801d7c6:	1e5a      	subs	r2, r3, #1
 801d7c8:	61fa      	str	r2, [r7, #28]
 801d7ca:	693a      	ldr	r2, [r7, #16]
 801d7cc:	429a      	cmp	r2, r3
 801d7ce:	dbf4      	blt.n	801d7ba <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	62bb      	str	r3, [r7, #40]	; 0x28
 801d7d4:	e00a      	b.n	801d7ec <tiny_vsnprintf_like+0x1a0>
 801d7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d7d8:	1c53      	adds	r3, r2, #1
 801d7da:	627b      	str	r3, [r7, #36]	; 0x24
 801d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7de:	1c59      	adds	r1, r3, #1
 801d7e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d7e2:	7812      	ldrb	r2, [r2, #0]
 801d7e4:	701a      	strb	r2, [r3, #0]
 801d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7e8:	3301      	adds	r3, #1
 801d7ea:	62bb      	str	r3, [r7, #40]	; 0x28
 801d7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d7ee:	693b      	ldr	r3, [r7, #16]
 801d7f0:	429a      	cmp	r2, r3
 801d7f2:	dbf0      	blt.n	801d7d6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d7f4:	e061      	b.n	801d8ba <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d7f6:	6a3b      	ldr	r3, [r7, #32]
 801d7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7fc:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d7fe:	2310      	movs	r3, #16
 801d800:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d802:	e02d      	b.n	801d860 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d804:	6a3b      	ldr	r3, [r7, #32]
 801d806:	f043 0302 	orr.w	r3, r3, #2
 801d80a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d80c:	e025      	b.n	801d85a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	781b      	ldrb	r3, [r3, #0]
 801d812:	2b25      	cmp	r3, #37	; 0x25
 801d814:	d004      	beq.n	801d820 <tiny_vsnprintf_like+0x1d4>
 801d816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d818:	1c5a      	adds	r2, r3, #1
 801d81a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d81c:	2225      	movs	r2, #37	; 0x25
 801d81e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	1ad2      	subs	r2, r2, r3
 801d826:	68bb      	ldr	r3, [r7, #8]
 801d828:	3b01      	subs	r3, #1
 801d82a:	429a      	cmp	r2, r3
 801d82c:	da17      	bge.n	801d85e <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	781b      	ldrb	r3, [r3, #0]
 801d832:	2b00      	cmp	r3, #0
 801d834:	d006      	beq.n	801d844 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d836:	687a      	ldr	r2, [r7, #4]
 801d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d83a:	1c59      	adds	r1, r3, #1
 801d83c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d83e:	7812      	ldrb	r2, [r2, #0]
 801d840:	701a      	strb	r2, [r3, #0]
 801d842:	e002      	b.n	801d84a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	3b01      	subs	r3, #1
 801d848:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	1ad2      	subs	r2, r2, r3
 801d850:	68bb      	ldr	r3, [r7, #8]
 801d852:	3b01      	subs	r3, #1
 801d854:	429a      	cmp	r2, r3
 801d856:	db2f      	blt.n	801d8b8 <tiny_vsnprintf_like+0x26c>
 801d858:	e002      	b.n	801d860 <tiny_vsnprintf_like+0x214>
        break;
 801d85a:	bf00      	nop
 801d85c:	e000      	b.n	801d860 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801d85e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d860:	697b      	ldr	r3, [r7, #20]
 801d862:	2b6c      	cmp	r3, #108	; 0x6c
 801d864:	d105      	bne.n	801d872 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801d866:	683b      	ldr	r3, [r7, #0]
 801d868:	1d1a      	adds	r2, r3, #4
 801d86a:	603a      	str	r2, [r7, #0]
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	637b      	str	r3, [r7, #52]	; 0x34
 801d870:	e00f      	b.n	801d892 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801d872:	6a3b      	ldr	r3, [r7, #32]
 801d874:	f003 0302 	and.w	r3, r3, #2
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d005      	beq.n	801d888 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801d87c:	683b      	ldr	r3, [r7, #0]
 801d87e:	1d1a      	adds	r2, r3, #4
 801d880:	603a      	str	r2, [r7, #0]
 801d882:	681b      	ldr	r3, [r3, #0]
 801d884:	637b      	str	r3, [r7, #52]	; 0x34
 801d886:	e004      	b.n	801d892 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801d888:	683b      	ldr	r3, [r7, #0]
 801d88a:	1d1a      	adds	r2, r3, #4
 801d88c:	603a      	str	r2, [r7, #0]
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d892:	68bb      	ldr	r3, [r7, #8]
 801d894:	1e5a      	subs	r2, r3, #1
 801d896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	1acb      	subs	r3, r1, r3
 801d89c:	1ad1      	subs	r1, r2, r3
 801d89e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d8a0:	6a3b      	ldr	r3, [r7, #32]
 801d8a2:	9302      	str	r3, [sp, #8]
 801d8a4:	69bb      	ldr	r3, [r7, #24]
 801d8a6:	9301      	str	r3, [sp, #4]
 801d8a8:	69fb      	ldr	r3, [r7, #28]
 801d8aa:	9300      	str	r3, [sp, #0]
 801d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d8b0:	f7ff fdde 	bl	801d470 <ee_number>
 801d8b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d8b6:	e000      	b.n	801d8ba <tiny_vsnprintf_like+0x26e>
        continue;
 801d8b8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	3301      	adds	r3, #1
 801d8be:	607b      	str	r3, [r7, #4]
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	781b      	ldrb	r3, [r3, #0]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	f47f aed0 	bne.w	801d66a <tiny_vsnprintf_like+0x1e>
 801d8ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	1ad2      	subs	r2, r2, r3
 801d8d0:	68bb      	ldr	r3, [r7, #8]
 801d8d2:	3b01      	subs	r3, #1
 801d8d4:	429a      	cmp	r2, r3
 801d8d6:	f6bf aec8 	bge.w	801d66a <tiny_vsnprintf_like+0x1e>
 801d8da:	e000      	b.n	801d8de <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801d8dc:	bf00      	nop
  }

  *str = '\0';
 801d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8e0:	2200      	movs	r2, #0
 801d8e2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	1ad3      	subs	r3, r2, r3
}
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	3738      	adds	r7, #56	; 0x38
 801d8ee:	46bd      	mov	sp, r7
 801d8f0:	bd80      	pop	{r7, pc}
 801d8f2:	bf00      	nop
 801d8f4:	0801e24c 	.word	0x0801e24c

0801d8f8 <__libc_init_array>:
 801d8f8:	b570      	push	{r4, r5, r6, lr}
 801d8fa:	4d0d      	ldr	r5, [pc, #52]	; (801d930 <__libc_init_array+0x38>)
 801d8fc:	4c0d      	ldr	r4, [pc, #52]	; (801d934 <__libc_init_array+0x3c>)
 801d8fe:	1b64      	subs	r4, r4, r5
 801d900:	10a4      	asrs	r4, r4, #2
 801d902:	2600      	movs	r6, #0
 801d904:	42a6      	cmp	r6, r4
 801d906:	d109      	bne.n	801d91c <__libc_init_array+0x24>
 801d908:	4d0b      	ldr	r5, [pc, #44]	; (801d938 <__libc_init_array+0x40>)
 801d90a:	4c0c      	ldr	r4, [pc, #48]	; (801d93c <__libc_init_array+0x44>)
 801d90c:	f000 f8a0 	bl	801da50 <_init>
 801d910:	1b64      	subs	r4, r4, r5
 801d912:	10a4      	asrs	r4, r4, #2
 801d914:	2600      	movs	r6, #0
 801d916:	42a6      	cmp	r6, r4
 801d918:	d105      	bne.n	801d926 <__libc_init_array+0x2e>
 801d91a:	bd70      	pop	{r4, r5, r6, pc}
 801d91c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d920:	4798      	blx	r3
 801d922:	3601      	adds	r6, #1
 801d924:	e7ee      	b.n	801d904 <__libc_init_array+0xc>
 801d926:	f855 3b04 	ldr.w	r3, [r5], #4
 801d92a:	4798      	blx	r3
 801d92c:	3601      	adds	r6, #1
 801d92e:	e7f2      	b.n	801d916 <__libc_init_array+0x1e>
 801d930:	0801e88c 	.word	0x0801e88c
 801d934:	0801e88c 	.word	0x0801e88c
 801d938:	0801e88c 	.word	0x0801e88c
 801d93c:	0801e890 	.word	0x0801e890

0801d940 <memset>:
 801d940:	4402      	add	r2, r0
 801d942:	4603      	mov	r3, r0
 801d944:	4293      	cmp	r3, r2
 801d946:	d100      	bne.n	801d94a <memset+0xa>
 801d948:	4770      	bx	lr
 801d94a:	f803 1b01 	strb.w	r1, [r3], #1
 801d94e:	e7f9      	b.n	801d944 <memset+0x4>

0801d950 <floor>:
 801d950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d954:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801d958:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801d95c:	2e13      	cmp	r6, #19
 801d95e:	4602      	mov	r2, r0
 801d960:	460b      	mov	r3, r1
 801d962:	4607      	mov	r7, r0
 801d964:	460c      	mov	r4, r1
 801d966:	4605      	mov	r5, r0
 801d968:	dc33      	bgt.n	801d9d2 <floor+0x82>
 801d96a:	2e00      	cmp	r6, #0
 801d96c:	da14      	bge.n	801d998 <floor+0x48>
 801d96e:	a334      	add	r3, pc, #208	; (adr r3, 801da40 <floor+0xf0>)
 801d970:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d974:	f7e2 fc12 	bl	800019c <__adddf3>
 801d978:	2200      	movs	r2, #0
 801d97a:	2300      	movs	r3, #0
 801d97c:	f7e2 fe42 	bl	8000604 <__aeabi_dcmpgt>
 801d980:	b138      	cbz	r0, 801d992 <floor+0x42>
 801d982:	2c00      	cmp	r4, #0
 801d984:	da58      	bge.n	801da38 <floor+0xe8>
 801d986:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d98a:	431d      	orrs	r5, r3
 801d98c:	d001      	beq.n	801d992 <floor+0x42>
 801d98e:	4c2e      	ldr	r4, [pc, #184]	; (801da48 <floor+0xf8>)
 801d990:	2500      	movs	r5, #0
 801d992:	4623      	mov	r3, r4
 801d994:	462f      	mov	r7, r5
 801d996:	e025      	b.n	801d9e4 <floor+0x94>
 801d998:	4a2c      	ldr	r2, [pc, #176]	; (801da4c <floor+0xfc>)
 801d99a:	fa42 f806 	asr.w	r8, r2, r6
 801d99e:	ea01 0208 	and.w	r2, r1, r8
 801d9a2:	4302      	orrs	r2, r0
 801d9a4:	d01e      	beq.n	801d9e4 <floor+0x94>
 801d9a6:	a326      	add	r3, pc, #152	; (adr r3, 801da40 <floor+0xf0>)
 801d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ac:	f7e2 fbf6 	bl	800019c <__adddf3>
 801d9b0:	2200      	movs	r2, #0
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	f7e2 fe26 	bl	8000604 <__aeabi_dcmpgt>
 801d9b8:	2800      	cmp	r0, #0
 801d9ba:	d0ea      	beq.n	801d992 <floor+0x42>
 801d9bc:	2c00      	cmp	r4, #0
 801d9be:	bfbe      	ittt	lt
 801d9c0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d9c4:	fa43 f606 	asrlt.w	r6, r3, r6
 801d9c8:	19a4      	addlt	r4, r4, r6
 801d9ca:	ea24 0408 	bic.w	r4, r4, r8
 801d9ce:	2500      	movs	r5, #0
 801d9d0:	e7df      	b.n	801d992 <floor+0x42>
 801d9d2:	2e33      	cmp	r6, #51	; 0x33
 801d9d4:	dd0a      	ble.n	801d9ec <floor+0x9c>
 801d9d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d9da:	d103      	bne.n	801d9e4 <floor+0x94>
 801d9dc:	f7e2 fbde 	bl	800019c <__adddf3>
 801d9e0:	4607      	mov	r7, r0
 801d9e2:	460b      	mov	r3, r1
 801d9e4:	4638      	mov	r0, r7
 801d9e6:	4619      	mov	r1, r3
 801d9e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d9ec:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801d9f0:	f04f 32ff 	mov.w	r2, #4294967295
 801d9f4:	fa22 f808 	lsr.w	r8, r2, r8
 801d9f8:	ea18 0f00 	tst.w	r8, r0
 801d9fc:	d0f2      	beq.n	801d9e4 <floor+0x94>
 801d9fe:	a310      	add	r3, pc, #64	; (adr r3, 801da40 <floor+0xf0>)
 801da00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da04:	f7e2 fbca 	bl	800019c <__adddf3>
 801da08:	2200      	movs	r2, #0
 801da0a:	2300      	movs	r3, #0
 801da0c:	f7e2 fdfa 	bl	8000604 <__aeabi_dcmpgt>
 801da10:	2800      	cmp	r0, #0
 801da12:	d0be      	beq.n	801d992 <floor+0x42>
 801da14:	2c00      	cmp	r4, #0
 801da16:	da02      	bge.n	801da1e <floor+0xce>
 801da18:	2e14      	cmp	r6, #20
 801da1a:	d103      	bne.n	801da24 <floor+0xd4>
 801da1c:	3401      	adds	r4, #1
 801da1e:	ea25 0508 	bic.w	r5, r5, r8
 801da22:	e7b6      	b.n	801d992 <floor+0x42>
 801da24:	2301      	movs	r3, #1
 801da26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801da2a:	fa03 f606 	lsl.w	r6, r3, r6
 801da2e:	4435      	add	r5, r6
 801da30:	42bd      	cmp	r5, r7
 801da32:	bf38      	it	cc
 801da34:	18e4      	addcc	r4, r4, r3
 801da36:	e7f2      	b.n	801da1e <floor+0xce>
 801da38:	2500      	movs	r5, #0
 801da3a:	462c      	mov	r4, r5
 801da3c:	e7a9      	b.n	801d992 <floor+0x42>
 801da3e:	bf00      	nop
 801da40:	8800759c 	.word	0x8800759c
 801da44:	7e37e43c 	.word	0x7e37e43c
 801da48:	bff00000 	.word	0xbff00000
 801da4c:	000fffff 	.word	0x000fffff

0801da50 <_init>:
 801da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da52:	bf00      	nop
 801da54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da56:	bc08      	pop	{r3}
 801da58:	469e      	mov	lr, r3
 801da5a:	4770      	bx	lr

0801da5c <_fini>:
 801da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da5e:	bf00      	nop
 801da60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da62:	bc08      	pop	{r3}
 801da64:	469e      	mov	lr, r3
 801da66:	4770      	bx	lr
